
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006628  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800689c  0800689c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a4  080068a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080068ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  2000000c  080068b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080068b8  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206b1  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000455c  00000000  00000000  000406f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00044c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00046310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000316c8  00000000  00000000  00047808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3cf  00000000  00000000  00078ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001296ff  00000000  00000000  0009729f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c099e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  001c09f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08006804 	.word	0x08006804

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08006804 	.word	0x08006804

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	61da      	str	r2, [r3, #28]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b0f      	cmp	r3, #15
 800057c:	dc0a      	bgt.n	8000594 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x40>
    {
        received_sbus_.ch[i] = 1000;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	3210      	adds	r2, #16
 8000584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000588:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e7f1      	b.n	8000578 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x24>
    }
    received_sbus_.ch17 = false;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

}
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4618      	mov	r0, r3
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_ZN12SBUSReceiver9GetResultEv>:

SBus SBUSReceiver::GetResult(){
 80005ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
        read();
 80005d4:	6838      	ldr	r0, [r7, #0]
 80005d6:	f000 f81d 	bl	8000614 <_ZN12SBUSReceiver4readEv>
        return received_sbus_;
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f103 0420 	add.w	r4, r3, #32
 80005e2:	4694      	mov	ip, r2
 80005e4:	f104 0e20 	add.w	lr, r4, #32
 80005e8:	4665      	mov	r5, ip
 80005ea:	4626      	mov	r6, r4
 80005ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80005ee:	6028      	str	r0, [r5, #0]
 80005f0:	6069      	str	r1, [r5, #4]
 80005f2:	60aa      	str	r2, [r5, #8]
 80005f4:	60eb      	str	r3, [r5, #12]
 80005f6:	3410      	adds	r4, #16
 80005f8:	f10c 0c10 	add.w	ip, ip, #16
 80005fc:	4574      	cmp	r4, lr
 80005fe:	d1f3      	bne.n	80005e8 <_ZN12SBUSReceiver9GetResultEv+0x1e>
 8000600:	4663      	mov	r3, ip
 8000602:	4622      	mov	r2, r4
 8000604:	6810      	ldr	r0, [r2, #0]
 8000606:	6018      	str	r0, [r3, #0]
 8000608:	8892      	ldrh	r2, [r2, #4]
 800060a:	809a      	strh	r2, [r3, #4]
}
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000614 <_ZN12SBUSReceiver4readEv>:

 void SBUSReceiver::read()
 {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    received_sbus_.new_data = false;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    //if(HAL_UART_Receive(uart_, raw_sbus_, SBUS_FRAME_SIZE, 100) == HAL_OK)
    if(parse() == true)
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f810 	bl	800064a <_ZN12SBUSReceiver5parseEv>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	bf0c      	ite	eq
 8000630:	2301      	moveq	r3, #1
 8000632:	2300      	movne	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <_ZN12SBUSReceiver4readEv+0x2e>
        received_sbus_.new_data = true;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <_ZN12SBUSReceiver5parseEv>:

bool SBUSReceiver::parse()
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]

    for (uint8_t i = 0; i < 50; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2b31      	cmp	r3, #49	; 0x31
 800065a:	f200 81cc 	bhi.w	80009f6 <_ZN12SBUSReceiver5parseEv+0x3ac>
    	HAL_UART_Receive(uart_, &cur_byte_, 1, 10);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	69d8      	ldr	r0, [r3, #28]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000668:	230a      	movs	r3, #10
 800066a:	2201      	movs	r2, #1
 800066c:	f004 ffc6 	bl	80055fc <HAL_UART_Receive>

        if (state_ == 0) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f993 3046 	ldrsb.w	r3, [r3, #70]	; 0x46
 8000676:	2b00      	cmp	r3, #0
 8000678:	d125      	bne.n	80006c6 <_ZN12SBUSReceiver5parseEv+0x7c>
            if ((cur_byte_ == HEADER_) && ((prev_byte_ == FOOTER_) ||
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d11b      	bne.n	80006bc <_ZN12SBUSReceiver5parseEv+0x72>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <_ZN12SBUSReceiver5parseEv+0x52>
                ((prev_byte_ & 0x0F) == FOOTER2_))) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000694:	f003 030f 	and.w	r3, r3, #15
            if ((cur_byte_ == HEADER_) && ((prev_byte_ == FOOTER_) ||
 8000698:	2b04      	cmp	r3, #4
 800069a:	d10f      	bne.n	80006bc <_ZN12SBUSReceiver5parseEv+0x72>
                raw_sbus_[state_++] = cur_byte_;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f993 2046 	ldrsb.w	r2, [r3, #70]	; 0x46
 80006a2:	b2d3      	uxtb	r3, r2
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	b259      	sxtb	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	5499      	strb	r1, [r3, r2]
 80006ba:	e192      	b.n	80009e2 <_ZN12SBUSReceiver5parseEv+0x398>
            } else {
                state_ = 0;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80006c4:	e18d      	b.n	80009e2 <_ZN12SBUSReceiver5parseEv+0x398>
            }
        } else if (state_ < PAYLOAD_LEN_ + HEADER_LEN_) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f993 3046 	ldrsb.w	r3, [r3, #70]	; 0x46
 80006cc:	2b17      	cmp	r3, #23
 80006ce:	dc0f      	bgt.n	80006f0 <_ZN12SBUSReceiver5parseEv+0xa6>
            raw_sbus_[state_++] = cur_byte_;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f993 2046 	ldrsb.w	r2, [r3, #70]	; 0x46
 80006d6:	b2d3      	uxtb	r3, r2
 80006d8:	3301      	adds	r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	b259      	sxtb	r1, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	5499      	strb	r1, [r3, r2]
 80006ee:	e178      	b.n	80009e2 <_ZN12SBUSReceiver5parseEv+0x398>
        } else if (state_ < PAYLOAD_LEN_ + HEADER_LEN_ + FOOTER_LEN_) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f993 3046 	ldrsb.w	r3, [r3, #70]	; 0x46
 80006f6:	2b18      	cmp	r3, #24
 80006f8:	f300 816f 	bgt.w	80009da <_ZN12SBUSReceiver5parseEv+0x390>
            state_ = 0;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prev_byte_ = cur_byte_;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            if ((cur_byte_ == FOOTER_) || ((cur_byte_ & 0x0F) == FOOTER2_)) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <_ZN12SBUSReceiver5parseEv+0xe0>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000720:	f003 030f 	and.w	r3, r3, #15
 8000724:	2b04      	cmp	r3, #4
 8000726:	f040 8156 	bne.w	80009d6 <_ZN12SBUSReceiver5parseEv+0x38c>

                //exactal parsing
                received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	785b      	ldrb	r3, [r3, #1]
 800072e:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[2] << 8) & 0x07FF));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	789b      	ldrb	r3, [r3, #2]
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	b21b      	sxth	r3, r3
 8000738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800073c:	b21b      	sxth	r3, r3
                received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 800073e:	4313      	orrs	r3, r2
 8000740:	b21b      	sxth	r3, r3
 8000742:	b29a      	uxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	841a      	strh	r2, [r3, #32]
                received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[3] << 5) & 0x07FF));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	78db      	ldrb	r3, [r3, #3]
 8000756:	015b      	lsls	r3, r3, #5
 8000758:	b21b      	sxth	r3, r3
 800075a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800075e:	b21b      	sxth	r3, r3
                received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000760:	4313      	orrs	r3, r2
 8000762:	b21b      	sxth	r3, r3
 8000764:	b29a      	uxth	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	845a      	strh	r2, [r3, #34]	; 0x22
                received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	78db      	ldrb	r3, [r3, #3]
 800076e:	099b      	lsrs	r3, r3, #6
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b21a      	sxth	r2, r3
                                                    (raw_sbus_[4] << 2) |
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	009b      	lsls	r3, r3, #2
                received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 800077a:	b21b      	sxth	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[5] << 10) & 0x07FF));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	795b      	ldrb	r3, [r3, #5]
 8000784:	029b      	lsls	r3, r3, #10
 8000786:	b21b      	sxth	r3, r3
 8000788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800078c:	b21b      	sxth	r3, r3
                                                    (raw_sbus_[4] << 2) |
 800078e:	4313      	orrs	r3, r2
 8000790:	b21b      	sxth	r3, r3
                received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000792:	b29a      	uxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	849a      	strh	r2, [r3, #36]	; 0x24
                received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[6] << 7) & 0x07FF));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	799b      	ldrb	r3, [r3, #6]
 80007a6:	01db      	lsls	r3, r3, #7
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007ae:	b21b      	sxth	r3, r3
                received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	84da      	strh	r2, [r3, #38]	; 0x26
                received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	799b      	ldrb	r3, [r3, #6]
 80007be:	091b      	lsrs	r3, r3, #4
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[7] << 4) & 0x07FF));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	79db      	ldrb	r3, [r3, #7]
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007d0:	b21b      	sxth	r3, r3
                received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	851a      	strh	r2, [r3, #40]	; 0x28
                received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	79db      	ldrb	r3, [r3, #7]
 80007e0:	09db      	lsrs	r3, r3, #7
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b21a      	sxth	r2, r3
                                                    (raw_sbus_[8] << 1) |
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7a1b      	ldrb	r3, [r3, #8]
 80007ea:	005b      	lsls	r3, r3, #1
                received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[9] << 9) & 0x07FF));
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7a5b      	ldrb	r3, [r3, #9]
 80007f6:	025b      	lsls	r3, r3, #9
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007fe:	b21b      	sxth	r3, r3
                                                    (raw_sbus_[8] << 1) |
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
                received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000804:	b29a      	uxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	855a      	strh	r2, [r3, #42]	; 0x2a
                received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7a5b      	ldrb	r3, [r3, #9]
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[10] << 6) & 0x07FF));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a9b      	ldrb	r3, [r3, #10]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	b21b      	sxth	r3, r3
 800081c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000820:	b21b      	sxth	r3, r3
                received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29a      	uxth	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	859a      	strh	r2, [r3, #44]	; 0x2c
                received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7a9b      	ldrb	r3, [r3, #10]
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	b2db      	uxtb	r3, r3
 8000834:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[11] << 3) & 0x07FF));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7adb      	ldrb	r3, [r3, #11]
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	b21b      	sxth	r3, r3
 800083e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000842:	b21b      	sxth	r3, r3
                received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29a      	uxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	85da      	strh	r2, [r3, #46]	; 0x2e
                received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7b1b      	ldrb	r3, [r3, #12]
 8000852:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[13] << 8) & 0x07FF));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b5b      	ldrb	r3, [r3, #13]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21b      	sxth	r3, r3
 800085c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000860:	b21b      	sxth	r3, r3
                received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000862:	4313      	orrs	r3, r2
 8000864:	b21b      	sxth	r3, r3
 8000866:	b29a      	uxth	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	861a      	strh	r2, [r3, #48]	; 0x30
                received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7b5b      	ldrb	r3, [r3, #13]
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[14] << 5) & 0x07FF));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7b9b      	ldrb	r3, [r3, #14]
 800087a:	015b      	lsls	r3, r3, #5
 800087c:	b21b      	sxth	r3, r3
 800087e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000882:	b21b      	sxth	r3, r3
                received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000884:	4313      	orrs	r3, r2
 8000886:	b21b      	sxth	r3, r3
 8000888:	b29a      	uxth	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	865a      	strh	r2, [r3, #50]	; 0x32
                received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7b9b      	ldrb	r3, [r3, #14]
 8000892:	099b      	lsrs	r3, r3, #6
 8000894:	b2db      	uxtb	r3, r3
 8000896:	b21a      	sxth	r2, r3
                                                    (raw_sbus_[15] << 2) |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7bdb      	ldrb	r3, [r3, #15]
 800089c:	009b      	lsls	r3, r3, #2
                received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 800089e:	b21b      	sxth	r3, r3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[16] << 10) & 0x07FF));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7c1b      	ldrb	r3, [r3, #16]
 80008a8:	029b      	lsls	r3, r3, #10
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008b0:	b21b      	sxth	r3, r3
                                                    (raw_sbus_[15] << 2) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b21b      	sxth	r3, r3
                received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	869a      	strh	r2, [r3, #52]	; 0x34
                received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7c1b      	ldrb	r3, [r3, #16]
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[17] << 7) & 0x07FF));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7c5b      	ldrb	r3, [r3, #17]
 80008ca:	01db      	lsls	r3, r3, #7
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d2:	b21b      	sxth	r3, r3
                received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	86da      	strh	r2, [r3, #54]	; 0x36
                received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7c5b      	ldrb	r3, [r3, #17]
 80008e2:	091b      	lsrs	r3, r3, #4
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[18] << 4) & 0x07FF));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7c9b      	ldrb	r3, [r3, #18]
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008f4:	b21b      	sxth	r3, r3
                received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	871a      	strh	r2, [r3, #56]	; 0x38
                received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7c9b      	ldrb	r3, [r3, #18]
 8000904:	09db      	lsrs	r3, r3, #7
 8000906:	b2db      	uxtb	r3, r3
 8000908:	b21a      	sxth	r2, r3
                                                    (raw_sbus_[19] << 1) |
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7cdb      	ldrb	r3, [r3, #19]
 800090e:	005b      	lsls	r3, r3, #1
                received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[20] << 9) & 0x07FF));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7d1b      	ldrb	r3, [r3, #20]
 800091a:	025b      	lsls	r3, r3, #9
 800091c:	b21b      	sxth	r3, r3
 800091e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000922:	b21b      	sxth	r3, r3
                                                    (raw_sbus_[19] << 1) |
 8000924:	4313      	orrs	r3, r2
 8000926:	b21b      	sxth	r3, r3
                received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000928:	b29a      	uxth	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	875a      	strh	r2, [r3, #58]	; 0x3a
                received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7d1b      	ldrb	r3, [r3, #20]
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	b2db      	uxtb	r3, r3
 8000936:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[21] << 6) & 0x07FF));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7d5b      	ldrb	r3, [r3, #21]
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	b21b      	sxth	r3, r3
 8000940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000944:	b21b      	sxth	r3, r3
                received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000946:	4313      	orrs	r3, r2
 8000948:	b21b      	sxth	r3, r3
 800094a:	b29a      	uxth	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	879a      	strh	r2, [r3, #60]	; 0x3c
                received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7d5b      	ldrb	r3, [r3, #21]
 8000954:	095b      	lsrs	r3, r3, #5
 8000956:	b2db      	uxtb	r3, r3
 8000958:	b21a      	sxth	r2, r3
                                                    ((raw_sbus_[22] << 3) & 0x07FF));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7d9b      	ldrb	r3, [r3, #22]
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	b21b      	sxth	r3, r3
 8000962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000966:	b21b      	sxth	r3, r3
                received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000968:	4313      	orrs	r3, r2
 800096a:	b21b      	sxth	r3, r3
 800096c:	b29a      	uxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	87da      	strh	r2, [r3, #62]	; 0x3e

                /* CH 17 */
                received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7ddb      	ldrb	r3, [r3, #23]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2da      	uxtb	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                /* CH 18 */
                received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7ddb      	ldrb	r3, [r3, #23]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2da      	uxtb	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                /* Grab the lost frame */
                received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7ddb      	ldrb	r3, [r3, #23]
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bf14      	ite	ne
 80009ae:	2301      	movne	r3, #1
 80009b0:	2300      	moveq	r3, #0
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                /* Grab the failsafe */
                received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7ddb      	ldrb	r3, [r3, #23]
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf14      	ite	ne
 80009c6:	2301      	movne	r3, #1
 80009c8:	2300      	moveq	r3, #0
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

                return true;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e010      	b.n	80009f8 <_ZN12SBUSReceiver5parseEv+0x3ae>
            } else {
                return false;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e00e      	b.n	80009f8 <_ZN12SBUSReceiver5parseEv+0x3ae>
            }
        } else {
            state_ = 0;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        }
        prev_byte_ = cur_byte_;   
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    for (uint8_t i = 0; i < 50; i++){
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	3301      	adds	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e62f      	b.n	8000656 <_ZN12SBUSReceiver5parseEv+0xc>
    }

    return false;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	601a      	str	r2, [r3, #0]

}
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_ZN10SBUSSender12SetSBusValueE4SBus>:

void SBUSSender::SetChannelValue(uint8_t channel, uint16_t value){

}

void SBUSSender::SetSBusValue(SBus values){
 8000a1e:	b084      	sub	sp, #16
 8000a20:	b4b0      	push	{r4, r5, r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	f107 001c 	add.w	r0, r7, #28
 8000a2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    send_sbus_ = values;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	1d1c      	adds	r4, r3, #4
 8000a34:	f107 051c 	add.w	r5, r7, #28
 8000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a44:	6020      	str	r0, [r4, #0]
 8000a46:	3404      	adds	r4, #4
 8000a48:	8021      	strh	r1, [r4, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bcb0      	pop	{r4, r5, r7}
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr

08000a56 <_ZN10SBUSSender8SendDataEv>:

void SBUSSender::SendData(){
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
    assemble_packet();
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f80f 	bl	8000a82 <_ZN10SBUSSender15assemble_packetEv>
    HAL_StatusTypeDef ret = HAL_UART_Transmit(uart_, send_buf_, SBUS_FRAME_SIZE, 100);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	2219      	movs	r2, #25
 8000a72:	f004 fd35 	bl	80054e0 <HAL_UART_Transmit>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73fb      	strb	r3, [r7, #15]
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_ZN10SBUSSender15assemble_packetEv>:

void SBUSSender::assemble_packet()
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	889b      	ldrh	r3, [r3, #4]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	889b      	ldrh	r3, [r3, #4]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	88db      	ldrh	r3, [r3, #6]
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	f023 0307 	bic.w	r3, r3, #7
 8000aba:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	88db      	ldrh	r3, [r3, #6]
 8000acc:	095b      	lsrs	r3, r3, #5
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ad6:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	891b      	ldrh	r3, [r3, #8]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ae4:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	891b      	ldrh	r3, [r3, #8]
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	891b      	ldrh	r3, [r3, #8]
 8000b06:	0a9b      	lsrs	r3, r3, #10
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	895b      	ldrh	r3, [r3, #10]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	f023 0301 	bic.w	r3, r3, #1
 8000b1e:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	895b      	ldrh	r3, [r3, #10]
 8000b30:	09db      	lsrs	r3, r3, #7
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	899b      	ldrh	r3, [r3, #12]
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	f023 030f 	bic.w	r3, r3, #15
 8000b48:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	899b      	ldrh	r3, [r3, #12]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b64:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	89db      	ldrh	r3, [r3, #14]
 8000b6a:	01db      	lsls	r3, r3, #7
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b72:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	89db      	ldrh	r3, [r3, #14]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	89db      	ldrh	r3, [r3, #14]
 8000b94:	0a5b      	lsrs	r3, r3, #9
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	8a1b      	ldrh	r3, [r3, #16]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	f023 0303 	bic.w	r3, r3, #3
 8000bac:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	8a1b      	ldrh	r3, [r3, #16]
 8000bbe:	099b      	lsrs	r3, r3, #6
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	f003 031f 	and.w	r3, r3, #31
 8000bc8:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	8a5b      	ldrh	r3, [r3, #18]
 8000bce:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	8a5b      	ldrh	r3, [r3, #18]
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	8a9b      	ldrh	r3, [r3, #20]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	8a9b      	ldrh	r3, [r3, #20]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	f003 0307 	and.w	r3, r3, #7
 8000c08:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	8adb      	ldrh	r3, [r3, #22]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	f023 0307 	bic.w	r3, r3, #7
 8000c16:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8adb      	ldrh	r3, [r3, #22]
 8000c28:	095b      	lsrs	r3, r3, #5
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c32:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	8b1b      	ldrh	r3, [r3, #24]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c40:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	8b1b      	ldrh	r3, [r3, #24]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8b1b      	ldrh	r3, [r3, #24]
 8000c62:	0a9b      	lsrs	r3, r3, #10
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	8b5b      	ldrh	r3, [r3, #26]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	f023 0301 	bic.w	r3, r3, #1
 8000c7a:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	8b5b      	ldrh	r3, [r3, #26]
 8000c8c:	09db      	lsrs	r3, r3, #7
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8b9b      	ldrh	r3, [r3, #28]
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	8b9b      	ldrh	r3, [r3, #28]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cc0:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8bdb      	ldrh	r3, [r3, #30]
 8000cc6:	01db      	lsls	r3, r3, #7
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000cce:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	8bdb      	ldrh	r3, [r3, #30]
 8000ce0:	085b      	lsrs	r3, r3, #1
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	8bdb      	ldrh	r3, [r3, #30]
 8000cf0:	0a5b      	lsrs	r3, r3, #9
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	8c1b      	ldrh	r3, [r3, #32]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	f023 0303 	bic.w	r3, r3, #3
 8000d08:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	8c1b      	ldrh	r3, [r3, #32]
 8000d1a:	099b      	lsrs	r3, r3, #6
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000d2a:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000d50:	b25a      	sxtb	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  send_buf_[24] = FOOTER_;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000dc4:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <MX_ADC1_Init+0xe4>)
 8000dc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e24:	f001 f86e 	bl	8001f04 <HAL_ADC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e2e:	f000 fa1b 	bl	8001268 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4810      	ldr	r0, [pc, #64]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e3e:	f001 fdbd 	bl	80029bc <HAL_ADCEx_MultiModeConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e48:	f000 fa0e 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e50:	2306      	movs	r3, #6
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e58:	237f      	movs	r3, #127	; 0x7f
 8000e5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_ADC1_Init+0xe0>)
 8000e6a:	f001 f997 	bl	800219c <HAL_ADC_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e74:	f000 f9f8 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000028 	.word	0x20000028
 8000e84:	42028000 	.word	0x42028000
 8000e88:	0c900008 	.word	0x0c900008

08000e8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ae      	sub	sp, #184	; 0xb8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2294      	movs	r2, #148	; 0x94
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fca1 	bl	80067f4 <memset>
  if(adcHandle->Instance==ADC1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_ADC_MspInit+0xa8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d137      	bne.n	8000f2c <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ebc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ec0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000ec2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fc66 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000eda:	f000 f9c5 	bl	8001268 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_ADC_MspInit+0xac>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <HAL_ADC_MspInit+0xac>)
 8000ee4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_ADC_MspInit+0xac>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_ADC_MspInit+0xac>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <HAL_ADC_MspInit+0xac>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_ADC_MspInit+0xac>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_ADC_MspInit+0xb0>)
 8000f28:	f002 f936 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	37b8      	adds	r7, #184	; 0xb8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	42028000 	.word	0x42028000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	42020800 	.word	0x42020800

08000f40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_DMA_Init+0x50>)
 8000f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <MX_DMA_Init+0x50>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6493      	str	r3, [r2, #72]	; 0x48
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_DMA_Init+0x50>)
 8000f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_DMA_Init+0x50>)
 8000f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <MX_DMA_Init+0x50>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6493      	str	r3, [r2, #72]	; 0x48
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_DMA_Init+0x50>)
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	201d      	movs	r0, #29
 8000f7c:	f001 fe9d 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f80:	201d      	movs	r0, #29
 8000f82:	f001 feb4 	bl	8002cee <HAL_NVIC_EnableIRQ>

}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a3e      	ldr	r2, [pc, #248]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a38      	ldr	r2, [pc, #224]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <MX_GPIO_Init+0x114>)
 8000ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_GPIO_Init+0x114>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800100a:	f002 fbdb 	bl	80037c4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	4826      	ldr	r0, [pc, #152]	; (80010ac <MX_GPIO_Init+0x118>)
 8001014:	f002 fa40 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101e:	4824      	ldr	r0, [pc, #144]	; (80010b0 <MX_GPIO_Init+0x11c>)
 8001020:	f002 fa3a 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	21a0      	movs	r1, #160	; 0xa0
 8001028:	4822      	ldr	r0, [pc, #136]	; (80010b4 <MX_GPIO_Init+0x120>)
 800102a:	f002 fa35 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800102e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001034:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_GPIO_Init+0x120>)
 8001046:	f002 f8a7 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <MX_GPIO_Init+0x118>)
 8001062:	f002 f899 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_GPIO_Init+0x11c>)
 8001080:	f002 f88a 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8001084:	23a0      	movs	r3, #160	; 0xa0
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_GPIO_Init+0x120>)
 800109c:	f002 f87c 	bl	8003198 <HAL_GPIO_Init>

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	42020800 	.word	0x42020800
 80010b0:	42020000 	.word	0x42020000
 80010b4:	42020400 	.word	0x42020400

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	b0c9      	sub	sp, #292	; 0x124
 80010bc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f000 fd0a 	bl	8001ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f861 	bl	8001188 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f7ff ff65 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ca:	f7ff ff39 	bl	8000f40 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010ce:	f000 fad7 	bl	8001680 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80010d2:	f000 f8cf 	bl	8001274 <MX_RTC_Init>
  MX_UCPD1_Init();
 80010d6:	f000 fa9d 	bl	8001614 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80010da:	f000 fc4b 	bl	8001974 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80010de:	f7ff fe5f 	bl	8000da0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80010e2:	f000 fb1b 	bl	800171c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  SBUSReceiver sbus_receive(&huart2);
 80010e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010ea:	4926      	ldr	r1, [pc, #152]	; (8001184 <main+0xcc>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa31 	bl	8000554 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
  SBUSSender   sbus_send(&huart2);
 80010f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010f6:	4923      	ldr	r1, [pc, #140]	; (8001184 <main+0xcc>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fc81 	bl	8000a00 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
  SBus sbus_data;
  uint8_t raw_data[25] = {0};
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sbus_data = sbus_receive.GetResult();
 8001114:	463b      	mov	r3, r7
 8001116:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa54 	bl	80005ca <_ZN12SBUSReceiver9GetResultEv>
 8001122:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001126:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800112a:	461c      	mov	r4, r3
 800112c:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8001130:	f104 0c20 	add.w	ip, r4, #32
 8001134:	4635      	mov	r5, r6
 8001136:	4623      	mov	r3, r4
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001142:	3410      	adds	r4, #16
 8001144:	3610      	adds	r6, #16
 8001146:	4564      	cmp	r4, ip
 8001148:	d1f4      	bne.n	8001134 <main+0x7c>
 800114a:	4633      	mov	r3, r6
 800114c:	4622      	mov	r2, r4
 800114e:	6810      	ldr	r0, [r2, #0]
 8001150:	6018      	str	r0, [r3, #0]
 8001152:	8892      	ldrh	r2, [r2, #4]
 8001154:	809a      	strh	r2, [r3, #4]
	sbus_send.SetSBusValue(sbus_data);
 8001156:	f107 0670 	add.w	r6, r7, #112	; 0x70
 800115a:	466c      	mov	r4, sp
 800115c:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8001160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001168:	c403      	stmia	r4!, {r0, r1}
 800116a:	8022      	strh	r2, [r4, #0]
 800116c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001172:	4630      	mov	r0, r6
 8001174:	f7ff fc53 	bl	8000a1e <_ZN10SBUSSender12SetSBusValueE4SBus>
	sbus_send.SendData();
 8001178:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fc6a 	bl	8000a56 <_ZN10SBUSSender8SendDataEv>
	sbus_data = sbus_receive.GetResult();
 8001182:	e7c7      	b.n	8001114 <main+0x5c>
 8001184:	2000014c 	.word	0x2000014c

08001188 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b098      	sub	sp, #96	; 0x60
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	2248      	movs	r2, #72	; 0x48
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fb2c 	bl	80067f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f002 faae 	bl	800370c <HAL_PWREx_ControlVoltageScaling>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf14      	ite	ne
 80011b6:	2301      	movne	r3, #1
 80011b8:	2300      	moveq	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80011c0:	f000 f852 	bl	8001268 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011c4:	f002 fa84 	bl	80036d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <_Z18SystemClock_Configv+0xdc>)
 80011ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <_Z18SystemClock_Configv+0xdc>)
 80011d0:	f023 0318 	bic.w	r3, r3, #24
 80011d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80011d8:	2334      	movs	r3, #52	; 0x34
 80011da:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011dc:	2381      	movs	r3, #129	; 0x81
 80011de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011e0:	2301      	movs	r3, #1
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80011fc:	2337      	movs	r3, #55	; 0x37
 80011fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001200:	2307      	movs	r3, #7
 8001202:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fb0b 	bl	800382c <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001226:	f000 f81f 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2303      	movs	r3, #3
 8001230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2105      	movs	r1, #5
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ffc8 	bl	80041d8 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001258:	f000 f806 	bl	8001268 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3760      	adds	r7, #96	; 0x60
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_RTC_Init+0x8c>)
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <MX_RTC_Init+0x90>)
 800128e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_RTC_Init+0x8c>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_RTC_Init+0x8c>)
 8001298:	227f      	movs	r2, #127	; 0x7f
 800129a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_RTC_Init+0x8c>)
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_RTC_Init+0x8c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_RTC_Init+0x8c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_RTC_Init+0x8c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_RTC_Init+0x8c>)
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_RTC_Init+0x8c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_RTC_Init+0x8c>)
 80012c4:	f003 ff82 	bl	80051cc <HAL_RTC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80012ce:	f7ff ffcb 	bl	8001268 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_RTC_Init+0x8c>)
 80012e8:	f004 f87e 	bl	80053e8 <HAL_RTCEx_PrivilegeModeSet>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012f2:	f7ff ffb9 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000090 	.word	0x20000090
 8001304:	40002800 	.word	0x40002800

08001308 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a8      	sub	sp, #160	; 0xa0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2294      	movs	r2, #148	; 0x94
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f005 fa6b 	bl	80067f4 <memset>
  if(rtcHandle->Instance==RTC)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <HAL_RTC_MspInit+0x74>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d124      	bne.n	8001372 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800132e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fa30 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001346:	f7ff ff8f 	bl	8001268 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_RTC_MspInit+0x78>)
 800134c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_RTC_MspInit+0x78>)
 8001352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_RTC_MspInit+0x78>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_RTC_MspInit+0x78>)
 8001360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001364:	6593      	str	r3, [r2, #88]	; 0x58
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_RTC_MspInit+0x78>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	37a0      	adds	r7, #160	; 0xa0
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40002800 	.word	0x40002800
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x44>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x44>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6613      	str	r3, [r2, #96]	; 0x60
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x44>)
 8001398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x44>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x44>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x44>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 fbb4 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA1_Channel1_IRQHandler+0x10>)
 8001426:	f001 fd25 	bl	8002e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001e0 	.word	0x200001e0

08001434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800145e:	4b4f      	ldr	r3, [pc, #316]	; (800159c <SystemCoreClockUpdate+0x144>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <SystemCoreClockUpdate+0x144>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e005      	b.n	8001486 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800147a:	4b48      	ldr	r3, [pc, #288]	; (800159c <SystemCoreClockUpdate+0x144>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001486:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <SystemCoreClockUpdate+0x148>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <SystemCoreClockUpdate+0x144>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d866      	bhi.n	800156a <SystemCoreClockUpdate+0x112>
 800149c:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <SystemCoreClockUpdate+0x4c>)
 800149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a2:	bf00      	nop
 80014a4:	080014d9 	.word	0x080014d9
 80014a8:	0800156b 	.word	0x0800156b
 80014ac:	0800156b 	.word	0x0800156b
 80014b0:	0800156b 	.word	0x0800156b
 80014b4:	080014e1 	.word	0x080014e1
 80014b8:	0800156b 	.word	0x0800156b
 80014bc:	0800156b 	.word	0x0800156b
 80014c0:	0800156b 	.word	0x0800156b
 80014c4:	080014e9 	.word	0x080014e9
 80014c8:	0800156b 	.word	0x0800156b
 80014cc:	0800156b 	.word	0x0800156b
 80014d0:	0800156b 	.word	0x0800156b
 80014d4:	080014f1 	.word	0x080014f1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80014d8:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <SystemCoreClockUpdate+0x14c>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	6013      	str	r3, [r2, #0]
      break;
 80014de:	e048      	b.n	8001572 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <SystemCoreClockUpdate+0x14c>)
 80014e2:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <SystemCoreClockUpdate+0x150>)
 80014e4:	601a      	str	r2, [r3, #0]
      break;
 80014e6:	e044      	b.n	8001572 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <SystemCoreClockUpdate+0x14c>)
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <SystemCoreClockUpdate+0x154>)
 80014ec:	601a      	str	r2, [r3, #0]
      break;
 80014ee:	e040      	b.n	8001572 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <SystemCoreClockUpdate+0x144>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <SystemCoreClockUpdate+0x144>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	3301      	adds	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d003      	beq.n	8001516 <SystemCoreClockUpdate+0xbe>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d006      	beq.n	8001522 <SystemCoreClockUpdate+0xca>
 8001514:	e00b      	b.n	800152e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001516:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <SystemCoreClockUpdate+0x150>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	613b      	str	r3, [r7, #16]
          break;
 8001520:	e00b      	b.n	800153a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001522:	4a22      	ldr	r2, [pc, #136]	; (80015ac <SystemCoreClockUpdate+0x154>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	613b      	str	r3, [r7, #16]
          break;
 800152c:	e005      	b.n	800153a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	613b      	str	r3, [r7, #16]
          break;
 8001538:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <SystemCoreClockUpdate+0x144>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <SystemCoreClockUpdate+0x144>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0e5b      	lsrs	r3, r3, #25
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	3301      	adds	r3, #1
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	fbb2 f3f3 	udiv	r3, r2, r3
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <SystemCoreClockUpdate+0x14c>)
 8001566:	6013      	str	r3, [r2, #0]
      break;
 8001568:	e003      	b.n	8001572 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <SystemCoreClockUpdate+0x14c>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	6013      	str	r3, [r2, #0]
      break;
 8001570:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <SystemCoreClockUpdate+0x144>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <SystemCoreClockUpdate+0x158>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <SystemCoreClockUpdate+0x14c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemCoreClockUpdate+0x14c>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000
 80015a0:	08006834 	.word	0x08006834
 80015a4:	20000000 	.word	0x20000000
 80015a8:	00f42400 	.word	0x00f42400
 80015ac:	007a1200 	.word	0x007a1200
 80015b0:	0800681c 	.word	0x0800681c

080015b4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4013      	ands	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <LL_APB1_GRP2_EnableClock+0x2c>)
 80015ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <LL_APB1_GRP2_EnableClock+0x2c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <LL_APB1_GRP2_EnableClock+0x2c>)
 80015fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4013      	ands	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000

08001614 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800162a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800162e:	f7ff ffd9 	bl	80015e4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001632:	2002      	movs	r0, #2
 8001634:	f7ff ffbe 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff ffbb 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800163e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001642:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <MX_UCPD1_Init+0x64>)
 8001652:	f005 f802 	bl	800665a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800165a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800165c:	2303      	movs	r3, #3
 800165e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_UCPD1_Init+0x68>)
 800166a:	f004 fff6 	bl	800665a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	42020400 	.word	0x42020400
 800167c:	42020000 	.word	0x42020000

08001680 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 8001686:	4a23      	ldr	r2, [pc, #140]	; (8001714 <MX_LPUART1_UART_Init+0x94>)
 8001688:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 800168c:	4a22      	ldr	r2, [pc, #136]	; (8001718 <MX_LPUART1_UART_Init+0x98>)
 800168e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016a4:	220c      	movs	r2, #12
 80016a6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016c8:	f003 feba 	bl	8005440 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80016d2:	f7ff fdc9 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016da:	f004 fda9 	bl	8006230 <HAL_UARTEx_SetTxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80016e4:	f7ff fdc0 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016ec:	f004 fdde 	bl	80062ac <HAL_UARTEx_SetRxFifoThreshold>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80016f6:	f7ff fdb7 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_LPUART1_UART_Init+0x90>)
 80016fc:	f004 fd5f 	bl	80061be <HAL_UARTEx_DisableFifoMode>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001706:	f7ff fdaf 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000b8 	.word	0x200000b8
 8001714:	40008000 	.word	0x40008000
 8001718:	00033324 	.word	0x00033324

0800171c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001722:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <MX_USART2_UART_Init+0x98>)
 8001724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001728:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <MX_USART2_UART_Init+0x9c>)
 800172a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800172e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800173e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001768:	4811      	ldr	r0, [pc, #68]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800176a:	f003 fe69 	bl	8005440 <HAL_UART_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001774:	f7ff fd78 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001778:	2100      	movs	r1, #0
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800177c:	f004 fd58 	bl	8006230 <HAL_UARTEx_SetTxFifoThreshold>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001786:	f7ff fd6f 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4808      	ldr	r0, [pc, #32]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800178e:	f004 fd8d 	bl	80062ac <HAL_UARTEx_SetRxFifoThreshold>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001798:	f7ff fd66 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 800179e:	f004 fd0e 	bl	80061be <HAL_UARTEx_DisableFifoMode>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80017a8:	f7ff fd5e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000014c 	.word	0x2000014c
 80017b4:	40004400 	.word	0x40004400
 80017b8:	000186a0 	.word	0x000186a0

080017bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0b0      	sub	sp, #192	; 0xc0
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	2294      	movs	r2, #148	; 0x94
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 f809 	bl	80067f4 <memset>
  if(uartHandle->Instance==LPUART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <HAL_UART_MspInit+0x19c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d13e      	bne.n	800186a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017ec:	2320      	movs	r3, #32
 80017ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 ffd1 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001804:	f7ff fd30 	bl	8001268 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <HAL_UART_MspInit+0x1a0>)
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	4a53      	ldr	r2, [pc, #332]	; (800195c <HAL_UART_MspInit+0x1a0>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_UART_MspInit+0x1a0>)
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001820:	4b4e      	ldr	r3, [pc, #312]	; (800195c <HAL_UART_MspInit+0x1a0>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a4d      	ldr	r2, [pc, #308]	; (800195c <HAL_UART_MspInit+0x1a0>)
 8001826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HAL_UART_MspInit+0x1a0>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001838:	f001 ffc4 	bl	80037c4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800183c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001856:	2308      	movs	r3, #8
 8001858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001860:	4619      	mov	r1, r3
 8001862:	483f      	ldr	r0, [pc, #252]	; (8001960 <HAL_UART_MspInit+0x1a4>)
 8001864:	f001 fc98 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001868:	e072      	b.n	8001950 <HAL_UART_MspInit+0x194>
  else if(uartHandle->Instance==USART2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <HAL_UART_MspInit+0x1a8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d16d      	bne.n	8001950 <HAL_UART_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f002 ff8d 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800188c:	f7ff fcec 	bl	8001268 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_UART_MspInit+0x1a0>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a31      	ldr	r2, [pc, #196]	; (800195c <HAL_UART_MspInit+0x1a0>)
 8001896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_UART_MspInit+0x1a0>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_UART_MspInit+0x1a0>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <HAL_UART_MspInit+0x1a0>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_UART_MspInit+0x1a0>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018c0:	230c      	movs	r3, #12
 80018c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d8:	2307      	movs	r3, #7
 80018da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018e2:	4619      	mov	r1, r3
 80018e4:	4820      	ldr	r0, [pc, #128]	; (8001968 <HAL_UART_MspInit+0x1ac>)
 80018e6:	f001 fc57 	bl	8003198 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_UART_MspInit+0x1b0>)
 80018ec:	4a20      	ldr	r2, [pc, #128]	; (8001970 <HAL_UART_MspInit+0x1b4>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_UART_MspInit+0x1b0>)
 80018f2:	221b      	movs	r2, #27
 80018f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_UART_MspInit+0x1b0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_UART_MspInit+0x1b0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_UART_MspInit+0x1b0>)
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_UART_MspInit+0x1b0>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_UART_MspInit+0x1b0>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_UART_MspInit+0x1b0>)
 8001916:	2220      	movs	r2, #32
 8001918:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_UART_MspInit+0x1b0>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001920:	4812      	ldr	r0, [pc, #72]	; (800196c <HAL_UART_MspInit+0x1b0>)
 8001922:	f001 f9ff 	bl	8002d24 <HAL_DMA_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_MspInit+0x174>
      Error_Handler();
 800192c:	f7ff fc9c 	bl	8001268 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001930:	2110      	movs	r1, #16
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <HAL_UART_MspInit+0x1b0>)
 8001934:	f001 fb9e 	bl	8003074 <HAL_DMA_ConfigChannelAttributes>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_MspInit+0x186>
      Error_Handler();
 800193e:	f7ff fc93 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_UART_MspInit+0x1b0>)
 8001946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_UART_MspInit+0x1b0>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001950:	bf00      	nop
 8001952:	37c0      	adds	r7, #192	; 0xc0
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40008000 	.word	0x40008000
 800195c:	40021000 	.word	0x40021000
 8001960:	42021800 	.word	0x42021800
 8001964:	40004400 	.word	0x40004400
 8001968:	42020000 	.word	0x42020000
 800196c:	200001e0 	.word	0x200001e0
 8001970:	40020008 	.word	0x40020008

08001974 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MX_USB_PCD_Init+0x48>)
 800197a:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <MX_USB_PCD_Init+0x4c>)
 800197c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_USB_PCD_Init+0x48>)
 8001980:	2208      	movs	r2, #8
 8001982:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <MX_USB_PCD_Init+0x48>)
 8001986:	2202      	movs	r2, #2
 8001988:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_USB_PCD_Init+0x48>)
 800198c:	2202      	movs	r2, #2
 800198e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <MX_USB_PCD_Init+0x48>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_USB_PCD_Init+0x48>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <MX_USB_PCD_Init+0x48>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_USB_PCD_Init+0x48>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_USB_PCD_Init+0x48>)
 80019aa:	f001 fd8d 	bl	80034c8 <HAL_PCD_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80019b4:	f7ff fc58 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000248 	.word	0x20000248
 80019c0:	4000d400 	.word	0x4000d400

080019c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0ae      	sub	sp, #184	; 0xb8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2294      	movs	r2, #148	; 0x94
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 ff05 	bl	80067f4 <memset>
  if(pcdHandle->Instance==USB)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_PCD_MspInit+0xb4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d13d      	bne.n	8001a70 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fecb 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001a10:	f7ff fc2a 	bl	8001268 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_PCD_MspInit+0xb8>)
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_PCD_MspInit+0xb8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_PCD_MspInit+0xb8>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001a46:	230a      	movs	r3, #10
 8001a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a50:	4619      	mov	r1, r3
 8001a52:	480b      	ldr	r0, [pc, #44]	; (8001a80 <HAL_PCD_MspInit+0xbc>)
 8001a54:	f001 fba0 	bl	8003198 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_PCD_MspInit+0xb8>)
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_PCD_MspInit+0xb8>)
 8001a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_PCD_MspInit+0xb8>)
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001a70:	bf00      	nop
 8001a72:	37b8      	adds	r7, #184	; 0xb8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	4000d400 	.word	0x4000d400
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	42020000 	.word	0x42020000

08001a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a88:	f7ff fcd4 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a8e:	e003      	b.n	8001a98 <LoopCopyDataInit>

08001a90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a96:	3104      	adds	r1, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a98:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001aa0:	d3f6      	bcc.n	8001a90 <CopyDataInit>
	ldr	r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001aa4:	e002      	b.n	8001aac <LoopFillZerobss>

08001aa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aa6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aa8:	f842 3b04 	str.w	r3, [r2], #4

08001aac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <LoopForever+0x16>)
	cmp	r2, r3
 8001aae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ab0:	d3f9      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ab2:	f004 fe7b 	bl	80067ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab6:	f7ff faff 	bl	80010b8 <main>

08001aba <LoopForever>:

LoopForever:
    b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001abc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001ac0:	080068ac 	.word	0x080068ac
	ldr	r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ac8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001acc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ad0:	20000540 	.word	0x20000540

08001ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_2_IRQHandler>

08001ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f001 f8df 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001ae6:	f7ff fcb7 	bl	8001458 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aea:	2000      	movs	r0, #0
 8001aec:	f000 f80e 	bl	8001b0c <HAL_InitTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	e001      	b.n	8001b00 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001afc:	f7ff fc42 	bl	8001384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b00:	79fb      	ldrb	r3, [r7, #7]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_InitTick+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d023      	beq.n	8001b68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_InitTick+0x70>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_InitTick+0x6c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 f8e7 	bl	8002d0a <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	d809      	bhi.n	8001b5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f001 f8b3 	bl	8002cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_InitTick+0x74>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e007      	b.n	8001b6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e004      	b.n	8001b6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e001      	b.n	8001b6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	2000053c 	.word	0x2000053c

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000053c 	.word	0x2000053c

08001bc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <LL_ADC_SetOffset+0x44>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	03fff000 	.word	0x03fff000

08001c74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3360      	adds	r3, #96	; 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3360      	adds	r3, #96	; 0x60
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	615a      	str	r2, [r3, #20]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3330      	adds	r3, #48	; 0x30
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	211f      	movs	r1, #31
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 011f 	and.w	r1, r3, #31
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3314      	adds	r3, #20
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0e5b      	lsrs	r3, r3, #25
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0d1b      	lsrs	r3, r3, #20
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2107      	movs	r1, #7
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0d1b      	lsrs	r3, r3, #20
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0318 	and.w	r3, r3, #24
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0007ffff 	.word	0x0007ffff

08001df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <LL_ADC_IsEnabled+0x18>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_ADC_IsEnabled+0x1a>
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d101      	bne.n	8001ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d101      	bne.n	8001ef4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e12e      	b.n	800217c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7fe ffad 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff67 	bl	8001e18 <LL_ADC_IsDeepPowerDownEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff4d 	bl	8001df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff82 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff66 	bl	8001e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f74:	4b83      	ldr	r3, [pc, #524]	; (8002184 <HAL_ADC_Init+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	4a83      	ldr	r2, [pc, #524]	; (8002188 <HAL_ADC_Init+0x284>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff64 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff75 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 8001fcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80c7 	bne.w	800216a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80c3 	bne.w	800216a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fec:	f043 0202 	orr.w	r2, r3, #2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff49 	bl	8001e90 <LL_ADC_IsEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d110      	bne.n	8002026 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002004:	4861      	ldr	r0, [pc, #388]	; (800218c <HAL_ADC_Init+0x288>)
 8002006:	f7ff ff43 	bl	8001e90 <LL_ADC_IsEnabled>
 800200a:	4604      	mov	r4, r0
 800200c:	4860      	ldr	r0, [pc, #384]	; (8002190 <HAL_ADC_Init+0x28c>)
 800200e:	f7ff ff3f 	bl	8001e90 <LL_ADC_IsEnabled>
 8002012:	4603      	mov	r3, r0
 8002014:	4323      	orrs	r3, r4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4619      	mov	r1, r3
 8002020:	485c      	ldr	r0, [pc, #368]	; (8002194 <HAL_ADC_Init+0x290>)
 8002022:	f7ff fdcf 	bl	8001bc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7e5b      	ldrb	r3, [r3, #25]
 800202a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002030:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002036:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800203c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	3b01      	subs	r3, #1
 800205a:	045b      	lsls	r3, r3, #17
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4b44      	ldr	r3, [pc, #272]	; (8002198 <HAL_ADC_Init+0x294>)
 8002086:	4013      	ands	r3, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	69b9      	ldr	r1, [r7, #24]
 800208e:	430b      	orrs	r3, r1
 8002090:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff20 	bl	8001edc <LL_ADC_INJ_IsConversionOngoing>
 800209c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d140      	bne.n	8002126 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d13d      	bne.n	8002126 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7e1b      	ldrb	r3, [r3, #24]
 80020b2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020b4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020cc:	f023 0306 	bic.w	r3, r3, #6
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	69b9      	ldr	r1, [r7, #24]
 80020d6:	430b      	orrs	r3, r1
 80020d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d118      	bne.n	8002116 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002100:	4311      	orrs	r1, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002106:	430a      	orrs	r2, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	611a      	str	r2, [r3, #16]
 8002114:	e007      	b.n	8002126 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d10c      	bne.n	8002148 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f023 010f 	bic.w	r1, r3, #15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
 8002146:	e007      	b.n	8002158 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 020f 	bic.w	r2, r2, #15
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f023 0303 	bic.w	r3, r3, #3
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	659a      	str	r2, [r3, #88]	; 0x58
 8002168:	e007      	b.n	800217a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f043 0210 	orr.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800217a:	7ffb      	ldrb	r3, [r7, #31]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3724      	adds	r7, #36	; 0x24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}
 8002184:	20000000 	.word	0x20000000
 8002188:	053e2d63 	.word	0x053e2d63
 800218c:	42028000 	.word	0x42028000
 8002190:	42028100 	.word	0x42028100
 8002194:	42028300 	.word	0x42028300
 8002198:	fff0c007 	.word	0xfff0c007

0800219c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b0b7      	sub	sp, #220	; 0xdc
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x22>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e3c1      	b.n	8002942 <HAL_ADC_ConfigChannel+0x7a6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fe73 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 83a6 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f7ff fd89 	bl	8001cfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fe61 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 80021f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fe6d 	bl	8001edc <LL_ADC_INJ_IsConversionOngoing>
 8002202:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002206:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 81c1 	bne.w	8002592 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 81bc 	bne.w	8002592 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002222:	d10f      	bne.n	8002244 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2200      	movs	r2, #0
 800222e:	4619      	mov	r1, r3
 8002230:	f7ff fd90 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fd4a 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002242:	e00e      	b.n	8002262 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	461a      	mov	r2, r3
 8002252:	f7ff fd7f 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fd3a 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d00a      	beq.n	800229a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6919      	ldr	r1, [r3, #16]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002294:	f7ff fcca 	bl	8001c2c <LL_ADC_SetOffset>
 8002298:	e17b      	b.n	8002592 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fce7 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x12a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fcdc 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	e01e      	b.n	8002304 <HAL_ADC_ConfigChannel+0x168>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fcd1 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e004      	b.n	8002302 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80022f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_ADC_ConfigChannel+0x180>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	e018      	b.n	800234e <HAL_ADC_ConfigChannel+0x1b2>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e004      	b.n	800234e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800234e:	429a      	cmp	r2, r3
 8002350:	d106      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fca0 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fc84 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1f0>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fc79 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	f003 021f 	and.w	r2, r3, #31
 800238a:	e01e      	b.n	80023ca <HAL_ADC_ConfigChannel+0x22e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fc6e 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80023ba:	2320      	movs	r3, #32
 80023bc:	e004      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80023be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x246>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	e018      	b.n	8002414 <HAL_ADC_ConfigChannel+0x278>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002406:	2320      	movs	r3, #32
 8002408:	e004      	b.n	8002414 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800240a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	2101      	movs	r1, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fc3d 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2102      	movs	r1, #2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fc21 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x2b6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2102      	movs	r1, #2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fc16 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	e01e      	b.n	8002490 <HAL_ADC_ConfigChannel+0x2f4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2102      	movs	r1, #2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fc0b 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e004      	b.n	800248e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x30c>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	e016      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x33a>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e004      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80024cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d106      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fbdc 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2103      	movs	r1, #3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fbc0 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x378>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2103      	movs	r1, #3
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fbb5 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	f003 021f 	and.w	r2, r3, #31
 8002512:	e017      	b.n	8002544 <HAL_ADC_ConfigChannel+0x3a8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2103      	movs	r1, #3
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fbaa 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800252c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800252e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e003      	b.n	8002542 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800253a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_ADC_ConfigChannel+0x3c0>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	e011      	b.n	8002580 <HAL_ADC_ConfigChannel+0x3e4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800256a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800256c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	2103      	movs	r1, #3
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb87 	bl	8001ca0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fc7a 	bl	8001e90 <LL_ADC_IsEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 81c9 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	461a      	mov	r2, r3
 80025b2:	f7ff fbfb 	bl	8001dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4a8f      	ldr	r2, [pc, #572]	; (80027f8 <HAL_ADC_ConfigChannel+0x65c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	f040 8131 	bne.w	8002824 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x44e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0e9b      	lsrs	r3, r3, #26
 80025d8:	3301      	adds	r3, #1
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2b09      	cmp	r3, #9
 80025e0:	bf94      	ite	ls
 80025e2:	2301      	movls	r3, #1
 80025e4:	2300      	movhi	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	e019      	b.n	800261e <HAL_ADC_ConfigChannel+0x482>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e003      	b.n	800260e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2b09      	cmp	r3, #9
 8002616:	bf94      	ite	ls
 8002618:	2301      	movls	r3, #1
 800261a:	2300      	movhi	r3, #0
 800261c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800261e:	2b00      	cmp	r3, #0
 8002620:	d079      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d107      	bne.n	800263e <HAL_ADC_ConfigChannel+0x4a2>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	3301      	adds	r3, #1
 8002636:	069b      	lsls	r3, r3, #26
 8002638:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800263c:	e015      	b.n	800266a <HAL_ADC_ConfigChannel+0x4ce>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800264c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	069b      	lsls	r3, r3, #26
 8002666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_ADC_ConfigChannel+0x4ee>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	3301      	adds	r3, #1
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	e017      	b.n	80026ba <HAL_ADC_ConfigChannel+0x51e>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800269c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e003      	b.n	80026ae <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	ea42 0103 	orr.w	r1, r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x544>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	3301      	adds	r3, #1
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	051b      	lsls	r3, r3, #20
 80026de:	e018      	b.n	8002712 <HAL_ADC_ConfigChannel+0x576>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002712:	430b      	orrs	r3, r1
 8002714:	e081      	b.n	800281a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x596>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	3301      	adds	r3, #1
 800272a:	069b      	lsls	r3, r3, #26
 800272c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002730:	e015      	b.n	800275e <HAL_ADC_ConfigChannel+0x5c2>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e003      	b.n	8002756 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	3301      	adds	r3, #1
 8002758:	069b      	lsls	r3, r3, #26
 800275a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_ADC_ConfigChannel+0x5e2>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	3301      	adds	r3, #1
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	e017      	b.n	80027ae <HAL_ADC_ConfigChannel+0x612>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	61fb      	str	r3, [r7, #28]
  return result;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	ea42 0103 	orr.w	r1, r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <HAL_ADC_ConfigChannel+0x63e>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	3301      	adds	r3, #1
 80027c6:	f003 021f 	and.w	r2, r3, #31
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	051b      	lsls	r3, r3, #20
 80027d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d8:	e01e      	b.n	8002818 <HAL_ADC_ConfigChannel+0x67c>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	613b      	str	r3, [r7, #16]
  return result;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80027f2:	2320      	movs	r3, #32
 80027f4:	e006      	b.n	8002804 <HAL_ADC_ConfigChannel+0x668>
 80027f6:	bf00      	nop
 80027f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	3b1e      	subs	r3, #30
 8002812:	051b      	lsls	r3, r3, #20
 8002814:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002818:	430b      	orrs	r3, r1
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6892      	ldr	r2, [r2, #8]
 800281e:	4619      	mov	r1, r3
 8002820:	f7ff fa98 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b48      	ldr	r3, [pc, #288]	; (800294c <HAL_ADC_ConfigChannel+0x7b0>)
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8082 	beq.w	8002936 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002832:	4847      	ldr	r0, [pc, #284]	; (8002950 <HAL_ADC_ConfigChannel+0x7b4>)
 8002834:	f7ff f9ec 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 8002838:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800283c:	4845      	ldr	r0, [pc, #276]	; (8002954 <HAL_ADC_ConfigChannel+0x7b8>)
 800283e:	f7ff fb27 	bl	8001e90 <LL_ADC_IsEnabled>
 8002842:	4604      	mov	r4, r0
 8002844:	4844      	ldr	r0, [pc, #272]	; (8002958 <HAL_ADC_ConfigChannel+0x7bc>)
 8002846:	f7ff fb23 	bl	8001e90 <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	4323      	orrs	r3, r4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d15e      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a41      	ldr	r2, [pc, #260]	; (800295c <HAL_ADC_ConfigChannel+0x7c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d127      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800285c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d121      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a39      	ldr	r2, [pc, #228]	; (8002954 <HAL_ADC_ConfigChannel+0x7b8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d161      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002876:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800287a:	4619      	mov	r1, r3
 800287c:	4834      	ldr	r0, [pc, #208]	; (8002950 <HAL_ADC_ConfigChannel+0x7b4>)
 800287e:	f7ff f9b4 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_ADC_ConfigChannel+0x7c4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	4a36      	ldr	r2, [pc, #216]	; (8002964 <HAL_ADC_ConfigChannel+0x7c8>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	099b      	lsrs	r3, r3, #6
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800289a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800289c:	e002      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f9      	bne.n	800289e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028aa:	e044      	b.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_ADC_ConfigChannel+0x7cc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d113      	bne.n	80028de <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10d      	bne.n	80028de <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_ADC_ConfigChannel+0x7b8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d134      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d4:	4619      	mov	r1, r3
 80028d6:	481e      	ldr	r0, [pc, #120]	; (8002950 <HAL_ADC_ConfigChannel+0x7b4>)
 80028d8:	f7ff f987 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028dc:	e02b      	b.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a22      	ldr	r2, [pc, #136]	; (800296c <HAL_ADC_ConfigChannel+0x7d0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d126      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d120      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_ADC_ConfigChannel+0x7b8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d11b      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002906:	4619      	mov	r1, r3
 8002908:	4811      	ldr	r0, [pc, #68]	; (8002950 <HAL_ADC_ConfigChannel+0x7b4>)
 800290a:	f7ff f96e 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
 800290e:	e012      	b.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002922:	e008      	b.n	8002936 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800293e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002942:	4618      	mov	r0, r3
 8002944:	37dc      	adds	r7, #220	; 0xdc
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	bf00      	nop
 800294c:	80080000 	.word	0x80080000
 8002950:	42028300 	.word	0x42028300
 8002954:	42028000 	.word	0x42028000
 8002958:	42028100 	.word	0x42028100
 800295c:	c7520000 	.word	0xc7520000
 8002960:	20000000 	.word	0x20000000
 8002964:	053e2d63 	.word	0x053e2d63
 8002968:	cb840000 	.word	0xcb840000
 800296c:	80000001 	.word	0x80000001

08002970 <LL_ADC_IsEnabled>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <LL_ADC_IsEnabled+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_IsEnabled+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_REG_IsConversionOngoing>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d101      	bne.n	80029ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b0a1      	sub	sp, #132	; 0x84
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e089      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029e2:	2300      	movs	r3, #0
 80029e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029e6:	2300      	movs	r3, #0
 80029e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a42      	ldr	r2, [pc, #264]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d102      	bne.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e001      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e068      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ffb9 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002a24:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ffb3 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d14a      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d147      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a3c:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a3e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d027      	beq.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a5a:	035b      	lsls	r3, r3, #13
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a64:	4824      	ldr	r0, [pc, #144]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a66:	f7ff ff83 	bl	8002970 <LL_ADC_IsEnabled>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4823      	ldr	r0, [pc, #140]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a6e:	f7ff ff7f 	bl	8002970 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4323      	orrs	r3, r4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d132      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a82:	f023 030f 	bic.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	6892      	ldr	r2, [r2, #8]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	431a      	orrs	r2, r3
 8002a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a96:	e023      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa4:	4814      	ldr	r0, [pc, #80]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002aa6:	f7ff ff63 	bl	8002970 <LL_ADC_IsEnabled>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4813      	ldr	r0, [pc, #76]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002aae:	f7ff ff5f 	bl	8002970 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4323      	orrs	r3, r4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d112      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ac2:	f023 030f 	bic.w	r3, r3, #15
 8002ac6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ac8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aca:	e009      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ade:	e000      	b.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002aea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3784      	adds	r7, #132	; 0x84
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	42028000 	.word	0x42028000
 8002afc:	42028100 	.word	0x42028100
 8002b00:	42028300 	.word	0x42028300

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0152      	lsls	r2, r2, #5
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0152      	lsls	r2, r2, #5
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	bf28      	it	cs
 8002c16:	2303      	movcs	r3, #3
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3303      	adds	r3, #3
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b04      	subs	r3, #4
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	2107      	movs	r1, #7
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff40 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff90 	bl	8002bf8 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5f 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff33 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa4 	bl	8002c60 <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e08d      	b.n	8002e52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_DMA_Init+0x138>)
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d80f      	bhi.n	8002d62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b45      	ldr	r3, [pc, #276]	; (8002e60 <HAL_DMA_Init+0x13c>)
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a45      	ldr	r2, [pc, #276]	; (8002e64 <HAL_DMA_Init+0x140>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	009a      	lsls	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a42      	ldr	r2, [pc, #264]	; (8002e68 <HAL_DMA_Init+0x144>)
 8002d5e:	649a      	str	r2, [r3, #72]	; 0x48
 8002d60:	e00e      	b.n	8002d80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_DMA_Init+0x148>)
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a3d      	ldr	r2, [pc, #244]	; (8002e64 <HAL_DMA_Init+0x140>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a3c      	ldr	r2, [pc, #240]	; (8002e70 <HAL_DMA_Init+0x14c>)
 8002d7e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002d96:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002d9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f97e 	bl	80030d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de0:	d102      	bne.n	8002de8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002dfc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_DMA_Init+0x104>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d80c      	bhi.n	8002e28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f99e 	bl	8003150 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e008      	b.n	8002e3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40020407 	.word	0x40020407
 8002e60:	bffdfff8 	.word	0xbffdfff8
 8002e64:	cccccccd 	.word	0xcccccccd
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	bffdfbf8 	.word	0xbffdfbf8
 8002e70:	40020400 	.word	0x40020400

08002e74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e90:	f003 031c 	and.w	r3, r3, #28
 8002e94:	2204      	movs	r2, #4
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d053      	beq.n	8002f48 <HAL_DMA_IRQHandler+0xd4>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04e      	beq.n	8002f48 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d024      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	f003 021c 	and.w	r2, r3, #28
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec4:	2104      	movs	r1, #4
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80c0 	beq.w	8003064 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002eec:	e0ba      	b.n	8003064 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80b6 	beq.w	8003064 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f00:	e0b0      	b.n	8003064 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0204 	bic.w	r2, r2, #4
 8002f1e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f24:	f003 021c 	and.w	r2, r3, #28
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8093 	beq.w	8003064 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f46:	e08d      	b.n	8003064 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	f003 031c 	and.w	r3, r3, #28
 8002f50:	2202      	movs	r2, #2
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d04e      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x186>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d049      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d06e      	beq.n	8003068 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f92:	e069      	b.n	8003068 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d065      	beq.n	8003068 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002fa4:	e060      	b.n	8003068 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 020a 	bic.w	r2, r2, #10
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	f003 021c 	and.w	r2, r3, #28
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	2102      	movs	r1, #2
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d03b      	beq.n	8003068 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ff8:	e036      	b.n	8003068 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	f003 031c 	and.w	r3, r3, #28
 8003002:	2208      	movs	r2, #8
 8003004:	409a      	lsls	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d02e      	beq.n	800306c <HAL_DMA_IRQHandler+0x1f8>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d029      	beq.n	800306c <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 020e 	bic.w	r2, r2, #14
 8003026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	f003 021c 	and.w	r2, r3, #28
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003062:	e002      	b.n	800306a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003068:	bf00      	nop
  return;
 800306a:	bf00      	nop
 800306c:	bf00      	nop
}
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	72fb      	strb	r3, [r7, #11]
    return status;
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	e01b      	b.n	80030c8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e003      	b.n	80030be <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030bc:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	601a      	str	r2, [r3, #0]

  return status;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d80a      	bhi.n	80030fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6513      	str	r3, [r2, #80]	; 0x50
 80030fc:	e007      	b.n	800310e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	009a      	lsls	r2, r3, #2
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003108:	4413      	add	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3b08      	subs	r3, #8
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40020407 	.word	0x40020407
 8003144:	40020820 	.word	0x40020820
 8003148:	cccccccd 	.word	0xcccccccd
 800314c:	40020880 	.word	0x40020880

08003150 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a08      	ldr	r2, [pc, #32]	; (8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003172:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3b01      	subs	r3, #1
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2201      	movs	r2, #1
 800317e:	409a      	lsls	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	1000823f 	.word	0x1000823f
 8003194:	40020940 	.word	0x40020940

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031a6:	e158      	b.n	800345a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2101      	movs	r1, #1
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 814a 	beq.w	8003454 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d005      	beq.n	80031d8 <HAL_GPIO_Init+0x40>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d130      	bne.n	800323a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800320e:	2201      	movs	r2, #1
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0201 	and.w	r2, r3, #1
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b03      	cmp	r3, #3
 8003244:	d017      	beq.n	8003276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d123      	bne.n	80032ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	08da      	lsrs	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3208      	adds	r2, #8
 800328a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	08da      	lsrs	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3208      	adds	r2, #8
 80032c4:	6939      	ldr	r1, [r7, #16]
 80032c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80a4 	beq.w	8003454 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800330c:	4a5a      	ldr	r2, [pc, #360]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3318      	adds	r3, #24
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	220f      	movs	r2, #15
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_GPIO_Init+0x2e4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d025      	beq.n	8003384 <HAL_GPIO_Init+0x1ec>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a51      	ldr	r2, [pc, #324]	; (8003480 <HAL_GPIO_Init+0x2e8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01f      	beq.n	8003380 <HAL_GPIO_Init+0x1e8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a50      	ldr	r2, [pc, #320]	; (8003484 <HAL_GPIO_Init+0x2ec>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d019      	beq.n	800337c <HAL_GPIO_Init+0x1e4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_GPIO_Init+0x2f0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_GPIO_Init+0x1e0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a4e      	ldr	r2, [pc, #312]	; (800348c <HAL_GPIO_Init+0x2f4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00d      	beq.n	8003374 <HAL_GPIO_Init+0x1dc>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a4d      	ldr	r2, [pc, #308]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <HAL_GPIO_Init+0x1d8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a4c      	ldr	r2, [pc, #304]	; (8003494 <HAL_GPIO_Init+0x2fc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_GPIO_Init+0x1d4>
 8003368:	2306      	movs	r3, #6
 800336a:	e00c      	b.n	8003386 <HAL_GPIO_Init+0x1ee>
 800336c:	2307      	movs	r3, #7
 800336e:	e00a      	b.n	8003386 <HAL_GPIO_Init+0x1ee>
 8003370:	2305      	movs	r3, #5
 8003372:	e008      	b.n	8003386 <HAL_GPIO_Init+0x1ee>
 8003374:	2304      	movs	r3, #4
 8003376:	e006      	b.n	8003386 <HAL_GPIO_Init+0x1ee>
 8003378:	2303      	movs	r3, #3
 800337a:	e004      	b.n	8003386 <HAL_GPIO_Init+0x1ee>
 800337c:	2302      	movs	r3, #2
 800337e:	e002      	b.n	8003386 <HAL_GPIO_Init+0x1ee>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_GPIO_Init+0x1ee>
 8003384:	2300      	movs	r3, #0
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	f002 0203 	and.w	r2, r2, #3
 800338c:	00d2      	lsls	r2, r2, #3
 800338e:	4093      	lsls	r3, r2
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003396:	4938      	ldr	r1, [pc, #224]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3318      	adds	r3, #24
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033c8:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033f8:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 80033fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 8003428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3301      	adds	r3, #1
 8003458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f ae9f 	bne.w	80031a8 <HAL_GPIO_Init+0x10>
  }
}
 800346a:	bf00      	nop
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	4002f400 	.word	0x4002f400
 800347c:	42020000 	.word	0x42020000
 8003480:	42020400 	.word	0x42020400
 8003484:	42020800 	.word	0x42020800
 8003488:	42020c00 	.word	0x42020c00
 800348c:	42021000 	.word	0x42021000
 8003490:	42021400 	.word	0x42021400
 8003494:	42021800 	.word	0x42021800

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034b4:	e002      	b.n	80034bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	b08b      	sub	sp, #44	; 0x2c
 80034cc:	af06      	add	r7, sp, #24
 80034ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0cb      	b.n	8003672 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe fa68 	bl	80019c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2203      	movs	r2, #3
 80034f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 f917 	bl	8006734 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	e040      	b.n	800358e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	440b      	add	r3, r1
 800351c:	3301      	adds	r3, #1
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	3303      	adds	r3, #3
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	3338      	adds	r3, #56	; 0x38
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	333c      	adds	r3, #60	; 0x3c
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	440b      	add	r3, r1
 8003582:	3340      	adds	r3, #64	; 0x40
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3b9      	bcc.n	800350c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e044      	b.n	8003628 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	440b      	add	r3, r1
 800361a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	3301      	adds	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	d3b5      	bcc.n	800359e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	687e      	ldr	r6, [r7, #4]
 800363a:	466d      	mov	r5, sp
 800363c:	f106 0410 	add.w	r4, r6, #16
 8003640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	602b      	str	r3, [r5, #0]
 8003648:	1d33      	adds	r3, r6, #4
 800364a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364c:	6838      	ldr	r0, [r7, #0]
 800364e:	f003 f88c 	bl	800676a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f805 	bl	800367a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800367a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40007000 	.word	0x40007000

080036f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <HAL_PWREx_GetVoltageRange+0x18>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000

0800370c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800371c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800371e:	f000 f861 	bl	80037e4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003722:	4603      	mov	r3, r0
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	d101      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e03e      	b.n	80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800372e:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373a:	d101      	bne.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e035      	b.n	80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d101      	bne.n	800374c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	e02f      	b.n	80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003754:	4917      	ldr	r1, [pc, #92]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	4a16      	ldr	r2, [pc, #88]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	09db      	lsrs	r3, r3, #7
 800376a:	2232      	movs	r2, #50	; 0x32
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	08db      	lsrs	r3, r3, #3
 8003778:	3301      	adds	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377c:	e002      	b.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3b01      	subs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003790:	d102      	bne.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f2      	bne.n	800377e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a4:	d101      	bne.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e000      	b.n	80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40007000 	.word	0x40007000
 80037b8:	20000000 	.word	0x20000000
 80037bc:	0a7c5ac5 	.word	0x0a7c5ac5
 80037c0:	cccccccd 	.word	0xcccccccd

080037c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d2:	6053      	str	r3, [r2, #4]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40007000 	.word	0x40007000

080037e4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80037fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	e00a      	b.n	8003818 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d103      	bne.n	8003814 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800380c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	e001      	b.n	8003818 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003818:	687b      	ldr	r3, [r7, #4]
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f000 bcc2 	b.w	80041c4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003840:	4b99      	ldr	r3, [pc, #612]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800384a:	4b97      	ldr	r3, [pc, #604]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80e9 	beq.w	8003a34 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <HAL_RCC_OscConfig+0x4a>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	f040 8083 	bne.w	8003976 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d17f      	bne.n	8003976 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003876:	4b8c      	ldr	r3, [pc, #560]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <HAL_RCC_OscConfig+0x64>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f000 bc9a 	b.w	80041c4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003894:	4b84      	ldr	r3, [pc, #528]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_RCC_OscConfig+0x7e>
 80038a0:	4b81      	ldr	r3, [pc, #516]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	e005      	b.n	80038b6 <HAL_RCC_OscConfig+0x8a>
 80038aa:	4b7f      	ldr	r3, [pc, #508]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d224      	bcs.n	8003904 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fe9c 	bl	80045fc <RCC_SetFlashLatencyFromMSIRange>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f000 bc7a 	b.w	80041c4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038d0:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a74      	ldr	r2, [pc, #464]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038d6:	f043 0308 	orr.w	r3, r3, #8
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	496f      	ldr	r1, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ee:	4b6e      	ldr	r3, [pc, #440]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	496a      	ldr	r1, [pc, #424]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
 8003902:	e026      	b.n	8003952 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	4962      	ldr	r1, [pc, #392]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003922:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	495d      	ldr	r1, [pc, #372]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fe5b 	bl	80045fc <RCC_SetFlashLatencyFromMSIRange>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f000 bc39 	b.w	80041c4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003952:	f000 fe17 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 8003956:	4603      	mov	r3, r0
 8003958:	4a54      	ldr	r2, [pc, #336]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800395a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800395c:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <HAL_RCC_OscConfig+0x284>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe f8d3 	bl	8001b0c <HAL_InitTick>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d060      	beq.n	8003a32 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	f000 bc27 	b.w	80041c4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d039      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a49      	ldr	r2, [pc, #292]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800398a:	f7fe f90f 	bl	8001bac <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003990:	e00f      	b.n	80039b2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003992:	f7fe f90b 	bl	8001bac <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d908      	bls.n	80039b2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a0:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	f000 bc09 	b.w	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0e9      	beq.n	8003992 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a39      	ldr	r2, [pc, #228]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	4934      	ldr	r1, [pc, #208]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039dc:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	492f      	ldr	r1, [pc, #188]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	e020      	b.n	8003a34 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039f2:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039fe:	f7fe f8d5 	bl	8001bac <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a04:	e00e      	b.n	8003a24 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a06:	f7fe f8d1 	bl	8001bac <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d907      	bls.n	8003a24 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e3cf      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a24:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ea      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1da>
 8003a30:	e000      	b.n	8003a34 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d07e      	beq.n	8003b3e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x226>
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	d10e      	bne.n	8003a6a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d10b      	bne.n	8003a6a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06e      	beq.n	8003b3c <HAL_RCC_OscConfig+0x310>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d16a      	bne.n	8003b3c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e3ac      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_OscConfig+0x256>
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e024      	b.n	8003acc <HAL_RCC_OscConfig+0x2a0>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8a:	d113      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x288>
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a02      	ldr	r2, [pc, #8]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e012      	b.n	8003acc <HAL_RCC_OscConfig+0x2a0>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	20000004 	.word	0x20000004
 8003ab4:	4b8b      	ldr	r3, [pc, #556]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a8a      	ldr	r2, [pc, #552]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a87      	ldr	r2, [pc, #540]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d019      	beq.n	8003b08 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe f86a 	bl	8001bac <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ada:	e00e      	b.n	8003afa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe f866 	bl	8001bac <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d907      	bls.n	8003afa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e364      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afa:	4b7a      	ldr	r3, [pc, #488]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0ea      	beq.n	8003adc <HAL_RCC_OscConfig+0x2b0>
 8003b06:	e01a      	b.n	8003b3e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe f850 	bl	8001bac <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b0e:	e00e      	b.n	8003b2e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fe f84c 	bl	8001bac <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d907      	bls.n	8003b2e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1e:	4b71      	ldr	r3, [pc, #452]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e34a      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ea      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2e4>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d06c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x330>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d119      	bne.n	8003b8a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d116      	bne.n	8003b8a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_OscConfig+0x348>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e327      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	4958      	ldr	r1, [pc, #352]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b88:	e04c      	b.n	8003c24 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d029      	beq.n	8003be6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b92:	4b54      	ldr	r3, [pc, #336]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a53      	ldr	r2, [pc, #332]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f805 	bl	8001bac <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba4:	e00e      	b.n	8003bc4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fe f801 	bl	8001bac <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d907      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e2ff      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ea      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	4941      	ldr	r1, [pc, #260]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	e01e      	b.n	8003c24 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a3e      	ldr	r2, [pc, #248]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fd ffdb 	bl	8001bac <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fd ffd7 	bl	8001bac <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e2d5      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c18:	4b32      	ldr	r3, [pc, #200]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d062      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d038      	beq.n	8003caa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c46:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c50:	e007      	b.n	8003c62 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	f043 0310 	orr.w	r3, r3, #16
 8003c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fd ff9b 	bl	8001bac <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c78:	e00f      	b.n	8003c9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7a:	f7fd ff97 	bl	8001bac <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b07      	cmp	r3, #7
 8003c86:	d908      	bls.n	8003c9a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e294      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0e8      	beq.n	8003c7a <HAL_RCC_OscConfig+0x44e>
 8003ca8:	e025      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd ff77 	bl	8001bac <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	e012      	b.n	8003ce8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd ff73 	bl	8001bac <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b07      	cmp	r3, #7
 8003cce:	d90b      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e270      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce8:	4ba8      	ldr	r3, [pc, #672]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e5      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 812d 	beq.w	8003f5e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d08:	4ba0      	ldr	r3, [pc, #640]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d14:	4b9d      	ldr	r3, [pc, #628]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	4a9c      	ldr	r2, [pc, #624]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d20:	4b9a      	ldr	r3, [pc, #616]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	4b97      	ldr	r3, [pc, #604]	; (8003f90 <HAL_RCC_OscConfig+0x764>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11e      	bne.n	8003d7a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b94      	ldr	r3, [pc, #592]	; (8003f90 <HAL_RCC_OscConfig+0x764>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a93      	ldr	r2, [pc, #588]	; (8003f90 <HAL_RCC_OscConfig+0x764>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d48:	f7fd ff30 	bl	8001bac <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	e00e      	b.n	8003d6e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd ff2c 	bl	8001bac <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d907      	bls.n	8003d6e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	4b8c      	ldr	r3, [pc, #560]	; (8003f90 <HAL_RCC_OscConfig+0x764>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e22a      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6e:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x764>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ea      	beq.n	8003d50 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01f      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d010      	beq.n	8003db4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d92:	4b7e      	ldr	r3, [pc, #504]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003da2:	4b7a      	ldr	r3, [pc, #488]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	4a78      	ldr	r2, [pc, #480]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db2:	e018      	b.n	8003de6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003db4:	4b75      	ldr	r3, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	4a74      	ldr	r2, [pc, #464]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc4:	e00f      	b.n	8003de6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dc6:	4b71      	ldr	r3, [pc, #452]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	4a6f      	ldr	r2, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	4a6b      	ldr	r2, [pc, #428]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d068      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dee:	f7fd fedd 	bl	8001bac <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df4:	e011      	b.n	8003e1a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fd fed9 	bl	8001bac <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d908      	bls.n	8003e1a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e08:	4b60      	ldr	r3, [pc, #384]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e1d4      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0e6      	beq.n	8003df6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d022      	beq.n	8003e7a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e34:	4b55      	ldr	r3, [pc, #340]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	4a54      	ldr	r2, [pc, #336]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e44:	e011      	b.n	8003e6a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fd feb1 	bl	8001bac <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d908      	bls.n	8003e6a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e58:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1ac      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e6a:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0e6      	beq.n	8003e46 <HAL_RCC_OscConfig+0x61a>
 8003e78:	e068      	b.n	8003f4c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e7a:	4b44      	ldr	r3, [pc, #272]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	4a42      	ldr	r2, [pc, #264]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e8a:	e011      	b.n	8003eb0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fe8e 	bl	8001bac <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d908      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e189      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003eb0:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <HAL_RCC_OscConfig+0x660>
 8003ebe:	e045      	b.n	8003f4c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fe74 	bl	8001bac <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec6:	e011      	b.n	8003eec <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fe70 	bl	8001bac <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d908      	bls.n	8003eec <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e16b      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d021      	beq.n	8003f4c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f18:	e011      	b.n	8003f3e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fd fe47 	bl	8001bac <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d908      	bls.n	8003f3e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e142      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e6      	bne.n	8003f1a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f4c:	7ffb      	ldrb	r3, [r7, #31]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d04f      	beq.n	800400a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_RCC_OscConfig+0x760>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fd fe13 	bl	8001bac <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f88:	e014      	b.n	8003fb4 <HAL_RCC_OscConfig+0x788>
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f94:	f7fd fe0a 	bl	8001bac <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d908      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa2:	4b8a      	ldr	r3, [pc, #552]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8003fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e107      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fb4:	4b85      	ldr	r3, [pc, #532]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8003fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0e8      	beq.n	8003f94 <HAL_RCC_OscConfig+0x768>
 8003fc2:	e022      	b.n	800400a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fc4:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8003fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fca:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fd fdea 	bl	8001bac <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fda:	e00f      	b.n	8003ffc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fdc:	f7fd fde6 	bl	8001bac <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d908      	bls.n	8003ffc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8003fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e0e3      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ffc:	4b73      	ldr	r3, [pc, #460]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8003ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e8      	bne.n	8003fdc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80d7 	beq.w	80041c2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004014:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b0c      	cmp	r3, #12
 800401e:	f000 8091 	beq.w	8004144 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	2b02      	cmp	r3, #2
 8004028:	d166      	bne.n	80040f8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a67      	ldr	r2, [pc, #412]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8004030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fd fdb9 	bl	8001bac <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403c:	e00e      	b.n	800405c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fd fdb5 	bl	8001bac <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d907      	bls.n	800405c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	4b5f      	ldr	r3, [pc, #380]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0b3      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405c:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1ea      	bne.n	800403e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004068:	4b58      	ldr	r3, [pc, #352]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <HAL_RCC_OscConfig+0x9a4>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004078:	3a01      	subs	r2, #1
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004082:	0212      	lsls	r2, r2, #8
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800408a:	0852      	lsrs	r2, r2, #1
 800408c:	3a01      	subs	r2, #1
 800408e:	0552      	lsls	r2, r2, #21
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	3a01      	subs	r2, #1
 800409a:	0652      	lsls	r2, r2, #25
 800409c:	4311      	orrs	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040a2:	06d2      	lsls	r2, r2, #27
 80040a4:	430a      	orrs	r2, r1
 80040a6:	4949      	ldr	r1, [pc, #292]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ac:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a46      	ldr	r2, [pc, #280]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b8:	4b44      	ldr	r3, [pc, #272]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a43      	ldr	r2, [pc, #268]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fd72 	bl	8001bac <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	e00e      	b.n	80040ea <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd fd6e 	bl	8001bac <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d907      	bls.n	80040ea <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040da:	4b3c      	ldr	r3, [pc, #240]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e06c      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	4b38      	ldr	r3, [pc, #224]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ea      	beq.n	80040cc <HAL_RCC_OscConfig+0x8a0>
 80040f6:	e064      	b.n	80041c2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b34      	ldr	r3, [pc, #208]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a33      	ldr	r2, [pc, #204]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fd52 	bl	8001bac <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410a:	e00e      	b.n	800412a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fd4e 	bl	8001bac <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d907      	bls.n	800412a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411a:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04c      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412a:	4b28      	ldr	r3, [pc, #160]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ea      	bne.n	800410c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004136:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	4924      	ldr	r1, [pc, #144]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_RCC_OscConfig+0x9a8>)
 800413e:	4013      	ands	r3, r2
 8004140:	60cb      	str	r3, [r1, #12]
 8004142:	e03e      	b.n	80041c2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e039      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <HAL_RCC_OscConfig+0x9a0>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0203 	and.w	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	429a      	cmp	r2, r3
 8004162:	d12c      	bne.n	80041be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	3b01      	subs	r3, #1
 8004170:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d123      	bne.n	80041be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d11b      	bne.n	80041be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d113      	bne.n	80041be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	085b      	lsrs	r3, r3, #1
 80041a2:	3b01      	subs	r3, #1
 80041a4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d109      	bne.n	80041be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	019f800c 	.word	0x019f800c
 80041d4:	feeefffc 	.word	0xfeeefffc

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e11c      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b90      	ldr	r3, [pc, #576]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b8d      	ldr	r3, [pc, #564]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 020f 	bic.w	r2, r3, #15
 8004206:	498b      	ldr	r1, [pc, #556]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b89      	ldr	r3, [pc, #548]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e104      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b81      	ldr	r3, [pc, #516]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004238:	429a      	cmp	r2, r3
 800423a:	d908      	bls.n	800424e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b7e      	ldr	r3, [pc, #504]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	497b      	ldr	r1, [pc, #492]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8085 	beq.w	8004366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d11f      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004264:	4b74      	ldr	r3, [pc, #464]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0da      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004274:	f000 fa26 	bl	80046c4 <RCC_GetSysClockFreqFromPLLSource>
 8004278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4a6f      	ldr	r2, [pc, #444]	; (800443c <HAL_RCC_ClockConfig+0x264>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d947      	bls.n	8004312 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004282:	4b6d      	ldr	r3, [pc, #436]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d141      	bne.n	8004312 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800428e:	4b6a      	ldr	r3, [pc, #424]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004296:	4a68      	ldr	r2, [pc, #416]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e036      	b.n	8004312 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ac:	4b62      	ldr	r3, [pc, #392]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d115      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0b6      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c4:	4b5c      	ldr	r3, [pc, #368]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0aa      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d4:	4b58      	ldr	r3, [pc, #352]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0a2      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042e4:	f000 f8b0 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4a53      	ldr	r2, [pc, #332]	; (800443c <HAL_RCC_ClockConfig+0x264>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d90f      	bls.n	8004312 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042f2:	4b51      	ldr	r3, [pc, #324]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042fe:	4b4e      	ldr	r3, [pc, #312]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004306:	4a4c      	ldr	r2, [pc, #304]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b49      	ldr	r3, [pc, #292]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4946      	ldr	r1, [pc, #280]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004324:	f7fd fc42 	bl	8001bac <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e013      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fd fc3e 	bl	8001bac <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d90a      	bls.n	8004354 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	4b3e      	ldr	r3, [pc, #248]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 020c 	and.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e06a      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004354:	4b38      	ldr	r3, [pc, #224]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 020c 	and.w	r2, r3, #12
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	429a      	cmp	r2, r3
 8004364:	d1e2      	bne.n	800432c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d105      	bne.n	8004378 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800436c:	4b32      	ldr	r3, [pc, #200]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a31      	ldr	r2, [pc, #196]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004376:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004390:	429a      	cmp	r2, r3
 8004392:	d208      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4925      	ldr	r1, [pc, #148]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d210      	bcs.n	80043d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b4:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 020f 	bic.w	r2, r3, #15
 80043bc:	491d      	ldr	r1, [pc, #116]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_RCC_ClockConfig+0x25c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e029      	b.n	800442a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4912      	ldr	r1, [pc, #72]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	490a      	ldr	r1, [pc, #40]	; (8004438 <HAL_RCC_ClockConfig+0x260>)
 8004410:	4313      	orrs	r3, r2
 8004412:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004414:	f000 f8b6 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 8004418:	4603      	mov	r3, r0
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x268>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_ClockConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd fb72 	bl	8001b0c <HAL_InitTick>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40022000 	.word	0x40022000
 8004438:	40021000 	.word	0x40021000
 800443c:	04c4b400 	.word	0x04c4b400
 8004440:	20000000 	.word	0x20000000
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004460:	4b44      	ldr	r3, [pc, #272]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x34>
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d121      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d11e      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800447c:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e005      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004498:	4b36      	ldr	r3, [pc, #216]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80044a4:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_RCC_GetSysClockFreq+0x130>)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ac:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d102      	bne.n	80044c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c0:	4b2e      	ldr	r3, [pc, #184]	; (800457c <HAL_RCC_GetSysClockFreq+0x134>)
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e004      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044cc:	4b2c      	ldr	r3, [pc, #176]	; (8004580 <HAL_RCC_GetSysClockFreq+0x138>)
 80044ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d146      	bne.n	8004564 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80044d6:	4b27      	ldr	r3, [pc, #156]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044e0:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	3301      	adds	r3, #1
 80044ec:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d003      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0xb4>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d00d      	beq.n	8004516 <HAL_RCC_GetSysClockFreq+0xce>
 80044fa:	e019      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044fc:	4a1f      	ldr	r2, [pc, #124]	; (800457c <HAL_RCC_GetSysClockFreq+0x134>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004506:	68d2      	ldr	r2, [r2, #12]
 8004508:	0a12      	lsrs	r2, r2, #8
 800450a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	617b      	str	r3, [r7, #20]
        break;
 8004514:	e019      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004516:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <HAL_RCC_GetSysClockFreq+0x138>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	fbb2 f3f3 	udiv	r3, r2, r3
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004520:	68d2      	ldr	r2, [r2, #12]
 8004522:	0a12      	lsrs	r2, r2, #8
 8004524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
        break;
 800452e:	e00c      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 800453a:	68d2      	ldr	r2, [r2, #12]
 800453c:	0a12      	lsrs	r2, r2, #8
 800453e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	617b      	str	r3, [r7, #20]
        break;
 8004548:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RCC_GetSysClockFreq+0x12c>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	0e5b      	lsrs	r3, r3, #25
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	3301      	adds	r3, #1
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004564:	69bb      	ldr	r3, [r7, #24]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3724      	adds	r7, #36	; 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	08006834 	.word	0x08006834
 800457c:	00f42400 	.word	0x00f42400
 8004580:	007a1200 	.word	0x007a1200

08004584 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004588:	f7ff ff5e 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	4903      	ldr	r1, [pc, #12]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	0800681c 	.word	0x0800681c

080045ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045b0:	f7ff ffe8 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4903      	ldr	r1, [pc, #12]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	0800682c 	.word	0x0800682c

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045d8:	f7ff ffd4 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0adb      	lsrs	r3, r3, #11
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	0800682c 	.word	0x0800682c

080045fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004614:	f7ff f86c 	bl	80036f0 <HAL_PWREx_GetVoltageRange>
 8004618:	6138      	str	r0, [r7, #16]
 800461a:	e014      	b.n	8004646 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	4b27      	ldr	r3, [pc, #156]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	4a26      	ldr	r2, [pc, #152]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004626:	6593      	str	r3, [r2, #88]	; 0x58
 8004628:	4b24      	ldr	r3, [pc, #144]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004634:	f7ff f85c 	bl	80036f0 <HAL_PWREx_GetVoltageRange>
 8004638:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004644:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004652:	d10b      	bne.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d919      	bls.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2ba0      	cmp	r3, #160	; 0xa0
 800465e:	d902      	bls.n	8004666 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004660:	2302      	movs	r3, #2
 8004662:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004664:	e013      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800466a:	e010      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d902      	bls.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004672:	2303      	movs	r3, #3
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e00a      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d102      	bne.n	8004684 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800467e:	2302      	movs	r3, #2
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e004      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b70      	cmp	r3, #112	; 0x70
 8004688:	d101      	bne.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 020f 	bic.w	r2, r3, #15
 8004696:	490a      	ldr	r1, [pc, #40]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40022000 	.word	0x40022000

080046c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ca:	4b31      	ldr	r3, [pc, #196]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046d4:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	3301      	adds	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d015      	beq.n	8004714 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d839      	bhi.n	8004762 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d01c      	beq.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d133      	bne.n	8004762 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	4a23      	ldr	r2, [pc, #140]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004704:	68d2      	ldr	r2, [r2, #12]
 8004706:	0a12      	lsrs	r2, r2, #8
 8004708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	613b      	str	r3, [r7, #16]
      break;
 8004712:	e029      	b.n	8004768 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004714:	4a20      	ldr	r2, [pc, #128]	; (8004798 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800471e:	68d2      	ldr	r2, [r2, #12]
 8004720:	0a12      	lsrs	r2, r2, #8
 8004722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	613b      	str	r3, [r7, #16]
      break;
 800472c:	e01c      	b.n	8004768 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800472e:	4b18      	ldr	r3, [pc, #96]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d107      	bne.n	800474a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e005      	b.n	8004756 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004756:	4a11      	ldr	r2, [pc, #68]	; (800479c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475e:	613b      	str	r3, [r7, #16]
        break;
 8004760:	e002      	b.n	8004768 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
      break;
 8004766:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004768:	4b09      	ldr	r3, [pc, #36]	; (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0e5b      	lsrs	r3, r3, #25
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004782:	683b      	ldr	r3, [r7, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40021000 	.word	0x40021000
 8004794:	00f42400 	.word	0x00f42400
 8004798:	007a1200 	.word	0x007a1200
 800479c:	08006834 	.word	0x08006834

080047a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ac:	2300      	movs	r3, #0
 80047ae:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d040      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d02a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d825      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047c8:	2b60      	cmp	r3, #96	; 0x60
 80047ca:	d026      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047cc:	2b60      	cmp	r3, #96	; 0x60
 80047ce:	d821      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d006      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d81d      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d010      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80047e0:	e018      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047e2:	4b8f      	ldr	r3, [pc, #572]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4a8e      	ldr	r2, [pc, #568]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047ee:	e015      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fb56 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004800:	e00c      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3320      	adds	r3, #32
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fc33 	bl	8005074 <RCCEx_PLLSAI2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	77fb      	strb	r3, [r7, #31]
        break;
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800481a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481c:	7ffb      	ldrb	r3, [r7, #31]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004822:	4b7f      	ldr	r3, [pc, #508]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004828:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004830:	497b      	ldr	r1, [pc, #492]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004838:	e001      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d047      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d030      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d82a      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800485a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485e:	d02a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004864:	d824      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486a:	d008      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800486c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004870:	d81e      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487a:	d010      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800487c:	e018      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800487e:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a67      	ldr	r2, [pc, #412]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800488a:	e015      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fb08 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800489c:	e00c      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3320      	adds	r3, #32
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fbe5 	bl	8005074 <RCCEx_PLLSAI2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
        break;
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	7ffb      	ldrb	r3, [r7, #31]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10b      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048be:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	4954      	ldr	r1, [pc, #336]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80048d4:	e001      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	7ffb      	ldrb	r3, [r7, #31]
 80048d8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80ab 	beq.w	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e8:	2300      	movs	r3, #0
 80048ea:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b49      	ldr	r3, [pc, #292]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	4a48      	ldr	r2, [pc, #288]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	6593      	str	r3, [r2, #88]	; 0x58
 8004904:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004914:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a42      	ldr	r2, [pc, #264]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800491a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004920:	f7fd f944 	bl	8001bac <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004926:	e00f      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004928:	f7fd f940 	bl	8001bac <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d908      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004936:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004946:	e006      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004948:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0e9      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004956:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004958:	7ffb      	ldrb	r3, [r7, #31]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d164      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800495e:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004968:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	429a      	cmp	r2, r3
 800497a:	d019      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800497c:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004986:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	4a20      	ldr	r2, [pc, #128]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01f      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fd f8f7 	bl	8001bac <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c0:	e012      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd f8f3 	bl	8001bac <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d909      	bls.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80049e6:	e007      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0e5      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80049f6:	e000      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80049f8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	4903      	ldr	r1, [pc, #12]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a18:	e008      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a1a:	7ffb      	ldrb	r3, [r7, #31]
 8004a1c:	77bb      	strb	r3, [r7, #30]
 8004a1e:	e005      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	7ffb      	ldrb	r3, [r7, #31]
 8004a2a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a32:	4b9c      	ldr	r3, [pc, #624]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	4a9b      	ldr	r2, [pc, #620]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4a:	4b96      	ldr	r3, [pc, #600]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f023 0203 	bic.w	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	4992      	ldr	r1, [pc, #584]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a6c:	4b8d      	ldr	r3, [pc, #564]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f023 020c 	bic.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	498a      	ldr	r1, [pc, #552]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a8e:	4b85      	ldr	r3, [pc, #532]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	4981      	ldr	r1, [pc, #516]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab0:	4b7c      	ldr	r3, [pc, #496]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	4979      	ldr	r1, [pc, #484]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad2:	4b74      	ldr	r3, [pc, #464]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	4970      	ldr	r1, [pc, #448]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004af4:	4b6b      	ldr	r3, [pc, #428]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	4968      	ldr	r1, [pc, #416]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	495f      	ldr	r1, [pc, #380]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b38:	4b5a      	ldr	r3, [pc, #360]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b46:	4957      	ldr	r1, [pc, #348]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004b5a:	4b52      	ldr	r3, [pc, #328]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b68:	494e      	ldr	r1, [pc, #312]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d031      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b84:	d00e      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b8a:	d814      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b94:	d10f      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b96:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004ba2:	e00c      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f97c 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004bb4:	e003      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	77fb      	strb	r3, [r7, #31]
        break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	7ffb      	ldrb	r3, [r7, #31]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bc4:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd2:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7ffb      	ldrb	r3, [r7, #31]
 8004bde:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bec:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	492a      	ldr	r1, [pc, #168]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	4921      	ldr	r1, [pc, #132]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	4919      	ldr	r1, [pc, #100]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c58:	f023 0203 	bic.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	4910      	ldr	r1, [pc, #64]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02b      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c82:	4908      	ldr	r1, [pc, #32]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c92:	d109      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a02      	ldr	r2, [pc, #8]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9e:	60d3      	str	r3, [r2, #12]
 8004ca0:	e014      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f8f5 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d04a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce0:	d108      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004ce2:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ce8:	4a6e      	ldr	r2, [pc, #440]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004cf2:	e012      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004cf4:	4b6b      	ldr	r3, [pc, #428]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d02:	4968      	ldr	r1, [pc, #416]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d0a:	4b66      	ldr	r3, [pc, #408]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d10:	4a64      	ldr	r2, [pc, #400]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f8bc 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d019      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004d3a:	7ffb      	ldrb	r3, [r7, #31]
 8004d3c:	77bb      	strb	r3, [r7, #30]
 8004d3e:	e016      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d48:	d106      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d4a:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4a55      	ldr	r2, [pc, #340]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d54:	60d3      	str	r3, [r2, #12]
 8004d56:	e00a      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d60:	d105      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d62:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	4a4f      	ldr	r2, [pc, #316]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d028      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d88:	4946      	ldr	r1, [pc, #280]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d98:	d106      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9a:	4b42      	ldr	r3, [pc, #264]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	4a41      	ldr	r2, [pc, #260]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004da0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da4:	60d3      	str	r3, [r2, #12]
 8004da6:	e011      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2101      	movs	r1, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f875 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
 8004dca:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de8:	492e      	ldr	r1, [pc, #184]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	2102      	movs	r1, #2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f850 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004e12:	7ffb      	ldrb	r3, [r7, #31]
 8004e14:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e28:	f023 0204 	bic.w	r2, r3, #4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e32:	491c      	ldr	r1, [pc, #112]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e46:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e4c:	f023 0218 	bic.w	r2, r3, #24
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	4913      	ldr	r1, [pc, #76]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7a:	490a      	ldr	r1, [pc, #40]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e8c:	d105      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e98:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004e9a:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d018      	beq.n	8004ef0 <RCCEx_PLLSAI1_Config+0x48>
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d81f      	bhi.n	8004f02 <RCCEx_PLLSAI1_Config+0x5a>
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d002      	beq.n	8004ecc <RCCEx_PLLSAI1_Config+0x24>
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d009      	beq.n	8004ede <RCCEx_PLLSAI1_Config+0x36>
 8004eca:	e01a      	b.n	8004f02 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ecc:	4b65      	ldr	r3, [pc, #404]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d117      	bne.n	8004f08 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004edc:	e014      	b.n	8004f08 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ede:	4b61      	ldr	r3, [pc, #388]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d110      	bne.n	8004f0c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eee:	e00d      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004ef0:	4b5c      	ldr	r3, [pc, #368]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e006      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      break;
 8004f06:	e004      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004f08:	bf00      	nop
 8004f0a:	e002      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004f0c:	bf00      	nop
 8004f0e:	e000      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004f10:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 809f 	bne.w	8005058 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f1a:	4b52      	ldr	r3, [pc, #328]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a51      	ldr	r2, [pc, #324]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f26:	f7fc fe41 	bl	8001bac <HAL_GetTick>
 8004f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f2c:	e00f      	b.n	8004f4e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f2e:	f7fc fe3d 	bl	8001bac <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d908      	bls.n	8004f4e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f3c:	4b49      	ldr	r3, [pc, #292]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f4c:	e006      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f4e:	4b45      	ldr	r3, [pc, #276]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e9      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0x86>
 8004f5a:	e000      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004f5c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d179      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f6a:	4b3e      	ldr	r3, [pc, #248]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6892      	ldr	r2, [r2, #8]
 8004f76:	0211      	lsls	r1, r2, #8
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68d2      	ldr	r2, [r2, #12]
 8004f7c:	06d2      	lsls	r2, r2, #27
 8004f7e:	4311      	orrs	r1, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	3a01      	subs	r2, #1
 8004f86:	0112      	lsls	r2, r2, #4
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	4934      	ldr	r1, [pc, #208]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
 8004f96:	e033      	b.n	8005000 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d118      	bne.n	8004fd0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f9e:	4b31      	ldr	r3, [pc, #196]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	4b32      	ldr	r3, [pc, #200]	; (800506c <RCCEx_PLLSAI1_Config+0x1c4>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6892      	ldr	r2, [r2, #8]
 8004faa:	0211      	lsls	r1, r2, #8
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6912      	ldr	r2, [r2, #16]
 8004fb0:	0852      	lsrs	r2, r2, #1
 8004fb2:	3a01      	subs	r2, #1
 8004fb4:	0552      	lsls	r2, r2, #21
 8004fb6:	4311      	orrs	r1, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6852      	ldr	r2, [r2, #4]
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	4926      	ldr	r1, [pc, #152]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]
 8004fce:	e017      	b.n	8005000 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	4b26      	ldr	r3, [pc, #152]	; (8005070 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6952      	ldr	r2, [r2, #20]
 8004fe2:	0852      	lsrs	r2, r2, #1
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0652      	lsls	r2, r2, #25
 8004fe8:	4311      	orrs	r1, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6852      	ldr	r2, [r2, #4]
 8004fee:	3a01      	subs	r2, #1
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	491a      	ldr	r1, [pc, #104]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005000:	4b18      	ldr	r3, [pc, #96]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a17      	ldr	r2, [pc, #92]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800500a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fc fdce 	bl	8001bac <HAL_GetTick>
 8005010:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005012:	e00f      	b.n	8005034 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005014:	f7fc fdca 	bl	8001bac <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d908      	bls.n	8005034 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005032:	e006      	b.n	8005042 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0e9      	beq.n	8005014 <RCCEx_PLLSAI1_Config+0x16c>
 8005040:	e000      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005042:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	4904      	ldr	r1, [pc, #16]	; (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000
 8005068:	07ff800c 	.word	0x07ff800c
 800506c:	ff9f800c 	.word	0xff9f800c
 8005070:	f9ff800c 	.word	0xf9ff800c

08005074 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d018      	beq.n	80050bc <RCCEx_PLLSAI2_Config+0x48>
 800508a:	2b03      	cmp	r3, #3
 800508c:	d81f      	bhi.n	80050ce <RCCEx_PLLSAI2_Config+0x5a>
 800508e:	2b01      	cmp	r3, #1
 8005090:	d002      	beq.n	8005098 <RCCEx_PLLSAI2_Config+0x24>
 8005092:	2b02      	cmp	r3, #2
 8005094:	d009      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x36>
 8005096:	e01a      	b.n	80050ce <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005098:	4b4a      	ldr	r3, [pc, #296]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d117      	bne.n	80050d4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e014      	b.n	80050d4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d110      	bne.n	80050d8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e00d      	b.n	80050d8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80050bc:	4b41      	ldr	r3, [pc, #260]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050cc:	e006      	b.n	80050dc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      break;
 80050d2:	e004      	b.n	80050de <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d169      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050e4:	4b37      	ldr	r3, [pc, #220]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a36      	ldr	r2, [pc, #216]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f0:	f7fc fd5c 	bl	8001bac <HAL_GetTick>
 80050f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050f6:	e00f      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050f8:	f7fc fd58 	bl	8001bac <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d908      	bls.n	8005118 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005106:	4b2f      	ldr	r3, [pc, #188]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005116:	e006      	b.n	8005126 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005118:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e9      	bne.n	80050f8 <RCCEx_PLLSAI2_Config+0x84>
 8005124:	e000      	b.n	8005128 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005126:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d144      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d115      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005134:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <RCCEx_PLLSAI2_Config+0x154>)
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	06d2      	lsls	r2, r2, #27
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6852      	ldr	r2, [r2, #4]
 800514e:	3a01      	subs	r2, #1
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	491a      	ldr	r1, [pc, #104]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 800515c:	4313      	orrs	r3, r2
 800515e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005160:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a17      	ldr	r2, [pc, #92]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fc fd1e 	bl	8001bac <HAL_GetTick>
 8005170:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005172:	e00f      	b.n	8005194 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005174:	f7fc fd1a 	bl	8001bac <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d908      	bls.n	8005194 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005192:	e006      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0e9      	beq.n	8005174 <RCCEx_PLLSAI2_Config+0x100>
 80051a0:	e000      	b.n	80051a4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80051a2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	07ff800c 	.word	0x07ff800c

080051cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d066      	beq.n	80052ac <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fc f888 	bl	8001308 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b10      	cmp	r3, #16
 800520c:	d045      	beq.n	800529a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RTC_Init+0xec>)
 8005210:	22ca      	movs	r2, #202	; 0xca
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
 8005214:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <HAL_RTC_Init+0xec>)
 8005216:	2253      	movs	r2, #83	; 0x53
 8005218:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f872 	bl	8005304 <RTC_EnterInitMode>
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d121      	bne.n	800526e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800522a:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <HAL_RTC_Init+0xec>)
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	4a22      	ldr	r2, [pc, #136]	; (80052b8 <HAL_RTC_Init+0xec>)
 8005230:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005238:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800523a:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <HAL_RTC_Init+0xec>)
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	4319      	orrs	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	430b      	orrs	r3, r1
 800524e:	491a      	ldr	r1, [pc, #104]	; (80052b8 <HAL_RTC_Init+0xec>)
 8005250:	4313      	orrs	r3, r2
 8005252:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	4916      	ldr	r1, [pc, #88]	; (80052b8 <HAL_RTC_Init+0xec>)
 8005260:	4313      	orrs	r3, r2
 8005262:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f881 	bl	800536c <RTC_ExitInitMode>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10e      	bne.n	8005292 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HAL_RTC_Init+0xec>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a19      	ldr	r1, [r3, #32]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	4319      	orrs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	430b      	orrs	r3, r1
 800528c:	490a      	ldr	r1, [pc, #40]	; (80052b8 <HAL_RTC_Init+0xec>)
 800528e:	4313      	orrs	r3, r2
 8005290:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005292:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <HAL_RTC_Init+0xec>)
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	625a      	str	r2, [r3, #36]	; 0x24
 8005298:	e001      	b.n	800529e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40002800 	.word	0x40002800

080052bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <HAL_RTC_WaitForSynchro+0x40>)
 80052c6:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <HAL_RTC_WaitForSynchro+0x44>)
 80052c8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052ca:	f7fc fc6f 	bl	8001bac <HAL_GetTick>
 80052ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80052d0:	e009      	b.n	80052e6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052d2:	f7fc fc6b 	bl	8001bac <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e0:	d901      	bls.n	80052e6 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e006      	b.n	80052f4 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RTC_WaitForSynchro+0x40>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ef      	beq.n	80052d2 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40002800 	.word	0x40002800
 8005300:	0001005c 	.word	0x0001005c

08005304 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <RTC_EnterInitMode+0x64>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d120      	bne.n	800535e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800531c:	4b12      	ldr	r3, [pc, #72]	; (8005368 <RTC_EnterInitMode+0x64>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <RTC_EnterInitMode+0x64>)
 8005322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005326:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005328:	f7fc fc40 	bl	8001bac <HAL_GetTick>
 800532c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800532e:	e00d      	b.n	800534c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005330:	f7fc fc3c 	bl	8001bac <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533e:	d905      	bls.n	800534c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2203      	movs	r2, #3
 8005348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <RTC_EnterInitMode+0x64>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <RTC_EnterInitMode+0x5a>
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d1e8      	bne.n	8005330 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40002800 	.word	0x40002800

0800536c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005378:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <RTC_ExitInitMode+0x78>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <RTC_ExitInitMode+0x78>)
 800537e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005382:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <RTC_ExitInitMode+0x78>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10c      	bne.n	80053aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ff93 	bl	80052bc <HAL_RTC_WaitForSynchro>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01e      	beq.n	80053da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2203      	movs	r2, #3
 80053a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	e017      	b.n	80053da <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <RTC_ExitInitMode+0x78>)
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <RTC_ExitInitMode+0x78>)
 80053b0:	f023 0320 	bic.w	r3, r3, #32
 80053b4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ff80 	bl	80052bc <HAL_RTC_WaitForSynchro>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2203      	movs	r2, #3
 80053c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <RTC_ExitInitMode+0x78>)
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <RTC_ExitInitMode+0x78>)
 80053d4:	f043 0320 	orr.w	r3, r3, #32
 80053d8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40002800 	.word	0x40002800

080053e8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	490f      	ldr	r1, [pc, #60]	; (8005438 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	490c      	ldr	r1, [pc, #48]	; (800543c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800540a:	4313      	orrs	r3, r2
 800540c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6919      	ldr	r1, [r3, #16]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	430b      	orrs	r3, r1
 8005422:	4906      	ldr	r1, [pc, #24]	; (800543c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005424:	4313      	orrs	r3, r2
 8005426:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40002800 	.word	0x40002800
 800543c:	40003400 	.word	0x40003400

08005440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e042      	b.n	80054d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fc f9a9 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2224      	movs	r2, #36	; 0x24
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f982 	bl	800578c <UART_SetConfig>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e022      	b.n	80054d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fc76 	bl	8005d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fcfd 	bl	8005ed0 <UART_CheckIdleState>
 80054d6:	4603      	mov	r3, r0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d17b      	bne.n	80055f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_UART_Transmit+0x26>
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e074      	b.n	80055f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2221      	movs	r2, #33	; 0x21
 8005516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800551a:	f7fc fb47 	bl	8001bac <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005538:	d108      	bne.n	800554c <HAL_UART_Transmit+0x6c>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e003      	b.n	8005554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005554:	e030      	b.n	80055b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2180      	movs	r1, #128	; 0x80
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fd5f 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e03d      	b.n	80055f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800558c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	3302      	adds	r3, #2
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e007      	b.n	80055a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1c8      	bne.n	8005556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	2140      	movs	r1, #64	; 0x40
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fd28 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e006      	b.n	80055f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005612:	2b20      	cmp	r3, #32
 8005614:	f040 80b5 	bne.w	8005782 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Receive+0x28>
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0ad      	b.n	8005784 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2222      	movs	r2, #34	; 0x22
 8005634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563e:	f7fc fab5 	bl	8001bac <HAL_GetTick>
 8005642:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565c:	d10e      	bne.n	800567c <HAL_UART_Receive+0x80>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d105      	bne.n	8005672 <HAL_UART_Receive+0x76>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f240 12ff 	movw	r2, #511	; 0x1ff
 800566c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005670:	e02d      	b.n	80056ce <HAL_UART_Receive+0xd2>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800567a:	e028      	b.n	80056ce <HAL_UART_Receive+0xd2>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10d      	bne.n	80056a0 <HAL_UART_Receive+0xa4>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <HAL_UART_Receive+0x9a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	22ff      	movs	r2, #255	; 0xff
 8005690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005694:	e01b      	b.n	80056ce <HAL_UART_Receive+0xd2>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	227f      	movs	r2, #127	; 0x7f
 800569a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800569e:	e016      	b.n	80056ce <HAL_UART_Receive+0xd2>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a8:	d10d      	bne.n	80056c6 <HAL_UART_Receive+0xca>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Receive+0xc0>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	227f      	movs	r2, #127	; 0x7f
 80056b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056ba:	e008      	b.n	80056ce <HAL_UART_Receive+0xd2>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	223f      	movs	r2, #63	; 0x3f
 80056c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056c4:	e003      	b.n	80056ce <HAL_UART_Receive+0xd2>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	d108      	bne.n	80056f2 <HAL_UART_Receive+0xf6>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	e003      	b.n	80056fa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056fa:	e036      	b.n	800576a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	2120      	movs	r1, #32
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fc8c 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e032      	b.n	8005784 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10c      	bne.n	800573e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	b29a      	uxth	r2, r3
 800572c:	8a7b      	ldrh	r3, [r7, #18]
 800572e:	4013      	ands	r3, r2
 8005730:	b29a      	uxth	r2, r3
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3302      	adds	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e00c      	b.n	8005758 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	b2da      	uxtb	r2, r3
 8005746:	8a7b      	ldrh	r3, [r7, #18]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	4013      	ands	r3, r2
 800574c:	b2da      	uxtb	r2, r3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	3301      	adds	r3, #1
 8005756:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1c2      	bne.n	80056fc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b08c      	sub	sp, #48	; 0x30
 8005792:	af00      	add	r7, sp, #0
 8005794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4baa      	ldr	r3, [pc, #680]	; (8005a64 <UART_SetConfig+0x2d8>)
 80057bc:	4013      	ands	r3, r2
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a9f      	ldr	r2, [pc, #636]	; (8005a68 <UART_SetConfig+0x2dc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f4:	4313      	orrs	r3, r2
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005802:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	6812      	ldr	r2, [r2, #0]
 800580a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580c:	430b      	orrs	r3, r1
 800580e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	f023 010f 	bic.w	r1, r3, #15
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a90      	ldr	r2, [pc, #576]	; (8005a6c <UART_SetConfig+0x2e0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d125      	bne.n	800587c <UART_SetConfig+0xf0>
 8005830:	4b8f      	ldr	r3, [pc, #572]	; (8005a70 <UART_SetConfig+0x2e4>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b03      	cmp	r3, #3
 800583c:	d81a      	bhi.n	8005874 <UART_SetConfig+0xe8>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <UART_SetConfig+0xb8>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005855 	.word	0x08005855
 8005848:	08005865 	.word	0x08005865
 800584c:	0800585d 	.word	0x0800585d
 8005850:	0800586d 	.word	0x0800586d
 8005854:	2301      	movs	r3, #1
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e116      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800585c:	2302      	movs	r3, #2
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e112      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586a:	e10e      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005872:	e10a      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587a:	e106      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a7c      	ldr	r2, [pc, #496]	; (8005a74 <UART_SetConfig+0x2e8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d138      	bne.n	80058f8 <UART_SetConfig+0x16c>
 8005886:	4b7a      	ldr	r3, [pc, #488]	; (8005a70 <UART_SetConfig+0x2e4>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f003 030c 	and.w	r3, r3, #12
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d82d      	bhi.n	80058f0 <UART_SetConfig+0x164>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <UART_SetConfig+0x110>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058d1 	.word	0x080058d1
 80058a0:	080058f1 	.word	0x080058f1
 80058a4:	080058f1 	.word	0x080058f1
 80058a8:	080058f1 	.word	0x080058f1
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080058f1 	.word	0x080058f1
 80058b4:	080058f1 	.word	0x080058f1
 80058b8:	080058f1 	.word	0x080058f1
 80058bc:	080058d9 	.word	0x080058d9
 80058c0:	080058f1 	.word	0x080058f1
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058e9 	.word	0x080058e9
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e0d8      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80058d8:	2302      	movs	r3, #2
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e0d4      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e6:	e0d0      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ee:	e0cc      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f6:	e0c8      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a5e      	ldr	r2, [pc, #376]	; (8005a78 <UART_SetConfig+0x2ec>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d125      	bne.n	800594e <UART_SetConfig+0x1c2>
 8005902:	4b5b      	ldr	r3, [pc, #364]	; (8005a70 <UART_SetConfig+0x2e4>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800590c:	2b30      	cmp	r3, #48	; 0x30
 800590e:	d016      	beq.n	800593e <UART_SetConfig+0x1b2>
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d818      	bhi.n	8005946 <UART_SetConfig+0x1ba>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d00a      	beq.n	800592e <UART_SetConfig+0x1a2>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d814      	bhi.n	8005946 <UART_SetConfig+0x1ba>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <UART_SetConfig+0x19a>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d008      	beq.n	8005936 <UART_SetConfig+0x1aa>
 8005924:	e00f      	b.n	8005946 <UART_SetConfig+0x1ba>
 8005926:	2300      	movs	r3, #0
 8005928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592c:	e0ad      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800592e:	2302      	movs	r3, #2
 8005930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005934:	e0a9      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005936:	2304      	movs	r3, #4
 8005938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593c:	e0a5      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800593e:	2308      	movs	r3, #8
 8005940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005944:	e0a1      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005946:	2310      	movs	r3, #16
 8005948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800594c:	e09d      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a4a      	ldr	r2, [pc, #296]	; (8005a7c <UART_SetConfig+0x2f0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d125      	bne.n	80059a4 <UART_SetConfig+0x218>
 8005958:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <UART_SetConfig+0x2e4>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005962:	2bc0      	cmp	r3, #192	; 0xc0
 8005964:	d016      	beq.n	8005994 <UART_SetConfig+0x208>
 8005966:	2bc0      	cmp	r3, #192	; 0xc0
 8005968:	d818      	bhi.n	800599c <UART_SetConfig+0x210>
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d00a      	beq.n	8005984 <UART_SetConfig+0x1f8>
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d814      	bhi.n	800599c <UART_SetConfig+0x210>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <UART_SetConfig+0x1f0>
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d008      	beq.n	800598c <UART_SetConfig+0x200>
 800597a:	e00f      	b.n	800599c <UART_SetConfig+0x210>
 800597c:	2300      	movs	r3, #0
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005982:	e082      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005984:	2302      	movs	r3, #2
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598a:	e07e      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e07a      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599a:	e076      	b.n	8005a8a <UART_SetConfig+0x2fe>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a2:	e072      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a35      	ldr	r2, [pc, #212]	; (8005a80 <UART_SetConfig+0x2f4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d12a      	bne.n	8005a04 <UART_SetConfig+0x278>
 80059ae:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <UART_SetConfig+0x2e4>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059bc:	d01a      	beq.n	80059f4 <UART_SetConfig+0x268>
 80059be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c2:	d81b      	bhi.n	80059fc <UART_SetConfig+0x270>
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c8:	d00c      	beq.n	80059e4 <UART_SetConfig+0x258>
 80059ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ce:	d815      	bhi.n	80059fc <UART_SetConfig+0x270>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <UART_SetConfig+0x250>
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d8:	d008      	beq.n	80059ec <UART_SetConfig+0x260>
 80059da:	e00f      	b.n	80059fc <UART_SetConfig+0x270>
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e052      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e04e      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e04a      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fa:	e046      	b.n	8005a8a <UART_SetConfig+0x2fe>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a02:	e042      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <UART_SetConfig+0x2dc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d13a      	bne.n	8005a84 <UART_SetConfig+0x2f8>
 8005a0e:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <UART_SetConfig+0x2e4>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a1c:	d01a      	beq.n	8005a54 <UART_SetConfig+0x2c8>
 8005a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a22:	d81b      	bhi.n	8005a5c <UART_SetConfig+0x2d0>
 8005a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a28:	d00c      	beq.n	8005a44 <UART_SetConfig+0x2b8>
 8005a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2e:	d815      	bhi.n	8005a5c <UART_SetConfig+0x2d0>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <UART_SetConfig+0x2b0>
 8005a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a38:	d008      	beq.n	8005a4c <UART_SetConfig+0x2c0>
 8005a3a:	e00f      	b.n	8005a5c <UART_SetConfig+0x2d0>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e022      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005a44:	2302      	movs	r3, #2
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e01e      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a52:	e01a      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5a:	e016      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a62:	e012      	b.n	8005a8a <UART_SetConfig+0x2fe>
 8005a64:	cfff69f3 	.word	0xcfff69f3
 8005a68:	40008000 	.word	0x40008000
 8005a6c:	40013800 	.word	0x40013800
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40004400 	.word	0x40004400
 8005a78:	40004800 	.word	0x40004800
 8005a7c:	40004c00 	.word	0x40004c00
 8005a80:	40005000 	.word	0x40005000
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4ab0      	ldr	r2, [pc, #704]	; (8005d50 <UART_SetConfig+0x5c4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	f040 809b 	bne.w	8005bcc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d827      	bhi.n	8005aee <UART_SetConfig+0x362>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x318>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005aef 	.word	0x08005aef
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fe fd70 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8005acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ace:	e014      	b.n	8005afa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad0:	f7fe fd80 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad6:	e010      	b.n	8005afa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad8:	4b9e      	ldr	r3, [pc, #632]	; (8005d54 <UART_SetConfig+0x5c8>)
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005adc:	e00d      	b.n	8005afa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ade:	f7fe fcb3 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8005ae2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae4:	e009      	b.n	8005afa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005aec:	e005      	b.n	8005afa <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8130 	beq.w	8005d62 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	4a94      	ldr	r2, [pc, #592]	; (8005d58 <UART_SetConfig+0x5cc>)
 8005b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	4413      	add	r3, r2
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d305      	bcc.n	8005b32 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d903      	bls.n	8005b3a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b38:	e113      	b.n	8005d62 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	60fa      	str	r2, [r7, #12]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	4a84      	ldr	r2, [pc, #528]	; (8005d58 <UART_SetConfig+0x5cc>)
 8005b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2200      	movs	r2, #0
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b5c:	f7fa fb6a 	bl	8000234 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	020b      	lsls	r3, r1, #8
 8005b72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b76:	0202      	lsls	r2, r0, #8
 8005b78:	6979      	ldr	r1, [r7, #20]
 8005b7a:	6849      	ldr	r1, [r1, #4]
 8005b7c:	0849      	lsrs	r1, r1, #1
 8005b7e:	2000      	movs	r0, #0
 8005b80:	460c      	mov	r4, r1
 8005b82:	4605      	mov	r5, r0
 8005b84:	eb12 0804 	adds.w	r8, r2, r4
 8005b88:	eb43 0905 	adc.w	r9, r3, r5
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	469a      	mov	sl, r3
 8005b94:	4693      	mov	fp, r2
 8005b96:	4652      	mov	r2, sl
 8005b98:	465b      	mov	r3, fp
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa fb49 	bl	8000234 <__aeabi_uldivmod>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bb0:	d308      	bcc.n	8005bc4 <UART_SetConfig+0x438>
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb8:	d204      	bcs.n	8005bc4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a3a      	ldr	r2, [r7, #32]
 8005bc0:	60da      	str	r2, [r3, #12]
 8005bc2:	e0ce      	b.n	8005d62 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bca:	e0ca      	b.n	8005d62 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd4:	d166      	bne.n	8005ca4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8005bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d827      	bhi.n	8005c2e <UART_SetConfig+0x4a2>
 8005bde:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <UART_SetConfig+0x458>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c11 	.word	0x08005c11
 8005bec:	08005c19 	.word	0x08005c19
 8005bf0:	08005c2f 	.word	0x08005c2f
 8005bf4:	08005c1f 	.word	0x08005c1f
 8005bf8:	08005c2f 	.word	0x08005c2f
 8005bfc:	08005c2f 	.word	0x08005c2f
 8005c00:	08005c2f 	.word	0x08005c2f
 8005c04:	08005c27 	.word	0x08005c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c08:	f7fe fcd0 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8005c0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c0e:	e014      	b.n	8005c3a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c10:	f7fe fce0 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c16:	e010      	b.n	8005c3a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c18:	4b4e      	ldr	r3, [pc, #312]	; (8005d54 <UART_SetConfig+0x5c8>)
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c1c:	e00d      	b.n	8005c3a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1e:	f7fe fc13 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8005c22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c24:	e009      	b.n	8005c3a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c2c:	e005      	b.n	8005c3a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8090 	beq.w	8005d62 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	4a44      	ldr	r2, [pc, #272]	; (8005d58 <UART_SetConfig+0x5cc>)
 8005c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c54:	005a      	lsls	r2, r3, #1
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	441a      	add	r2, r3
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	d916      	bls.n	8005c9c <UART_SetConfig+0x510>
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c74:	d212      	bcs.n	8005c9c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f023 030f 	bic.w	r3, r3, #15
 8005c7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	8bfb      	ldrh	r3, [r7, #30]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	8bfa      	ldrh	r2, [r7, #30]
 8005c98:	60da      	str	r2, [r3, #12]
 8005c9a:	e062      	b.n	8005d62 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ca2:	e05e      	b.n	8005d62 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d828      	bhi.n	8005cfe <UART_SetConfig+0x572>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x528>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	08005cff 	.word	0x08005cff
 8005cc4:	08005cef 	.word	0x08005cef
 8005cc8:	08005cff 	.word	0x08005cff
 8005ccc:	08005cff 	.word	0x08005cff
 8005cd0:	08005cff 	.word	0x08005cff
 8005cd4:	08005cf7 	.word	0x08005cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd8:	f7fe fc68 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8005cdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cde:	e014      	b.n	8005d0a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fe fc78 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce6:	e010      	b.n	8005d0a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <UART_SetConfig+0x5c8>)
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cec:	e00d      	b.n	8005d0a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fe fbab 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cf4:	e009      	b.n	8005d0a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cfc:	e005      	b.n	8005d0a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d08:	bf00      	nop
    }

    if (pclk != 0U)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d028      	beq.n	8005d62 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <UART_SetConfig+0x5cc>)
 8005d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	441a      	add	r2, r3
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	d910      	bls.n	8005d5c <UART_SetConfig+0x5d0>
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d20c      	bcs.n	8005d5c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60da      	str	r2, [r3, #12]
 8005d4c:	e009      	b.n	8005d62 <UART_SetConfig+0x5d6>
 8005d4e:	bf00      	nop
 8005d50:	40008000 	.word	0x40008000
 8005d54:	00f42400 	.word	0x00f42400
 8005d58:	08006874 	.word	0x08006874
      }
      else
      {
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2200      	movs	r2, #0
 8005d76:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01a      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8a:	d10a      	bne.n	8005ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b098      	sub	sp, #96	; 0x60
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee0:	f7fb fe64 	bl	8001bac <HAL_GetTick>
 8005ee4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d12f      	bne.n	8005f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efc:	2200      	movs	r2, #0
 8005efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f88e 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d022      	beq.n	8005f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f22:	653b      	str	r3, [r7, #80]	; 0x50
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e6      	bne.n	8005f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e063      	b.n	800601c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d149      	bne.n	8005ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f857 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d03c      	beq.n	8005ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e6      	bne.n	8005f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fce:	61fa      	str	r2, [r7, #28]
 8005fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	69b9      	ldr	r1, [r7, #24]
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	617b      	str	r3, [r7, #20]
   return(result);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e5      	bne.n	8005fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e012      	b.n	800601c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3758      	adds	r7, #88	; 0x58
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006034:	e049      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d045      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fb fdb5 	bl	8001bac <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <UART_WaitOnFlagUntilTimeout+0x30>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e048      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d031      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d110      	bne.n	8006096 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2208      	movs	r2, #8
 800607a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f838 	bl	80060f2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2208      	movs	r2, #8
 8006086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e029      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a4:	d111      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f81e 	bl	80060f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e00f      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0a6      	beq.n	8006036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b095      	sub	sp, #84	; 0x54
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800610e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	643b      	str	r3, [r7, #64]	; 0x40
 800611a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800611e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	61fb      	str	r3, [r7, #28]
   return(result);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3308      	adds	r3, #8
 800614e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006150:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e3      	bne.n	800612c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d118      	bne.n	800619e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	60bb      	str	r3, [r7, #8]
   return(result);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0310 	bic.w	r3, r3, #16
 8006180:	647b      	str	r3, [r7, #68]	; 0x44
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	613b      	str	r3, [r7, #16]
   return(result);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e6      	bne.n	800616c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80061b2:	bf00      	nop
 80061b4:	3754      	adds	r7, #84	; 0x54
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e027      	b.n	8006224 <HAL_UARTEx_DisableFifoMode+0x66>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2224      	movs	r2, #36	; 0x24
 80061e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006202:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e02d      	b.n	80062a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f84f 	bl	8006328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e02d      	b.n	8006320 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2224      	movs	r2, #36	; 0x24
 80062d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f811 	bl	8006328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006334:	2b00      	cmp	r3, #0
 8006336:	d108      	bne.n	800634a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006348:	e031      	b.n	80063ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800634a:	2308      	movs	r3, #8
 800634c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800634e:	2308      	movs	r3, #8
 8006350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	0e5b      	lsrs	r3, r3, #25
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	0f5b      	lsrs	r3, r3, #29
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	7b3a      	ldrb	r2, [r7, #12]
 8006376:	4911      	ldr	r1, [pc, #68]	; (80063bc <UARTEx_SetNbDataToProcess+0x94>)
 8006378:	5c8a      	ldrb	r2, [r1, r2]
 800637a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800637e:	7b3a      	ldrb	r2, [r7, #12]
 8006380:	490f      	ldr	r1, [pc, #60]	; (80063c0 <UARTEx_SetNbDataToProcess+0x98>)
 8006382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006384:	fb93 f3f2 	sdiv	r3, r3, r2
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	7b7a      	ldrb	r2, [r7, #13]
 8006394:	4909      	ldr	r1, [pc, #36]	; (80063bc <UARTEx_SetNbDataToProcess+0x94>)
 8006396:	5c8a      	ldrb	r2, [r1, r2]
 8006398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800639c:	7b7a      	ldrb	r2, [r7, #13]
 800639e:	4908      	ldr	r1, [pc, #32]	; (80063c0 <UARTEx_SetNbDataToProcess+0x98>)
 80063a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	0800688c 	.word	0x0800688c
 80063c0:	08006894 	.word	0x08006894

080063c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b08b      	sub	sp, #44	; 0x2c
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	fa93 f3a3 	rbit	r3, r3
 80063de:	613b      	str	r3, [r7, #16]
  return result;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80063ea:	2320      	movs	r3, #32
 80063ec:	e003      	b.n	80063f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	fab3 f383 	clz	r3, r3
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	2103      	movs	r1, #3
 80063fa:	fa01 f303 	lsl.w	r3, r1, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	401a      	ands	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	fa93 f3a3 	rbit	r3, r3
 800640c:	61fb      	str	r3, [r7, #28]
  return result;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006418:	2320      	movs	r3, #32
 800641a:	e003      	b.n	8006424 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	fab3 f383 	clz	r3, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	fa01 f303 	lsl.w	r3, r1, r3
 800642c:	431a      	orrs	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	372c      	adds	r7, #44	; 0x2c
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	43db      	mvns	r3, r3
 8006452:	401a      	ands	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	431a      	orrs	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	605a      	str	r2, [r3, #4]
}
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800646e:	b480      	push	{r7}
 8006470:	b08b      	sub	sp, #44	; 0x2c
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	613b      	str	r3, [r7, #16]
  return result;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006494:	2320      	movs	r3, #32
 8006496:	e003      	b.n	80064a0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	2103      	movs	r1, #3
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	401a      	ands	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	fa93 f3a3 	rbit	r3, r3
 80064b6:	61fb      	str	r3, [r7, #28]
  return result;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80064c2:	2320      	movs	r3, #32
 80064c4:	e003      	b.n	80064ce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	fab3 f383 	clz	r3, r3
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	fa01 f303 	lsl.w	r3, r1, r3
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80064dc:	bf00      	nop
 80064de:	372c      	adds	r7, #44	; 0x2c
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b08b      	sub	sp, #44	; 0x2c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	fa93 f3a3 	rbit	r3, r3
 8006502:	613b      	str	r3, [r7, #16]
  return result;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800650e:	2320      	movs	r3, #32
 8006510:	e003      	b.n	800651a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	fab3 f383 	clz	r3, r3
 8006518:	b2db      	uxtb	r3, r3
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	2103      	movs	r1, #3
 800651e:	fa01 f303 	lsl.w	r3, r1, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	401a      	ands	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	fa93 f3a3 	rbit	r3, r3
 8006530:	61fb      	str	r3, [r7, #28]
  return result;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800653c:	2320      	movs	r3, #32
 800653e:	e003      	b.n	8006548 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	fab3 f383 	clz	r3, r3
 8006546:	b2db      	uxtb	r3, r3
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	fa01 f303 	lsl.w	r3, r1, r3
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	60da      	str	r2, [r3, #12]
}
 8006556:	bf00      	nop
 8006558:	372c      	adds	r7, #44	; 0x2c
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006562:	b480      	push	{r7}
 8006564:	b08b      	sub	sp, #44	; 0x2c
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1a      	ldr	r2, [r3, #32]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	fa93 f3a3 	rbit	r3, r3
 800657c:	613b      	str	r3, [r7, #16]
  return result;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006588:	2320      	movs	r3, #32
 800658a:	e003      	b.n	8006594 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	210f      	movs	r1, #15
 8006598:	fa01 f303 	lsl.w	r3, r1, r3
 800659c:	43db      	mvns	r3, r3
 800659e:	401a      	ands	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	fa93 f3a3 	rbit	r3, r3
 80065aa:	61fb      	str	r3, [r7, #28]
  return result;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80065b6:	2320      	movs	r3, #32
 80065b8:	e003      	b.n	80065c2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	fab3 f383 	clz	r3, r3
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80065d0:	bf00      	nop
 80065d2:	372c      	adds	r7, #44	; 0x2c
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80065dc:	b480      	push	{r7}
 80065de:	b08b      	sub	sp, #44	; 0x2c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	fa93 f3a3 	rbit	r3, r3
 80065f8:	613b      	str	r3, [r7, #16]
  return result;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006604:	2320      	movs	r3, #32
 8006606:	e003      	b.n	8006610 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	fab3 f383 	clz	r3, r3
 800660e:	b2db      	uxtb	r3, r3
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	210f      	movs	r1, #15
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	401a      	ands	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	fa93 f3a3 	rbit	r3, r3
 8006628:	61fb      	str	r3, [r7, #28]
  return result;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006634:	2320      	movs	r3, #32
 8006636:	e003      	b.n	8006640 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	fab3 f383 	clz	r3, r3
 800663e:	b2db      	uxtb	r3, r3
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	fa01 f303 	lsl.w	r3, r1, r3
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800664e:	bf00      	nop
 8006650:	372c      	adds	r7, #44	; 0x2c
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b088      	sub	sp, #32
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	fa93 f3a3 	rbit	r3, r3
 8006670:	60fb      	str	r3, [r7, #12]
  return result;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <LL_GPIO_Init+0x26>
    return 32U;
 800667c:	2320      	movs	r3, #32
 800667e:	e003      	b.n	8006688 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	fab3 f383 	clz	r3, r3
 8006686:	b2db      	uxtb	r3, r3
 8006688:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800668a:	e047      	b.n	800671c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	2101      	movs	r1, #1
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	fa01 f303 	lsl.w	r3, r1, r3
 8006698:	4013      	ands	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d039      	beq.n	8006716 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d003      	beq.n	80066b2 <LL_GPIO_Init+0x58>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d10d      	bne.n	80066ce <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	461a      	mov	r2, r3
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fed7 	bl	800646e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	461a      	mov	r2, r3
 80066c6:	69b9      	ldr	r1, [r7, #24]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff feb8 	bl	800643e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	461a      	mov	r2, r3
 80066d4:	69b9      	ldr	r1, [r7, #24]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ff06 	bl	80064e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d111      	bne.n	8006708 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2bff      	cmp	r3, #255	; 0xff
 80066e8:	d807      	bhi.n	80066fa <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	461a      	mov	r2, r3
 80066f0:	69b9      	ldr	r1, [r7, #24]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ff35 	bl	8006562 <LL_GPIO_SetAFPin_0_7>
 80066f8:	e006      	b.n	8006708 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	461a      	mov	r2, r3
 8006700:	69b9      	ldr	r1, [r7, #24]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff ff6a 	bl	80065dc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	461a      	mov	r2, r3
 800670e:	69b9      	ldr	r1, [r7, #24]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fe57 	bl	80063c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3301      	adds	r3, #1
 800671a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	fa22 f303 	lsr.w	r3, r2, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1b0      	bne.n	800668c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800673c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006740:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	b29b      	uxth	r3, r3
 800674e:	43db      	mvns	r3, r3
 8006750:	b29b      	uxth	r3, r3
 8006752:	4013      	ands	r3, r2
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800676a:	b084      	sub	sp, #16
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	f107 0014 	add.w	r0, r7, #20
 8006778:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	b004      	add	sp, #16
 80067aa:	4770      	bx	lr

080067ac <__libc_init_array>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4d0d      	ldr	r5, [pc, #52]	; (80067e4 <__libc_init_array+0x38>)
 80067b0:	2600      	movs	r6, #0
 80067b2:	4c0d      	ldr	r4, [pc, #52]	; (80067e8 <__libc_init_array+0x3c>)
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	42a6      	cmp	r6, r4
 80067ba:	d109      	bne.n	80067d0 <__libc_init_array+0x24>
 80067bc:	4d0b      	ldr	r5, [pc, #44]	; (80067ec <__libc_init_array+0x40>)
 80067be:	2600      	movs	r6, #0
 80067c0:	4c0b      	ldr	r4, [pc, #44]	; (80067f0 <__libc_init_array+0x44>)
 80067c2:	f000 f81f 	bl	8006804 <_init>
 80067c6:	1b64      	subs	r4, r4, r5
 80067c8:	10a4      	asrs	r4, r4, #2
 80067ca:	42a6      	cmp	r6, r4
 80067cc:	d105      	bne.n	80067da <__libc_init_array+0x2e>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d4:	3601      	adds	r6, #1
 80067d6:	4798      	blx	r3
 80067d8:	e7ee      	b.n	80067b8 <__libc_init_array+0xc>
 80067da:	f855 3b04 	ldr.w	r3, [r5], #4
 80067de:	3601      	adds	r6, #1
 80067e0:	4798      	blx	r3
 80067e2:	e7f2      	b.n	80067ca <__libc_init_array+0x1e>
 80067e4:	080068a4 	.word	0x080068a4
 80067e8:	080068a4 	.word	0x080068a4
 80067ec:	080068a4 	.word	0x080068a4
 80067f0:	080068a8 	.word	0x080068a8

080067f4 <memset>:
 80067f4:	4402      	add	r2, r0
 80067f6:	4603      	mov	r3, r0
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d100      	bne.n	80067fe <memset+0xa>
 80067fc:	4770      	bx	lr
 80067fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006802:	e7f9      	b.n	80067f8 <memset+0x4>

08006804 <_init>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

08006810 <_fini>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr
