
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000990c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa60  0800aa60  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa60  0800aa60  0001aa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa68  0800aa68  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800aa68  0800aa68  0001aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800aa70  0800aa70  0001aa70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aa78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016bc  20000078  0800aaf0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001734  0800aaf0  00021734  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d6d  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006152  00000000  00000000  00051e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00057f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  00059960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e029  00000000  00000000  0005b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000338d5  00000000  00000000  00099159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018c870  00000000  00000000  000cca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025929e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f4c  00000000  00000000  002592f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000078 	.word	0x20000078
 8000210:	00000000 	.word	0x00000000
 8000214:	08009ae8 	.word	0x08009ae8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000007c 	.word	0x2000007c
 8000230:	08009ae8 	.word	0x08009ae8

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN14CircularBuffer4readEPhi>:
    } 
    res = buf[(readPtr + dist) % size];  
    return 1;
}

uint8_t CircularBuffer::read(uint8_t* res, int dist) {
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
    if(dist + readPtr > writePtr) return 0;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	441a      	add	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	429a      	cmp	r2, r3
 800056e:	dd01      	ble.n	8000574 <_ZN14CircularBuffer4readEPhi+0x20>
 8000570:	2300      	movs	r3, #0
 8000572:	e069      	b.n	8000648 <_ZN14CircularBuffer4readEPhi+0xf4>

    if( (readPtr % size) + dist >= size ) {
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	6852      	ldr	r2, [r2, #4]
 800057c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000580:	fb01 f202 	mul.w	r2, r1, r2
 8000584:	1a9a      	subs	r2, r3, r2
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	441a      	add	r2, r3
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	db42      	blt.n	8000618 <_ZN14CircularBuffer4readEPhi+0xc4>
        // two memcpys needed
        int dist_to_end = size - (readPtr % size);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	6852      	ldr	r2, [r2, #4]
 800059e:	fb93 f0f2 	sdiv	r0, r3, r2
 80005a2:	fb00 f202 	mul.w	r2, r0, r2
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	1acb      	subs	r3, r1, r3
 80005aa:	617b      	str	r3, [r7, #20]
        std::memcpy(res, &buf[readPtr % size], dist_to_end);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	6852      	ldr	r2, [r2, #4]
 80005b8:	fb93 f0f2 	sdiv	r0, r3, r2
 80005bc:	fb00 f202 	mul.w	r2, r0, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	4619      	mov	r1, r3
 80005c8:	68b8      	ldr	r0, [r7, #8]
 80005ca:	f009 f935 	bl	8009838 <memcpy>
        readPtr += dist_to_end;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	441a      	add	r2, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	60da      	str	r2, [r3, #12]
        dist -= dist_to_end;
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	607b      	str	r3, [r7, #4]
        std::memcpy(&res[dist_to_end], &buf[readPtr % size], dist);
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	18d4      	adds	r4, r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	6852      	ldr	r2, [r2, #4]
 80005f4:	fb93 f0f2 	sdiv	r0, r3, r2
 80005f8:	fb00 f202 	mul.w	r2, r0, r2
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	440b      	add	r3, r1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4619      	mov	r1, r3
 8000604:	4620      	mov	r0, r4
 8000606:	f009 f917 	bl	8009838 <memcpy>
        readPtr += dist;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	441a      	add	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	e016      	b.n	8000646 <_ZN14CircularBuffer4readEPhi+0xf2>
    } else {
        // one memcpy needed
        std::memcpy(res, &buf[readPtr % size], dist);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6819      	ldr	r1, [r3, #0]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	6852      	ldr	r2, [r2, #4]
 8000624:	fb93 f0f2 	sdiv	r0, r3, r2
 8000628:	fb00 f202 	mul.w	r2, r0, r2
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	440b      	add	r3, r1
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4619      	mov	r1, r3
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f009 f8ff 	bl	8009838 <memcpy>
        readPtr += dist;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	68da      	ldr	r2, [r3, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	441a      	add	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60da      	str	r2, [r3, #12]
    }

    return 1;
 8000646:	2301      	movs	r3, #1

}
 8000648:	4618      	mov	r0, r3
 800064a:	371c      	adds	r7, #28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}

08000650 <_ZN14CircularBufferC1EPhi>:


CircularBuffer::CircularBuffer(uint8_t* buf, int size) {
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
    this->buf = buf;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
    this->size = size;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	605a      	str	r2, [r3, #4]
}
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZN14CircularBuffer5writeEh>:

bool CircularBuffer::hasSpace() {
    return !((writePtr % size == readPtr % size) && writePtr != readPtr);
}

uint8_t CircularBuffer::write(uint8_t data) {
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	460b      	mov	r3, r1
 800068c:	70fb      	strb	r3, [r7, #3]
    buf[writePtr % size] = data;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6819      	ldr	r1, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6852      	ldr	r2, [r2, #4]
 800069a:	fb93 f0f2 	sdiv	r0, r3, r2
 800069e:	fb00 f202 	mul.w	r2, r0, r2
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	78fa      	ldrb	r2, [r7, #3]
 80006a8:	701a      	strb	r2, [r3, #0]
    this->writePtr++;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]
    return 1;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <HAL_UARTEx_RxEventCallback>:
#include "../../SSM_MAVLink_Driver/Inc/SSM_D_MAVLink.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSReceiver.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSSender.hpp"
#include "../Inc/driver_config.hpp"

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
    
    if(huart == pixhawk_mavlink_uart){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a47      	ldr	r2, [pc, #284]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d141      	bne.n	800075c <HAL_UARTEx_RxEventCallback+0x98>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_SET); //turn on green light
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4845      	ldr	r0, [pc, #276]	; (80007f4 <HAL_UARTEx_RxEventCallback+0x130>)
 80006de:	f004 ffeb 	bl	80056b8 <HAL_GPIO_WritePin>

        for (uint16_t i = 0; i < size; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	81fb      	strh	r3, [r7, #14]
 80006e6:	89fa      	ldrh	r2, [r7, #14]
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d210      	bcs.n	8000710 <HAL_UARTEx_RxEventCallback+0x4c>
        {
            pixhawk_mavlink->rx_circular_buffer_->write(pixhawk_mavlink->raw_rx_msg_[i]);
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x134>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x134>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	4413      	add	r3, r2
 80006fe:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8000702:	4619      	mov	r1, r3
 8000704:	f7ff ffbd 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	3301      	adds	r3, #1
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	e7ea      	b.n	80006e6 <HAL_UARTEx_RxEventCallback+0x22>
        }
        pixhawk_mavlink->is_new_ = true;
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x134>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2201      	movs	r2, #1
 8000716:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x134>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000722:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f008 fd80 	bl	800922e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f022 0204 	bic.w	r2, r2, #4
 8000744:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET); //turn off green light
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	482a      	ldr	r0, [pc, #168]	; (80007f4 <HAL_UARTEx_RxEventCallback+0x130>)
 800074c:	f004 ffb4 	bl	80056b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000756:	4829      	ldr	r0, [pc, #164]	; (80007fc <HAL_UARTEx_RxEventCallback+0x138>)
 8000758:	f004 ffae 	bl	80056b8 <HAL_GPIO_WritePin>
    }

    if(huart == ground_mavlink_uart){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a28      	ldr	r2, [pc, #160]	; (8000800 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d141      	bne.n	80007e8 <HAL_UARTEx_RxEventCallback+0x124>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_SET); //turn on green light
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	4822      	ldr	r0, [pc, #136]	; (80007f4 <HAL_UARTEx_RxEventCallback+0x130>)
 800076a:	f004 ffa5 	bl	80056b8 <HAL_GPIO_WritePin>

        for (uint16_t i = 0; i < size; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	81bb      	strh	r3, [r7, #12]
 8000772:	89ba      	ldrh	r2, [r7, #12]
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	429a      	cmp	r2, r3
 8000778:	d210      	bcs.n	800079c <HAL_UARTEx_RxEventCallback+0xd8>
        {
            ground_mavlink->rx_circular_buffer_->write(ground_mavlink->raw_rx_msg_[i]);
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <HAL_UARTEx_RxEventCallback+0x140>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <HAL_UARTEx_RxEventCallback+0x140>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	89bb      	ldrh	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800078e:	4619      	mov	r1, r3
 8000790:	f7ff ff77 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	81bb      	strh	r3, [r7, #12]
 800079a:	e7ea      	b.n	8000772 <HAL_UARTEx_RxEventCallback+0xae>
        }
        ground_mavlink->is_new_ = true;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_UARTEx_RxEventCallback+0x140>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, ground_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_UARTEx_RxEventCallback+0x140>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80007ae:	f44f 728c 	mov.w	r2, #280	; 0x118
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f008 fd3a 	bl	800922e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f022 0204 	bic.w	r2, r2, #4
 80007d0:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET); //turn off green light
 80007d2:	2200      	movs	r2, #0
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <HAL_UARTEx_RxEventCallback+0x130>)
 80007d8:	f004 ff6e 	bl	80056b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_UARTEx_RxEventCallback+0x138>)
 80007e4:	f004 ff68 	bl	80056b8 <HAL_GPIO_WritePin>
    }


}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200011f4 	.word	0x200011f4
 80007f4:	42020800 	.word	0x42020800
 80007f8:	20000000 	.word	0x20000000
 80007fc:	42020000 	.word	0x42020000
 8000800:	200010cc 	.word	0x200010cc
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <HAL_UART_RxCpltCallback+0xb4>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d130      	bne.n	800087a <HAL_UART_RxCpltCallback+0x72>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081e:	4828      	ldr	r0, [pc, #160]	; (80008c0 <HAL_UART_RxCpltCallback+0xb8>)
 8000820:	f004 ff4a 	bl	80056b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 8000824:	2201      	movs	r2, #1
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4826      	ldr	r0, [pc, #152]	; (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 800082a:	f004 ff45 	bl	80056b8 <HAL_GPIO_WritePin>
        SBUSReceiver::getInstance(huart)->parse();
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 f930 	bl	8000a94 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000834:	4603      	mov	r3, r0
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f985 	bl	8000b46 <_ZN12SBUSReceiver5parseEv>
        HAL_UART_Receive_DMA (huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f929 	bl	8000a94 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000842:	4603      	mov	r3, r0
 8000844:	2219      	movs	r2, #25
 8000846:	4619      	mov	r1, r3
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f007 f867 	bl	800791c <HAL_UART_Receive_DMA>
        SBUSSender::getInstance(huart)->assemble_packet();
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 faec 	bl	8000e2c <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000854:	4603      	mov	r3, r0
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fb3c 	bl	8000ed4 <_ZN10SBUSSender15assemble_packetEv>
        HAL_UART_Transmit(huart, SBUSSender::getInstance(huart)->send_buf_, SBUS_FRAME_SIZE, 10);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 fae5 	bl	8000e2c <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000862:	4603      	mov	r3, r0
 8000864:	4619      	mov	r1, r3
 8000866:	230a      	movs	r3, #10
 8000868:	2219      	movs	r2, #25
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f006 ff48 	bl	8007700 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 8000870:	2200      	movs	r2, #0
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 8000876:	f004 ff1f 	bl	80056b8 <HAL_GPIO_WritePin>
    }

    if(huart == pixhawk_mavlink_uart){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <HAL_UART_RxCpltCallback+0xc0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d109      	bne.n	8000896 <HAL_UART_RxCpltCallback+0x8e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 8000882:	2201      	movs	r2, #1
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 8000888:	f004 ff16 	bl	80056b8 <HAL_GPIO_WritePin>
        /*
            should never enter this callback
        */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 800088c:	2200      	movs	r2, #0
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 8000892:	f004 ff11 	bl	80056b8 <HAL_GPIO_WritePin>
    }

    if(huart == ground_mavlink_uart){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <HAL_UART_RxCpltCallback+0xc4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d109      	bne.n	80008b2 <HAL_UART_RxCpltCallback+0xaa>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 800089e:	2201      	movs	r2, #1
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 80008a4:	f004 ff08 	bl	80056b8 <HAL_GPIO_WritePin>
        /*
            should never enter this callback
        */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 80008a8:	2200      	movs	r2, #0
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 80008ae:	f004 ff03 	bl	80056b8 <HAL_GPIO_WritePin>
    }

 }
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20001160 	.word	0x20001160
 80008c0:	42020000 	.word	0x42020000
 80008c4:	42020400 	.word	0x42020400
 80008c8:	200011f4 	.word	0x200011f4
 80008cc:	200010cc 	.word	0x200010cc

080008d0 <HAL_UART_ErrorCallback>:

 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <HAL_UART_ErrorCallback+0x98>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d111      	bne.n	8000904 <HAL_UART_ErrorCallback+0x34>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <HAL_UART_ErrorCallback+0x9c>)
 80008e8:	f004 fee6 	bl	80056b8 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f007 f861 	bl	80079b4 <HAL_UART_DMAStop>
        HAL_UART_Receive_DMA(huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8ce 	bl	8000a94 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2219      	movs	r2, #25
 80008fc:	4619      	mov	r1, r3
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f007 f80c 	bl	800791c <HAL_UART_Receive_DMA>
    }
    if(huart == pixhawk_mavlink_uart){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <HAL_UART_ErrorCallback+0xa0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d112      	bne.n	8000932 <HAL_UART_ErrorCallback+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000912:	4816      	ldr	r0, [pc, #88]	; (800096c <HAL_UART_ErrorCallback+0x9c>)
 8000914:	f004 fed0 	bl	80056b8 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f007 f84b 	bl	80079b4 <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_ErrorCallback+0xa4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000926:	f44f 728c 	mov.w	r2, #280	; 0x118
 800092a:	4619      	mov	r1, r3
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f008 fc7e 	bl	800922e <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    if(huart == ground_mavlink_uart){
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_UART_ErrorCallback+0xa8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d112      	bne.n	8000960 <HAL_UART_ErrorCallback+0x90>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	480a      	ldr	r0, [pc, #40]	; (800096c <HAL_UART_ErrorCallback+0x9c>)
 8000942:	f004 feb9 	bl	80056b8 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f007 f834 	bl	80079b4 <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, ground_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_UART_ErrorCallback+0xac>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000954:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f008 fc67 	bl	800922e <HAL_UARTEx_ReceiveToIdle_DMA>
    }

 }
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20001160 	.word	0x20001160
 800096c:	42020000 	.word	0x42020000
 8000970:	200011f4 	.word	0x200011f4
 8000974:	20000000 	.word	0x20000000
 8000978:	200010cc 	.word	0x200010cc
 800097c:	20000004 	.word	0x20000004

08000980 <_Z41__static_initialization_and_destruction_0ii>:

MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
MAVLink* pixhawk_mavlink = &pixhawk_mavlink_instance;

MAVLink ground_mavlink_instance(ground_mavlink_uart);
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d10c      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	4293      	cmp	r3, r2
 8000998:	d107      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0x2a>
MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800099e:	f001 fdb5 	bl	800250c <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
MAVLink ground_mavlink_instance(ground_mavlink_uart);
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80009a6:	f001 fdb1 	bl	800250c <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10a      	bne.n	80009c6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d105      	bne.n	80009c6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80009bc:	f001 fdd5 	bl	800256a <_ZN7MAVLinkD1Ev>
MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80009c2:	f001 fdd2 	bl	800256a <_ZN7MAVLinkD1Ev>
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200011f4 	.word	0x200011f4
 80009d4:	20000094 	.word	0x20000094
 80009d8:	200010cc 	.word	0x200010cc
 80009dc:	200005a0 	.word	0x200005a0

080009e0 <_GLOBAL__sub_I_pixhawk_mavlink_instance>:
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ffc9 	bl	8000980 <_Z41__static_initialization_and_destruction_0ii>
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_GLOBAL__sub_D_pixhawk_mavlink_instance>:
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff ffc1 	bl	8000980 <_Z41__static_initialization_and_destruction_0ii>
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_ZN9RCControlC1Ev>:
    };

    float &operator[] (int i) { return ControlSignals[i]; }

    /*  initial values*/
    RCControl()
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    {
        ControlSignals[0] = 50.0f;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <_ZN9RCControlC1Ev+0x90>)
 8000a0c:	601a      	str	r2, [r3, #0]
        ControlSignals[1] = 50.0f;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a1f      	ldr	r2, [pc, #124]	; (8000a90 <_ZN9RCControlC1Ev+0x90>)
 8000a12:	605a      	str	r2, [r3, #4]
        ControlSignals[2] = 0.0f;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
        ControlSignals[3] = 50.0f;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <_ZN9RCControlC1Ev+0x90>)
 8000a20:	60da      	str	r2, [r3, #12]
        ControlSignals[4] = 0.0f;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
        ControlSignals[5] = 0.0f;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f04f 0200 	mov.w	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
        ControlSignals[6] = 0.0f;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f04f 0200 	mov.w	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
        ControlSignals[7] = 0.0f;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f04f 0200 	mov.w	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
        ControlSignals[8] = 0.0f;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
        ControlSignals[9] = 0.0f;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f04f 0200 	mov.w	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
        ControlSignals[10] = 0.0f;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
        ControlSignals[11] = 0.0f;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
        ControlSignals[12] = 0.0f;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
        ControlSignals[13] = 0.0f;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
        ControlSignals[14] = 0.0f;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38
        ControlSignals[15] = 0.0f;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	42480000 	.word	0x42480000

08000a94 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSReceiver* SBUSReceiver::singleton_ = NULL;

SBUSReceiver* SBUSReceiver::getInstance(UART_HandleTypeDef* uart){
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    if (singleton_ == NULL)
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10a      	bne.n	8000aba <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x26>
    	singleton_ = new SBUSReceiver(uart);
 8000aa4:	2088      	movs	r0, #136	; 0x88
 8000aa6:	f008 fe5b 	bl	8009760 <_Znwj>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461c      	mov	r4, r3
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f000 f80b 	bl	8000acc <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000ab8:	601c      	str	r4, [r3, #0]

    // returning the instance pointer
    return singleton_;
 8000aba:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000abc:	681b      	ldr	r3, [r3, #0]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000aac 	.word	0x20000aac

08000acc <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	61da      	str	r2, [r3, #28]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3348      	adds	r3, #72	; 0x48
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff8d 	bl	8000a00 <_ZN9RCControlC1Ev>
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	dc0a      	bgt.n	8000b06 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x3a>
    {
        received_sbus_.ch[i] = 1000;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	3210      	adds	r2, #16
 8000af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e7f1      	b.n	8000aea <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x1e>
    }
    received_sbus_.ch17 = false;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    HAL_UART_Receive_DMA (uart_, raw_sbus_, SBUS_FRAME_SIZE);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2219      	movs	r2, #25
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 fef0 	bl	800791c <HAL_UART_Receive_DMA>
}
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_ZN12SBUSReceiver5parseEv>:
    cast_rccontrol();
    return received_rccontrol_;
}

void SBUSReceiver::parse()
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
    if ((raw_sbus_[0] == HEADER_) && (raw_sbus_[24] == FOOTER_)) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	f040 815e 	bne.w	8000e14 <_ZN12SBUSReceiver5parseEv+0x2ce>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7e1b      	ldrb	r3, [r3, #24]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f040 8159 	bne.w	8000e14 <_ZN12SBUSReceiver5parseEv+0x2ce>

        //exactal parsing
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[2] << 8) & 0x07FF));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b74:	b21b      	sxth	r3, r3
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	841a      	strh	r2, [r3, #32]
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	08db      	lsrs	r3, r3, #3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[3] << 5) & 0x07FF));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	78db      	ldrb	r3, [r3, #3]
 8000b8e:	015b      	lsls	r3, r3, #5
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b96:	b21b      	sxth	r3, r3
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	845a      	strh	r2, [r3, #34]	; 0x22
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	78db      	ldrb	r3, [r3, #3]
 8000ba6:	099b      	lsrs	r3, r3, #6
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	b21a      	sxth	r2, r3
                                            (raw_sbus_[4] << 2) |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	791b      	ldrb	r3, [r3, #4]
 8000bb0:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[5] << 10) & 0x07FF));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	795b      	ldrb	r3, [r3, #5]
 8000bbc:	029b      	lsls	r3, r3, #10
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bc4:	b21b      	sxth	r3, r3
                                            (raw_sbus_[4] << 2) |
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	849a      	strh	r2, [r3, #36]	; 0x24
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	795b      	ldrb	r3, [r3, #5]
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[6] << 7) & 0x07FF));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	799b      	ldrb	r3, [r3, #6]
 8000bde:	01db      	lsls	r3, r3, #7
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000be6:	b21b      	sxth	r3, r3
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	84da      	strh	r2, [r3, #38]	; 0x26
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[7] << 4) & 0x07FF));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	79db      	ldrb	r3, [r3, #7]
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c08:	b21b      	sxth	r3, r3
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	851a      	strh	r2, [r3, #40]	; 0x28
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	79db      	ldrb	r3, [r3, #7]
 8000c18:	09db      	lsrs	r3, r3, #7
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	b21a      	sxth	r2, r3
                                            (raw_sbus_[8] << 1) |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7a1b      	ldrb	r3, [r3, #8]
 8000c22:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[9] << 9) & 0x07FF));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7a5b      	ldrb	r3, [r3, #9]
 8000c2e:	025b      	lsls	r3, r3, #9
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c36:	b21b      	sxth	r3, r3
                                            (raw_sbus_[8] << 1) |
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b21b      	sxth	r3, r3
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	855a      	strh	r2, [r3, #42]	; 0x2a
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7a5b      	ldrb	r3, [r3, #9]
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[10] << 6) & 0x07FF));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7a9b      	ldrb	r3, [r3, #10]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c58:	b21b      	sxth	r3, r3
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	859a      	strh	r2, [r3, #44]	; 0x2c
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7a9b      	ldrb	r3, [r3, #10]
 8000c68:	095b      	lsrs	r3, r3, #5
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[11] << 3) & 0x07FF));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7adb      	ldrb	r3, [r3, #11]
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c7a:	b21b      	sxth	r3, r3
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	85da      	strh	r2, [r3, #46]	; 0x2e
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7b1b      	ldrb	r3, [r3, #12]
 8000c8a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[13] << 8) & 0x07FF));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7b5b      	ldrb	r3, [r3, #13]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c98:	b21b      	sxth	r3, r3
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	861a      	strh	r2, [r3, #48]	; 0x30
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7b5b      	ldrb	r3, [r3, #13]
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[14] << 5) & 0x07FF));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7b9b      	ldrb	r3, [r3, #14]
 8000cb2:	015b      	lsls	r3, r3, #5
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cba:	b21b      	sxth	r3, r3
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	865a      	strh	r2, [r3, #50]	; 0x32
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7b9b      	ldrb	r3, [r3, #14]
 8000cca:	099b      	lsrs	r3, r3, #6
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	b21a      	sxth	r2, r3
                                            (raw_sbus_[15] << 2) |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7bdb      	ldrb	r3, [r3, #15]
 8000cd4:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[16] << 10) & 0x07FF));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7c1b      	ldrb	r3, [r3, #16]
 8000ce0:	029b      	lsls	r3, r3, #10
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ce8:	b21b      	sxth	r3, r3
                                            (raw_sbus_[15] << 2) |
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21b      	sxth	r3, r3
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	869a      	strh	r2, [r3, #52]	; 0x34
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7c1b      	ldrb	r3, [r3, #16]
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[17] << 7) & 0x07FF));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7c5b      	ldrb	r3, [r3, #17]
 8000d02:	01db      	lsls	r3, r3, #7
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d0a:	b21b      	sxth	r3, r3
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	86da      	strh	r2, [r3, #54]	; 0x36
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7c5b      	ldrb	r3, [r3, #17]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[18] << 4) & 0x07FF));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7c9b      	ldrb	r3, [r3, #18]
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d2c:	b21b      	sxth	r3, r3
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	871a      	strh	r2, [r3, #56]	; 0x38
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7c9b      	ldrb	r3, [r3, #18]
 8000d3c:	09db      	lsrs	r3, r3, #7
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	b21a      	sxth	r2, r3
                                            (raw_sbus_[19] << 1) |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7cdb      	ldrb	r3, [r3, #19]
 8000d46:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[20] << 9) & 0x07FF));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7d1b      	ldrb	r3, [r3, #20]
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d5a:	b21b      	sxth	r3, r3
                                            (raw_sbus_[19] << 1) |
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21b      	sxth	r3, r3
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	875a      	strh	r2, [r3, #58]	; 0x3a
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7d1b      	ldrb	r3, [r3, #20]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[21] << 6) & 0x07FF));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7d5b      	ldrb	r3, [r3, #21]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d7c:	b21b      	sxth	r3, r3
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	879a      	strh	r2, [r3, #60]	; 0x3c
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7d5b      	ldrb	r3, [r3, #21]
 8000d8c:	095b      	lsrs	r3, r3, #5
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[22] << 3) & 0x07FF));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7d9b      	ldrb	r3, [r3, #22]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d9e:	b21b      	sxth	r3, r3
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* CH 17 */
        received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7ddb      	ldrb	r3, [r3, #23]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bf14      	ite	ne
 8000db6:	2301      	movne	r3, #1
 8000db8:	2300      	moveq	r3, #0
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        /* CH 18 */
        received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7ddb      	ldrb	r3, [r3, #23]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bf14      	ite	ne
 8000dce:	2301      	movne	r3, #1
 8000dd0:	2300      	moveq	r3, #0
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        /* Grab the lost frame */
        received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7ddb      	ldrb	r3, [r3, #23]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bf14      	ite	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	2300      	moveq	r3, #0
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        /* Grab the failsafe */
        received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7ddb      	ldrb	r3, [r3, #23]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bf14      	ite	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	2300      	moveq	r3, #0
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        received_sbus_.new_data = true;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e12:	e004      	b.n	8000e1e <_ZN12SBUSReceiver5parseEv+0x2d8>

    }else{
    	received_sbus_.new_data = false;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender* SBUSSender::singleton_ = NULL;

SBUSSender* SBUSSender::getInstance(UART_HandleTypeDef* uart){
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    if (singleton_ == nullptr)
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10a      	bne.n	8000e52 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x26>
      singleton_ = new SBUSSender(uart);
 8000e3c:	2048      	movs	r0, #72	; 0x48
 8000e3e:	f008 fc8f 	bl	8009760 <_Znwj>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461c      	mov	r4, r3
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f000 f80b 	bl	8000e64 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000e50:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000e54:	681b      	ldr	r3, [r3, #0]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000ab0 	.word	0x20000ab0

08000e64 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	dc0a      	bgt.n	8000e94 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x30>
	{
		send_sbus_.ch[i] = 1000;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	3210      	adds	r2, #16
 8000e84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e7f1      	b.n	8000e78 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x14>
	}
	send_sbus_.ch17 = false;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	send_sbus_.ch18 = false;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	send_sbus_.failsafe = false;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	send_sbus_.lost_frame = false;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	send_sbus_.new_data = false;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit_DMA(uart_, send_buf_, SBUS_FRAME_SIZE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	2219      	movs	r2, #25
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f006 fca9 	bl	800781c <HAL_UART_Transmit_DMA>
}
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZN10SBUSSender15assemble_packetEv>:
      send_sbus_.ch[i] = rccontrol_to_sbus(values.ControlSignals[i]);
    }
}

void SBUSSender::assemble_packet()
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	220f      	movs	r2, #15
 8000ee0:	701a      	strb	r2, [r3, #0]
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	8c1b      	ldrh	r3, [r3, #32]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	705a      	strb	r2, [r3, #1]
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	8c1b      	ldrh	r3, [r3, #32]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f023 0307 	bic.w	r3, r3, #7
 8000f08:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	709a      	strb	r2, [r3, #2]
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000f18:	095b      	lsrs	r3, r3, #5
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f22:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f30:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	70da      	strb	r2, [r3, #3]
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	711a      	strb	r2, [r3, #4]
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f4e:	0a9b      	lsrs	r3, r3, #10
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	715a      	strb	r2, [r3, #5]
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f76:	09db      	lsrs	r3, r3, #7
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	f023 030f 	bic.w	r3, r3, #15
 8000f8e:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	719a      	strb	r2, [r3, #6]
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa8:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fae:	01db      	lsls	r3, r3, #7
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fb6:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	71da      	strb	r2, [r3, #7]
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	721a      	strb	r2, [r3, #8]
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fd4:	0a5b      	lsrs	r3, r3, #9
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f023 0303 	bic.w	r3, r3, #3
 8000fec:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	725a      	strb	r2, [r3, #9]
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b25b      	sxtb	r3, r3
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800100c:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 800100e:	b25b      	sxtb	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b25b      	sxtb	r3, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	729a      	strb	r2, [r3, #10]
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800101e:	08db      	lsrs	r3, r3, #3
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2da      	uxtb	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	72da      	strb	r2, [r3, #11]
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	731a      	strb	r2, [r3, #12]
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	b25b      	sxtb	r3, r3
 800104a:	f023 0307 	bic.w	r3, r3, #7
 800104e:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8001050:	4313      	orrs	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	735a      	strb	r2, [r3, #13]
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	b29b      	uxth	r3, r3
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001068:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800106e:	019b      	lsls	r3, r3, #6
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001076:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8001078:	4313      	orrs	r3, r2
 800107a:	b25b      	sxtb	r3, r3
 800107c:	b2da      	uxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	739a      	strb	r2, [r3, #14]
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	b29b      	uxth	r3, r3
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	73da      	strb	r2, [r3, #15]
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001094:	0a9b      	lsrs	r3, r3, #10
 8001096:	b29b      	uxth	r3, r3
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	741a      	strb	r2, [r3, #16]
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010bc:	09db      	lsrs	r3, r3, #7
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	f023 030f 	bic.w	r3, r3, #15
 80010d4:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	745a      	strb	r2, [r3, #17]
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ee:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80010f4:	01db      	lsls	r3, r3, #7
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010fc:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 80010fe:	4313      	orrs	r3, r2
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2da      	uxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	749a      	strb	r2, [r3, #18]
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	b2da      	uxtb	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	74da      	strb	r2, [r3, #19]
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800111a:	0a5b      	lsrs	r3, r3, #9
 800111c:	b29b      	uxth	r3, r3
 800111e:	b25b      	sxtb	r3, r3
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	b25b      	sxtb	r3, r3
 800112e:	f023 0303 	bic.w	r3, r3, #3
 8001132:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8001134:	4313      	orrs	r3, r2
 8001136:	b25b      	sxtb	r3, r3
 8001138:	b2da      	uxtb	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	751a      	strb	r2, [r3, #20]
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001142:	099b      	lsrs	r3, r3, #6
 8001144:	b29b      	uxth	r3, r3
 8001146:	b25b      	sxtb	r3, r3
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001152:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2da      	uxtb	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	755a      	strb	r2, [r3, #21]
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	b29b      	uxth	r3, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	759a      	strb	r2, [r3, #22]
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001174:	b25a      	sxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	b25b      	sxtb	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	75da      	strb	r2, [r3, #23]
  send_buf_[24] = FOOTER_;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	761a      	strb	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4053      	eors	r3, r2
 80011d4:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	4053      	eors	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4053      	eors	r3, r2
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4053      	eors	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	b2db      	uxtb	r3, r3
 800120a:	b21b      	sxth	r3, r3
 800120c:	4053      	eors	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	b29a      	uxth	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	801a      	strh	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001230:	801a      	strh	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <mavlink_sha256_init+0x50>)
 8001258:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <mavlink_sha256_init+0x54>)
 800125e:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <mavlink_sha256_init+0x58>)
 8001264:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <mavlink_sha256_init+0x5c>)
 800126a:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <mavlink_sha256_init+0x60>)
 8001270:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <mavlink_sha256_init+0x64>)
 8001276:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <mavlink_sha256_init+0x68>)
 800127c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <mavlink_sha256_init+0x6c>)
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	6a09e667 	.word	0x6a09e667
 8001294:	bb67ae85 	.word	0xbb67ae85
 8001298:	3c6ef372 	.word	0x3c6ef372
 800129c:	a54ff53a 	.word	0xa54ff53a
 80012a0:	510e527f 	.word	0x510e527f
 80012a4:	9b05688c 	.word	0x9b05688c
 80012a8:	1f83d9ab 	.word	0x1f83d9ab
 80012ac:	5be0cd19 	.word	0x5be0cd19

080012b0 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b0cf      	sub	sp, #316	; 0x13c
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012be:	6018      	str	r0, [r3, #0]
 80012c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012c4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012c8:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80012ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80012da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80012ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80012fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 800130a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800130e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 800131a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800131e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 800132a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800132e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 800133a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800133e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001354:	2b0f      	cmp	r3, #15
 8001356:	dc17      	bgt.n	8001388 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 8001358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001362:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	4413      	add	r3, r2
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001374:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 800137c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001380:	3301      	adds	r3, #1
 8001382:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001386:	e7e3      	b.n	8001350 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8001388:	2310      	movs	r3, #16
 800138a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800138e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001392:	2b3f      	cmp	r3, #63	; 0x3f
 8001394:	dc6a      	bgt.n	800146c <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800139a:	1e9a      	subs	r2, r3, #2
 800139c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80013ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013b0:	1e99      	subs	r1, r3, #2
 80013b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013be:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80013c2:	405a      	eors	r2, r3
 80013c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013c8:	1e99      	subs	r1, r3, #2
 80013ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013d6:	0a9b      	lsrs	r3, r3, #10
 80013d8:	405a      	eors	r2, r3
 80013da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013de:	1fd9      	subs	r1, r3, #7
 80013e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013ec:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80013ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013f2:	f1a3 010f 	sub.w	r1, r3, #15
 80013f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001402:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800140a:	f1a3 000f 	sub.w	r0, r3, #15
 800140e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001412:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001416:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800141a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800141e:	4059      	eors	r1, r3
 8001420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001424:	f1a3 000f 	sub.w	r0, r3, #15
 8001428:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800142c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001430:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001438:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800143a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800143e:	f1a3 0110 	sub.w	r1, r3, #16
 8001442:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800144a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800144e:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001450:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001458:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800145c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001464:	3301      	adds	r3, #1
 8001466:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800146a:	e790      	b.n	800138e <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001476:	2b3f      	cmp	r3, #63	; 0x3f
 8001478:	dc79      	bgt.n	800156e <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800147a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800147e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001482:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001486:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800148a:	405a      	eors	r2, r3
 800148c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001490:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001494:	405a      	eors	r2, r3
 8001496:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800149a:	441a      	add	r2, r3
 800149c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80014a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014a4:	4019      	ands	r1, r3
 80014a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014aa:	43d8      	mvns	r0, r3
 80014ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80014b0:	4003      	ands	r3, r0
 80014b2:	404b      	eors	r3, r1
 80014b4:	441a      	add	r2, r3
 80014b6:	496d      	ldr	r1, [pc, #436]	; (800166c <mavlink_sha256_calc+0x3bc>)
 80014b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014c0:	441a      	add	r2, r3
 80014c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ca:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80014ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014d2:	4413      	add	r3, r2
 80014d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80014d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014dc:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80014e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014e4:	ea4f 3373 	mov.w	r3, r3, ror #13
 80014e8:	405a      	eors	r2, r3
 80014ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014ee:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80014f2:	405a      	eors	r2, r3
 80014f4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80014f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014fc:	4059      	eors	r1, r3
 80014fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001502:	4019      	ands	r1, r3
 8001504:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800150c:	4003      	ands	r3, r0
 800150e:	404b      	eors	r3, r1
 8001510:	4413      	add	r3, r2
 8001512:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8001516:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800151a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800151e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001522:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8001526:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800152a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800152e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001532:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001536:	4413      	add	r3, r2
 8001538:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 800153c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8001544:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 800154c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001550:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8001554:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800155c:	4413      	add	r3, r2
 800155e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8001562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001566:	3301      	adds	r3, #1
 8001568:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800156c:	e781      	b.n	8001472 <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 800156e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001572:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800157e:	441a      	add	r2, r3
 8001580:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001584:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 800158c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001590:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800159c:	441a      	add	r2, r3
 800159e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80015aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015ba:	441a      	add	r2, r3
 80015bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 80015c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015d8:	441a      	add	r2, r3
 80015da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80015e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699a      	ldr	r2, [r3, #24]
 80015f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f6:	441a      	add	r2, r3
 80015f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001604:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001608:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	69da      	ldr	r2, [r3, #28]
 8001610:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001614:	441a      	add	r2, r3
 8001616:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800161a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8001622:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001626:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6a1a      	ldr	r2, [r3, #32]
 800162e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001632:	441a      	add	r2, r3
 8001634:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001638:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8001640:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001644:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001650:	441a      	add	r2, r3
 8001652:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001656:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800165e:	bf00      	nop
 8001660:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	08009b00 	.word	0x08009b00

08001670 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09c      	sub	sp, #112	; 0x70
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	441a      	add	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800169a:	429a      	cmp	r2, r3
 800169c:	d904      	bls.n	80016a8 <mavlink_sha256_update+0x38>
	++m->sz[1];
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80016a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b0:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d058      	beq.n	800176a <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 80016b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d201      	bcs.n	80016cc <mavlink_sha256_update+0x5c>
            l = len;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80016d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d4:	4413      	add	r3, r2
 80016d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80016da:	4618      	mov	r0, r3
 80016dc:	f008 f8ac 	bl	8009838 <memcpy>
	offset += l;
 80016e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80016e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e4:	4413      	add	r3, r2
 80016e6:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 80016e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80016ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016ec:	4413      	add	r3, r2
 80016ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80016f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d1d9      	bne.n	80016b2 <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3328      	adds	r3, #40	; 0x28
 8001702:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001704:	2300      	movs	r3, #0
 8001706:	663b      	str	r3, [r7, #96]	; 0x60
 8001708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800170a:	2b0f      	cmp	r3, #15
 800170c:	dc24      	bgt.n	8001758 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800170e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001714:	4413      	add	r3, r2
 8001716:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001718:	f107 0210 	add.w	r2, r7, #16
 800171c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001726:	3303      	adds	r3, #3
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800172c:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 800172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001730:	1c9a      	adds	r2, r3, #2
 8001732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001734:	3301      	adds	r3, #1
 8001736:	7812      	ldrb	r2, [r2, #0]
 8001738:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 800173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001740:	3302      	adds	r3, #2
 8001742:	7812      	ldrb	r2, [r2, #0]
 8001744:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8001746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001748:	3303      	adds	r3, #3
 800174a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001752:	3301      	adds	r3, #1
 8001754:	663b      	str	r3, [r7, #96]	; 0x60
 8001756:	e7d7      	b.n	8001708 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff fda6 	bl	80012b0 <mavlink_sha256_calc>
	    offset = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001768:	e7a3      	b.n	80016b2 <mavlink_sha256_update+0x42>
	}
    }
}
 800176a:	bf00      	nop
 800176c:	3770      	adds	r7, #112	; 0x70
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b098      	sub	sp, #96	; 0x60
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001786:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800178a:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 800178e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001792:	3301      	adds	r3, #1
 8001794:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3308      	adds	r3, #8
 800179a:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	3301      	adds	r3, #1
 80017a6:	2247      	movs	r2, #71	; 0x47
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f008 f851 	bl	8009852 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b6:	3307      	adds	r3, #7
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	3360      	adds	r3, #96	; 0x60
 80017bc:	443b      	add	r3, r7
 80017be:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0a1a      	lsrs	r2, r3, #8
 80017c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ca:	3306      	adds	r3, #6
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	3360      	adds	r3, #96	; 0x60
 80017d0:	443b      	add	r3, r7
 80017d2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0c1a      	lsrs	r2, r3, #16
 80017dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017de:	3305      	adds	r3, #5
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	3360      	adds	r3, #96	; 0x60
 80017e4:	443b      	add	r3, r7
 80017e6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0e1a      	lsrs	r2, r3, #24
 80017f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017f2:	3304      	adds	r3, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	3360      	adds	r3, #96	; 0x60
 80017f8:	443b      	add	r3, r7
 80017fa:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001804:	3303      	adds	r3, #3
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	3360      	adds	r3, #96	; 0x60
 800180a:	443b      	add	r3, r7
 800180c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0a1a      	lsrs	r2, r3, #8
 8001816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001818:	3302      	adds	r3, #2
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	3360      	adds	r3, #96	; 0x60
 800181e:	443b      	add	r3, r7
 8001820:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0c1a      	lsrs	r2, r3, #16
 800182a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800182c:	3301      	adds	r3, #1
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	3360      	adds	r3, #96	; 0x60
 8001832:	443b      	add	r3, r7
 8001834:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	0e1b      	lsrs	r3, r3, #24
 800183e:	b2d9      	uxtb	r1, r3
 8001840:	f107 020c 	add.w	r2, r7, #12
 8001844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800184c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800184e:	f103 0208 	add.w	r2, r3, #8
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff09 	bl	8001670 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800185e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001860:	78da      	ldrb	r2, [r3, #3]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800186c:	7892      	ldrb	r2, [r2, #2]
 800186e:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	3302      	adds	r3, #2
 8001874:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001876:	7852      	ldrb	r2, [r2, #1]
 8001878:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3303      	adds	r3, #3
 800187e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3304      	adds	r3, #4
 8001888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800188a:	79d2      	ldrb	r2, [r2, #7]
 800188c:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	3305      	adds	r3, #5
 8001892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001894:	7992      	ldrb	r2, [r2, #6]
 8001896:	701a      	strb	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	3760      	adds	r7, #96	; 0x60
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <mavlink_get_channel_status+0x24>)
 80018b6:	4413      	add	r3, r2
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	20000ab4 	.word	0x20000ab4

080018c8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f240 1223 	movw	r2, #291	; 0x123
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <mavlink_get_channel_buffer+0x24>)
 80018de:	4413      	add	r3, r2
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000b14 	.word	0x20000b14

080018f0 <mavlink_reset_channel_status>:

/**
 * @brief Reset the status of a channel.
 */
MAVLINK_HELPER void mavlink_reset_channel_status(uint8_t chan)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ffcf 	bl	80018a0 <mavlink_get_channel_status>
 8001902:	60f8      	str	r0, [r7, #12]
	status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	70da      	strb	r2, [r3, #3]
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d90a      	bls.n	800193a <_mav_trim_payload+0x28>
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	3b01      	subs	r3, #1
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <_mav_trim_payload+0x28>
		length--;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	3b01      	subs	r3, #1
 8001936:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001938:	e7f1      	b.n	800191e <_mav_trim_payload+0xc>
	}
	return length;
 800193a:	78fb      	ldrb	r3, [r7, #3]
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b0aa      	sub	sp, #168	; 0xa8
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <mavlink_signature_check+0x16>
		return true;
 800195a:	2301      	movs	r3, #1
 800195c:	e125      	b.n	8001baa <mavlink_signature_check+0x262>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3302      	adds	r3, #2
 8001962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800196c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001974:	3307      	adds	r3, #7
 8001976:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fc5e 	bl	8001240 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f103 0110 	add.w	r1, r3, #16
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	2220      	movs	r2, #32
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fe6d 	bl	8001670 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	220a      	movs	r2, #10
 800199c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fe65 	bl	8001670 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f103 010c 	add.w	r1, r3, #12
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	78db      	ldrb	r3, [r3, #3]
 80019b0:	461a      	mov	r2, r3
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe5a 	bl	8001670 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f503 718a 	add.w	r1, r3, #276	; 0x114
 80019c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c6:	2202      	movs	r2, #2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe51 	bl	8001670 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 80019ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d2:	2207      	movs	r2, #7
 80019d4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fe49 	bl	8001670 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80019de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fec2 	bl	8001772 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	2206      	movs	r2, #6
 80019f4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80019f8:	4618      	mov	r0, r3
 80019fa:	f007 ff0d 	bl	8009818 <memcmp>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <mavlink_signature_check+0xc0>
		return false;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e0d0      	b.n	8001baa <mavlink_signature_check+0x262>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001a1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a22:	1c59      	adds	r1, r3, #1
 8001a24:	f107 0318 	add.w	r3, r7, #24
 8001a28:	2206      	movs	r2, #6
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 ff04 	bl	8009838 <memcpy>

	if (signing_streams == NULL) {
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <mavlink_signature_check+0xf2>
		return false;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e0b7      	b.n	8001baa <mavlink_signature_check+0x262>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d22d      	bcs.n	8001aa8 <mavlink_signature_check+0x160>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	79d9      	ldrb	r1, [r3, #7]
 8001a50:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001a54:	68b8      	ldr	r0, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	3303      	adds	r3, #3
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4299      	cmp	r1, r3
 8001a64:	d119      	bne.n	8001a9a <mavlink_signature_check+0x152>
		    msg->compid == signing_streams->stream[i].compid &&
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7a19      	ldrb	r1, [r3, #8]
 8001a6a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001a6e:	68b8      	ldr	r0, [r7, #8]
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	4403      	add	r3, r0
 8001a78:	3304      	adds	r3, #4
 8001a7a:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001a7c:	4299      	cmp	r1, r3
 8001a7e:	d10c      	bne.n	8001a9a <mavlink_signature_check+0x152>
		    link_id == signing_streams->stream[i].link_id) {
 8001a80:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3302      	adds	r3, #2
 8001a90:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001a92:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d005      	beq.n	8001aa6 <mavlink_signature_check+0x15e>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001a9a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001aa4:	e7cc      	b.n	8001a40 <mavlink_signature_check+0xf8>
			break;
 8001aa6:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d13e      	bne.n	8001b32 <mavlink_signature_check+0x1ea>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d901      	bls.n	8001ac0 <mavlink_signature_check+0x178>
			// over max number of streams
			return false;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e074      	b.n	8001baa <mavlink_signature_check+0x262>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac4:	493b      	ldr	r1, [pc, #236]	; (8001bb4 <mavlink_signature_check+0x26c>)
 8001ac6:	1854      	adds	r4, r2, r1
 8001ac8:	f143 0500 	adc.w	r5, r3, #0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ad2:	4294      	cmp	r4, r2
 8001ad4:	eb75 0303 	sbcs.w	r3, r5, r3
 8001ad8:	d201      	bcs.n	8001ade <mavlink_signature_check+0x196>
			return false;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e065      	b.n	8001baa <mavlink_signature_check+0x262>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001ade:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	79d8      	ldrb	r0, [r3, #7]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	3303      	adds	r3, #3
 8001af2:	4602      	mov	r2, r0
 8001af4:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001af6:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7a18      	ldrb	r0, [r3, #8]
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	3304      	adds	r3, #4
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001b0e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001b22:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	801a      	strh	r2, [r3, #0]
 8001b30:	e01d      	b.n	8001b6e <mavlink_signature_check+0x226>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001b3e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	1d59      	adds	r1, r3, #5
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	2206      	movs	r2, #6
 8001b54:	4618      	mov	r0, r3
 8001b56:	f007 fe6f 	bl	8009838 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b62:	4290      	cmp	r0, r2
 8001b64:	eb71 0303 	sbcs.w	r3, r1, r3
 8001b68:	d301      	bcc.n	8001b6e <mavlink_signature_check+0x226>
			// repeating old timestamp
			return false;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e01d      	b.n	8001baa <mavlink_signature_check+0x262>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001b6e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	1d58      	adds	r0, r3, #5
 8001b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b82:	3301      	adds	r3, #1
 8001b84:	2206      	movs	r2, #6
 8001b86:	4619      	mov	r1, r3
 8001b88:	f007 fe56 	bl	8009838 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b90:	68f9      	ldr	r1, [r7, #12]
 8001b92:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001b96:	4290      	cmp	r0, r2
 8001b98:	eb71 0303 	sbcs.w	r3, r1, r3
 8001b9c:	d204      	bcs.n	8001ba8 <mavlink_signature_check+0x260>
		signing->timestamp = tstamp.t64;
 8001b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	return true;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	37a8      	adds	r7, #168	; 0xa8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	005b8d80 	.word	0x005b8d80

08001bb8 <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	789b      	ldrb	r3, [r3, #2]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	709a      	strb	r2, [r3, #2]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	78db      	ldrb	r3, [r3, #3]
 8001be6:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	789b      	ldrb	r3, [r3, #2]
 8001bec:	2bfe      	cmp	r3, #254	; 0xfe
 8001bee:	d13a      	bne.n	8001c66 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	789a      	ldrb	r2, [r3, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3301      	adds	r3, #1
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	7992      	ldrb	r2, [r2, #6]
 8001c10:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3303      	adds	r3, #3
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	79d2      	ldrb	r2, [r2, #7]
 8001c1a:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	7a12      	ldrb	r2, [r2, #8]
 8001c24:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7a5a      	ldrb	r2, [r3, #9]
 8001c2a:	7a99      	ldrb	r1, [r3, #10]
 8001c2c:	0209      	lsls	r1, r1, #8
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	7adb      	ldrb	r3, [r3, #11]
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	4313      	orrs	r3, r2
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3305      	adds	r3, #5
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	1d98      	adds	r0, r3, #6
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f103 010c 	add.w	r1, r3, #12
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	78db      	ldrb	r3, [r3, #3]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f007 fdf2 	bl	8009838 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001c54:	7dbb      	ldrb	r3, [r7, #22]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	78d2      	ldrb	r2, [r2, #3]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e06c      	b.n	8001d40 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe4f 	bl	8001912 <_mav_trim_payload>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001c78:	2309      	movs	r3, #9
 8001c7a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	789a      	ldrb	r2, [r3, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3301      	adds	r3, #1
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	7912      	ldrb	r2, [r2, #4]
 8001c94:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	7952      	ldrb	r2, [r2, #5]
 8001c9e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	7992      	ldrb	r2, [r2, #6]
 8001ca8:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3305      	adds	r3, #5
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	79d2      	ldrb	r2, [r2, #7]
 8001cb2:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3306      	adds	r3, #6
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	7a12      	ldrb	r2, [r2, #8]
 8001cbc:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	7a5a      	ldrb	r2, [r3, #9]
 8001cc2:	7a99      	ldrb	r1, [r3, #10]
 8001cc4:	0209      	lsls	r1, r1, #8
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	7adb      	ldrb	r3, [r3, #11]
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3307      	adds	r3, #7
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7a5a      	ldrb	r2, [r3, #9]
 8001cdc:	7a99      	ldrb	r1, [r3, #10]
 8001cde:	0209      	lsls	r1, r1, #8
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	7adb      	ldrb	r3, [r3, #11]
 8001ce4:	041b      	lsls	r3, r3, #16
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	121a      	asrs	r2, r3, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3308      	adds	r3, #8
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7a5a      	ldrb	r2, [r3, #9]
 8001cf6:	7a99      	ldrb	r1, [r3, #10]
 8001cf8:	0209      	lsls	r1, r1, #8
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	7adb      	ldrb	r3, [r3, #11]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	4313      	orrs	r3, r2
 8001d02:	141a      	asrs	r2, r3, #16
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3309      	adds	r3, #9
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f103 000a 	add.w	r0, r3, #10
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	330c      	adds	r3, #12
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f007 fd8d 	bl	8009838 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001d1e:	7dba      	ldrb	r2, [r7, #22]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	4413      	add	r3, r2
 8001d24:	3301      	adds	r3, #1
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <mavlink_msg_to_send_buffer+0x164>
 8001d38:	230d      	movs	r3, #13
 8001d3a:	e000      	b.n	8001d3e <mavlink_msg_to_send_buffer+0x166>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1c98      	adds	r0, r3, #2
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001d6e:	7dfa      	ldrb	r2, [r7, #23]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f007 fd61 	bl	8009838 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001d76:	7dbb      	ldrb	r3, [r7, #22]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	b29b      	uxth	r3, r3
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001da2:	f107 030e 	add.w	r3, r7, #14
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fa3b 	bl	8001222 <crc_init>
	msg->checksum = crcTmp;
 8001dac:	89fa      	ldrh	r2, [r7, #14]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	801a      	strh	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001dce:	f107 020e 	add.w	r2, r7, #14
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f9f1 	bl	80011be <crc_accumulate>
	msg->checksum = checksum;
 8001ddc:	89fa      	ldrh	r2, [r7, #14]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	801a      	strh	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	f240 1327 	movw	r3, #295	; 0x127
 8001dfc:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d226      	bcs.n	8001e54 <mavlink_get_msg_entry+0x68>
            uint32_t mid = (low+1+high)/2;
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001e12:	491d      	ldr	r1, [pc, #116]	; (8001e88 <mavlink_get_msg_entry+0x9c>)
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d203      	bcs.n	8001e30 <mavlink_get_msg_entry+0x44>
                high = mid-1;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
                continue;
 8001e2e:	e010      	b.n	8001e52 <mavlink_get_msg_entry+0x66>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001e30:	4915      	ldr	r1, [pc, #84]	; (8001e88 <mavlink_get_msg_entry+0x9c>)
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d902      	bls.n	8001e4c <mavlink_get_msg_entry+0x60>
                low = mid;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	617b      	str	r3, [r7, #20]
                continue;
 8001e4a:	e002      	b.n	8001e52 <mavlink_get_msg_entry+0x66>
            }
            low = mid;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	617b      	str	r3, [r7, #20]
            break;
 8001e50:	e000      	b.n	8001e54 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8001e52:	e7d4      	b.n	8001dfe <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <mavlink_get_msg_entry+0x9c>)
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e006      	b.n	8001e7c <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <mavlink_get_msg_entry+0x9c>)
 8001e7a:	4413      	add	r3, r2
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	08009c00 	.word	0x08009c00

08001e8c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	78db      	ldrb	r3, [r3, #3]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f200 8277 	bhi.w	800239e <mavlink_frame_char_buffer+0x512>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <mavlink_frame_char_buffer+0x2c>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001ef9 	.word	0x08001ef9
 8001ebc:	08001ef9 	.word	0x08001ef9
 8001ec0:	08001f57 	.word	0x08001f57
 8001ec4:	08001fbd 	.word	0x08001fbd
 8001ec8:	08001ff5 	.word	0x08001ff5
 8001ecc:	0800200d 	.word	0x0800200d
 8001ed0:	08002025 	.word	0x08002025
 8001ed4:	0800203d 	.word	0x0800203d
 8001ed8:	08002055 	.word	0x08002055
 8001edc:	080020af 	.word	0x080020af
 8001ee0:	080020fb 	.word	0x080020fb
 8001ee4:	08002157 	.word	0x08002157
 8001ee8:	0800218f 	.word	0x0800218f
 8001eec:	0800221b 	.word	0x0800221b
 8001ef0:	0800221b 	.word	0x0800221b
 8001ef4:	080022df 	.word	0x080022df
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2bfd      	cmp	r3, #253	; 0xfd
 8001efc:	d113      	bne.n	8001f26 <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2202      	movs	r2, #2
 8001f02:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	7b1b      	ldrb	r3, [r3, #12]
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff ff39 	bl	8001d96 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001f24:	e232      	b.n	800238c <mavlink_frame_char_buffer+0x500>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2bfe      	cmp	r3, #254	; 0xfe
 8001f2a:	f040 822f 	bne.w	800238c <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2202      	movs	r2, #2
 8001f32:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	79fa      	ldrb	r2, [r7, #7]
 8001f3e:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	7b1b      	ldrb	r3, [r3, #12]
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff ff21 	bl	8001d96 <mavlink_start_checksum>
		break;
 8001f54:	e21a      	b.n	800238c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00f      	beq.n	8001f7e <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001f6a:	68b8      	ldr	r0, [r7, #8]
 8001f6c:	f7ff fe24 	bl	8001bb8 <_mav_parse_error>
			status->msg_received = 0;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001f7c:	e20f      	b.n	800239e <mavlink_frame_char_buffer+0x512>
			rxmsg->len = c;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	79fa      	ldrb	r2, [r7, #7]
 8001f82:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff ff13 	bl	8001dba <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2205      	movs	r2, #5
 8001fb0:	70da      	strb	r2, [r3, #3]
		break;
 8001fb2:	e1f4      	b.n	800239e <mavlink_frame_char_buffer+0x512>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	70da      	strb	r2, [r3, #3]
		break;
 8001fba:	e1f0      	b.n	800239e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f7ff fdf2 	bl	8001bb8 <_mav_parse_error>
			status->msg_received = 0;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	70da      	strb	r2, [r3, #3]
			break;
 8001fe0:	e1dd      	b.n	800239e <mavlink_frame_char_buffer+0x512>
		}
		mavlink_update_checksum(rxmsg, c);
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fee7 	bl	8001dba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	70da      	strb	r2, [r3, #3]
		break;
 8001ff2:	e1d4      	b.n	800239e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff fedb 	bl	8001dba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2205      	movs	r2, #5
 8002008:	70da      	strb	r2, [r3, #3]
		break;
 800200a:	e1c8      	b.n	800239e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	79fa      	ldrb	r2, [r7, #7]
 8002010:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	4619      	mov	r1, r3
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff fecf 	bl	8001dba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2206      	movs	r2, #6
 8002020:	70da      	strb	r2, [r3, #3]
		break;
 8002022:	e1bc      	b.n	800239e <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4619      	mov	r1, r3
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff fec3 	bl	8001dba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2207      	movs	r2, #7
 8002038:	70da      	strb	r2, [r3, #3]
		break;
 800203a:	e1b0      	b.n	800239e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	4619      	mov	r1, r3
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff feb7 	bl	8001dba <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2208      	movs	r2, #8
 8002050:	70da      	strb	r2, [r3, #3]
		break;
 8002052:	e1a4      	b.n	800239e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	b2d9      	uxtb	r1, r3
 800205e:	2000      	movs	r0, #0
 8002060:	4301      	orrs	r1, r0
 8002062:	7251      	strb	r1, [r2, #9]
 8002064:	0a19      	lsrs	r1, r3, #8
 8002066:	b2c9      	uxtb	r1, r1
 8002068:	2000      	movs	r0, #0
 800206a:	4301      	orrs	r1, r0
 800206c:	7291      	strb	r1, [r2, #10]
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2100      	movs	r1, #0
 8002074:	430b      	orrs	r3, r1
 8002076:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4619      	mov	r1, r3
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fe9c 	bl	8001dba <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	7b1b      	ldrb	r3, [r3, #12]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	78db      	ldrb	r3, [r3, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	220b      	movs	r2, #11
 800209a:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 800209c:	e17f      	b.n	800239e <mavlink_frame_char_buffer+0x512>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	220c      	movs	r2, #12
 80020a2:	70da      	strb	r2, [r3, #3]
		break;
 80020a4:	e17b      	b.n	800239e <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2209      	movs	r2, #9
 80020aa:	70da      	strb	r2, [r3, #3]
		break;
 80020ac:	e177      	b.n	800239e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	7a5a      	ldrb	r2, [r3, #9]
 80020b2:	7a99      	ldrb	r1, [r3, #10]
 80020b4:	0209      	lsls	r1, r1, #8
 80020b6:	430a      	orrs	r2, r1
 80020b8:	7adb      	ldrb	r3, [r3, #11]
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	4313      	orrs	r3, r2
 80020be:	461a      	mov	r2, r3
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	b2d1      	uxtb	r1, r2
 80020ce:	2000      	movs	r0, #0
 80020d0:	4301      	orrs	r1, r0
 80020d2:	7259      	strb	r1, [r3, #9]
 80020d4:	0a11      	lsrs	r1, r2, #8
 80020d6:	b2c9      	uxtb	r1, r1
 80020d8:	2000      	movs	r0, #0
 80020da:	4301      	orrs	r1, r0
 80020dc:	7299      	strb	r1, [r3, #10]
 80020de:	0c12      	lsrs	r2, r2, #16
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	2100      	movs	r1, #0
 80020e4:	430a      	orrs	r2, r1
 80020e6:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4619      	mov	r1, r3
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff fe64 	bl	8001dba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	220a      	movs	r2, #10
 80020f6:	70da      	strb	r2, [r3, #3]
		break;
 80020f8:	e151      	b.n	800239e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	7a5a      	ldrb	r2, [r3, #9]
 80020fe:	7a99      	ldrb	r1, [r3, #10]
 8002100:	0209      	lsls	r1, r1, #8
 8002102:	430a      	orrs	r2, r1
 8002104:	7adb      	ldrb	r3, [r3, #11]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	4313      	orrs	r3, r2
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	4313      	orrs	r3, r2
 8002112:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	b2d1      	uxtb	r1, r2
 800211a:	2000      	movs	r0, #0
 800211c:	4301      	orrs	r1, r0
 800211e:	7259      	strb	r1, [r3, #9]
 8002120:	0a11      	lsrs	r1, r2, #8
 8002122:	b2c9      	uxtb	r1, r1
 8002124:	2000      	movs	r0, #0
 8002126:	4301      	orrs	r1, r0
 8002128:	7299      	strb	r1, [r3, #10]
 800212a:	0c12      	lsrs	r2, r2, #16
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	2100      	movs	r1, #0
 8002130:	430a      	orrs	r2, r1
 8002132:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	4619      	mov	r1, r3
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f7ff fe3e 	bl	8001dba <mavlink_update_checksum>
		if(rxmsg->len > 0){
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	220b      	movs	r2, #11
 800214a:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 800214c:	e127      	b.n	800239e <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	220c      	movs	r2, #12
 8002152:	70da      	strb	r2, [r3, #3]
		break;
 8002154:	e123      	b.n	800239e <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f103 020c 	add.w	r2, r3, #12
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	b2c8      	uxtb	r0, r1
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	7108      	strb	r0, [r1, #4]
 8002168:	4413      	add	r3, r2
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4619      	mov	r1, r3
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff fe21 	bl	8001dba <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	791a      	ldrb	r2, [r3, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	78db      	ldrb	r3, [r3, #3]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8105 	bne.w	8002390 <mavlink_frame_char_buffer+0x504>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	220c      	movs	r2, #12
 800218a:	70da      	strb	r2, [r3, #3]
		}
		break;
 800218c:	e100      	b.n	8002390 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	7a5a      	ldrb	r2, [r3, #9]
 8002192:	7a99      	ldrb	r1, [r3, #10]
 8002194:	0209      	lsls	r1, r1, #8
 8002196:	430a      	orrs	r2, r1
 8002198:	7adb      	ldrb	r3, [r3, #11]
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	4313      	orrs	r3, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe24 	bl	8001dec <mavlink_get_msg_entry>
 80021a4:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <mavlink_frame_char_buffer+0x326>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	791b      	ldrb	r3, [r3, #4]
 80021b0:	e000      	b.n	80021b4 <mavlink_frame_char_buffer+0x328>
 80021b2:	2300      	movs	r3, #0
 80021b4:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	4619      	mov	r1, r3
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7ff fdfd 	bl	8001dba <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 80021c0:	79fa      	ldrb	r2, [r7, #7]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d003      	beq.n	80021d6 <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	220e      	movs	r2, #14
 80021d2:	70da      	strb	r2, [r3, #3]
 80021d4:	e002      	b.n	80021dc <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	220d      	movs	r2, #13
 80021da:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	79fa      	ldrb	r2, [r7, #7]
 80021e0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80d4 	beq.w	8002394 <mavlink_frame_char_buffer+0x508>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	791a      	ldrb	r2, [r3, #4]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	799b      	ldrb	r3, [r3, #6]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f080 80cd 	bcs.w	8002394 <mavlink_frame_char_buffer+0x508>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	330c      	adds	r3, #12
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	7912      	ldrb	r2, [r2, #4]
 8002202:	1898      	adds	r0, r3, r2
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	799b      	ldrb	r3, [r3, #6]
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	461a      	mov	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f007 fb1d 	bl	8009852 <memset>
		}
		break;
 8002218:	e0bc      	b.n	8002394 <mavlink_frame_char_buffer+0x508>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	2b0e      	cmp	r3, #14
 8002220:	d007      	beq.n	8002232 <mavlink_frame_char_buffer+0x3a6>
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	b292      	uxth	r2, r2
 800222a:	0a12      	lsrs	r2, r2, #8
 800222c:	b292      	uxth	r2, r2
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <mavlink_frame_char_buffer+0x3ae>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2202      	movs	r2, #2
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e002      	b.n	8002240 <mavlink_frame_char_buffer+0x3b4>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	79fa      	ldrb	r2, [r7, #7]
 8002244:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	791b      	ldrb	r3, [r3, #4]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <mavlink_frame_char_buffer+0x3e6>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	220f      	movs	r2, #15
 8002258:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	220d      	movs	r2, #13
 800225e:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b02      	cmp	r3, #2
 8002266:	f000 8097 	beq.w	8002398 <mavlink_frame_char_buffer+0x50c>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8002270:	e092      	b.n	8002398 <mavlink_frame_char_buffer+0x50c>
			if (status->signing &&
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01a      	beq.n	80022b0 <mavlink_frame_char_buffer+0x424>
			   	(status->signing->accept_unsigned_callback == NULL ||
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <mavlink_frame_char_buffer+0x420>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	7a59      	ldrb	r1, [r3, #9]
 800228e:	7a98      	ldrb	r0, [r3, #10]
 8002290:	0200      	lsls	r0, r0, #8
 8002292:	4301      	orrs	r1, r0
 8002294:	7adb      	ldrb	r3, [r3, #11]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	430b      	orrs	r3, r1
 800229a:	4619      	mov	r1, r3
 800229c:	68b8      	ldr	r0, [r7, #8]
 800229e:	4790      	blx	r2
 80022a0:	4603      	mov	r3, r0
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <mavlink_frame_char_buffer+0x424>
			if (status->signing &&
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <mavlink_frame_char_buffer+0x426>
 80022b0:	2300      	movs	r3, #0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <mavlink_frame_char_buffer+0x438>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d002      	beq.n	80022c4 <mavlink_frame_char_buffer+0x438>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2203      	movs	r2, #3
 80022c2:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2201      	movs	r2, #1
 80022c8:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d063      	beq.n	8002398 <mavlink_frame_char_buffer+0x50c>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80022d0:	f240 1223 	movw	r2, #291	; 0x123
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f007 faae 	bl	8009838 <memcpy>
		break;
 80022dc:	e05c      	b.n	8002398 <mavlink_frame_char_buffer+0x50c>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	7b5b      	ldrb	r3, [r3, #13]
 80022e2:	f1c3 030d 	rsb	r3, r3, #13
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	7b5b      	ldrb	r3, [r3, #13]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	7b5b      	ldrb	r3, [r3, #13]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d14b      	bne.n	800239c <mavlink_frame_char_buffer+0x510>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6918      	ldr	r0, [r3, #16]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4619      	mov	r1, r3
 8002310:	f7ff fb1a 	bl	8001948 <mavlink_signature_check>
 8002314:	4603      	mov	r3, r0
 8002316:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8002318:	7ffb      	ldrb	r3, [r7, #31]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <mavlink_frame_char_buffer+0x4c8>
			   	(status->signing->accept_unsigned_callback &&
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d012      	beq.n	8002354 <mavlink_frame_char_buffer+0x4c8>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	7a59      	ldrb	r1, [r3, #9]
 8002338:	7a98      	ldrb	r0, [r3, #10]
 800233a:	0200      	lsls	r0, r0, #8
 800233c:	4301      	orrs	r1, r0
 800233e:	7adb      	ldrb	r3, [r3, #11]
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	430b      	orrs	r3, r1
 8002344:	4619      	mov	r1, r3
 8002346:	68b8      	ldr	r0, [r7, #8]
 8002348:	4790      	blx	r2
 800234a:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <mavlink_frame_char_buffer+0x4c8>
			if (!sig_ok &&
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <mavlink_frame_char_buffer+0x4ca>
 8002354:	2300      	movs	r3, #0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <mavlink_frame_char_buffer+0x4d2>
				// accepted via application level override
				sig_ok = true;
 800235a:	2301      	movs	r3, #1
 800235c:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 800235e:	7ffb      	ldrb	r3, [r7, #31]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <mavlink_frame_char_buffer+0x4e0>
				status->msg_received = MAVLINK_FRAMING_OK;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e002      	b.n	8002372 <mavlink_frame_char_buffer+0x4e6>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2203      	movs	r2, #3
 8002370:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2201      	movs	r2, #1
 8002376:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00e      	beq.n	800239c <mavlink_frame_char_buffer+0x510>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800237e:	f240 1223 	movw	r2, #291	; 0x123
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f007 fa57 	bl	8009838 <memcpy>
			}
		}
		break;
 800238a:	e007      	b.n	800239c <mavlink_frame_char_buffer+0x510>
		break;
 800238c:	bf00      	nop
 800238e:	e006      	b.n	800239e <mavlink_frame_char_buffer+0x512>
		break;
 8002390:	bf00      	nop
 8002392:	e004      	b.n	800239e <mavlink_frame_char_buffer+0x512>
		break;
 8002394:	bf00      	nop
 8002396:	e002      	b.n	800239e <mavlink_frame_char_buffer+0x512>
		break;
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <mavlink_frame_char_buffer+0x512>
		break;
 800239c:	bf00      	nop
	}

	bufferIndex++;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d110      	bne.n	80023ce <mavlink_frame_char_buffer+0x542>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	799a      	ldrb	r2, [r3, #6]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	891b      	ldrh	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <mavlink_frame_char_buffer+0x536>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	891b      	ldrh	r3, [r3, #8]
 80023c6:	3301      	adds	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <mavlink_frame_char_buffer+0x550>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	78da      	ldrb	r2, [r3, #3]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01a      	beq.n	8002418 <mavlink_frame_char_buffer+0x58c>
           r_mavlink_status->parse_state = status->parse_state;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	78da      	ldrb	r2, [r3, #3]
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	791a      	ldrb	r2, [r3, #4]
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	795b      	ldrb	r3, [r3, #5]
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	891a      	ldrh	r2, [r3, #8]
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	789b      	ldrb	r3, [r3, #2]
 800240a:	b29a      	uxth	r2, r3
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	7b1a      	ldrb	r2, [r3, #12]
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d110      	bne.n	8002448 <mavlink_frame_char_buffer+0x5bc>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <mavlink_frame_char_buffer+0x5bc>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002432:	b21a      	sxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	b21b      	sxth	r3, r3
 800243e:	4313      	orrs	r3, r2
 8002440:	b21b      	sxth	r3, r3
 8002442:	b29a      	uxth	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b087      	sub	sp, #28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	460b      	mov	r3, r1
 8002464:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fa2d 	bl	80018c8 <mavlink_get_channel_buffer>
 800246e:	4604      	mov	r4, r0
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fa14 	bl	80018a0 <mavlink_get_channel_status>
 8002478:	4601      	mov	r1, r0
 800247a:	7bba      	ldrb	r2, [r7, #14]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff fd02 	bl	8001e8c <mavlink_frame_char_buffer>
 8002488:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b088      	sub	sp, #32
 8002496:	af00      	add	r7, sp, #0
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	460b      	mov	r3, r1
 80024a2:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 80024a4:	7bb9      	ldrb	r1, [r7, #14]
 80024a6:	7bf8      	ldrb	r0, [r7, #15]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f7ff ffd2 	bl	8002454 <mavlink_frame_char>
 80024b0:	4603      	mov	r3, r0
 80024b2:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 80024b4:	7ffb      	ldrb	r3, [r7, #31]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d002      	beq.n	80024c0 <mavlink_parse_char+0x2e>
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d120      	bne.n	8002502 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fa00 	bl	80018c8 <mavlink_get_channel_buffer>
 80024c8:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f9e7 	bl	80018a0 <mavlink_get_channel_status>
 80024d2:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 80024d4:	6978      	ldr	r0, [r7, #20]
 80024d6:	f7ff fb6f 	bl	8001bb8 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2201      	movs	r2, #1
 80024e4:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 80024e6:	7bbb      	ldrb	r3, [r7, #14]
 80024e8:	2bfd      	cmp	r3, #253	; 0xfd
 80024ea:	d108      	bne.n	80024fe <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2202      	movs	r2, #2
 80024f0:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2200      	movs	r2, #0
 80024f6:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80024f8:	69b8      	ldr	r0, [r7, #24]
 80024fa:	f7ff fc4c 	bl	8001d96 <mavlink_start_checksum>
	    }
	    return 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8002502:	7ffb      	ldrb	r3, [r7, #31]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>:
 *
 */

#include "../Inc/SSM_D_MAVLink.hpp"

MAVLink::MAVLink(UART_HandleTypeDef* uart_handle) : uart_(uart_handle)
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
{
    is_new_ = false;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
    rx_circular_buffer_ = new CircularBuffer(rx_circular_buffer_ptr_, 1000);
 8002526:	2010      	movs	r0, #16
 8002528:	f007 f91a 	bl	8009760 <_Znwj>
 800252c:	4603      	mov	r3, r0
 800252e:	461c      	mov	r4, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002536:	4619      	mov	r1, r3
 8002538:	4620      	mov	r0, r4
 800253a:	f7fe f889 	bl	8000650 <_ZN14CircularBufferC1EPhi>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8c3 43e8 	str.w	r4, [r3, #1000]	; 0x3e8

    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800254e:	da07      	bge.n	8002560 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x54>
        raw_rx_msg_[MAVLINK_MAX_PACKET_LEN] = 0;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e7f3      	b.n	8002548 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x3c>
    }
}
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}

0800256a <_ZN7MAVLinkD1Ev>:

MAVLink::~MAVLink(){
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
    delete rx_circular_buffer_;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <_ZN7MAVLinkD1Ev+0x1a>
 800257c:	2110      	movs	r1, #16
 800257e:	4618      	mov	r0, r3
 8002580:	f007 f8ec 	bl	800975c <_ZdlPvj>
}
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN7MAVLink11readMessageER17__mavlink_message>:

bool MAVLink::readMessage(mavlink_message_t& message)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b0d2      	sub	sp, #328	; 0x148
 8002592:	af00      	add	r7, sp, #0
 8002594:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002598:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800259c:	6018      	str	r0, [r3, #0]
 800259e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80025a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025a6:	6019      	str	r1, [r3, #0]
    //if Data Reception process is not ongoing, then activate it
    if(uart_->RxState != HAL_UART_STATE_BUSY_RX){
 80025a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80025ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80025b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ba:	2b22      	cmp	r3, #34	; 0x22
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d012      	beq.n	80025ee <_ZN7MAVLink11readMessageER17__mavlink_message+0x60>
        HAL_UARTEx_ReceiveToIdle_DMA(uart_, raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 80025c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80025cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80025d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80025da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80025e4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80025e8:	4619      	mov	r1, r3
 80025ea:	f006 fe20 	bl	800922e <HAL_UARTEx_ReceiveToIdle_DMA>
    }

    uint8_t byte = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	mavlink_status_t status = {};
 80025f4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]
    mavlink_message_t rx_msg;

    while(rx_circular_buffer_->read(&byte, 1) && is_new_){
 8002606:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800260a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8002614:	f207 1147 	addw	r1, r7, #327	; 0x147
 8002618:	2201      	movs	r2, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff9a 	bl	8000554 <_ZN14CircularBuffer4readEPhi>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <_ZN7MAVLink11readMessageER17__mavlink_message+0xae>
 8002626:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800262a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <_ZN7MAVLink11readMessageER17__mavlink_message+0xae>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <_ZN7MAVLink11readMessageER17__mavlink_message+0xb0>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d02d      	beq.n	800269e <_ZN7MAVLink11readMessageER17__mavlink_message+0x110>
        if( mavlink_parse_char(MAVLINK_COMM_1, byte, &(rx_msg), &status)){
 8002642:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8002646:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800264a:	f107 0208 	add.w	r2, r7, #8
 800264e:	2001      	movs	r0, #1
 8002650:	f7ff ff1f 	bl	8002492 <mavlink_parse_char>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0d0      	beq.n	8002606 <_ZN7MAVLink11readMessageER17__mavlink_message+0x78>
            mavlink_reset_channel_status(MAVLINK_COMM_1);
 8002664:	2001      	movs	r0, #1
 8002666:	f7ff f943 	bl	80018f0 <mavlink_reset_channel_status>
            is_new_ = false;
 800266a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800266e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
            message = rx_msg;
 800267a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800267e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002688:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f240 1323 	movw	r3, #291	; 0x123
 8002694:	461a      	mov	r2, r3
 8002696:	f007 f8cf 	bl	8009838 <memcpy>

            return true;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <_ZN7MAVLink11readMessageER17__mavlink_message+0x112>
        }
    }
    return false;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_ZN7MAVLink12writeMessageE17__mavlink_message>:

void MAVLink::writeMessage(const mavlink_message_t output_message){
 80026aa:	b084      	sub	sp, #16
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b0cb      	sub	sp, #300	; 0x12c
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80026b6:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 80026ba:	6020      	str	r0, [r4, #0]
 80026bc:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 80026c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];
    uint16_t len = mavlink_msg_to_send_buffer(buf, &output_message);
 80026c4:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fa82 	bl	8001bd8 <mavlink_msg_to_send_buffer>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	HAL_StatusTypeDef ret = HAL_UART_Transmit(uart_, buf, len, 1000);
 80026da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80026e8:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 80026ec:	f107 010c 	add.w	r1, r7, #12
 80026f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f4:	f005 f804 	bl	8007700 <HAL_UART_Transmit>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
}
 80026fe:	bf00      	nop
 8002700:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800270a:	b004      	add	sp, #16
 800270c:	4770      	bx	lr
	...

08002710 <_ZN3SSM11getInstanceEv>:
 */
#include "../Inc/Simple_Sytem_Manager.hpp"

SSM* SSM::singleton_= NULL;

SSM* SSM::getInstance(){
 8002710:	b598      	push	{r3, r4, r7, lr}
 8002712:	af00      	add	r7, sp, #0
    if (singleton_ == NULL)
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <_ZN3SSM11getInstanceEv+0x28>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <_ZN3SSM11getInstanceEv+0x20>
      singleton_ = new SSM();
 800271c:	2003      	movs	r0, #3
 800271e:	f007 f81f 	bl	8009760 <_Znwj>
 8002722:	4603      	mov	r3, r0
 8002724:	461c      	mov	r4, r3
 8002726:	4620      	mov	r0, r4
 8002728:	f000 f813 	bl	8002752 <_ZN3SSMC1Ev>
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <_ZN3SSM11getInstanceEv+0x28>)
 800272e:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <_ZN3SSM11getInstanceEv+0x28>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd98      	pop	{r3, r4, r7, pc}
 8002738:	20000fa0 	.word	0x20000fa0

0800273c <_ZN3SSM23execute_mavlink_passingEv>:
    SBus sbus_data;
    fetch_command(sbus_data);
    transmit_command(sbus_data);
}

void SSM::execute_mavlink_passing(){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    forwarding_MAVLink();
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f81b 	bl	8002780 <_ZN3SSM18forwarding_MAVLinkEv>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_ZN3SSMC1Ev>:
    else {
        transmit_command(sbus_data);
    }
}

SSM::SSM(){
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
    config();
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f805 	bl	800276a <_ZN3SSM6configEv>
}
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZN3SSM6configEv>:

SSM::~SSM(){
}

void SSM::config(){
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
    /*empty for now*/
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <_ZN3SSM18forwarding_MAVLinkEv>:
bool SSM::transmit_command(SBus &sbus_data)
{
    SBUSSender::getInstance(&huart2)->SetSBusValue(sbus_data);
}

void SSM::forwarding_MAVLink(){
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8002786:	af46      	add	r7, sp, #280	; 0x118
 8002788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800278c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002790:	6018      	str	r0, [r3, #0]
    mavlink_message_t new_message;
    if (pixhawk_mavlink->readMessage(new_message)){
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <_ZN3SSM18forwarding_MAVLinkEv+0x94>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f107 020c 	add.w	r2, r7, #12
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fef6 	bl	800258e <_ZN7MAVLink11readMessageER17__mavlink_message>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <_ZN3SSM18forwarding_MAVLinkEv+0x4e>
        ground_mavlink->writeMessage(new_message);
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <_ZN3SSM18forwarding_MAVLinkEv+0x98>)
 80027aa:	681d      	ldr	r5, [r3, #0]
 80027ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80027b0:	f5a3 7492 	sub.w	r4, r3, #292	; 0x124
 80027b4:	4668      	mov	r0, sp
 80027b6:	f104 030c 	add.w	r3, r4, #12
 80027ba:	f240 1217 	movw	r2, #279	; 0x117
 80027be:	4619      	mov	r1, r3
 80027c0:	f007 f83a 	bl	8009838 <memcpy>
 80027c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80027c8:	4628      	mov	r0, r5
 80027ca:	f7ff ff6e 	bl	80026aa <_ZN7MAVLink12writeMessageE17__mavlink_message>
    }

    if (ground_mavlink->readMessage(new_message)){
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <_ZN3SSM18forwarding_MAVLinkEv+0x98>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f107 020c 	add.w	r2, r7, #12
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fed8 	bl	800258e <_ZN7MAVLink11readMessageER17__mavlink_message>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <_ZN3SSM18forwarding_MAVLinkEv+0x8a>
        pixhawk_mavlink->writeMessage(new_message);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <_ZN3SSM18forwarding_MAVLinkEv+0x94>)
 80027e6:	681d      	ldr	r5, [r3, #0]
 80027e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80027ec:	f5a3 7492 	sub.w	r4, r3, #292	; 0x124
 80027f0:	4668      	mov	r0, sp
 80027f2:	f104 030c 	add.w	r3, r4, #12
 80027f6:	f240 1217 	movw	r2, #279	; 0x117
 80027fa:	4619      	mov	r1, r3
 80027fc:	f007 f81c 	bl	8009838 <memcpy>
 8002800:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002804:	4628      	mov	r0, r5
 8002806:	f7ff ff50 	bl	80026aa <_ZN7MAVLink12writeMessageE17__mavlink_message>
    }
}
 800280a:	bf00      	nop
 800280c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002810:	46bd      	mov	sp, r7
 8002812:	bdb0      	pop	{r4, r5, r7, pc}
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800283e:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002840:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <MX_ADC1_Init+0xe4>)
 8002842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <MX_ADC1_Init+0xe0>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002856:	4b29      	ldr	r3, [pc, #164]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <MX_ADC1_Init+0xe0>)
 800285e:	2204      	movs	r2, #4
 8002860:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002864:	2200      	movs	r2, #0
 8002866:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <MX_ADC1_Init+0xe0>)
 800286a:	2200      	movs	r2, #0
 800286c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002870:	2201      	movs	r2, #1
 8002872:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <MX_ADC1_Init+0xe0>)
 800287e:	2200      	movs	r2, #0
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002884:	2200      	movs	r2, #0
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <MX_ADC1_Init+0xe0>)
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002892:	2200      	movs	r2, #0
 8002894:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <MX_ADC1_Init+0xe0>)
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800289e:	4817      	ldr	r0, [pc, #92]	; (80028fc <MX_ADC1_Init+0xe0>)
 80028a0:	f001 fac0 	bl	8003e24 <HAL_ADC_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80028aa:	f000 f9ed 	bl	8002c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	4619      	mov	r1, r3
 80028b8:	4810      	ldr	r0, [pc, #64]	; (80028fc <MX_ADC1_Init+0xe0>)
 80028ba:	f002 f80f 	bl	80048dc <HAL_ADCEx_MultiModeConfigChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80028c4:	f000 f9e0 	bl	8002c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_ADC1_Init+0xe8>)
 80028ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028cc:	2306      	movs	r3, #6
 80028ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028d4:	237f      	movs	r3, #127	; 0x7f
 80028d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028d8:	2304      	movs	r3, #4
 80028da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_ADC1_Init+0xe0>)
 80028e6:	f001 fbe9 	bl	80040bc <HAL_ADC_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80028f0:	f000 f9ca 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	3728      	adds	r7, #40	; 0x28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000fa4 	.word	0x20000fa4
 8002900:	42028000 	.word	0x42028000
 8002904:	0c900008 	.word	0x0c900008

08002908 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b0ae      	sub	sp, #184	; 0xb8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	2294      	movs	r2, #148	; 0x94
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f006 ff92 	bl	8009852 <memset>
  if(adcHandle->Instance==ADC1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_ADC_MspInit+0xa8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d137      	bne.n	80029a8 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800293c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800293e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002946:	f107 0310 	add.w	r3, r7, #16
 800294a:	4618      	mov	r0, r3
 800294c:	f004 f838 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002956:	f000 f997 	bl	8002c88 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_ADC_MspInit+0xac>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <HAL_ADC_MspInit+0xac>)
 8002960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <HAL_ADC_MspInit+0xac>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_ADC_MspInit+0xac>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_ADC_MspInit+0xac>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_ADC_MspInit+0xac>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800298a:	2304      	movs	r3, #4
 800298c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002990:	2303      	movs	r3, #3
 8002992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_ADC_MspInit+0xb0>)
 80029a4:	f002 fd08 	bl	80053b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029a8:	bf00      	nop
 80029aa:	37b8      	adds	r7, #184	; 0xb8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	42028000 	.word	0x42028000
 80029b4:	40021000 	.word	0x40021000
 80029b8:	42020800 	.word	0x42020800

080029bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <MX_DMA_Init+0x80>)
 80029c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <MX_DMA_Init+0x80>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	6493      	str	r3, [r2, #72]	; 0x48
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <MX_DMA_Init+0x80>)
 80029d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <MX_DMA_Init+0x80>)
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <MX_DMA_Init+0x80>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6493      	str	r3, [r2, #72]	; 0x48
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <MX_DMA_Init+0x80>)
 80029e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	201d      	movs	r0, #29
 80029f8:	f002 f8ef 	bl	8004bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029fc:	201d      	movs	r0, #29
 80029fe:	f002 f906 	bl	8004c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	201e      	movs	r0, #30
 8002a08:	f002 f8e7 	bl	8004bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002a0c:	201e      	movs	r0, #30
 8002a0e:	f002 f8fe 	bl	8004c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	201f      	movs	r0, #31
 8002a18:	f002 f8df 	bl	8004bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002a1c:	201f      	movs	r0, #31
 8002a1e:	f002 f8f6 	bl	8004c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2020      	movs	r0, #32
 8002a28:	f002 f8d7 	bl	8004bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002a2c:	2020      	movs	r0, #32
 8002a2e:	f002 f8ee 	bl	8004c0e <HAL_NVIC_EnableIRQ>

}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000

08002a40 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
 8002a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a3e      	ldr	r2, [pc, #248]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b3c      	ldr	r3, [pc, #240]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <MX_GPIO_Init+0x114>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002ab6:	f002 ff95 	bl	80059e4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	4826      	ldr	r0, [pc, #152]	; (8002b58 <MX_GPIO_Init+0x118>)
 8002ac0:	f002 fdfa 	bl	80056b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aca:	4824      	ldr	r0, [pc, #144]	; (8002b5c <MX_GPIO_Init+0x11c>)
 8002acc:	f002 fdf4 	bl	80056b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	21a0      	movs	r1, #160	; 0xa0
 8002ad4:	4822      	ldr	r0, [pc, #136]	; (8002b60 <MX_GPIO_Init+0x120>)
 8002ad6:	f002 fdef 	bl	80056b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8002ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	481b      	ldr	r0, [pc, #108]	; (8002b60 <MX_GPIO_Init+0x120>)
 8002af2:	f002 fc61 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <MX_GPIO_Init+0x118>)
 8002b0e:	f002 fc53 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8002b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480c      	ldr	r0, [pc, #48]	; (8002b5c <MX_GPIO_Init+0x11c>)
 8002b2c:	f002 fc44 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8002b30:	23a0      	movs	r3, #160	; 0xa0
 8002b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b34:	2301      	movs	r3, #1
 8002b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <MX_GPIO_Init+0x120>)
 8002b48:	f002 fc36 	bl	80053b8 <HAL_GPIO_Init>

}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	42020800 	.word	0x42020800
 8002b5c:	42020000 	.word	0x42020000
 8002b60:	42020400 	.word	0x42020400

08002b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b68:	f000 ff45 	bl	80039f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b6c:	f000 f81c 	bl	8002ba8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b70:	f7ff ff66 	bl	8002a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b74:	f7ff ff22 	bl	80029bc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002b78:	f000 fb26 	bl	80031c8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002b7c:	f000 f88a 	bl	8002c94 <MX_RTC_Init>
  MX_UCPD1_Init();
 8002b80:	f000 faec 	bl	800315c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8002b84:	f000 fe86 	bl	8003894 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8002b88:	f7ff fe48 	bl	800281c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002b8c:	f000 fbb6 	bl	80032fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002b90:	f000 fc0c 	bl	80033ac <MX_USART3_UART_Init>
  MX_UART4_Init();
 8002b94:	f000 fb66 	bl	8003264 <MX_UART4_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    
    /* USER CODE BEGIN 3 */
    SSM::getInstance()->execute_mavlink_passing();
 8002b98:	f7ff fdba 	bl	8002710 <_ZN3SSM11getInstanceEv>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fdcc 	bl	800273c <_ZN3SSM23execute_mavlink_passingEv>
 8002ba4:	e7f8      	b.n	8002b98 <main+0x34>
	...

08002ba8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b098      	sub	sp, #96	; 0x60
 8002bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bae:	f107 0318 	add.w	r3, r7, #24
 8002bb2:	2248      	movs	r2, #72	; 0x48
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f006 fe4b 	bl	8009852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f002 feae 	bl	800592c <HAL_PWREx_ControlVoltageScaling>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002be0:	f000 f852 	bl	8002c88 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002be4:	f002 fe84 	bl	80058f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <_Z18SystemClock_Configv+0xdc>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <_Z18SystemClock_Configv+0xdc>)
 8002bf0:	f023 0318 	bic.w	r3, r3, #24
 8002bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8002bf8:	2334      	movs	r3, #52	; 0x34
 8002bfa:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002bfc:	2381      	movs	r3, #129	; 0x81
 8002bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002c00:	2301      	movs	r3, #1
 8002c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c04:	2301      	movs	r3, #1
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c0c:	2360      	movs	r3, #96	; 0x60
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c10:	2302      	movs	r3, #2
 8002c12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002c14:	2301      	movs	r3, #1
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8002c1c:	2337      	movs	r3, #55	; 0x37
 8002c1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c20:	2307      	movs	r3, #7
 8002c22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c24:	2302      	movs	r3, #2
 8002c26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c2c:	f107 0318 	add.w	r3, r7, #24
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 ff0b 	bl	8005a4c <HAL_RCC_OscConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002c46:	f000 f81f 	bl	8002c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2105      	movs	r1, #5
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fbc8 	bl	80063f8 <HAL_RCC_ClockConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002c78:	f000 f806 	bl	8002c88 <Error_Handler>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3760      	adds	r7, #96	; 0x60
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8c:	b672      	cpsid	i
}
 8002c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <Error_Handler+0x8>
	...

08002c94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
 8002ca8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <MX_RTC_Init+0x90>)
 8002cae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cb8:	227f      	movs	r2, #127	; 0x7f
 8002cba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cbe:	22ff      	movs	r2, #255	; 0xff
 8002cc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cda:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ce2:	480f      	ldr	r0, [pc, #60]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002ce4:	f004 fb82 	bl	80073ec <HAL_RTC_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002cee:	f7ff ffcb 	bl	8002c88 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002d02:	463b      	mov	r3, r7
 8002d04:	4619      	mov	r1, r3
 8002d06:	4806      	ldr	r0, [pc, #24]	; (8002d20 <MX_RTC_Init+0x8c>)
 8002d08:	f004 fc7e 	bl	8007608 <HAL_RTCEx_PrivilegeModeSet>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002d12:	f7ff ffb9 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000100c 	.word	0x2000100c
 8002d24:	40002800 	.word	0x40002800

08002d28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b0a8      	sub	sp, #160	; 0xa0
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	2294      	movs	r2, #148	; 0x94
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f006 fd8a 	bl	8009852 <memset>
  if(rtcHandle->Instance==RTC)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_RTC_MspInit+0x74>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d124      	bne.n	8002d92 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 fe30 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002d66:	f7ff ff8f 	bl	8002c88 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RTC_MspInit+0x78>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <HAL_RTC_MspInit+0x78>)
 8002d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RTC_MspInit+0x78>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_RTC_MspInit+0x78>)
 8002d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RTC_MspInit+0x78>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d92:	bf00      	nop
 8002d94:	37a0      	adds	r7, #160	; 0xa0
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40002800 	.word	0x40002800
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_MspInit+0x44>)
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_MspInit+0x44>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6613      	str	r3, [r2, #96]	; 0x60
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_MspInit+0x44>)
 8002db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_MspInit+0x44>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_MspInit+0x44>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_MspInit+0x44>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <NMI_Handler+0x4>

08002df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df6:	e7fe      	b.n	8002df6 <HardFault_Handler+0x4>

08002df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <MemManage_Handler+0x4>

08002dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e02:	e7fe      	b.n	8002e02 <BusFault_Handler+0x4>

08002e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <UsageFault_Handler+0x4>

08002e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e38:	f000 fe34 	bl	8003aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <DMA1_Channel1_IRQHandler+0x10>)
 8002e46:	f002 f8db 	bl	8005000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200012f0 	.word	0x200012f0

08002e54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <DMA1_Channel2_IRQHandler+0x10>)
 8002e5a:	f002 f8d1 	bl	8005000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20001358 	.word	0x20001358

08002e68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <DMA1_Channel3_IRQHandler+0x10>)
 8002e6e:	f002 f8c7 	bl	8005000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200013c0 	.word	0x200013c0

08002e7c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <DMA1_Channel4_IRQHandler+0x10>)
 8002e82:	f002 f8bd 	bl	8005000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20001288 	.word	0x20001288

08002e90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <USART2_IRQHandler+0x10>)
 8002e96:	f004 fe23 	bl	8007ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20001160 	.word	0x20001160

08002ea4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <USART3_IRQHandler+0x10>)
 8002eaa:	f004 fe19 	bl	8007ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200011f4 	.word	0x200011f4

08002eb8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <UART4_IRQHandler+0x10>)
 8002ebe:	f004 fe0f 	bl	8007ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200010cc 	.word	0x200010cc

08002ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return 1;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_kill>:

int _kill(int pid, int sig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ee6:	f006 fc5d 	bl	80097a4 <__errno>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2216      	movs	r2, #22
 8002eee:	601a      	str	r2, [r3, #0]
  return -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_exit>:

void _exit (int status)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffe7 	bl	8002edc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f0e:	e7fe      	b.n	8002f0e <_exit+0x12>

08002f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <_sbrk+0x5c>)
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <_sbrk+0x60>)
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <_sbrk+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <_sbrk+0x64>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <_sbrk+0x68>)
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <_sbrk+0x64>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d207      	bcs.n	8002f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f40:	f006 fc30 	bl	80097a4 <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	220c      	movs	r2, #12
 8002f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	e009      	b.n	8002f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <_sbrk+0x64>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <_sbrk+0x64>)
 8002f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20030000 	.word	0x20030000
 8002f70:	00000400 	.word	0x00000400
 8002f74:	20001034 	.word	0x20001034
 8002f78:	20001738 	.word	0x20001738

08002f7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <SystemInit+0x20>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <SystemInit+0x20>)
 8002f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8002fa6:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 8002fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e005      	b.n	8002fce <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002fc2:	4b48      	ldr	r3, [pc, #288]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002fce:	4a46      	ldr	r2, [pc, #280]	; (80030e8 <SystemCoreClockUpdate+0x148>)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd8:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	d866      	bhi.n	80030b2 <SystemCoreClockUpdate+0x112>
 8002fe4:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <SystemCoreClockUpdate+0x4c>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08003021 	.word	0x08003021
 8002ff0:	080030b3 	.word	0x080030b3
 8002ff4:	080030b3 	.word	0x080030b3
 8002ff8:	080030b3 	.word	0x080030b3
 8002ffc:	08003029 	.word	0x08003029
 8003000:	080030b3 	.word	0x080030b3
 8003004:	080030b3 	.word	0x080030b3
 8003008:	080030b3 	.word	0x080030b3
 800300c:	08003031 	.word	0x08003031
 8003010:	080030b3 	.word	0x080030b3
 8003014:	080030b3 	.word	0x080030b3
 8003018:	080030b3 	.word	0x080030b3
 800301c:	08003039 	.word	0x08003039
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003020:	4a32      	ldr	r2, [pc, #200]	; (80030ec <SystemCoreClockUpdate+0x14c>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6013      	str	r3, [r2, #0]
      break;
 8003026:	e048      	b.n	80030ba <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <SystemCoreClockUpdate+0x14c>)
 800302a:	4a31      	ldr	r2, [pc, #196]	; (80030f0 <SystemCoreClockUpdate+0x150>)
 800302c:	601a      	str	r2, [r3, #0]
      break;
 800302e:	e044      	b.n	80030ba <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003030:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <SystemCoreClockUpdate+0x14c>)
 8003032:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <SystemCoreClockUpdate+0x154>)
 8003034:	601a      	str	r2, [r3, #0]
      break;
 8003036:	e040      	b.n	80030ba <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	3301      	adds	r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d003      	beq.n	800305e <SystemCoreClockUpdate+0xbe>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d006      	beq.n	800306a <SystemCoreClockUpdate+0xca>
 800305c:	e00b      	b.n	8003076 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <SystemCoreClockUpdate+0x150>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	613b      	str	r3, [r7, #16]
          break;
 8003068:	e00b      	b.n	8003082 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800306a:	4a22      	ldr	r2, [pc, #136]	; (80030f4 <SystemCoreClockUpdate+0x154>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	613b      	str	r3, [r7, #16]
          break;
 8003074:	e005      	b.n	8003082 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	613b      	str	r3, [r7, #16]
          break;
 8003080:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0e5b      	lsrs	r3, r3, #25
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <SystemCoreClockUpdate+0x14c>)
 80030ae:	6013      	str	r3, [r2, #0]
      break;
 80030b0:	e003      	b.n	80030ba <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80030b2:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <SystemCoreClockUpdate+0x14c>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	6013      	str	r3, [r2, #0]
      break;
 80030b8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <SystemCoreClockUpdate+0x144>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <SystemCoreClockUpdate+0x158>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <SystemCoreClockUpdate+0x14c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	4a05      	ldr	r2, [pc, #20]	; (80030ec <SystemCoreClockUpdate+0x14c>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40021000 	.word	0x40021000
 80030e8:	0800a9f8 	.word	0x0800a9f8
 80030ec:	20000008 	.word	0x20000008
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200
 80030f8:	0800a9e0 	.word	0x0800a9e0

080030fc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4313      	orrs	r3, r2
 800310e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000

0800312c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <LL_APB1_GRP2_EnableClock+0x2c>)
 8003136:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <LL_APB1_GRP2_EnableClock+0x2c>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <LL_APB1_GRP2_EnableClock+0x2c>)
 8003142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4013      	ands	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800314a:	68fb      	ldr	r3, [r7, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000

0800315c <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003162:	463b      	mov	r3, r7
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
 8003170:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8003172:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003176:	f7ff ffd9 	bl	800312c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800317a:	2002      	movs	r0, #2
 800317c:	f7ff ffbe 	bl	80030fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003180:	2001      	movs	r0, #1
 8003182:	f7ff ffbb 	bl	80030fc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800318c:	2303      	movs	r3, #3
 800318e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003194:	463b      	mov	r3, r7
 8003196:	4619      	mov	r1, r3
 8003198:	4809      	ldr	r0, [pc, #36]	; (80031c0 <MX_UCPD1_Init+0x64>)
 800319a:	f006 fa36 	bl	800960a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800319e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80031a4:	2303      	movs	r3, #3
 80031a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	463b      	mov	r3, r7
 80031ae:	4619      	mov	r1, r3
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <MX_UCPD1_Init+0x68>)
 80031b2:	f006 fa2a 	bl	800960a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	42020400 	.word	0x42020400
 80031c4:	42020000 	.word	0x42020000

080031c8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031ce:	4a23      	ldr	r2, [pc, #140]	; (800325c <MX_LPUART1_UART_Init+0x94>)
 80031d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031d4:	4a22      	ldr	r2, [pc, #136]	; (8003260 <MX_LPUART1_UART_Init+0x98>)
 80031d6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031d8:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031ec:	220c      	movs	r2, #12
 80031ee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031fc:	4b16      	ldr	r3, [pc, #88]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 800320a:	2200      	movs	r2, #0
 800320c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800320e:	4812      	ldr	r0, [pc, #72]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 8003210:	f004 fa26 	bl	8007660 <HAL_UART_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800321a:	f7ff fd35 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800321e:	2100      	movs	r1, #0
 8003220:	480d      	ldr	r0, [pc, #52]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 8003222:	f005 ff88 	bl	8009136 <HAL_UARTEx_SetTxFifoThreshold>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800322c:	f7ff fd2c 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003230:	2100      	movs	r1, #0
 8003232:	4809      	ldr	r0, [pc, #36]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 8003234:	f005 ffbd 	bl	80091b2 <HAL_UARTEx_SetRxFifoThreshold>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800323e:	f7ff fd23 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003242:	4805      	ldr	r0, [pc, #20]	; (8003258 <MX_LPUART1_UART_Init+0x90>)
 8003244:	f005 ff3e 	bl	80090c4 <HAL_UARTEx_DisableFifoMode>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800324e:	f7ff fd1b 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20001038 	.word	0x20001038
 800325c:	40008000 	.word	0x40008000
 8003260:	00033324 	.word	0x00033324

08003264 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <MX_UART4_Init+0x90>)
 800326a:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <MX_UART4_Init+0x94>)
 800326c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <MX_UART4_Init+0x90>)
 8003270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003274:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <MX_UART4_Init+0x90>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <MX_UART4_Init+0x90>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <MX_UART4_Init+0x90>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <MX_UART4_Init+0x90>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <MX_UART4_Init+0x90>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <MX_UART4_Init+0x90>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <MX_UART4_Init+0x90>)
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <MX_UART4_Init+0x90>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <MX_UART4_Init+0x90>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80032ac:	4811      	ldr	r0, [pc, #68]	; (80032f4 <MX_UART4_Init+0x90>)
 80032ae:	f004 f9d7 	bl	8007660 <HAL_UART_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80032b8:	f7ff fce6 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032bc:	2100      	movs	r1, #0
 80032be:	480d      	ldr	r0, [pc, #52]	; (80032f4 <MX_UART4_Init+0x90>)
 80032c0:	f005 ff39 	bl	8009136 <HAL_UARTEx_SetTxFifoThreshold>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80032ca:	f7ff fcdd 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ce:	2100      	movs	r1, #0
 80032d0:	4808      	ldr	r0, [pc, #32]	; (80032f4 <MX_UART4_Init+0x90>)
 80032d2:	f005 ff6e 	bl	80091b2 <HAL_UARTEx_SetRxFifoThreshold>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80032dc:	f7ff fcd4 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80032e0:	4804      	ldr	r0, [pc, #16]	; (80032f4 <MX_UART4_Init+0x90>)
 80032e2:	f005 feef 	bl	80090c4 <HAL_UARTEx_DisableFifoMode>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80032ec:	f7ff fccc 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200010cc 	.word	0x200010cc
 80032f8:	40004c00 	.word	0x40004c00

080032fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003302:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <MX_USART2_UART_Init+0xa8>)
 8003304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <MX_USART2_UART_Init+0xac>)
 800330a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800330e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800331a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800331c:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800331e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003326:	220c      	movs	r2, #12
 8003328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003338:	2200      	movs	r2, #0
 800333a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800333e:	2200      	movs	r2, #0
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003344:	2203      	movs	r2, #3
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800334a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8003350:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 8003352:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003358:	4811      	ldr	r0, [pc, #68]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800335a:	f004 f981 	bl	8007660 <HAL_UART_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003364:	f7ff fc90 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003368:	2100      	movs	r1, #0
 800336a:	480d      	ldr	r0, [pc, #52]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800336c:	f005 fee3 	bl	8009136 <HAL_UARTEx_SetTxFifoThreshold>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003376:	f7ff fc87 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800337a:	2100      	movs	r1, #0
 800337c:	4808      	ldr	r0, [pc, #32]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800337e:	f005 ff18 	bl	80091b2 <HAL_UARTEx_SetRxFifoThreshold>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003388:	f7ff fc7e 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800338c:	4804      	ldr	r0, [pc, #16]	; (80033a0 <MX_USART2_UART_Init+0xa4>)
 800338e:	f005 fe99 	bl	80090c4 <HAL_UARTEx_DisableFifoMode>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8003398:	f7ff fc76 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20001160 	.word	0x20001160
 80033a4:	40004400 	.word	0x40004400
 80033a8:	000186a0 	.word	0x000186a0

080033ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033b0:	4b22      	ldr	r3, [pc, #136]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033b2:	4a23      	ldr	r2, [pc, #140]	; (8003440 <MX_USART3_UART_Init+0x94>)
 80033b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033d2:	220c      	movs	r2, #12
 80033d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033de:	2200      	movs	r2, #0
 80033e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033f4:	4811      	ldr	r0, [pc, #68]	; (800343c <MX_USART3_UART_Init+0x90>)
 80033f6:	f004 f933 	bl	8007660 <HAL_UART_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003400:	f7ff fc42 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003404:	2100      	movs	r1, #0
 8003406:	480d      	ldr	r0, [pc, #52]	; (800343c <MX_USART3_UART_Init+0x90>)
 8003408:	f005 fe95 	bl	8009136 <HAL_UARTEx_SetTxFifoThreshold>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003412:	f7ff fc39 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003416:	2100      	movs	r1, #0
 8003418:	4808      	ldr	r0, [pc, #32]	; (800343c <MX_USART3_UART_Init+0x90>)
 800341a:	f005 feca 	bl	80091b2 <HAL_UARTEx_SetRxFifoThreshold>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003424:	f7ff fc30 	bl	8002c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003428:	4804      	ldr	r0, [pc, #16]	; (800343c <MX_USART3_UART_Init+0x90>)
 800342a:	f005 fe4b 	bl	80090c4 <HAL_UARTEx_DisableFifoMode>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003434:	f7ff fc28 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	200011f4 	.word	0x200011f4
 8003440:	40004800 	.word	0x40004800

08003444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b0b4      	sub	sp, #208	; 0xd0
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800345c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003460:	2294      	movs	r2, #148	; 0x94
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f006 f9f4 	bl	8009852 <memset>
  if(uartHandle->Instance==LPUART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5f      	ldr	r2, [pc, #380]	; (80035ec <HAL_UART_MspInit+0x1a8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d13e      	bne.n	80034f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003474:	2320      	movs	r3, #32
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003478:	2300      	movs	r3, #0
 800347a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003480:	4618      	mov	r0, r3
 8003482:	f003 fa9d 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800348c:	f7ff fbfc 	bl	8002c88 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	4a56      	ldr	r2, [pc, #344]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800349c:	4b54      	ldr	r3, [pc, #336]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034a8:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 80034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ac:	4a50      	ldr	r2, [pc, #320]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 80034ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b4:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 80034b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 80034c0:	f002 fa90 	bl	80059e4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 80034c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80034c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80034de:	2308      	movs	r3, #8
 80034e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034e8:	4619      	mov	r1, r3
 80034ea:	4842      	ldr	r0, [pc, #264]	; (80035f4 <HAL_UART_MspInit+0x1b0>)
 80034ec:	f001 ff64 	bl	80053b8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034f0:	e1b5      	b.n	800385e <HAL_UART_MspInit+0x41a>
  else if(uartHandle->Instance==UART4)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <HAL_UART_MspInit+0x1b4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	f040 8085 	bne.w	8003608 <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80034fe:	2308      	movs	r3, #8
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003502:	2300      	movs	r3, #0
 8003504:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fa58 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8003516:	f7ff fbb7 	bl	8002c88 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800351a:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a34      	ldr	r2, [pc, #208]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 8003520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_UART_MspInit+0x1ac>)
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800354a:	2303      	movs	r3, #3
 800354c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003562:	2308      	movs	r3, #8
 8003564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800356c:	4619      	mov	r1, r3
 800356e:	4823      	ldr	r0, [pc, #140]	; (80035fc <HAL_UART_MspInit+0x1b8>)
 8003570:	f001 ff22 	bl	80053b8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel4;
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 8003576:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_UART_MspInit+0x1c0>)
 8003578:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 800357c:	221f      	movs	r2, #31
 800357e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 8003588:	2200      	movs	r2, #0
 800358a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800358c:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 8003594:	2200      	movs	r2, #0
 8003596:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80035aa:	4815      	ldr	r0, [pc, #84]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 80035ac:	f001 fb4a 	bl	8004c44 <HAL_DMA_Init>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_UART_MspInit+0x176>
      Error_Handler();
 80035b6:	f7ff fb67 	bl	8002c88 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_uart4_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80035ba:	2110      	movs	r1, #16
 80035bc:	4810      	ldr	r0, [pc, #64]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 80035be:	f001 fe2b 	bl	8005218 <HAL_DMA_ConfigChannelAttributes>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_UART_MspInit+0x188>
      Error_Handler();
 80035c8:	f7ff fb5e 	bl	8002c88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80035d4:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_UART_MspInit+0x1bc>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2100      	movs	r1, #0
 80035de:	2040      	movs	r0, #64	; 0x40
 80035e0:	f001 fafb 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035e4:	2040      	movs	r0, #64	; 0x40
 80035e6:	f001 fb12 	bl	8004c0e <HAL_NVIC_EnableIRQ>
}
 80035ea:	e138      	b.n	800385e <HAL_UART_MspInit+0x41a>
 80035ec:	40008000 	.word	0x40008000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	42021800 	.word	0x42021800
 80035f8:	40004c00 	.word	0x40004c00
 80035fc:	42020000 	.word	0x42020000
 8003600:	20001288 	.word	0x20001288
 8003604:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a96      	ldr	r2, [pc, #600]	; (8003868 <HAL_UART_MspInit+0x424>)
 800360e:	4293      	cmp	r3, r2
 8003610:	f040 80a9 	bne.w	8003766 <HAL_UART_MspInit+0x322>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003614:	2302      	movs	r3, #2
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003618:	2300      	movs	r3, #0
 800361a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800361c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003620:	4618      	mov	r0, r3
 8003622:	f003 f9cd 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 800362c:	f7ff fb2c 	bl	8002c88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003630:	4b8e      	ldr	r3, [pc, #568]	; (800386c <HAL_UART_MspInit+0x428>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	4a8d      	ldr	r2, [pc, #564]	; (800386c <HAL_UART_MspInit+0x428>)
 8003636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363a:	6593      	str	r3, [r2, #88]	; 0x58
 800363c:	4b8b      	ldr	r3, [pc, #556]	; (800386c <HAL_UART_MspInit+0x428>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003648:	4b88      	ldr	r3, [pc, #544]	; (800386c <HAL_UART_MspInit+0x428>)
 800364a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364c:	4a87      	ldr	r2, [pc, #540]	; (800386c <HAL_UART_MspInit+0x428>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003654:	4b85      	ldr	r3, [pc, #532]	; (800386c <HAL_UART_MspInit+0x428>)
 8003656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003660:	230c      	movs	r3, #12
 8003662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003678:	2307      	movs	r3, #7
 800367a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003682:	4619      	mov	r1, r3
 8003684:	487a      	ldr	r0, [pc, #488]	; (8003870 <HAL_UART_MspInit+0x42c>)
 8003686:	f001 fe97 	bl	80053b8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800368a:	4b7a      	ldr	r3, [pc, #488]	; (8003874 <HAL_UART_MspInit+0x430>)
 800368c:	4a7a      	ldr	r2, [pc, #488]	; (8003878 <HAL_UART_MspInit+0x434>)
 800368e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003690:	4b78      	ldr	r3, [pc, #480]	; (8003874 <HAL_UART_MspInit+0x430>)
 8003692:	221b      	movs	r2, #27
 8003694:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003696:	4b77      	ldr	r3, [pc, #476]	; (8003874 <HAL_UART_MspInit+0x430>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800369c:	4b75      	ldr	r3, [pc, #468]	; (8003874 <HAL_UART_MspInit+0x430>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036a2:	4b74      	ldr	r3, [pc, #464]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a8:	4b72      	ldr	r3, [pc, #456]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ae:	4b71      	ldr	r3, [pc, #452]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80036b4:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036b6:	2220      	movs	r2, #32
 80036b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036ba:	4b6e      	ldr	r3, [pc, #440]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036bc:	2200      	movs	r2, #0
 80036be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036c0:	486c      	ldr	r0, [pc, #432]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036c2:	f001 fabf 	bl	8004c44 <HAL_DMA_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 80036cc:	f7ff fadc 	bl	8002c88 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80036d0:	2110      	movs	r1, #16
 80036d2:	4868      	ldr	r0, [pc, #416]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036d4:	f001 fda0 	bl	8005218 <HAL_DMA_ConfigChannelAttributes>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_UART_MspInit+0x29e>
      Error_Handler();
 80036de:	f7ff fad3 	bl	8002c88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a63      	ldr	r2, [pc, #396]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80036ea:	4a62      	ldr	r2, [pc, #392]	; (8003874 <HAL_UART_MspInit+0x430>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80036f0:	4b62      	ldr	r3, [pc, #392]	; (800387c <HAL_UART_MspInit+0x438>)
 80036f2:	4a63      	ldr	r2, [pc, #396]	; (8003880 <HAL_UART_MspInit+0x43c>)
 80036f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80036f6:	4b61      	ldr	r3, [pc, #388]	; (800387c <HAL_UART_MspInit+0x438>)
 80036f8:	221c      	movs	r2, #28
 80036fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036fc:	4b5f      	ldr	r3, [pc, #380]	; (800387c <HAL_UART_MspInit+0x438>)
 80036fe:	2210      	movs	r2, #16
 8003700:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003702:	4b5e      	ldr	r3, [pc, #376]	; (800387c <HAL_UART_MspInit+0x438>)
 8003704:	2200      	movs	r2, #0
 8003706:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003708:	4b5c      	ldr	r3, [pc, #368]	; (800387c <HAL_UART_MspInit+0x438>)
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800370e:	4b5b      	ldr	r3, [pc, #364]	; (800387c <HAL_UART_MspInit+0x438>)
 8003710:	2200      	movs	r2, #0
 8003712:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_UART_MspInit+0x438>)
 8003716:	2200      	movs	r2, #0
 8003718:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800371a:	4b58      	ldr	r3, [pc, #352]	; (800387c <HAL_UART_MspInit+0x438>)
 800371c:	2200      	movs	r2, #0
 800371e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003720:	4b56      	ldr	r3, [pc, #344]	; (800387c <HAL_UART_MspInit+0x438>)
 8003722:	2200      	movs	r2, #0
 8003724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003726:	4855      	ldr	r0, [pc, #340]	; (800387c <HAL_UART_MspInit+0x438>)
 8003728:	f001 fa8c 	bl	8004c44 <HAL_DMA_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 8003732:	f7ff faa9 	bl	8002c88 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003736:	2110      	movs	r1, #16
 8003738:	4850      	ldr	r0, [pc, #320]	; (800387c <HAL_UART_MspInit+0x438>)
 800373a:	f001 fd6d 	bl	8005218 <HAL_DMA_ConfigChannelAttributes>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_UART_MspInit+0x304>
      Error_Handler();
 8003744:	f7ff faa0 	bl	8002c88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a4c      	ldr	r2, [pc, #304]	; (800387c <HAL_UART_MspInit+0x438>)
 800374c:	67da      	str	r2, [r3, #124]	; 0x7c
 800374e:	4a4b      	ldr	r2, [pc, #300]	; (800387c <HAL_UART_MspInit+0x438>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003754:	2200      	movs	r2, #0
 8003756:	2100      	movs	r1, #0
 8003758:	203e      	movs	r0, #62	; 0x3e
 800375a:	f001 fa3e 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800375e:	203e      	movs	r0, #62	; 0x3e
 8003760:	f001 fa55 	bl	8004c0e <HAL_NVIC_EnableIRQ>
}
 8003764:	e07b      	b.n	800385e <HAL_UART_MspInit+0x41a>
  else if(uartHandle->Instance==USART3)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a46      	ldr	r2, [pc, #280]	; (8003884 <HAL_UART_MspInit+0x440>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d176      	bne.n	800385e <HAL_UART_MspInit+0x41a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003770:	2304      	movs	r3, #4
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003774:	2300      	movs	r3, #0
 8003776:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800377c:	4618      	mov	r0, r3
 800377e:	f003 f91f 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_MspInit+0x348>
      Error_Handler();
 8003788:	f7ff fa7e 	bl	8002c88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800378c:	4b37      	ldr	r3, [pc, #220]	; (800386c <HAL_UART_MspInit+0x428>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	4a36      	ldr	r2, [pc, #216]	; (800386c <HAL_UART_MspInit+0x428>)
 8003792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003796:	6593      	str	r3, [r2, #88]	; 0x58
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <HAL_UART_MspInit+0x428>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_UART_MspInit+0x428>)
 80037a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a8:	4a30      	ldr	r2, [pc, #192]	; (800386c <HAL_UART_MspInit+0x428>)
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_UART_MspInit+0x428>)
 80037b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037d6:	2307      	movs	r3, #7
 80037d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037e0:	4619      	mov	r1, r3
 80037e2:	4829      	ldr	r0, [pc, #164]	; (8003888 <HAL_UART_MspInit+0x444>)
 80037e4:	f001 fde8 	bl	80053b8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_UART_MspInit+0x448>)
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_UART_MspInit+0x44c>)
 80037ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_UART_MspInit+0x448>)
 80037f0:	221d      	movs	r2, #29
 80037f2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_UART_MspInit+0x448>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_UART_MspInit+0x448>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_UART_MspInit+0x448>)
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_UART_MspInit+0x448>)
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_UART_MspInit+0x448>)
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_UART_MspInit+0x448>)
 8003814:	2200      	movs	r2, #0
 8003816:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_UART_MspInit+0x448>)
 800381a:	2200      	movs	r2, #0
 800381c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800381e:	481b      	ldr	r0, [pc, #108]	; (800388c <HAL_UART_MspInit+0x448>)
 8003820:	f001 fa10 	bl	8004c44 <HAL_DMA_Init>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_UART_MspInit+0x3ea>
      Error_Handler();
 800382a:	f7ff fa2d 	bl	8002c88 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800382e:	2110      	movs	r1, #16
 8003830:	4816      	ldr	r0, [pc, #88]	; (800388c <HAL_UART_MspInit+0x448>)
 8003832:	f001 fcf1 	bl	8005218 <HAL_DMA_ConfigChannelAttributes>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_MspInit+0x3fc>
      Error_Handler();
 800383c:	f7ff fa24 	bl	8002c88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_UART_MspInit+0x448>)
 8003844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003848:	4a10      	ldr	r2, [pc, #64]	; (800388c <HAL_UART_MspInit+0x448>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2100      	movs	r1, #0
 8003852:	203f      	movs	r0, #63	; 0x3f
 8003854:	f001 f9c1 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003858:	203f      	movs	r0, #63	; 0x3f
 800385a:	f001 f9d8 	bl	8004c0e <HAL_NVIC_EnableIRQ>
}
 800385e:	bf00      	nop
 8003860:	37d0      	adds	r7, #208	; 0xd0
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40004400 	.word	0x40004400
 800386c:	40021000 	.word	0x40021000
 8003870:	42020000 	.word	0x42020000
 8003874:	200012f0 	.word	0x200012f0
 8003878:	40020008 	.word	0x40020008
 800387c:	20001358 	.word	0x20001358
 8003880:	4002001c 	.word	0x4002001c
 8003884:	40004800 	.word	0x40004800
 8003888:	42020400 	.word	0x42020400
 800388c:	200013c0 	.word	0x200013c0
 8003890:	40020030 	.word	0x40020030

08003894 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <MX_USB_PCD_Init+0x48>)
 800389a:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <MX_USB_PCD_Init+0x4c>)
 800389c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038a0:	2208      	movs	r2, #8
 80038a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038a6:	2202      	movs	r2, #2
 80038a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038ac:	2202      	movs	r2, #2
 80038ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038be:	2200      	movs	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80038c8:	4804      	ldr	r0, [pc, #16]	; (80038dc <MX_USB_PCD_Init+0x48>)
 80038ca:	f001 ff0d 	bl	80056e8 <HAL_PCD_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80038d4:	f7ff f9d8 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20001428 	.word	0x20001428
 80038e0:	4000d400 	.word	0x4000d400

080038e4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0ae      	sub	sp, #184	; 0xb8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	2294      	movs	r2, #148	; 0x94
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f005 ffa4 	bl	8009852 <memset>
  if(pcdHandle->Instance==USB)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_PCD_MspInit+0xb4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d13d      	bne.n	8003990 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003918:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	4618      	mov	r0, r3
 8003926:	f003 f84b 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003930:	f7ff f9aa 	bl	8002c88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_PCD_MspInit+0xb8>)
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_PCD_MspInit+0xb8>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_PCD_MspInit+0xb8>)
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800394c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003966:	230a      	movs	r3, #10
 8003968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003970:	4619      	mov	r1, r3
 8003972:	480b      	ldr	r0, [pc, #44]	; (80039a0 <HAL_PCD_MspInit+0xbc>)
 8003974:	f001 fd20 	bl	80053b8 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_PCD_MspInit+0xb8>)
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	4a07      	ldr	r2, [pc, #28]	; (800399c <HAL_PCD_MspInit+0xb8>)
 800397e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003982:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_PCD_MspInit+0xb8>)
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003990:	bf00      	nop
 8003992:	37b8      	adds	r7, #184	; 0xb8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	4000d400 	.word	0x4000d400
 800399c:	40021000 	.word	0x40021000
 80039a0:	42020000 	.word	0x42020000

080039a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80039a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039a8:	f7ff fae8 	bl	8002f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80039ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80039ae:	e003      	b.n	80039b8 <LoopCopyDataInit>

080039b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80039b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80039b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80039b6:	3104      	adds	r1, #4

080039b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80039b8:	480a      	ldr	r0, [pc, #40]	; (80039e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80039bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80039be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80039c0:	d3f6      	bcc.n	80039b0 <CopyDataInit>
	ldr	r2, =_sbss
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80039c4:	e002      	b.n	80039cc <LoopFillZerobss>

080039c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80039c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80039c8:	f842 3b04 	str.w	r3, [r2], #4

080039cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <LoopForever+0x16>)
	cmp	r2, r3
 80039ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80039d0:	d3f9      	bcc.n	80039c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039d2:	f005 feed 	bl	80097b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039d6:	f7ff f8c5 	bl	8002b64 <main>

080039da <LoopForever>:

LoopForever:
    b LoopForever
 80039da:	e7fe      	b.n	80039da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80039dc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80039e0:	0800aa78 	.word	0x0800aa78
	ldr	r0, =_sdata
 80039e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80039e8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80039ec:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80039f0:	20001734 	.word	0x20001734

080039f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039f4:	e7fe      	b.n	80039f4 <ADC1_2_IRQHandler>

080039f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003a00:	2004      	movs	r0, #4
 8003a02:	f001 f8df 	bl	8004bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8003a06:	f7ff facb 	bl	8002fa0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f000 f80e 	bl	8003a2c <HAL_InitTick>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	71fb      	strb	r3, [r7, #7]
 8003a1a:	e001      	b.n	8003a20 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a1c:	f7ff f9c2 	bl	8002da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a20:	79fb      	ldrb	r3, [r7, #7]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_InitTick+0x6c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d023      	beq.n	8003a88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_InitTick+0x70>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_InitTick+0x6c>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 f8e7 	bl	8004c2a <HAL_SYSTICK_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b07      	cmp	r3, #7
 8003a66:	d809      	bhi.n	8003a7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f001 f8b3 	bl	8004bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <HAL_InitTick+0x74>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e007      	b.n	8003a8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	e004      	b.n	8003a8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	e001      	b.n	8003a8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	2000000c 	.word	0x2000000c

08003aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_IncTick+0x20>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_IncTick+0x24>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <HAL_IncTick+0x24>)
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000010 	.word	0x20000010
 8003ac8:	2000171c 	.word	0x2000171c

08003acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_GetTick+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	2000171c 	.word	0x2000171c

08003ae4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	609a      	str	r2, [r3, #8]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3360      	adds	r3, #96	; 0x60
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <LL_ADC_SetOffset+0x44>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	03fff000 	.word	0x03fff000

08003b94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3360      	adds	r3, #96	; 0x60
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3360      	adds	r3, #96	; 0x60
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	615a      	str	r2, [r3, #20]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3330      	adds	r3, #48	; 0x30
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	4413      	add	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	211f      	movs	r1, #31
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0e9b      	lsrs	r3, r3, #26
 8003c54:	f003 011f 	and.w	r1, r3, #31
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	431a      	orrs	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3314      	adds	r3, #20
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	0e5b      	lsrs	r3, r3, #25
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0d1b      	lsrs	r3, r3, #20
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2107      	movs	r1, #7
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	401a      	ands	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	0d1b      	lsrs	r3, r3, #20
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f003 0318 	and.w	r3, r3, #24
 8003cee:	4908      	ldr	r1, [pc, #32]	; (8003d10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cf0:	40d9      	lsrs	r1, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	400b      	ands	r3, r1
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	0007ffff 	.word	0x0007ffff

08003d14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6093      	str	r3, [r2, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d4c:	d101      	bne.n	8003d52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9c:	d101      	bne.n	8003da2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <LL_ADC_IsEnabled+0x18>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <LL_ADC_IsEnabled+0x1a>
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d101      	bne.n	8003dee <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d101      	bne.n	8003e14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b089      	sub	sp, #36	; 0x24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e12e      	b.n	800409c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fe fd5b 	bl	8002908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff67 	bl	8003d38 <LL_ADC_IsDeepPowerDownEnabled>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff4d 	bl	8003d14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff82 	bl	8003d88 <LL_ADC_IsInternalRegulatorEnabled>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d115      	bne.n	8003eb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff66 	bl	8003d60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e94:	4b83      	ldr	r3, [pc, #524]	; (80040a4 <HAL_ADC_Init+0x280>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	4a83      	ldr	r2, [pc, #524]	; (80040a8 <HAL_ADC_Init+0x284>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ea8:	e002      	b.n	8003eb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f9      	bne.n	8003eaa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff64 	bl	8003d88 <LL_ADC_IsInternalRegulatorEnabled>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10d      	bne.n	8003ee2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f043 0210 	orr.w	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	f043 0201 	orr.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff75 	bl	8003dd6 <LL_ADC_REG_IsConversionOngoing>
 8003eec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 80c7 	bne.w	800408a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 80c3 	bne.w	800408a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f0c:	f043 0202 	orr.w	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff49 	bl	8003db0 <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d110      	bne.n	8003f46 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f24:	4861      	ldr	r0, [pc, #388]	; (80040ac <HAL_ADC_Init+0x288>)
 8003f26:	f7ff ff43 	bl	8003db0 <LL_ADC_IsEnabled>
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4860      	ldr	r0, [pc, #384]	; (80040b0 <HAL_ADC_Init+0x28c>)
 8003f2e:	f7ff ff3f 	bl	8003db0 <LL_ADC_IsEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4323      	orrs	r3, r4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	485c      	ldr	r0, [pc, #368]	; (80040b4 <HAL_ADC_Init+0x290>)
 8003f42:	f7ff fdcf 	bl	8003ae4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7e5b      	ldrb	r3, [r3, #25]
 8003f4a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f50:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f56:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f5c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f64:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	045b      	lsls	r3, r3, #17
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	4b44      	ldr	r3, [pc, #272]	; (80040b8 <HAL_ADC_Init+0x294>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	69b9      	ldr	r1, [r7, #24]
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff20 	bl	8003dfc <LL_ADC_INJ_IsConversionOngoing>
 8003fbc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d140      	bne.n	8004046 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d13d      	bne.n	8004046 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7e1b      	ldrb	r3, [r3, #24]
 8003fd2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fd4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fdc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fec:	f023 0306 	bic.w	r3, r3, #6
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004000:	2b01      	cmp	r3, #1
 8004002:	d118      	bne.n	8004036 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800401a:	4311      	orrs	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004020:	4311      	orrs	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004026:	430a      	orrs	r2, r1
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	611a      	str	r2, [r3, #16]
 8004034:	e007      	b.n	8004046 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d10c      	bne.n	8004068 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f023 010f 	bic.w	r1, r3, #15
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
 8004066:	e007      	b.n	8004078 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 020f 	bic.w	r2, r2, #15
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f023 0303 	bic.w	r3, r3, #3
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	659a      	str	r2, [r3, #88]	; 0x58
 8004088:	e007      	b.n	800409a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	f043 0210 	orr.w	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800409a:	7ffb      	ldrb	r3, [r7, #31]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3724      	adds	r7, #36	; 0x24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd90      	pop	{r4, r7, pc}
 80040a4:	20000008 	.word	0x20000008
 80040a8:	053e2d63 	.word	0x053e2d63
 80040ac:	42028000 	.word	0x42028000
 80040b0:	42028100 	.word	0x42028100
 80040b4:	42028300 	.word	0x42028300
 80040b8:	fff0c007 	.word	0xfff0c007

080040bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b0b7      	sub	sp, #220	; 0xdc
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_ADC_ConfigChannel+0x22>
 80040da:	2302      	movs	r3, #2
 80040dc:	e3c1      	b.n	8004862 <HAL_ADC_ConfigChannel+0x7a6>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fe73 	bl	8003dd6 <LL_ADC_REG_IsConversionOngoing>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 83a6 	bne.w	8004844 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	f7ff fd89 	bl	8003c1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fe61 	bl	8003dd6 <LL_ADC_REG_IsConversionOngoing>
 8004114:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fe6d 	bl	8003dfc <LL_ADC_INJ_IsConversionOngoing>
 8004122:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800412a:	2b00      	cmp	r3, #0
 800412c:	f040 81c1 	bne.w	80044b2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 81bc 	bne.w	80044b2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004142:	d10f      	bne.n	8004164 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2200      	movs	r2, #0
 800414e:	4619      	mov	r1, r3
 8004150:	f7ff fd90 	bl	8003c74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fd4a 	bl	8003bf6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004162:	e00e      	b.n	8004182 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	461a      	mov	r2, r3
 8004172:	f7ff fd7f 	bl	8003c74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fd3a 	bl	8003bf6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	08db      	lsrs	r3, r3, #3
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00a      	beq.n	80041ba <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6919      	ldr	r1, [r3, #16]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041b4:	f7ff fcca 	bl	8003b4c <LL_ADC_SetOffset>
 80041b8:	e17b      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fce7 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x12a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fcdc 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	0e9b      	lsrs	r3, r3, #26
 80041e0:	f003 021f 	and.w	r2, r3, #31
 80041e4:	e01e      	b.n	8004224 <HAL_ADC_ConfigChannel+0x168>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fcd1 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800420c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8004214:	2320      	movs	r3, #32
 8004216:	e004      	b.n	8004222 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8004218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800421c:	fab3 f383 	clz	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <HAL_ADC_ConfigChannel+0x180>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	e018      	b.n	800426e <HAL_ADC_ConfigChannel+0x1b2>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e004      	b.n	800426e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8004264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004268:	fab3 f383 	clz	r3, r3
 800426c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800426e:	429a      	cmp	r2, r3
 8004270:	d106      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fca0 	bl	8003bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fc84 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x1f0>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fc79 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	f003 021f 	and.w	r2, r3, #31
 80042aa:	e01e      	b.n	80042ea <HAL_ADC_ConfigChannel+0x22e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fc6e 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80042ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80042d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80042da:	2320      	movs	r3, #32
 80042dc:	e004      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80042de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d105      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x246>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	0e9b      	lsrs	r3, r3, #26
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	e018      	b.n	8004334 <HAL_ADC_ConfigChannel+0x278>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800431a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800431e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8004326:	2320      	movs	r3, #32
 8004328:	e004      	b.n	8004334 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800432a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004334:	429a      	cmp	r2, r3
 8004336:	d106      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2200      	movs	r2, #0
 800433e:	2101      	movs	r1, #1
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fc3d 	bl	8003bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2102      	movs	r1, #2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fc21 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x2b6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fc16 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	e01e      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x2f4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2102      	movs	r1, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fc0b 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 800437e:	4603      	mov	r3, r0
 8004380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004394:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80043a0:	2320      	movs	r3, #32
 80043a2:	e004      	b.n	80043ae <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80043a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x30c>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	e016      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x33a>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80043da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80043e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80043e8:	2320      	movs	r3, #32
 80043ea:	e004      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80043ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d106      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	2102      	movs	r1, #2
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fbdc 	bl	8003bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2103      	movs	r1, #3
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fbc0 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 8004414:	4603      	mov	r3, r0
 8004416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x378>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2103      	movs	r1, #3
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fbb5 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 800442a:	4603      	mov	r3, r0
 800442c:	0e9b      	lsrs	r3, r3, #26
 800442e:	f003 021f 	and.w	r2, r3, #31
 8004432:	e017      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2103      	movs	r1, #3
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fbaa 	bl	8003b94 <LL_ADC_GetOffsetChannel>
 8004440:	4603      	mov	r3, r0
 8004442:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004446:	fa93 f3a3 	rbit	r3, r3
 800444a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800444c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800444e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8004456:	2320      	movs	r3, #32
 8004458:	e003      	b.n	8004462 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800445a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_ADC_ConfigChannel+0x3c0>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0e9b      	lsrs	r3, r3, #26
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	e011      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x3e4>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800448a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800448c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8004494:	2320      	movs	r3, #32
 8004496:	e003      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8004498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d106      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2103      	movs	r1, #3
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fb87 	bl	8003bc0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fc7a 	bl	8003db0 <LL_ADC_IsEnabled>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 81c9 	bne.w	8004856 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f7ff fbfb 	bl	8003ccc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4a8f      	ldr	r2, [pc, #572]	; (8004718 <HAL_ADC_ConfigChannel+0x65c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	f040 8131 	bne.w	8004744 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <HAL_ADC_ConfigChannel+0x44e>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	0e9b      	lsrs	r3, r3, #26
 80044f8:	3301      	adds	r3, #1
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2b09      	cmp	r3, #9
 8004500:	bf94      	ite	ls
 8004502:	2301      	movls	r3, #1
 8004504:	2300      	movhi	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e019      	b.n	800453e <HAL_ADC_ConfigChannel+0x482>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800451a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800451c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e003      	b.n	800452e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8004526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	3301      	adds	r3, #1
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2b09      	cmp	r3, #9
 8004536:	bf94      	ite	ls
 8004538:	2301      	movls	r3, #1
 800453a:	2300      	movhi	r3, #0
 800453c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800453e:	2b00      	cmp	r3, #0
 8004540:	d079      	beq.n	8004636 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <HAL_ADC_ConfigChannel+0x4a2>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0e9b      	lsrs	r3, r3, #26
 8004554:	3301      	adds	r3, #1
 8004556:	069b      	lsls	r3, r3, #26
 8004558:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800455c:	e015      	b.n	800458a <HAL_ADC_ConfigChannel+0x4ce>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800456c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004576:	2320      	movs	r3, #32
 8004578:	e003      	b.n	8004582 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3301      	adds	r3, #1
 8004584:	069b      	lsls	r3, r3, #26
 8004586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x4ee>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0e9b      	lsrs	r3, r3, #26
 800459c:	3301      	adds	r3, #1
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	e017      	b.n	80045da <HAL_ADC_ConfigChannel+0x51e>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80045b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80045bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80045c2:	2320      	movs	r3, #32
 80045c4:	e003      	b.n	80045ce <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	3301      	adds	r3, #1
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	ea42 0103 	orr.w	r1, r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x544>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	0e9b      	lsrs	r3, r3, #26
 80045f0:	3301      	adds	r3, #1
 80045f2:	f003 021f 	and.w	r2, r3, #31
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	051b      	lsls	r3, r3, #20
 80045fe:	e018      	b.n	8004632 <HAL_ADC_ConfigChannel+0x576>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f003 021f 	and.w	r2, r3, #31
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004632:	430b      	orrs	r3, r1
 8004634:	e081      	b.n	800473a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x596>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	0e9b      	lsrs	r3, r3, #26
 8004648:	3301      	adds	r3, #1
 800464a:	069b      	lsls	r3, r3, #26
 800464c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004650:	e015      	b.n	800467e <HAL_ADC_ConfigChannel+0x5c2>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800466a:	2320      	movs	r3, #32
 800466c:	e003      	b.n	8004676 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	3301      	adds	r3, #1
 8004678:	069b      	lsls	r3, r3, #26
 800467a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_ADC_ConfigChannel+0x5e2>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	0e9b      	lsrs	r3, r3, #26
 8004690:	3301      	adds	r3, #1
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	e017      	b.n	80046ce <HAL_ADC_ConfigChannel+0x612>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	61fb      	str	r3, [r7, #28]
  return result;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80046b6:	2320      	movs	r3, #32
 80046b8:	e003      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	3301      	adds	r3, #1
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2101      	movs	r1, #1
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	ea42 0103 	orr.w	r1, r2, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10d      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x63e>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	0e9b      	lsrs	r3, r3, #26
 80046e4:	3301      	adds	r3, #1
 80046e6:	f003 021f 	and.w	r2, r3, #31
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	3b1e      	subs	r3, #30
 80046f2:	051b      	lsls	r3, r3, #20
 80046f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046f8:	e01e      	b.n	8004738 <HAL_ADC_ConfigChannel+0x67c>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	613b      	str	r3, [r7, #16]
  return result;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d104      	bne.n	800471c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8004712:	2320      	movs	r3, #32
 8004714:	e006      	b.n	8004724 <HAL_ADC_ConfigChannel+0x668>
 8004716:	bf00      	nop
 8004718:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3301      	adds	r3, #1
 8004726:	f003 021f 	and.w	r2, r3, #31
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	3b1e      	subs	r3, #30
 8004732:	051b      	lsls	r3, r3, #20
 8004734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004738:	430b      	orrs	r3, r1
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	6892      	ldr	r2, [r2, #8]
 800473e:	4619      	mov	r1, r3
 8004740:	f7ff fa98 	bl	8003c74 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b48      	ldr	r3, [pc, #288]	; (800486c <HAL_ADC_ConfigChannel+0x7b0>)
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8082 	beq.w	8004856 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004752:	4847      	ldr	r0, [pc, #284]	; (8004870 <HAL_ADC_ConfigChannel+0x7b4>)
 8004754:	f7ff f9ec 	bl	8003b30 <LL_ADC_GetCommonPathInternalCh>
 8004758:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800475c:	4845      	ldr	r0, [pc, #276]	; (8004874 <HAL_ADC_ConfigChannel+0x7b8>)
 800475e:	f7ff fb27 	bl	8003db0 <LL_ADC_IsEnabled>
 8004762:	4604      	mov	r4, r0
 8004764:	4844      	ldr	r0, [pc, #272]	; (8004878 <HAL_ADC_ConfigChannel+0x7bc>)
 8004766:	f7ff fb23 	bl	8003db0 <LL_ADC_IsEnabled>
 800476a:	4603      	mov	r3, r0
 800476c:	4323      	orrs	r3, r4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d15e      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a41      	ldr	r2, [pc, #260]	; (800487c <HAL_ADC_ConfigChannel+0x7c0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d127      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800477c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d121      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a39      	ldr	r2, [pc, #228]	; (8004874 <HAL_ADC_ConfigChannel+0x7b8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d161      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800479a:	4619      	mov	r1, r3
 800479c:	4834      	ldr	r0, [pc, #208]	; (8004870 <HAL_ADC_ConfigChannel+0x7b4>)
 800479e:	f7ff f9b4 	bl	8003b0a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047a2:	4b37      	ldr	r3, [pc, #220]	; (8004880 <HAL_ADC_ConfigChannel+0x7c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	4a36      	ldr	r2, [pc, #216]	; (8004884 <HAL_ADC_ConfigChannel+0x7c8>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80047ba:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80047bc:	e002      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f9      	bne.n	80047be <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047ca:	e044      	b.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2d      	ldr	r2, [pc, #180]	; (8004888 <HAL_ADC_ConfigChannel+0x7cc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d113      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10d      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a23      	ldr	r2, [pc, #140]	; (8004874 <HAL_ADC_ConfigChannel+0x7b8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d134      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f4:	4619      	mov	r1, r3
 80047f6:	481e      	ldr	r0, [pc, #120]	; (8004870 <HAL_ADC_ConfigChannel+0x7b4>)
 80047f8:	f7ff f987 	bl	8003b0a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047fc:	e02b      	b.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a22      	ldr	r2, [pc, #136]	; (800488c <HAL_ADC_ConfigChannel+0x7d0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d126      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800480c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d120      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a16      	ldr	r2, [pc, #88]	; (8004874 <HAL_ADC_ConfigChannel+0x7b8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d11b      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800481e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004826:	4619      	mov	r1, r3
 8004828:	4811      	ldr	r0, [pc, #68]	; (8004870 <HAL_ADC_ConfigChannel+0x7b4>)
 800482a:	f7ff f96e 	bl	8003b0a <LL_ADC_SetCommonPathInternalCh>
 800482e:	e012      	b.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004842:	e008      	b.n	8004856 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800485e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004862:	4618      	mov	r0, r3
 8004864:	37dc      	adds	r7, #220	; 0xdc
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}
 800486a:	bf00      	nop
 800486c:	80080000 	.word	0x80080000
 8004870:	42028300 	.word	0x42028300
 8004874:	42028000 	.word	0x42028000
 8004878:	42028100 	.word	0x42028100
 800487c:	c7520000 	.word	0xc7520000
 8004880:	20000008 	.word	0x20000008
 8004884:	053e2d63 	.word	0x053e2d63
 8004888:	cb840000 	.word	0xcb840000
 800488c:	80000001 	.word	0x80000001

08004890 <LL_ADC_IsEnabled>:
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <LL_ADC_IsEnabled+0x18>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <LL_ADC_IsEnabled+0x1a>
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d101      	bne.n	80048ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b0a1      	sub	sp, #132	; 0x84
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e089      	b.n	8004a0e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004902:	2300      	movs	r3, #0
 8004904:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004906:	2300      	movs	r3, #0
 8004908:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d102      	bne.n	800491a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004914:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e001      	b.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e068      	b.n	8004a0e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ffb9 	bl	80048b6 <LL_ADC_REG_IsConversionOngoing>
 8004944:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ffb3 	bl	80048b6 <LL_ADC_REG_IsConversionOngoing>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d14a      	bne.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004958:	2b00      	cmp	r3, #0
 800495a:	d147      	bne.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800495c:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800495e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d027      	beq.n	80049b8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800497a:	035b      	lsls	r3, r3, #13
 800497c:	430b      	orrs	r3, r1
 800497e:	431a      	orrs	r2, r3
 8004980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004982:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004984:	4824      	ldr	r0, [pc, #144]	; (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004986:	f7ff ff83 	bl	8004890 <LL_ADC_IsEnabled>
 800498a:	4604      	mov	r4, r0
 800498c:	4823      	ldr	r0, [pc, #140]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800498e:	f7ff ff7f 	bl	8004890 <LL_ADC_IsEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	4323      	orrs	r3, r4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d132      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800499a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049a2:	f023 030f 	bic.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	6811      	ldr	r1, [r2, #0]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	431a      	orrs	r2, r3
 80049b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049b6:	e023      	b.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c4:	4814      	ldr	r0, [pc, #80]	; (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80049c6:	f7ff ff63 	bl	8004890 <LL_ADC_IsEnabled>
 80049ca:	4604      	mov	r4, r0
 80049cc:	4813      	ldr	r0, [pc, #76]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80049ce:	f7ff ff5f 	bl	8004890 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4323      	orrs	r3, r4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d112      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049e2:	f023 030f 	bic.w	r3, r3, #15
 80049e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80049e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049ea:	e009      	b.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80049fe:	e000      	b.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3784      	adds	r7, #132	; 0x84
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd90      	pop	{r4, r7, pc}
 8004a16:	bf00      	nop
 8004a18:	42028000 	.word	0x42028000
 8004a1c:	42028100 	.word	0x42028100
 8004a20:	42028300 	.word	0x42028300

08004a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a40:	4013      	ands	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a56:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	60d3      	str	r3, [r2, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a70:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <__NVIC_GetPriorityGrouping+0x18>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 0307 	and.w	r3, r3, #7
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	db0b      	blt.n	8004ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	f003 021f 	and.w	r2, r3, #31
 8004aa0:	4907      	ldr	r1, [pc, #28]	; (8004ac0 <__NVIC_EnableIRQ+0x38>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000e100 	.word	0xe000e100

08004ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db0a      	blt.n	8004aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	490c      	ldr	r1, [pc, #48]	; (8004b10 <__NVIC_SetPriority+0x4c>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	0152      	lsls	r2, r2, #5
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aec:	e00a      	b.n	8004b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4908      	ldr	r1, [pc, #32]	; (8004b14 <__NVIC_SetPriority+0x50>)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	3b04      	subs	r3, #4
 8004afc:	0152      	lsls	r2, r2, #5
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	440b      	add	r3, r1
 8004b02:	761a      	strb	r2, [r3, #24]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000e100 	.word	0xe000e100
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b089      	sub	sp, #36	; 0x24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f1c3 0307 	rsb	r3, r3, #7
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	bf28      	it	cs
 8004b36:	2303      	movcs	r3, #3
 8004b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d902      	bls.n	8004b48 <NVIC_EncodePriority+0x30>
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	e000      	b.n	8004b4a <NVIC_EncodePriority+0x32>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43da      	mvns	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b60:	f04f 31ff 	mov.w	r1, #4294967295
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	43d9      	mvns	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b70:	4313      	orrs	r3, r2
         );
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3724      	adds	r7, #36	; 0x24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b90:	d301      	bcc.n	8004b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00f      	b.n	8004bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b96:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <SysTick_Config+0x40>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b9e:	2107      	movs	r1, #7
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	f7ff ff8e 	bl	8004ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <SysTick_Config+0x40>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <SysTick_Config+0x40>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010

08004bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff29 	bl	8004a24 <__NVIC_SetPriorityGrouping>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	4603      	mov	r3, r0
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004be8:	f7ff ff40 	bl	8004a6c <__NVIC_GetPriorityGrouping>
 8004bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	f7ff ff90 	bl	8004b18 <NVIC_EncodePriority>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff5f 	bl	8004ac4 <__NVIC_SetPriority>
}
 8004c06:	bf00      	nop
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4603      	mov	r3, r0
 8004c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ff33 	bl	8004a88 <__NVIC_EnableIRQ>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ffa4 	bl	8004b80 <SysTick_Config>
 8004c38:	4603      	mov	r3, r0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e08d      	b.n	8004d72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_DMA_Init+0x138>)
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d80f      	bhi.n	8004c82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <HAL_DMA_Init+0x13c>)
 8004c6a:	4413      	add	r3, r2
 8004c6c:	4a45      	ldr	r2, [pc, #276]	; (8004d84 <HAL_DMA_Init+0x140>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	009a      	lsls	r2, r3, #2
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	; (8004d88 <HAL_DMA_Init+0x144>)
 8004c7e:	649a      	str	r2, [r3, #72]	; 0x48
 8004c80:	e00e      	b.n	8004ca0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <HAL_DMA_Init+0x148>)
 8004c8a:	4413      	add	r3, r2
 8004c8c:	4a3d      	ldr	r2, [pc, #244]	; (8004d84 <HAL_DMA_Init+0x140>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	009a      	lsls	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a3c      	ldr	r2, [pc, #240]	; (8004d90 <HAL_DMA_Init+0x14c>)
 8004c9e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8004cb6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8004cba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fafe 	bl	80052f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d00:	d102      	bne.n	8004d08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d1c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_DMA_Init+0x104>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d80c      	bhi.n	8004d48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fb1e 	bl	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	e008      	b.n	8004d5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40020407 	.word	0x40020407
 8004d80:	bffdfff8 	.word	0xbffdfff8
 8004d84:	cccccccd 	.word	0xcccccccd
 8004d88:	40020000 	.word	0x40020000
 8004d8c:	bffdfbf8 	.word	0xbffdfbf8
 8004d90:	40020400 	.word	0x40020400

08004d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_DMA_Start_IT+0x20>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e066      	b.n	8004e82 <HAL_DMA_Start_IT+0xee>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d155      	bne.n	8004e74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fa43 	bl	8005278 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 020e 	orr.w	r2, r2, #14
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e00f      	b.n	8004e2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 020a 	orr.w	r2, r2, #10
 8004e2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e48:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	e005      	b.n	8004e80 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d008      	beq.n	8004eb4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e040      	b.n	8004f36 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 020e 	bic.w	r2, r2, #14
 8004ec2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee8:	f003 021c 	and.w	r2, r3, #28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00c      	beq.n	8004f24 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004f22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d005      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e047      	b.n	8004ff6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 020e 	bic.w	r2, r2, #14
 8004f74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	f003 021c 	and.w	r2, r3, #28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004fb2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004fd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
    }
  }
  return status;
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501c:	f003 031c 	and.w	r3, r3, #28
 8005020:	2204      	movs	r2, #4
 8005022:	409a      	lsls	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d053      	beq.n	80050d4 <HAL_DMA_IRQHandler+0xd4>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d04e      	beq.n	80050d4 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d024      	beq.n	800508e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	f003 021c 	and.w	r2, r3, #28
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005050:	2104      	movs	r1, #4
 8005052:	fa01 f202 	lsl.w	r2, r1, r2
 8005056:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80c0 	beq.w	80051f0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005078:	e0ba      	b.n	80051f0 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80b6 	beq.w	80051f0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800508c:	e0b0      	b.n	80051f0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d107      	bne.n	80050ac <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	f003 021c 	and.w	r2, r3, #28
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b8:	2104      	movs	r1, #4
 80050ba:	fa01 f202 	lsl.w	r2, r1, r2
 80050be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8093 	beq.w	80051f0 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80050d2:	e08d      	b.n	80051f0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d8:	f003 031c 	and.w	r3, r3, #28
 80050dc:	2202      	movs	r2, #2
 80050de:	409a      	lsls	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d04e      	beq.n	8005186 <HAL_DMA_IRQHandler+0x186>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d049      	beq.n	8005186 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d018      	beq.n	8005132 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d108      	bne.n	8005120 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	2b00      	cmp	r3, #0
 8005114:	d06e      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800511e:	e069      	b.n	80051f4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d065      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005130:	e060      	b.n	80051f4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 020a 	bic.w	r2, r2, #10
 800514e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	f003 021c 	and.w	r2, r3, #28
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005164:	2102      	movs	r1, #2
 8005166:	fa01 f202 	lsl.w	r2, r1, r2
 800516a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d03b      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005184:	e036      	b.n	80051f4 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	f003 031c 	and.w	r3, r3, #28
 800518e:	2208      	movs	r2, #8
 8005190:	409a      	lsls	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d02e      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x1f8>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d029      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 020e 	bic.w	r2, r2, #14
 80051b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b8:	f003 021c 	and.w	r2, r3, #28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f202 	lsl.w	r2, r1, r2
 80051c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051ee:	e002      	b.n	80051f6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80051f4:	bf00      	nop
  return;
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
}
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	72fb      	strb	r3, [r7, #11]
    return status;
 8005230:	7afb      	ldrb	r3, [r7, #11]
 8005232:	e01b      	b.n	800526c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00d      	beq.n	8005262 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e003      	b.n	8005262 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005260:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	601a      	str	r2, [r3, #0]

  return status;
 800526a:	7afb      	ldrb	r3, [r7, #11]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800528e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80052a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	f003 021c 	and.w	r2, r3, #28
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ae:	2101      	movs	r1, #1
 80052b0:	fa01 f202 	lsl.w	r2, r1, r2
 80052b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d108      	bne.n	80052d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80052d6:	e007      	b.n	80052e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	60da      	str	r2, [r3, #12]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005304:	429a      	cmp	r2, r3
 8005306:	d80a      	bhi.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005314:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6513      	str	r3, [r2, #80]	; 0x50
 800531c:	e007      	b.n	800532e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	089b      	lsrs	r3, r3, #2
 8005324:	009a      	lsls	r2, r3, #2
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005328:	4413      	add	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	3b08      	subs	r3, #8
 8005336:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0a      	ldr	r2, [pc, #40]	; (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005344:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2201      	movs	r2, #1
 800534e:	409a      	lsls	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40020407 	.word	0x40020407
 8005364:	40020820 	.word	0x40020820
 8005368:	cccccccd 	.word	0xcccccccd
 800536c:	40020880 	.word	0x40020880

08005370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	461a      	mov	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005392:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3b01      	subs	r3, #1
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2201      	movs	r2, #1
 800539e:	409a      	lsls	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	1000823f 	.word	0x1000823f
 80053b4:	40020940 	.word	0x40020940

080053b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053c6:	e158      	b.n	800567a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	2101      	movs	r1, #1
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	fa01 f303 	lsl.w	r3, r1, r3
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 814a 	beq.w	8005674 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d005      	beq.n	80053f8 <HAL_GPIO_Init+0x40>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d130      	bne.n	800545a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	2203      	movs	r2, #3
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4013      	ands	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800542e:	2201      	movs	r2, #1
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43db      	mvns	r3, r3
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4013      	ands	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 0201 	and.w	r2, r3, #1
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b03      	cmp	r3, #3
 8005464:	d017      	beq.n	8005496 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	2203      	movs	r2, #3
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4013      	ands	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d123      	bne.n	80054ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	08da      	lsrs	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3208      	adds	r2, #8
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	220f      	movs	r2, #15
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	08da      	lsrs	r2, r3, #3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3208      	adds	r2, #8
 80054e4:	6939      	ldr	r1, [r7, #16]
 80054e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4013      	ands	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 0203 	and.w	r2, r3, #3
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80a4 	beq.w	8005674 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800552c:	4a5a      	ldr	r2, [pc, #360]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	3318      	adds	r3, #24
 8005534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005538:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	220f      	movs	r2, #15
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a52      	ldr	r2, [pc, #328]	; (800569c <HAL_GPIO_Init+0x2e4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d025      	beq.n	80055a4 <HAL_GPIO_Init+0x1ec>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a51      	ldr	r2, [pc, #324]	; (80056a0 <HAL_GPIO_Init+0x2e8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d01f      	beq.n	80055a0 <HAL_GPIO_Init+0x1e8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a50      	ldr	r2, [pc, #320]	; (80056a4 <HAL_GPIO_Init+0x2ec>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d019      	beq.n	800559c <HAL_GPIO_Init+0x1e4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a4f      	ldr	r2, [pc, #316]	; (80056a8 <HAL_GPIO_Init+0x2f0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_GPIO_Init+0x1e0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a4e      	ldr	r2, [pc, #312]	; (80056ac <HAL_GPIO_Init+0x2f4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00d      	beq.n	8005594 <HAL_GPIO_Init+0x1dc>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a4d      	ldr	r2, [pc, #308]	; (80056b0 <HAL_GPIO_Init+0x2f8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <HAL_GPIO_Init+0x1d8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a4c      	ldr	r2, [pc, #304]	; (80056b4 <HAL_GPIO_Init+0x2fc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_GPIO_Init+0x1d4>
 8005588:	2306      	movs	r3, #6
 800558a:	e00c      	b.n	80055a6 <HAL_GPIO_Init+0x1ee>
 800558c:	2307      	movs	r3, #7
 800558e:	e00a      	b.n	80055a6 <HAL_GPIO_Init+0x1ee>
 8005590:	2305      	movs	r3, #5
 8005592:	e008      	b.n	80055a6 <HAL_GPIO_Init+0x1ee>
 8005594:	2304      	movs	r3, #4
 8005596:	e006      	b.n	80055a6 <HAL_GPIO_Init+0x1ee>
 8005598:	2303      	movs	r3, #3
 800559a:	e004      	b.n	80055a6 <HAL_GPIO_Init+0x1ee>
 800559c:	2302      	movs	r3, #2
 800559e:	e002      	b.n	80055a6 <HAL_GPIO_Init+0x1ee>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_GPIO_Init+0x1ee>
 80055a4:	2300      	movs	r3, #0
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	f002 0203 	and.w	r2, r2, #3
 80055ac:	00d2      	lsls	r2, r2, #3
 80055ae:	4093      	lsls	r3, r2
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80055b6:	4938      	ldr	r1, [pc, #224]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	3318      	adds	r3, #24
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055c4:	4b34      	ldr	r3, [pc, #208]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055ee:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4013      	ands	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005612:	4a21      	ldr	r2, [pc, #132]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005618:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 800561a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	43db      	mvns	r3, r3
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800563e:	4a16      	ldr	r2, [pc, #88]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 8005648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	43db      	mvns	r3, r3
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4013      	ands	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800566c:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <HAL_GPIO_Init+0x2e0>)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3301      	adds	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	f47f ae9f 	bne.w	80053c8 <HAL_GPIO_Init+0x10>
  }
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	4002f400 	.word	0x4002f400
 800569c:	42020000 	.word	0x42020000
 80056a0:	42020400 	.word	0x42020400
 80056a4:	42020800 	.word	0x42020800
 80056a8:	42020c00 	.word	0x42020c00
 80056ac:	42021000 	.word	0x42021000
 80056b0:	42021400 	.word	0x42021400
 80056b4:	42021800 	.word	0x42021800

080056b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	807b      	strh	r3, [r7, #2]
 80056c4:	4613      	mov	r3, r2
 80056c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056c8:	787b      	ldrb	r3, [r7, #1]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ce:	887a      	ldrh	r2, [r7, #2]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056d4:	e002      	b.n	80056dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056d6:	887a      	ldrh	r2, [r7, #2]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ea:	b08b      	sub	sp, #44	; 0x2c
 80056ec:	af06      	add	r7, sp, #24
 80056ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e0cb      	b.n	8005892 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fe f8e8 	bl	80038e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2203      	movs	r2, #3
 8005718:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f003 ffdf 	bl	80096e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	e040      	b.n	80057ae <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	440b      	add	r3, r1
 800573c:	3301      	adds	r3, #1
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	440b      	add	r3, r1
 8005766:	3303      	adds	r3, #3
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	440b      	add	r3, r1
 800577a:	3338      	adds	r3, #56	; 0x38
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005780:	7bfa      	ldrb	r2, [r7, #15]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	333c      	adds	r3, #60	; 0x3c
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3340      	adds	r3, #64	; 0x40
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	3301      	adds	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
 80057ae:	7bfa      	ldrb	r2, [r7, #15]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d3b9      	bcc.n	800572c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	e044      	b.n	8005848 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	440b      	add	r3, r1
 80057cc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057e6:	7bfa      	ldrb	r2, [r7, #15]
 80057e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057ea:	7bfa      	ldrb	r2, [r7, #15]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	440b      	add	r3, r1
 80057f8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005800:	7bfa      	ldrb	r2, [r7, #15]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	440b      	add	r3, r1
 800580e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800582c:	7bfa      	ldrb	r2, [r7, #15]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	440b      	add	r3, r1
 800583a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	3301      	adds	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d3b5      	bcc.n	80057be <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	687e      	ldr	r6, [r7, #4]
 800585a:	466d      	mov	r5, sp
 800585c:	f106 0410 	add.w	r4, r6, #16
 8005860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	602b      	str	r3, [r5, #0]
 8005868:	1d33      	adds	r3, r6, #4
 800586a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800586c:	6838      	ldr	r0, [r7, #0]
 800586e:	f003 ff54 	bl	800971a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f805 	bl	800589a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800589a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a04      	ldr	r2, [pc, #16]	; (800590c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fe:	6013      	str	r3, [r2, #0]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40007000 	.word	0x40007000

08005910 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <HAL_PWREx_GetVoltageRange+0x18>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800591c:	4618      	mov	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40007000 	.word	0x40007000

0800592c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8005934:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800593c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800593e:	f000 f861 	bl	8005a04 <HAL_PWREx_SMPS_GetEffectiveMode>
 8005942:	4603      	mov	r3, r0
 8005944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005948:	d101      	bne.n	800594e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e03e      	b.n	80059cc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800594e:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595a:	d101      	bne.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e035      	b.n	80059cc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d101      	bne.n	800596c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e02f      	b.n	80059cc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005974:	4917      	ldr	r1, [pc, #92]	; (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800597c:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	4a16      	ldr	r2, [pc, #88]	; (80059dc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	09db      	lsrs	r3, r3, #7
 800598a:	2232      	movs	r2, #50	; 0x32
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	4a13      	ldr	r2, [pc, #76]	; (80059e0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	08db      	lsrs	r3, r3, #3
 8005998:	3301      	adds	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800599c:	e002      	b.n	80059a4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b0:	d102      	bne.n	80059b8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f2      	bne.n	800599e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c4:	d101      	bne.n	80059ca <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e000      	b.n	80059cc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40007000 	.word	0x40007000
 80059d8:	20000008 	.word	0x20000008
 80059dc:	0a7c5ac5 	.word	0x0a7c5ac5
 80059e0:	cccccccd 	.word	0xcccccccd

080059e4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_PWREx_EnableVddIO2+0x1c>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <HAL_PWREx_EnableVddIO2+0x1c>)
 80059ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059f2:	6053      	str	r3, [r2, #4]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40007000 	.word	0x40007000

08005a04 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8005a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e00a      	b.n	8005a38 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8005a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	e001      	b.n	8005a38 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8005a34:	2300      	movs	r3, #0
 8005a36:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8005a38:	687b      	ldr	r3, [r7, #4]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40007000 	.word	0x40007000

08005a4c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d102      	bne.n	8005a60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f000 bcc2 	b.w	80063e4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a60:	4b99      	ldr	r3, [pc, #612]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a6a:	4b97      	ldr	r3, [pc, #604]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80e9 	beq.w	8005c54 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <HAL_RCC_OscConfig+0x4a>
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b0c      	cmp	r3, #12
 8005a8c:	f040 8083 	bne.w	8005b96 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d17f      	bne.n	8005b96 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a96:	4b8c      	ldr	r3, [pc, #560]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x64>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f000 bc9a 	b.w	80063e4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab4:	4b84      	ldr	r3, [pc, #528]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_RCC_OscConfig+0x7e>
 8005ac0:	4b81      	ldr	r3, [pc, #516]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac8:	e005      	b.n	8005ad6 <HAL_RCC_OscConfig+0x8a>
 8005aca:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d224      	bcs.n	8005b24 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fe9c 	bl	800681c <RCC_SetFlashLatencyFromMSIRange>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f000 bc7a 	b.w	80063e4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005af0:	4b75      	ldr	r3, [pc, #468]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a74      	ldr	r2, [pc, #464]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005af6:	f043 0308 	orr.w	r3, r3, #8
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	4b72      	ldr	r3, [pc, #456]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	496f      	ldr	r1, [pc, #444]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b0e:	4b6e      	ldr	r3, [pc, #440]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	496a      	ldr	r1, [pc, #424]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	604b      	str	r3, [r1, #4]
 8005b22:	e026      	b.n	8005b72 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b24:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a67      	ldr	r2, [pc, #412]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b2a:	f043 0308 	orr.w	r3, r3, #8
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	4962      	ldr	r1, [pc, #392]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b42:	4b61      	ldr	r3, [pc, #388]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	495d      	ldr	r1, [pc, #372]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fe5b 	bl	800681c <RCC_SetFlashLatencyFromMSIRange>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f000 bc39 	b.w	80063e4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b72:	f000 fe17 	bl	80067a4 <HAL_RCC_GetHCLKFreq>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4a54      	ldr	r2, [pc, #336]	; (8005ccc <HAL_RCC_OscConfig+0x280>)
 8005b7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b7c:	4b54      	ldr	r3, [pc, #336]	; (8005cd0 <HAL_RCC_OscConfig+0x284>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fd ff53 	bl	8003a2c <HAL_InitTick>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d060      	beq.n	8005c52 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	f000 bc27 	b.w	80063e4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d039      	beq.n	8005c12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a49      	ldr	r2, [pc, #292]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005baa:	f7fd ff8f 	bl	8003acc <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bb0:	e00f      	b.n	8005bd2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bb2:	f7fd ff8b 	bl	8003acc <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d908      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bc0:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	f000 bc09 	b.w	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0e9      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bde:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a39      	ldr	r2, [pc, #228]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005be4:	f043 0308 	orr.w	r3, r3, #8
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	4934      	ldr	r1, [pc, #208]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bfc:	4b32      	ldr	r3, [pc, #200]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	492f      	ldr	r1, [pc, #188]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	e020      	b.n	8005c54 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c12:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c1e:	f7fd ff55 	bl	8003acc <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c24:	e00e      	b.n	8005c44 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c26:	f7fd ff51 	bl	8003acc <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d907      	bls.n	8005c44 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e3cf      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c44:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1ea      	bne.n	8005c26 <HAL_RCC_OscConfig+0x1da>
 8005c50:	e000      	b.n	8005c54 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d07e      	beq.n	8005d5e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d005      	beq.n	8005c72 <HAL_RCC_OscConfig+0x226>
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	d10e      	bne.n	8005c8a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d10b      	bne.n	8005c8a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d06e      	beq.n	8005d5c <HAL_RCC_OscConfig+0x310>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d16a      	bne.n	8005d5c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e3ac      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c92:	d106      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x256>
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a0b      	ldr	r2, [pc, #44]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e024      	b.n	8005cec <HAL_RCC_OscConfig+0x2a0>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005caa:	d113      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x288>
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a05      	ldr	r2, [pc, #20]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a02      	ldr	r2, [pc, #8]	; (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e012      	b.n	8005cec <HAL_RCC_OscConfig+0x2a0>
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	20000008 	.word	0x20000008
 8005cd0:	2000000c 	.word	0x2000000c
 8005cd4:	4b8b      	ldr	r3, [pc, #556]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a8a      	ldr	r2, [pc, #552]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4b88      	ldr	r3, [pc, #544]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a87      	ldr	r2, [pc, #540]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d019      	beq.n	8005d28 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fd feea 	bl	8003acc <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cfa:	e00e      	b.n	8005d1a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cfc:	f7fd fee6 	bl	8003acc <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b64      	cmp	r3, #100	; 0x64
 8005d08:	d907      	bls.n	8005d1a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d0a:	4b7e      	ldr	r3, [pc, #504]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e364      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d1a:	4b7a      	ldr	r3, [pc, #488]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0ea      	beq.n	8005cfc <HAL_RCC_OscConfig+0x2b0>
 8005d26:	e01a      	b.n	8005d5e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fd fed0 	bl	8003acc <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d2e:	e00e      	b.n	8005d4e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d30:	f7fd fecc 	bl	8003acc <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b64      	cmp	r3, #100	; 0x64
 8005d3c:	d907      	bls.n	8005d4e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d3e:	4b71      	ldr	r3, [pc, #452]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e34a      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d4e:	4b6d      	ldr	r3, [pc, #436]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ea      	bne.n	8005d30 <HAL_RCC_OscConfig+0x2e4>
 8005d5a:	e000      	b.n	8005d5e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d06c      	beq.n	8005e44 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d005      	beq.n	8005d7c <HAL_RCC_OscConfig+0x330>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b0c      	cmp	r3, #12
 8005d74:	d119      	bne.n	8005daa <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d116      	bne.n	8005daa <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d7c:	4b61      	ldr	r3, [pc, #388]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_RCC_OscConfig+0x348>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e327      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d94:	4b5b      	ldr	r3, [pc, #364]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	4958      	ldr	r1, [pc, #352]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005da8:	e04c      	b.n	8005e44 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d029      	beq.n	8005e06 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db2:	4b54      	ldr	r3, [pc, #336]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a53      	ldr	r2, [pc, #332]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbe:	f7fd fe85 	bl	8003acc <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc4:	e00e      	b.n	8005de4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc6:	f7fd fe81 	bl	8003acc <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d907      	bls.n	8005de4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dd4:	4b4b      	ldr	r3, [pc, #300]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e2ff      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de4:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ea      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df0:	4b44      	ldr	r3, [pc, #272]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	4941      	ldr	r1, [pc, #260]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	604b      	str	r3, [r1, #4]
 8005e04:	e01e      	b.n	8005e44 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e06:	4b3f      	ldr	r3, [pc, #252]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3e      	ldr	r2, [pc, #248]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e12:	f7fd fe5b 	bl	8003acc <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e18:	e00e      	b.n	8005e38 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e1a:	f7fd fe57 	bl	8003acc <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d907      	bls.n	8005e38 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e28:	4b36      	ldr	r3, [pc, #216]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e2d5      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1ea      	bne.n	8005e1a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d062      	beq.n	8005f16 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d038      	beq.n	8005eca <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d108      	bne.n	8005e72 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005e60:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e66:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e68:	f023 0310 	bic.w	r3, r3, #16
 8005e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005e70:	e007      	b.n	8005e82 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005e72:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e78:	4a22      	ldr	r2, [pc, #136]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e7a:	f043 0310 	orr.w	r3, r3, #16
 8005e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e82:	4b20      	ldr	r3, [pc, #128]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e88:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e92:	f7fd fe1b 	bl	8003acc <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e98:	e00f      	b.n	8005eba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e9a:	f7fd fe17 	bl	8003acc <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d908      	bls.n	8005eba <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ea8:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e294      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0e8      	beq.n	8005e9a <HAL_RCC_OscConfig+0x44e>
 8005ec8:	e025      	b.n	8005f16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed0:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eda:	f7fd fdf7 	bl	8003acc <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ee0:	e012      	b.n	8005f08 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee2:	f7fd fdf3 	bl	8003acc <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b07      	cmp	r3, #7
 8005eee:	d90b      	bls.n	8005f08 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <HAL_RCC_OscConfig+0x4b8>)
 8005ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e270      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f08:	4ba8      	ldr	r3, [pc, #672]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e5      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 812d 	beq.w	800617e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f24:	2300      	movs	r3, #0
 8005f26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f28:	4ba0      	ldr	r3, [pc, #640]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10d      	bne.n	8005f50 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f34:	4b9d      	ldr	r3, [pc, #628]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f38:	4a9c      	ldr	r2, [pc, #624]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f40:	4b9a      	ldr	r3, [pc, #616]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f50:	4b97      	ldr	r3, [pc, #604]	; (80061b0 <HAL_RCC_OscConfig+0x764>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11e      	bne.n	8005f9a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f5c:	4b94      	ldr	r3, [pc, #592]	; (80061b0 <HAL_RCC_OscConfig+0x764>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a93      	ldr	r2, [pc, #588]	; (80061b0 <HAL_RCC_OscConfig+0x764>)
 8005f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f68:	f7fd fdb0 	bl	8003acc <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f6e:	e00e      	b.n	8005f8e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f70:	f7fd fdac 	bl	8003acc <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d907      	bls.n	8005f8e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f7e:	4b8c      	ldr	r3, [pc, #560]	; (80061b0 <HAL_RCC_OscConfig+0x764>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e22a      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x764>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0ea      	beq.n	8005f70 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01f      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005fb2:	4b7e      	ldr	r3, [pc, #504]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb8:	4a7c      	ldr	r2, [pc, #496]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fba:	f043 0304 	orr.w	r3, r3, #4
 8005fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fc2:	4b7a      	ldr	r3, [pc, #488]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc8:	4a78      	ldr	r2, [pc, #480]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fd2:	e018      	b.n	8006006 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fd4:	4b75      	ldr	r3, [pc, #468]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fda:	4a74      	ldr	r2, [pc, #464]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fe4:	e00f      	b.n	8006006 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fe6:	4b71      	ldr	r3, [pc, #452]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fec:	4a6f      	ldr	r2, [pc, #444]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ff6:	4b6d      	ldr	r3, [pc, #436]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffc:	4a6b      	ldr	r2, [pc, #428]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8005ffe:	f023 0304 	bic.w	r3, r3, #4
 8006002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d068      	beq.n	80060e0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600e:	f7fd fd5d 	bl	8003acc <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006014:	e011      	b.n	800603a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006016:	f7fd fd59 	bl	8003acc <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	f241 3288 	movw	r2, #5000	; 0x1388
 8006024:	4293      	cmp	r3, r2
 8006026:	d908      	bls.n	800603a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006028:	4b60      	ldr	r3, [pc, #384]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e1d4      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800603a:	4b5c      	ldr	r3, [pc, #368]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0e6      	beq.n	8006016 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d022      	beq.n	800609a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006054:	4b55      	ldr	r3, [pc, #340]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	4a54      	ldr	r2, [pc, #336]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800605c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006064:	e011      	b.n	800608a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006066:	f7fd fd31 	bl	8003acc <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	f241 3288 	movw	r2, #5000	; 0x1388
 8006074:	4293      	cmp	r3, r2
 8006076:	d908      	bls.n	800608a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006078:	4b4c      	ldr	r3, [pc, #304]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e1ac      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800608a:	4b48      	ldr	r3, [pc, #288]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0e6      	beq.n	8006066 <HAL_RCC_OscConfig+0x61a>
 8006098:	e068      	b.n	800616c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800609a:	4b44      	ldr	r3, [pc, #272]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a0:	4a42      	ldr	r2, [pc, #264]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 80060a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060aa:	e011      	b.n	80060d0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ac:	f7fd fd0e 	bl	8003acc <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d908      	bls.n	80060d0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060be:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e189      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060d0:	4b36      	ldr	r3, [pc, #216]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e6      	bne.n	80060ac <HAL_RCC_OscConfig+0x660>
 80060de:	e045      	b.n	800616c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fd fcf4 	bl	8003acc <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060e6:	e011      	b.n	800610c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e8:	f7fd fcf0 	bl	8003acc <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d908      	bls.n	800610c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060fa:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e16b      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800610c:	4b27      	ldr	r3, [pc, #156]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e6      	bne.n	80060e8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800611c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b00      	cmp	r3, #0
 8006126:	d021      	beq.n	800616c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006128:	4b20      	ldr	r3, [pc, #128]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612e:	4a1f      	ldr	r2, [pc, #124]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8006130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006138:	e011      	b.n	800615e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fd fcc7 	bl	8003acc <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f241 3288 	movw	r2, #5000	; 0x1388
 8006148:	4293      	cmp	r3, r2
 800614a:	d908      	bls.n	800615e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e142      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800615e:	4b13      	ldr	r3, [pc, #76]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e6      	bne.n	800613a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800616c:	7ffb      	ldrb	r3, [r7, #31]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d105      	bne.n	800617e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006172:	4b0e      	ldr	r3, [pc, #56]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8006178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d04f      	beq.n	800622a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d028      	beq.n	80061e4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 8006194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006198:	4a04      	ldr	r2, [pc, #16]	; (80061ac <HAL_RCC_OscConfig+0x760>)
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a2:	f7fd fc93 	bl	8003acc <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061a8:	e014      	b.n	80061d4 <HAL_RCC_OscConfig+0x788>
 80061aa:	bf00      	nop
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061b4:	f7fd fc8a 	bl	8003acc <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d908      	bls.n	80061d4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061c2:	4b8a      	ldr	r3, [pc, #552]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80061c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e107      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061d4:	4b85      	ldr	r3, [pc, #532]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80061d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0e8      	beq.n	80061b4 <HAL_RCC_OscConfig+0x768>
 80061e2:	e022      	b.n	800622a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061e4:	4b81      	ldr	r3, [pc, #516]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80061e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061ea:	4a80      	ldr	r2, [pc, #512]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f4:	f7fd fc6a 	bl	8003acc <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061fa:	e00f      	b.n	800621c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061fc:	f7fd fc66 	bl	8003acc <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d908      	bls.n	800621c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800620a:	4b78      	ldr	r3, [pc, #480]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800620c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e0e3      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800621c:	4b73      	ldr	r3, [pc, #460]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800621e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e8      	bne.n	80061fc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80d7 	beq.w	80063e2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006234:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 030c 	and.w	r3, r3, #12
 800623c:	2b0c      	cmp	r3, #12
 800623e:	f000 8091 	beq.w	8006364 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	2b02      	cmp	r3, #2
 8006248:	d166      	bne.n	8006318 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624a:	4b68      	ldr	r3, [pc, #416]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a67      	ldr	r2, [pc, #412]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 8006250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006256:	f7fd fc39 	bl	8003acc <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800625c:	e00e      	b.n	800627c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800625e:	f7fd fc35 	bl	8003acc <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d907      	bls.n	800627c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800626c:	4b5f      	ldr	r3, [pc, #380]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e0b3      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800627c:	4b5b      	ldr	r3, [pc, #364]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1ea      	bne.n	800625e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006288:	4b58      	ldr	r3, [pc, #352]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	4b58      	ldr	r3, [pc, #352]	; (80063f0 <HAL_RCC_OscConfig+0x9a4>)
 800628e:	4013      	ands	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006298:	3a01      	subs	r2, #1
 800629a:	0112      	lsls	r2, r2, #4
 800629c:	4311      	orrs	r1, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062a2:	0212      	lsls	r2, r2, #8
 80062a4:	4311      	orrs	r1, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062aa:	0852      	lsrs	r2, r2, #1
 80062ac:	3a01      	subs	r2, #1
 80062ae:	0552      	lsls	r2, r2, #21
 80062b0:	4311      	orrs	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80062b6:	0852      	lsrs	r2, r2, #1
 80062b8:	3a01      	subs	r2, #1
 80062ba:	0652      	lsls	r2, r2, #25
 80062bc:	4311      	orrs	r1, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062c2:	06d2      	lsls	r2, r2, #27
 80062c4:	430a      	orrs	r2, r1
 80062c6:	4949      	ldr	r1, [pc, #292]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062cc:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a46      	ldr	r2, [pc, #280]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80062d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062d8:	4b44      	ldr	r3, [pc, #272]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a43      	ldr	r2, [pc, #268]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80062de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fd fbf2 	bl	8003acc <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ea:	e00e      	b.n	800630a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ec:	f7fd fbee 	bl	8003acc <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d907      	bls.n	800630a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062fa:	4b3c      	ldr	r3, [pc, #240]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e06c      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800630a:	4b38      	ldr	r3, [pc, #224]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0ea      	beq.n	80062ec <HAL_RCC_OscConfig+0x8a0>
 8006316:	e064      	b.n	80063e2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006318:	4b34      	ldr	r3, [pc, #208]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a33      	ldr	r2, [pc, #204]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800631e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fd fbd2 	bl	8003acc <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800632a:	e00e      	b.n	800634a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632c:	f7fd fbce 	bl	8003acc <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d907      	bls.n	800634a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800633a:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e04c      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800634a:	4b28      	ldr	r3, [pc, #160]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ea      	bne.n	800632c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006356:	4b25      	ldr	r3, [pc, #148]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	4924      	ldr	r1, [pc, #144]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <HAL_RCC_OscConfig+0x9a8>)
 800635e:	4013      	ands	r3, r2
 8006360:	60cb      	str	r3, [r1, #12]
 8006362:	e03e      	b.n	80063e2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e039      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8006370:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <HAL_RCC_OscConfig+0x9a0>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f003 0203 	and.w	r2, r3, #3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	429a      	cmp	r2, r3
 8006382:	d12c      	bne.n	80063de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	3b01      	subs	r3, #1
 8006390:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d123      	bne.n	80063de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d11b      	bne.n	80063de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d113      	bne.n	80063de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	3b01      	subs	r3, #1
 80063c4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d109      	bne.n	80063de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	3b01      	subs	r3, #1
 80063d8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063da:	429a      	cmp	r2, r3
 80063dc:	d001      	beq.n	80063e2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40021000 	.word	0x40021000
 80063f0:	019f800c 	.word	0x019f800c
 80063f4:	feeefffc 	.word	0xfeeefffc

080063f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e11c      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006410:	4b90      	ldr	r3, [pc, #576]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d910      	bls.n	8006440 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b8d      	ldr	r3, [pc, #564]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 020f 	bic.w	r2, r3, #15
 8006426:	498b      	ldr	r1, [pc, #556]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b89      	ldr	r3, [pc, #548]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e104      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d010      	beq.n	800646e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	4b81      	ldr	r3, [pc, #516]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006458:	429a      	cmp	r2, r3
 800645a:	d908      	bls.n	800646e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800645c:	4b7e      	ldr	r3, [pc, #504]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	497b      	ldr	r1, [pc, #492]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8085 	beq.w	8006586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d11f      	bne.n	80064c4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006484:	4b74      	ldr	r3, [pc, #464]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0da      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006494:	f000 fa26 	bl	80068e4 <RCC_GetSysClockFreqFromPLLSource>
 8006498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4a6f      	ldr	r2, [pc, #444]	; (800665c <HAL_RCC_ClockConfig+0x264>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d947      	bls.n	8006532 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80064a2:	4b6d      	ldr	r3, [pc, #436]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d141      	bne.n	8006532 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ae:	4b6a      	ldr	r3, [pc, #424]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b6:	4a68      	ldr	r2, [pc, #416]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80064b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	e036      	b.n	8006532 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d107      	bne.n	80064dc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064cc:	4b62      	ldr	r3, [pc, #392]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d115      	bne.n	8006504 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0b6      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d107      	bne.n	80064f4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064e4:	4b5c      	ldr	r3, [pc, #368]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0aa      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f4:	4b58      	ldr	r3, [pc, #352]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0a2      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006504:	f000 f8b0 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 8006508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4a53      	ldr	r2, [pc, #332]	; (800665c <HAL_RCC_ClockConfig+0x264>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d90f      	bls.n	8006532 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006512:	4b51      	ldr	r3, [pc, #324]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800651e:	4b4e      	ldr	r3, [pc, #312]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006526:	4a4c      	ldr	r2, [pc, #304]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006532:	4b49      	ldr	r3, [pc, #292]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 0203 	bic.w	r2, r3, #3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4946      	ldr	r1, [pc, #280]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006540:	4313      	orrs	r3, r2
 8006542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006544:	f7fd fac2 	bl	8003acc <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654a:	e013      	b.n	8006574 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800654c:	f7fd fabe 	bl	8003acc <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f241 3288 	movw	r2, #5000	; 0x1388
 800655a:	4293      	cmp	r3, r2
 800655c:	d90a      	bls.n	8006574 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	4b3e      	ldr	r3, [pc, #248]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 020c 	and.w	r2, r3, #12
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	429a      	cmp	r2, r3
 800656e:	d001      	beq.n	8006574 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e06a      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006574:	4b38      	ldr	r3, [pc, #224]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 020c 	and.w	r2, r3, #12
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	429a      	cmp	r2, r3
 8006584:	d1e2      	bne.n	800654c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b80      	cmp	r3, #128	; 0x80
 800658a:	d105      	bne.n	8006598 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800658c:	4b32      	ldr	r3, [pc, #200]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4a31      	ldr	r2, [pc, #196]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006596:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d010      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d208      	bcs.n	80065c6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b4:	4b28      	ldr	r3, [pc, #160]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4925      	ldr	r1, [pc, #148]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065c6:	4b23      	ldr	r3, [pc, #140]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d210      	bcs.n	80065f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d4:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f023 020f 	bic.w	r2, r3, #15
 80065dc:	491d      	ldr	r1, [pc, #116]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCC_ClockConfig+0x25c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d001      	beq.n	80065f6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e029      	b.n	800664a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	4912      	ldr	r1, [pc, #72]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006610:	4313      	orrs	r3, r2
 8006612:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006620:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	490a      	ldr	r1, [pc, #40]	; (8006658 <HAL_RCC_ClockConfig+0x260>)
 8006630:	4313      	orrs	r3, r2
 8006632:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006634:	f000 f8b6 	bl	80067a4 <HAL_RCC_GetHCLKFreq>
 8006638:	4603      	mov	r3, r0
 800663a:	4a09      	ldr	r2, [pc, #36]	; (8006660 <HAL_RCC_ClockConfig+0x268>)
 800663c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800663e:	4b09      	ldr	r3, [pc, #36]	; (8006664 <HAL_RCC_ClockConfig+0x26c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7fd f9f2 	bl	8003a2c <HAL_InitTick>
 8006648:	4603      	mov	r3, r0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40022000 	.word	0x40022000
 8006658:	40021000 	.word	0x40021000
 800665c:	04c4b400 	.word	0x04c4b400
 8006660:	20000008 	.word	0x20000008
 8006664:	2000000c 	.word	0x2000000c

08006668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	2300      	movs	r3, #0
 8006674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006676:	4b47      	ldr	r3, [pc, #284]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 030c 	and.w	r3, r3, #12
 800667e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006680:	4b44      	ldr	r3, [pc, #272]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCC_GetSysClockFreq+0x34>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d121      	bne.n	80066da <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d11e      	bne.n	80066da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800669c:	4b3d      	ldr	r3, [pc, #244]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066a8:	4b3a      	ldr	r3, [pc, #232]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 80066aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	e005      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066b8:	4b36      	ldr	r3, [pc, #216]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80066c4:	4a34      	ldr	r2, [pc, #208]	; (8006798 <HAL_RCC_GetSysClockFreq+0x130>)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066cc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10d      	bne.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d102      	bne.n	80066e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066e0:	4b2e      	ldr	r3, [pc, #184]	; (800679c <HAL_RCC_GetSysClockFreq+0x134>)
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	e004      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d101      	bne.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066ec:	4b2c      	ldr	r3, [pc, #176]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80066ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d146      	bne.n	8006784 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80066f6:	4b27      	ldr	r3, [pc, #156]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006700:	4b24      	ldr	r3, [pc, #144]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	3301      	adds	r3, #1
 800670c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d003      	beq.n	800671c <HAL_RCC_GetSysClockFreq+0xb4>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b03      	cmp	r3, #3
 8006718:	d00d      	beq.n	8006736 <HAL_RCC_GetSysClockFreq+0xce>
 800671a:	e019      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_RCC_GetSysClockFreq+0x134>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006726:	68d2      	ldr	r2, [r2, #12]
 8006728:	0a12      	lsrs	r2, r2, #8
 800672a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	617b      	str	r3, [r7, #20]
        break;
 8006734:	e019      	b.n	800676a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006736:	4a1a      	ldr	r2, [pc, #104]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	4a15      	ldr	r2, [pc, #84]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006740:	68d2      	ldr	r2, [r2, #12]
 8006742:	0a12      	lsrs	r2, r2, #8
 8006744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]
        break;
 800674e:	e00c      	b.n	800676a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 800675a:	68d2      	ldr	r2, [r2, #12]
 800675c:	0a12      	lsrs	r2, r2, #8
 800675e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	617b      	str	r3, [r7, #20]
        break;
 8006768:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800676a:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <HAL_RCC_GetSysClockFreq+0x12c>)
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	0e5b      	lsrs	r3, r3, #25
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	3301      	adds	r3, #1
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006784:	69bb      	ldr	r3, [r7, #24]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3724      	adds	r7, #36	; 0x24
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	0800a9f8 	.word	0x0800a9f8
 800679c:	00f42400 	.word	0x00f42400
 80067a0:	007a1200 	.word	0x007a1200

080067a4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80067a8:	f7ff ff5e 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 80067ac:	4602      	mov	r2, r0
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <HAL_RCC_GetHCLKFreq+0x20>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	091b      	lsrs	r3, r3, #4
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	4903      	ldr	r1, [pc, #12]	; (80067c8 <HAL_RCC_GetHCLKFreq+0x24>)
 80067ba:	5ccb      	ldrb	r3, [r1, r3]
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40021000 	.word	0x40021000
 80067c8:	0800a9e0 	.word	0x0800a9e0

080067cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067d0:	f7ff ffe8 	bl	80067a4 <HAL_RCC_GetHCLKFreq>
 80067d4:	4602      	mov	r2, r0
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	0a1b      	lsrs	r3, r3, #8
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	4903      	ldr	r1, [pc, #12]	; (80067f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e2:	5ccb      	ldrb	r3, [r1, r3]
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40021000 	.word	0x40021000
 80067f0:	0800a9f0 	.word	0x0800a9f0

080067f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067f8:	f7ff ffd4 	bl	80067a4 <HAL_RCC_GetHCLKFreq>
 80067fc:	4602      	mov	r2, r0
 80067fe:	4b05      	ldr	r3, [pc, #20]	; (8006814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	0adb      	lsrs	r3, r3, #11
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	4903      	ldr	r1, [pc, #12]	; (8006818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800680a:	5ccb      	ldrb	r3, [r1, r3]
 800680c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006810:	4618      	mov	r0, r3
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40021000 	.word	0x40021000
 8006818:	0800a9f0 	.word	0x0800a9f0

0800681c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006828:	4b2c      	ldr	r3, [pc, #176]	; (80068dc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800682a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006834:	f7ff f86c 	bl	8005910 <HAL_PWREx_GetVoltageRange>
 8006838:	6138      	str	r0, [r7, #16]
 800683a:	e014      	b.n	8006866 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800683c:	4b27      	ldr	r3, [pc, #156]	; (80068dc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006846:	6593      	str	r3, [r2, #88]	; 0x58
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006854:	f7ff f85c 	bl	8005910 <HAL_PWREx_GetVoltageRange>
 8006858:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006864:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006872:	d10b      	bne.n	800688c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d919      	bls.n	80068ae <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2ba0      	cmp	r3, #160	; 0xa0
 800687e:	d902      	bls.n	8006886 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006880:	2302      	movs	r3, #2
 8006882:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006884:	e013      	b.n	80068ae <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006886:	2301      	movs	r3, #1
 8006888:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800688a:	e010      	b.n	80068ae <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d902      	bls.n	8006898 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006892:	2303      	movs	r3, #3
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	e00a      	b.n	80068ae <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b80      	cmp	r3, #128	; 0x80
 800689c:	d102      	bne.n	80068a4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800689e:	2302      	movs	r3, #2
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	e004      	b.n	80068ae <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b70      	cmp	r3, #112	; 0x70
 80068a8:	d101      	bne.n	80068ae <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068aa:	2301      	movs	r3, #1
 80068ac:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 020f 	bic.w	r2, r3, #15
 80068b6:	490a      	ldr	r1, [pc, #40]	; (80068e0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80068be:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40021000 	.word	0x40021000
 80068e0:	40022000 	.word	0x40022000

080068e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068ea:	4b31      	ldr	r3, [pc, #196]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068f4:	4b2e      	ldr	r3, [pc, #184]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	3301      	adds	r3, #1
 8006900:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d015      	beq.n	8006934 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b03      	cmp	r3, #3
 800690c:	d839      	bhi.n	8006982 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d01c      	beq.n	800694e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d133      	bne.n	8006982 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800691a:	4a26      	ldr	r2, [pc, #152]	; (80069b4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006922:	4a23      	ldr	r2, [pc, #140]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006924:	68d2      	ldr	r2, [r2, #12]
 8006926:	0a12      	lsrs	r2, r2, #8
 8006928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800692c:	fb02 f303 	mul.w	r3, r2, r3
 8006930:	613b      	str	r3, [r7, #16]
      break;
 8006932:	e029      	b.n	8006988 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006934:	4a20      	ldr	r2, [pc, #128]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800693e:	68d2      	ldr	r2, [r2, #12]
 8006940:	0a12      	lsrs	r2, r2, #8
 8006942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	613b      	str	r3, [r7, #16]
      break;
 800694c:	e01c      	b.n	8006988 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800694e:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800695c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006960:	0a1b      	lsrs	r3, r3, #8
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e005      	b.n	8006976 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800696a:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	091b      	lsrs	r3, r3, #4
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8006976:	4a11      	ldr	r2, [pc, #68]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697e:	613b      	str	r3, [r7, #16]
        break;
 8006980:	e002      	b.n	8006988 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
      break;
 8006986:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	0e5b      	lsrs	r3, r3, #25
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	3301      	adds	r3, #1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80069a2:	683b      	ldr	r3, [r7, #0]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	40021000 	.word	0x40021000
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	007a1200 	.word	0x007a1200
 80069bc:	0800a9f8 	.word	0x0800a9f8

080069c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069c8:	2300      	movs	r3, #0
 80069ca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069cc:	2300      	movs	r3, #0
 80069ce:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d040      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e0:	2b80      	cmp	r3, #128	; 0x80
 80069e2:	d02a      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d825      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069e8:	2b60      	cmp	r3, #96	; 0x60
 80069ea:	d026      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069ec:	2b60      	cmp	r3, #96	; 0x60
 80069ee:	d821      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d006      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d81d      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d010      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006a00:	e018      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a02:	4b8f      	ldr	r3, [pc, #572]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4a8e      	ldr	r2, [pc, #568]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a0c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a0e:	e015      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb56 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a20:	e00c      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3320      	adds	r3, #32
 8006a26:	2100      	movs	r1, #0
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 fc33 	bl	8007294 <RCCEx_PLLSAI2_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	77fb      	strb	r3, [r7, #31]
        break;
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8006a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3c:	7ffb      	ldrb	r3, [r7, #31]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a42:	4b7f      	ldr	r3, [pc, #508]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a48:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a50:	497b      	ldr	r1, [pc, #492]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006a58:	e001      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5a:	7ffb      	ldrb	r3, [r7, #31]
 8006a5c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d047      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d030      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a78:	d82a      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7e:	d02a      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a84:	d824      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8a:	d008      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a90:	d81e      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9a:	d010      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a9c:	e018      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a9e:	4b68      	ldr	r3, [pc, #416]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	4a67      	ldr	r2, [pc, #412]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006aaa:	e015      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fb08 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006abc:	e00c      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3320      	adds	r3, #32
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fbe5 	bl	8007294 <RCCEx_PLLSAI2_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006ace:	e003      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	77fb      	strb	r3, [r7, #31]
        break;
 8006ad4:	e000      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8006ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad8:	7ffb      	ldrb	r3, [r7, #31]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ade:	4b58      	ldr	r3, [pc, #352]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	4954      	ldr	r1, [pc, #336]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006af4:	e001      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af6:	7ffb      	ldrb	r3, [r7, #31]
 8006af8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80ab 	beq.w	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b0c:	4b4c      	ldr	r3, [pc, #304]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10d      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b18:	4b49      	ldr	r3, [pc, #292]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1c:	4a48      	ldr	r2, [pc, #288]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b22:	6593      	str	r3, [r2, #88]	; 0x58
 8006b24:	4b46      	ldr	r3, [pc, #280]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b30:	2301      	movs	r3, #1
 8006b32:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b34:	4b43      	ldr	r3, [pc, #268]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a42      	ldr	r2, [pc, #264]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b40:	f7fc ffc4 	bl	8003acc <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b46:	e00f      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b48:	f7fc ffc0 	bl	8003acc <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d908      	bls.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b56:	4b3b      	ldr	r3, [pc, #236]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8006b66:	e006      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b68:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0e9      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006b74:	e000      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8006b76:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006b78:	7ffb      	ldrb	r3, [r7, #31]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d164      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b7e:	4b30      	ldr	r3, [pc, #192]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b88:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01f      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d019      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b9c:	4b28      	ldr	r3, [pc, #160]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bb8:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbe:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01f      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bda:	f7fc ff77 	bl	8003acc <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006be0:	e012      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be2:	f7fc ff73 	bl	8003acc <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d909      	bls.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf4:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8006c06:	e007      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0e5      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8006c18:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8006c1a:	7ffb      	ldrb	r3, [r7, #31]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10c      	bne.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	4903      	ldr	r1, [pc, #12]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006c38:	e008      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c3a:	7ffb      	ldrb	r3, [r7, #31]
 8006c3c:	77bb      	strb	r3, [r7, #30]
 8006c3e:	e005      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8006c40:	40021000 	.word	0x40021000
 8006c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	7ffb      	ldrb	r3, [r7, #31]
 8006c4a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d105      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c52:	4b9c      	ldr	r3, [pc, #624]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c56:	4a9b      	ldr	r2, [pc, #620]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c6a:	4b96      	ldr	r3, [pc, #600]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	f023 0203 	bic.w	r2, r3, #3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	4992      	ldr	r1, [pc, #584]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c8c:	4b8d      	ldr	r3, [pc, #564]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	f023 020c 	bic.w	r2, r3, #12
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	498a      	ldr	r1, [pc, #552]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cae:	4b85      	ldr	r3, [pc, #532]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbc:	4981      	ldr	r1, [pc, #516]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cd0:	4b7c      	ldr	r3, [pc, #496]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	4979      	ldr	r1, [pc, #484]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cf2:	4b74      	ldr	r3, [pc, #464]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	4970      	ldr	r1, [pc, #448]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d14:	4b6b      	ldr	r3, [pc, #428]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d22:	4968      	ldr	r1, [pc, #416]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d36:	4b63      	ldr	r3, [pc, #396]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d44:	495f      	ldr	r1, [pc, #380]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d58:	4b5a      	ldr	r3, [pc, #360]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d66:	4957      	ldr	r1, [pc, #348]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006d7a:	4b52      	ldr	r3, [pc, #328]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d88:	494e      	ldr	r1, [pc, #312]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d031      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006da4:	d00e      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006da6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006daa:	d814      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006db4:	d10f      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db6:	4b43      	ldr	r3, [pc, #268]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	4a42      	ldr	r2, [pc, #264]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006dc2:	e00c      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f97c 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006dd4:	e003      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	77fb      	strb	r3, [r7, #31]
        break;
 8006dda:	e000      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8006ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dde:	7ffb      	ldrb	r3, [r7, #31]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006de4:	4b37      	ldr	r3, [pc, #220]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006df2:	4934      	ldr	r1, [pc, #208]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006dfa:	e001      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	7ffb      	ldrb	r3, [r7, #31]
 8006dfe:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e0c:	4b2d      	ldr	r3, [pc, #180]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1a:	492a      	ldr	r1, [pc, #168]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e2e:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3c:	4921      	ldr	r1, [pc, #132]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e50:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	4919      	ldr	r1, [pc, #100]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e72:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e78:	f023 0203 	bic.w	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	4910      	ldr	r1, [pc, #64]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02b      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea2:	4908      	ldr	r1, [pc, #32]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eb2:	d109      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	4a02      	ldr	r2, [pc, #8]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ebe:	60d3      	str	r3, [r2, #12]
 8006ec0:	e014      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006ec2:	bf00      	nop
 8006ec4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 f8f5 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8006ee2:	7ffb      	ldrb	r3, [r7, #31]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8006ee8:	7ffb      	ldrb	r3, [r7, #31]
 8006eea:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d04a      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f00:	d108      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006f02:	4b70      	ldr	r3, [pc, #448]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f08:	4a6e      	ldr	r2, [pc, #440]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f12:	e012      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006f14:	4b6b      	ldr	r3, [pc, #428]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f22:	4968      	ldr	r1, [pc, #416]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f2a:	4b66      	ldr	r3, [pc, #408]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f30:	4a64      	ldr	r2, [pc, #400]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f42:	d10d      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	2101      	movs	r1, #1
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f8bc 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006f54:	7ffb      	ldrb	r3, [r7, #31]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d019      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8006f5a:	7ffb      	ldrb	r3, [r7, #31]
 8006f5c:	77bb      	strb	r3, [r7, #30]
 8006f5e:	e016      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f68:	d106      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f6a:	4b56      	ldr	r3, [pc, #344]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	4a55      	ldr	r2, [pc, #340]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f74:	60d3      	str	r3, [r2, #12]
 8006f76:	e00a      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f80:	d105      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f82:	4b50      	ldr	r3, [pc, #320]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	4a4f      	ldr	r2, [pc, #316]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d028      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f9a:	4b4a      	ldr	r3, [pc, #296]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa8:	4946      	ldr	r1, [pc, #280]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb8:	d106      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fba:	4b42      	ldr	r3, [pc, #264]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	4a41      	ldr	r2, [pc, #260]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc4:	60d3      	str	r3, [r2, #12]
 8006fc6:	e011      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 f875 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006fe2:	7ffb      	ldrb	r3, [r7, #31]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01e      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ff8:	4b32      	ldr	r3, [pc, #200]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007008:	492e      	ldr	r1, [pc, #184]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800701a:	d10c      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	2102      	movs	r1, #2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f850 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800702c:	7ffb      	ldrb	r3, [r7, #31]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8007032:	7ffb      	ldrb	r3, [r7, #31]
 8007034:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00b      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007048:	f023 0204 	bic.w	r2, r3, #4
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007052:	491c      	ldr	r1, [pc, #112]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00b      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007066:	4b17      	ldr	r3, [pc, #92]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007068:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800706c:	f023 0218 	bic.w	r2, r3, #24
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007076:	4913      	ldr	r1, [pc, #76]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d017      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800708a:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800708c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007090:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800709a:	490a      	ldr	r1, [pc, #40]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ac:	d105      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	4a04      	ldr	r2, [pc, #16]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80070b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80070ba:	7fbb      	ldrb	r3, [r7, #30]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40021000 	.word	0x40021000

080070c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d018      	beq.n	8007110 <RCCEx_PLLSAI1_Config+0x48>
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d81f      	bhi.n	8007122 <RCCEx_PLLSAI1_Config+0x5a>
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d002      	beq.n	80070ec <RCCEx_PLLSAI1_Config+0x24>
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d009      	beq.n	80070fe <RCCEx_PLLSAI1_Config+0x36>
 80070ea:	e01a      	b.n	8007122 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070ec:	4b65      	ldr	r3, [pc, #404]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d117      	bne.n	8007128 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070fc:	e014      	b.n	8007128 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070fe:	4b61      	ldr	r3, [pc, #388]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007106:	2b00      	cmp	r3, #0
 8007108:	d110      	bne.n	800712c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800710e:	e00d      	b.n	800712c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007110:	4b5c      	ldr	r3, [pc, #368]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d109      	bne.n	8007130 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007120:	e006      	b.n	8007130 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	73fb      	strb	r3, [r7, #15]
      break;
 8007126:	e004      	b.n	8007132 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007128:	bf00      	nop
 800712a:	e002      	b.n	8007132 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007130:	bf00      	nop
  }

  if (status == HAL_OK)
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 809f 	bne.w	8007278 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800713a:	4b52      	ldr	r3, [pc, #328]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a51      	ldr	r2, [pc, #324]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007146:	f7fc fcc1 	bl	8003acc <HAL_GetTick>
 800714a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800714c:	e00f      	b.n	800716e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800714e:	f7fc fcbd 	bl	8003acc <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d908      	bls.n	800716e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800715c:	4b49      	ldr	r3, [pc, #292]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d009      	beq.n	800717c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800716c:	e006      	b.n	800717c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800716e:	4b45      	ldr	r3, [pc, #276]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e9      	bne.n	800714e <RCCEx_PLLSAI1_Config+0x86>
 800717a:	e000      	b.n	800717e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800717c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d179      	bne.n	8007278 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d116      	bne.n	80071b8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800718a:	4b3e      	ldr	r3, [pc, #248]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	4b3e      	ldr	r3, [pc, #248]	; (8007288 <RCCEx_PLLSAI1_Config+0x1c0>)
 8007190:	4013      	ands	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6892      	ldr	r2, [r2, #8]
 8007196:	0211      	lsls	r1, r2, #8
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68d2      	ldr	r2, [r2, #12]
 800719c:	06d2      	lsls	r2, r2, #27
 800719e:	4311      	orrs	r1, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6852      	ldr	r2, [r2, #4]
 80071a4:	3a01      	subs	r2, #1
 80071a6:	0112      	lsls	r2, r2, #4
 80071a8:	4311      	orrs	r1, r2
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	4934      	ldr	r1, [pc, #208]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	610b      	str	r3, [r1, #16]
 80071b6:	e033      	b.n	8007220 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d118      	bne.n	80071f0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071be:	4b31      	ldr	r3, [pc, #196]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	4b32      	ldr	r3, [pc, #200]	; (800728c <RCCEx_PLLSAI1_Config+0x1c4>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6892      	ldr	r2, [r2, #8]
 80071ca:	0211      	lsls	r1, r2, #8
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6912      	ldr	r2, [r2, #16]
 80071d0:	0852      	lsrs	r2, r2, #1
 80071d2:	3a01      	subs	r2, #1
 80071d4:	0552      	lsls	r2, r2, #21
 80071d6:	4311      	orrs	r1, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6852      	ldr	r2, [r2, #4]
 80071dc:	3a01      	subs	r2, #1
 80071de:	0112      	lsls	r2, r2, #4
 80071e0:	4311      	orrs	r1, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	4926      	ldr	r1, [pc, #152]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	610b      	str	r3, [r1, #16]
 80071ee:	e017      	b.n	8007220 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071f0:	4b24      	ldr	r3, [pc, #144]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	4b26      	ldr	r3, [pc, #152]	; (8007290 <RCCEx_PLLSAI1_Config+0x1c8>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6892      	ldr	r2, [r2, #8]
 80071fc:	0211      	lsls	r1, r2, #8
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6952      	ldr	r2, [r2, #20]
 8007202:	0852      	lsrs	r2, r2, #1
 8007204:	3a01      	subs	r2, #1
 8007206:	0652      	lsls	r2, r2, #25
 8007208:	4311      	orrs	r1, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6852      	ldr	r2, [r2, #4]
 800720e:	3a01      	subs	r2, #1
 8007210:	0112      	lsls	r2, r2, #4
 8007212:	4311      	orrs	r1, r2
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	491a      	ldr	r1, [pc, #104]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 800721c:	4313      	orrs	r3, r2
 800721e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007220:	4b18      	ldr	r3, [pc, #96]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a17      	ldr	r2, [pc, #92]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800722a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800722c:	f7fc fc4e 	bl	8003acc <HAL_GetTick>
 8007230:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007232:	e00f      	b.n	8007254 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007234:	f7fc fc4a 	bl	8003acc <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d908      	bls.n	8007254 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8007252:	e006      	b.n	8007262 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0e9      	beq.n	8007234 <RCCEx_PLLSAI1_Config+0x16c>
 8007260:	e000      	b.n	8007264 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8007262:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800726a:	4b06      	ldr	r3, [pc, #24]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	4904      	ldr	r1, [pc, #16]	; (8007284 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007274:	4313      	orrs	r3, r2
 8007276:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40021000 	.word	0x40021000
 8007288:	07ff800c 	.word	0x07ff800c
 800728c:	ff9f800c 	.word	0xff9f800c
 8007290:	f9ff800c 	.word	0xf9ff800c

08007294 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d018      	beq.n	80072dc <RCCEx_PLLSAI2_Config+0x48>
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d81f      	bhi.n	80072ee <RCCEx_PLLSAI2_Config+0x5a>
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d002      	beq.n	80072b8 <RCCEx_PLLSAI2_Config+0x24>
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d009      	beq.n	80072ca <RCCEx_PLLSAI2_Config+0x36>
 80072b6:	e01a      	b.n	80072ee <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072b8:	4b4a      	ldr	r3, [pc, #296]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d117      	bne.n	80072f4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072c8:	e014      	b.n	80072f4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072ca:	4b46      	ldr	r3, [pc, #280]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d110      	bne.n	80072f8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072da:	e00d      	b.n	80072f8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80072dc:	4b41      	ldr	r3, [pc, #260]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072ec:	e006      	b.n	80072fc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	73fb      	strb	r3, [r7, #15]
      break;
 80072f2:	e004      	b.n	80072fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80072fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d169      	bne.n	80073d8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007304:	4b37      	ldr	r3, [pc, #220]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a36      	ldr	r2, [pc, #216]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 800730a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800730e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007310:	f7fc fbdc 	bl	8003acc <HAL_GetTick>
 8007314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007316:	e00f      	b.n	8007338 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007318:	f7fc fbd8 	bl	8003acc <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d908      	bls.n	8007338 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007326:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007336:	e006      	b.n	8007346 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007338:	4b2a      	ldr	r3, [pc, #168]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e9      	bne.n	8007318 <RCCEx_PLLSAI2_Config+0x84>
 8007344:	e000      	b.n	8007348 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8007346:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d144      	bne.n	80073d8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d115      	bne.n	8007380 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007354:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 8007356:	695a      	ldr	r2, [r3, #20]
 8007358:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <RCCEx_PLLSAI2_Config+0x154>)
 800735a:	4013      	ands	r3, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6892      	ldr	r2, [r2, #8]
 8007360:	0211      	lsls	r1, r2, #8
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	06d2      	lsls	r2, r2, #27
 8007368:	4311      	orrs	r1, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6852      	ldr	r2, [r2, #4]
 800736e:	3a01      	subs	r2, #1
 8007370:	0112      	lsls	r2, r2, #4
 8007372:	4311      	orrs	r1, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	491a      	ldr	r1, [pc, #104]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 800737c:	4313      	orrs	r3, r2
 800737e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007380:	4b18      	ldr	r3, [pc, #96]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738c:	f7fc fb9e 	bl	8003acc <HAL_GetTick>
 8007390:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007392:	e00f      	b.n	80073b4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007394:	f7fc fb9a 	bl	8003acc <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d908      	bls.n	80073b4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80073a2:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d109      	bne.n	80073c2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80073b2:	e006      	b.n	80073c2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80073b4:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0e9      	beq.n	8007394 <RCCEx_PLLSAI2_Config+0x100>
 80073c0:	e000      	b.n	80073c4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80073c2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 80073cc:	695a      	ldr	r2, [r3, #20]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	4904      	ldr	r1, [pc, #16]	; (80073e4 <RCCEx_PLLSAI2_Config+0x150>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40021000 	.word	0x40021000
 80073e8:	07ff800c 	.word	0x07ff800c

080073ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d066      	beq.n	80074cc <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fb fc88 	bl	8002d28 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b10      	cmp	r3, #16
 800742c:	d045      	beq.n	80074ba <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800742e:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <HAL_RTC_Init+0xec>)
 8007430:	22ca      	movs	r2, #202	; 0xca
 8007432:	625a      	str	r2, [r3, #36]	; 0x24
 8007434:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <HAL_RTC_Init+0xec>)
 8007436:	2253      	movs	r2, #83	; 0x53
 8007438:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f872 	bl	8007524 <RTC_EnterInitMode>
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d121      	bne.n	800748e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800744a:	4b23      	ldr	r3, [pc, #140]	; (80074d8 <HAL_RTC_Init+0xec>)
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	4a22      	ldr	r2, [pc, #136]	; (80074d8 <HAL_RTC_Init+0xec>)
 8007450:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007458:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800745a:	4b1f      	ldr	r3, [pc, #124]	; (80074d8 <HAL_RTC_Init+0xec>)
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6859      	ldr	r1, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	4319      	orrs	r1, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	430b      	orrs	r3, r1
 800746e:	491a      	ldr	r1, [pc, #104]	; (80074d8 <HAL_RTC_Init+0xec>)
 8007470:	4313      	orrs	r3, r2
 8007472:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	4916      	ldr	r1, [pc, #88]	; (80074d8 <HAL_RTC_Init+0xec>)
 8007480:	4313      	orrs	r3, r2
 8007482:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f881 	bl	800758c <RTC_ExitInitMode>
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10e      	bne.n	80074b2 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8007494:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <HAL_RTC_Init+0xec>)
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a19      	ldr	r1, [r3, #32]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	4319      	orrs	r1, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	430b      	orrs	r3, r1
 80074ac:	490a      	ldr	r1, [pc, #40]	; (80074d8 <HAL_RTC_Init+0xec>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <HAL_RTC_Init+0xec>)
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24
 80074b8:	e001      	b.n	80074be <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	40002800 	.word	0x40002800

080074dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80074e4:	4b0d      	ldr	r3, [pc, #52]	; (800751c <HAL_RTC_WaitForSynchro+0x40>)
 80074e6:	4a0e      	ldr	r2, [pc, #56]	; (8007520 <HAL_RTC_WaitForSynchro+0x44>)
 80074e8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80074ea:	f7fc faef 	bl	8003acc <HAL_GetTick>
 80074ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80074f0:	e009      	b.n	8007506 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074f2:	f7fc faeb 	bl	8003acc <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007500:	d901      	bls.n	8007506 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e006      	b.n	8007514 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007506:	4b05      	ldr	r3, [pc, #20]	; (800751c <HAL_RTC_WaitForSynchro+0x40>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0ef      	beq.n	80074f2 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40002800 	.word	0x40002800
 8007520:	0001005c 	.word	0x0001005c

08007524 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007530:	4b15      	ldr	r3, [pc, #84]	; (8007588 <RTC_EnterInitMode+0x64>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d120      	bne.n	800757e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800753c:	4b12      	ldr	r3, [pc, #72]	; (8007588 <RTC_EnterInitMode+0x64>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	4a11      	ldr	r2, [pc, #68]	; (8007588 <RTC_EnterInitMode+0x64>)
 8007542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007546:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007548:	f7fc fac0 	bl	8003acc <HAL_GetTick>
 800754c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800754e:	e00d      	b.n	800756c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007550:	f7fc fabc 	bl	8003acc <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800755e:	d905      	bls.n	800756c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2203      	movs	r2, #3
 8007568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <RTC_EnterInitMode+0x64>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d102      	bne.n	800757e <RTC_EnterInitMode+0x5a>
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d1e8      	bne.n	8007550 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800757e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40002800 	.word	0x40002800

0800758c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007598:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <RTC_ExitInitMode+0x78>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4a19      	ldr	r2, [pc, #100]	; (8007604 <RTC_ExitInitMode+0x78>)
 800759e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80075a4:	4b17      	ldr	r3, [pc, #92]	; (8007604 <RTC_ExitInitMode+0x78>)
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10c      	bne.n	80075ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff ff93 	bl	80074dc <HAL_RTC_WaitForSynchro>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01e      	beq.n	80075fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2203      	movs	r2, #3
 80075c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	e017      	b.n	80075fa <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075ca:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <RTC_ExitInitMode+0x78>)
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <RTC_ExitInitMode+0x78>)
 80075d0:	f023 0320 	bic.w	r3, r3, #32
 80075d4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff ff80 	bl	80074dc <HAL_RTC_WaitForSynchro>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2203      	movs	r2, #3
 80075e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <RTC_ExitInitMode+0x78>)
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	4a04      	ldr	r2, [pc, #16]	; (8007604 <RTC_ExitInitMode+0x78>)
 80075f4:	f043 0320 	orr.w	r3, r3, #32
 80075f8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40002800 	.word	0x40002800

08007608 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	490f      	ldr	r1, [pc, #60]	; (8007658 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800761c:	4313      	orrs	r3, r2
 800761e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	490c      	ldr	r1, [pc, #48]	; (800765c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800762a:	4313      	orrs	r3, r2
 800762c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800762e:	4b0b      	ldr	r3, [pc, #44]	; (800765c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	6919      	ldr	r1, [r3, #16]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	430b      	orrs	r3, r1
 8007642:	4906      	ldr	r1, [pc, #24]	; (800765c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8007644:	4313      	orrs	r3, r2
 8007646:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40002800 	.word	0x40002800
 800765c:	40003400 	.word	0x40003400

08007660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e042      	b.n	80076f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fb fedd 	bl	8003444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2224      	movs	r2, #36	; 0x24
 800768e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fd5e 	bl	8008164 <UART_SetConfig>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e022      	b.n	80076f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 f852 	bl	8008764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 f8d9 	bl	80088a8 <UART_CheckIdleState>
 80076f6:	4603      	mov	r3, r0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	; 0x28
 8007704:	af02      	add	r7, sp, #8
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007716:	2b20      	cmp	r3, #32
 8007718:	d17b      	bne.n	8007812 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_UART_Transmit+0x26>
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e074      	b.n	8007814 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2221      	movs	r2, #33	; 0x21
 8007736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800773a:	f7fc f9c7 	bl	8003acc <HAL_GetTick>
 800773e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	88fa      	ldrh	r2, [r7, #6]
 8007744:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007758:	d108      	bne.n	800776c <HAL_UART_Transmit+0x6c>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	e003      	b.n	8007774 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007774:	e030      	b.n	80077d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2200      	movs	r2, #0
 800777e:	2180      	movs	r1, #128	; 0x80
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f001 f93b 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2220      	movs	r2, #32
 8007790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e03d      	b.n	8007814 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10b      	bne.n	80077b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	3302      	adds	r3, #2
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	e007      	b.n	80077c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1c8      	bne.n	8007776 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2200      	movs	r2, #0
 80077ec:	2140      	movs	r1, #64	; 0x40
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f001 f904 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e006      	b.n	8007814 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	e000      	b.n	8007814 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007812:	2302      	movs	r3, #2
  }
}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007830:	2b20      	cmp	r3, #32
 8007832:	d167      	bne.n	8007904 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_UART_Transmit_DMA+0x24>
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e060      	b.n	8007906 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	88fa      	ldrh	r2, [r7, #6]
 800784e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	88fa      	ldrh	r2, [r7, #6]
 8007856:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2221      	movs	r2, #33	; 0x21
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d028      	beq.n	80078c4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007876:	4a26      	ldr	r2, [pc, #152]	; (8007910 <HAL_UART_Transmit_DMA+0xf4>)
 8007878:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800787e:	4a25      	ldr	r2, [pc, #148]	; (8007914 <HAL_UART_Transmit_DMA+0xf8>)
 8007880:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007886:	4a24      	ldr	r2, [pc, #144]	; (8007918 <HAL_UART_Transmit_DMA+0xfc>)
 8007888:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800788e:	2200      	movs	r2, #0
 8007890:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789a:	4619      	mov	r1, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3328      	adds	r3, #40	; 0x28
 80078a2:	461a      	mov	r2, r3
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	f7fd fa75 	bl	8004d94 <HAL_DMA_Start_IT>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2210      	movs	r2, #16
 80078b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e020      	b.n	8007906 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2240      	movs	r2, #64	; 0x40
 80078ca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	613b      	str	r3, [r7, #16]
   return(result);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3308      	adds	r3, #8
 80078ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ec:	623a      	str	r2, [r7, #32]
 80078ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	69f9      	ldr	r1, [r7, #28]
 80078f2:	6a3a      	ldr	r2, [r7, #32]
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e5      	bne.n	80078cc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	e000      	b.n	8007906 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007904:	2302      	movs	r3, #2
  }
}
 8007906:	4618      	mov	r0, r3
 8007908:	3728      	adds	r7, #40	; 0x28
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	08008d67 	.word	0x08008d67
 8007914:	08008e01 	.word	0x08008e01
 8007918:	08008f87 	.word	0x08008f87

0800791c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	; 0x28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007930:	2b20      	cmp	r3, #32
 8007932:	d137      	bne.n	80079a4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <HAL_UART_Receive_DMA+0x24>
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e030      	b.n	80079a6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a18      	ldr	r2, [pc, #96]	; (80079b0 <HAL_UART_Receive_DMA+0x94>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d01f      	beq.n	8007994 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d018      	beq.n	8007994 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	613b      	str	r3, [r7, #16]
   return(result);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	623b      	str	r3, [r7, #32]
 8007982:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	69f9      	ldr	r1, [r7, #28]
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	61bb      	str	r3, [r7, #24]
   return(result);
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e6      	bne.n	8007962 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	461a      	mov	r2, r3
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f001 f896 	bl	8008acc <UART_Start_Receive_DMA>
 80079a0:	4603      	mov	r3, r0
 80079a2:	e000      	b.n	80079a6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079a4:	2302      	movs	r3, #2
  }
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3728      	adds	r7, #40	; 0x28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40008000 	.word	0x40008000

080079b4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b090      	sub	sp, #64	; 0x40
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d6:	2b80      	cmp	r3, #128	; 0x80
 80079d8:	d139      	bne.n	8007a4e <HAL_UART_DMAStop+0x9a>
 80079da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079dc:	2b21      	cmp	r3, #33	; 0x21
 80079de:	d136      	bne.n	8007a4e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3308      	adds	r3, #8
 80079e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e5      	bne.n	80079e0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d015      	beq.n	8007a48 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fd fa32 	bl	8004e8a <HAL_DMA_Abort>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00d      	beq.n	8007a48 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd fbe5 	bl	8005200 <HAL_DMA_GetError>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	d105      	bne.n	8007a48 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2210      	movs	r2, #16
 8007a40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e047      	b.n	8007ad8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f8e5 	bl	8008c18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d13c      	bne.n	8007ad6 <HAL_UART_DMAStop+0x122>
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	2b22      	cmp	r3, #34	; 0x22
 8007a60:	d139      	bne.n	8007ad6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a78:	633b      	str	r3, [r7, #48]	; 0x30
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a82:	61ba      	str	r2, [r7, #24]
 8007a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d017      	beq.n	8007ad0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fd f9ef 	bl	8004e8a <HAL_DMA_Abort>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fd fba1 	bl	8005200 <HAL_DMA_GetError>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d105      	bne.n	8007ad0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e003      	b.n	8007ad8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 f8e2 	bl	8008c9a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3740      	adds	r7, #64	; 0x40
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b0ba      	sub	sp, #232	; 0xe8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b0e:	4013      	ands	r3, r2
 8007b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d11b      	bne.n	8007b54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d015      	beq.n	8007b54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d105      	bne.n	8007b40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 82e3 	beq.w	8008110 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
      }
      return;
 8007b52:	e2dd      	b.n	8008110 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8123 	beq.w	8007da4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b62:	4b8d      	ldr	r3, [pc, #564]	; (8007d98 <HAL_UART_IRQHandler+0x2b8>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b6e:	4b8b      	ldr	r3, [pc, #556]	; (8007d9c <HAL_UART_IRQHandler+0x2bc>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8116 	beq.w	8007da4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d011      	beq.n	8007ba8 <HAL_UART_IRQHandler+0xc8>
 8007b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2201      	movs	r2, #1
 8007b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9e:	f043 0201 	orr.w	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d011      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xf8>
 8007bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bce:	f043 0204 	orr.w	r2, r3, #4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d011      	beq.n	8007c08 <HAL_UART_IRQHandler+0x128>
 8007be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f043 0202 	orr.w	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d017      	beq.n	8007c44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d105      	bne.n	8007c2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c24:	4b5c      	ldr	r3, [pc, #368]	; (8007d98 <HAL_UART_IRQHandler+0x2b8>)
 8007c26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2208      	movs	r2, #8
 8007c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f043 0208 	orr.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d012      	beq.n	8007c76 <HAL_UART_IRQHandler+0x196>
 8007c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00c      	beq.n	8007c76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6c:	f043 0220 	orr.w	r2, r3, #32
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8249 	beq.w	8008114 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c86:	f003 0320 	and.w	r3, r3, #32
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d013      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cca:	2b40      	cmp	r3, #64	; 0x40
 8007ccc:	d005      	beq.n	8007cda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d054      	beq.n	8007d84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 ffdd 	bl	8008c9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d146      	bne.n	8007d7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1d9      	bne.n	8007cee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d4a:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <HAL_UART_IRQHandler+0x2c0>)
 8007d4c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fd f8f4 	bl	8004f42 <HAL_DMA_Abort_IT>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d019      	beq.n	8007d94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d72:	e00f      	b.n	8007d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7f8 fdab 	bl	80008d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7a:	e00b      	b.n	8007d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7f8 fda7 	bl	80008d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d82:	e007      	b.n	8007d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7f8 fda3 	bl	80008d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007d92:	e1bf      	b.n	8008114 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d94:	bf00      	nop
    return;
 8007d96:	e1bd      	b.n	8008114 <HAL_UART_IRQHandler+0x634>
 8007d98:	10000001 	.word	0x10000001
 8007d9c:	04000120 	.word	0x04000120
 8007da0:	08009007 	.word	0x08009007

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	f040 8153 	bne.w	8008054 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 814c 	beq.w	8008054 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8145 	beq.w	8008054 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b40      	cmp	r3, #64	; 0x40
 8007dde:	f040 80bb 	bne.w	8007f58 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 818f 	beq.w	8008118 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e04:	429a      	cmp	r2, r3
 8007e06:	f080 8187 	bcs.w	8008118 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 8087 	bne.w	8007f36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1da      	bne.n	8007e28 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3308      	adds	r3, #8
 8007e78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e1      	bne.n	8007e72 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ed4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e3      	bne.n	8007eae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f04:	f023 0310 	bic.w	r3, r3, #16
 8007f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e4      	bne.n	8007ef4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fc ffaa 	bl	8004e8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7f8 fbb7 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f56:	e0df      	b.n	8008118 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80d1 	beq.w	800811c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007f7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80cc 	beq.w	800811c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fa8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e4      	bne.n	8007f84 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fe2:	633a      	str	r2, [r7, #48]	; 0x30
 8007fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e1      	bne.n	8007fba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	60fb      	str	r3, [r7, #12]
   return(result);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0310 	bic.w	r3, r3, #16
 800801e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800802c:	61fb      	str	r3, [r7, #28]
 800802e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	69b9      	ldr	r1, [r7, #24]
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	617b      	str	r3, [r7, #20]
   return(result);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e4      	bne.n	800800a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7f8 fb39 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008052:	e063      	b.n	800811c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00e      	beq.n	800807e <HAL_UART_IRQHandler+0x59e>
 8008060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d008      	beq.n	800807e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 f806 	bl	8009088 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800807c:	e051      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800807e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008086:	2b00      	cmp	r3, #0
 8008088:	d014      	beq.n	80080b4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800808a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b00      	cmp	r3, #0
 8008094:	d105      	bne.n	80080a2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800809a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d008      	beq.n	80080b4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d03a      	beq.n	8008120 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
    }
    return;
 80080b2:	e035      	b.n	8008120 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <HAL_UART_IRQHandler+0x5f4>
 80080c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 ffb0 	bl	8009032 <UART_EndTransmit_IT>
    return;
 80080d2:	e026      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <HAL_UART_IRQHandler+0x614>
 80080e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 ffdf 	bl	80090b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f2:	e016      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d010      	beq.n	8008122 <HAL_UART_IRQHandler+0x642>
 8008100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008104:	2b00      	cmp	r3, #0
 8008106:	da0c      	bge.n	8008122 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 ffc7 	bl	800909c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800810e:	e008      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
      return;
 8008110:	bf00      	nop
 8008112:	e006      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
    return;
 8008114:	bf00      	nop
 8008116:	e004      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
      return;
 8008118:	bf00      	nop
 800811a:	e002      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
      return;
 800811c:	bf00      	nop
 800811e:	e000      	b.n	8008122 <HAL_UART_IRQHandler+0x642>
    return;
 8008120:	bf00      	nop
  }
}
 8008122:	37e8      	adds	r7, #232	; 0xe8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008168:	b08c      	sub	sp, #48	; 0x30
 800816a:	af00      	add	r7, sp, #0
 800816c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	431a      	orrs	r2, r3
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	431a      	orrs	r2, r3
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	4313      	orrs	r3, r2
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	4baa      	ldr	r3, [pc, #680]	; (800843c <UART_SetConfig+0x2d8>)
 8008194:	4013      	ands	r3, r2
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800819c:	430b      	orrs	r3, r1
 800819e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a9f      	ldr	r2, [pc, #636]	; (8008440 <UART_SetConfig+0x2dc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081cc:	4313      	orrs	r3, r2
 80081ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80081da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081e4:	430b      	orrs	r3, r1
 80081e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	f023 010f 	bic.w	r1, r3, #15
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a90      	ldr	r2, [pc, #576]	; (8008444 <UART_SetConfig+0x2e0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d125      	bne.n	8008254 <UART_SetConfig+0xf0>
 8008208:	4b8f      	ldr	r3, [pc, #572]	; (8008448 <UART_SetConfig+0x2e4>)
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b03      	cmp	r3, #3
 8008214:	d81a      	bhi.n	800824c <UART_SetConfig+0xe8>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <UART_SetConfig+0xb8>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800822d 	.word	0x0800822d
 8008220:	0800823d 	.word	0x0800823d
 8008224:	08008235 	.word	0x08008235
 8008228:	08008245 	.word	0x08008245
 800822c:	2301      	movs	r3, #1
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008232:	e116      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008234:	2302      	movs	r3, #2
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823a:	e112      	b.n	8008462 <UART_SetConfig+0x2fe>
 800823c:	2304      	movs	r3, #4
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008242:	e10e      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824a:	e10a      	b.n	8008462 <UART_SetConfig+0x2fe>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008252:	e106      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a7c      	ldr	r2, [pc, #496]	; (800844c <UART_SetConfig+0x2e8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d138      	bne.n	80082d0 <UART_SetConfig+0x16c>
 800825e:	4b7a      	ldr	r3, [pc, #488]	; (8008448 <UART_SetConfig+0x2e4>)
 8008260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008264:	f003 030c 	and.w	r3, r3, #12
 8008268:	2b0c      	cmp	r3, #12
 800826a:	d82d      	bhi.n	80082c8 <UART_SetConfig+0x164>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0x110>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	080082a9 	.word	0x080082a9
 8008278:	080082c9 	.word	0x080082c9
 800827c:	080082c9 	.word	0x080082c9
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082b9 	.word	0x080082b9
 8008288:	080082c9 	.word	0x080082c9
 800828c:	080082c9 	.word	0x080082c9
 8008290:	080082c9 	.word	0x080082c9
 8008294:	080082b1 	.word	0x080082b1
 8008298:	080082c9 	.word	0x080082c9
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	080082c9 	.word	0x080082c9
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	2300      	movs	r3, #0
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e0d8      	b.n	8008462 <UART_SetConfig+0x2fe>
 80082b0:	2302      	movs	r3, #2
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e0d4      	b.n	8008462 <UART_SetConfig+0x2fe>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082be:	e0d0      	b.n	8008462 <UART_SetConfig+0x2fe>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c6:	e0cc      	b.n	8008462 <UART_SetConfig+0x2fe>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ce:	e0c8      	b.n	8008462 <UART_SetConfig+0x2fe>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a5e      	ldr	r2, [pc, #376]	; (8008450 <UART_SetConfig+0x2ec>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d125      	bne.n	8008326 <UART_SetConfig+0x1c2>
 80082da:	4b5b      	ldr	r3, [pc, #364]	; (8008448 <UART_SetConfig+0x2e4>)
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082e4:	2b30      	cmp	r3, #48	; 0x30
 80082e6:	d016      	beq.n	8008316 <UART_SetConfig+0x1b2>
 80082e8:	2b30      	cmp	r3, #48	; 0x30
 80082ea:	d818      	bhi.n	800831e <UART_SetConfig+0x1ba>
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d00a      	beq.n	8008306 <UART_SetConfig+0x1a2>
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d814      	bhi.n	800831e <UART_SetConfig+0x1ba>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <UART_SetConfig+0x19a>
 80082f8:	2b10      	cmp	r3, #16
 80082fa:	d008      	beq.n	800830e <UART_SetConfig+0x1aa>
 80082fc:	e00f      	b.n	800831e <UART_SetConfig+0x1ba>
 80082fe:	2300      	movs	r3, #0
 8008300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008304:	e0ad      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008306:	2302      	movs	r3, #2
 8008308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830c:	e0a9      	b.n	8008462 <UART_SetConfig+0x2fe>
 800830e:	2304      	movs	r3, #4
 8008310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008314:	e0a5      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008316:	2308      	movs	r3, #8
 8008318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831c:	e0a1      	b.n	8008462 <UART_SetConfig+0x2fe>
 800831e:	2310      	movs	r3, #16
 8008320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008324:	e09d      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a4a      	ldr	r2, [pc, #296]	; (8008454 <UART_SetConfig+0x2f0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d125      	bne.n	800837c <UART_SetConfig+0x218>
 8008330:	4b45      	ldr	r3, [pc, #276]	; (8008448 <UART_SetConfig+0x2e4>)
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008336:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800833a:	2bc0      	cmp	r3, #192	; 0xc0
 800833c:	d016      	beq.n	800836c <UART_SetConfig+0x208>
 800833e:	2bc0      	cmp	r3, #192	; 0xc0
 8008340:	d818      	bhi.n	8008374 <UART_SetConfig+0x210>
 8008342:	2b80      	cmp	r3, #128	; 0x80
 8008344:	d00a      	beq.n	800835c <UART_SetConfig+0x1f8>
 8008346:	2b80      	cmp	r3, #128	; 0x80
 8008348:	d814      	bhi.n	8008374 <UART_SetConfig+0x210>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <UART_SetConfig+0x1f0>
 800834e:	2b40      	cmp	r3, #64	; 0x40
 8008350:	d008      	beq.n	8008364 <UART_SetConfig+0x200>
 8008352:	e00f      	b.n	8008374 <UART_SetConfig+0x210>
 8008354:	2300      	movs	r3, #0
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835a:	e082      	b.n	8008462 <UART_SetConfig+0x2fe>
 800835c:	2302      	movs	r3, #2
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008362:	e07e      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008364:	2304      	movs	r3, #4
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836a:	e07a      	b.n	8008462 <UART_SetConfig+0x2fe>
 800836c:	2308      	movs	r3, #8
 800836e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008372:	e076      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008374:	2310      	movs	r3, #16
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837a:	e072      	b.n	8008462 <UART_SetConfig+0x2fe>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a35      	ldr	r2, [pc, #212]	; (8008458 <UART_SetConfig+0x2f4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d12a      	bne.n	80083dc <UART_SetConfig+0x278>
 8008386:	4b30      	ldr	r3, [pc, #192]	; (8008448 <UART_SetConfig+0x2e4>)
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008394:	d01a      	beq.n	80083cc <UART_SetConfig+0x268>
 8008396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800839a:	d81b      	bhi.n	80083d4 <UART_SetConfig+0x270>
 800839c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a0:	d00c      	beq.n	80083bc <UART_SetConfig+0x258>
 80083a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a6:	d815      	bhi.n	80083d4 <UART_SetConfig+0x270>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <UART_SetConfig+0x250>
 80083ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b0:	d008      	beq.n	80083c4 <UART_SetConfig+0x260>
 80083b2:	e00f      	b.n	80083d4 <UART_SetConfig+0x270>
 80083b4:	2300      	movs	r3, #0
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ba:	e052      	b.n	8008462 <UART_SetConfig+0x2fe>
 80083bc:	2302      	movs	r3, #2
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c2:	e04e      	b.n	8008462 <UART_SetConfig+0x2fe>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ca:	e04a      	b.n	8008462 <UART_SetConfig+0x2fe>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d2:	e046      	b.n	8008462 <UART_SetConfig+0x2fe>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083da:	e042      	b.n	8008462 <UART_SetConfig+0x2fe>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a17      	ldr	r2, [pc, #92]	; (8008440 <UART_SetConfig+0x2dc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d13a      	bne.n	800845c <UART_SetConfig+0x2f8>
 80083e6:	4b18      	ldr	r3, [pc, #96]	; (8008448 <UART_SetConfig+0x2e4>)
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083f4:	d01a      	beq.n	800842c <UART_SetConfig+0x2c8>
 80083f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083fa:	d81b      	bhi.n	8008434 <UART_SetConfig+0x2d0>
 80083fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008400:	d00c      	beq.n	800841c <UART_SetConfig+0x2b8>
 8008402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008406:	d815      	bhi.n	8008434 <UART_SetConfig+0x2d0>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <UART_SetConfig+0x2b0>
 800840c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008410:	d008      	beq.n	8008424 <UART_SetConfig+0x2c0>
 8008412:	e00f      	b.n	8008434 <UART_SetConfig+0x2d0>
 8008414:	2300      	movs	r3, #0
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841a:	e022      	b.n	8008462 <UART_SetConfig+0x2fe>
 800841c:	2302      	movs	r3, #2
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008422:	e01e      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008424:	2304      	movs	r3, #4
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800842a:	e01a      	b.n	8008462 <UART_SetConfig+0x2fe>
 800842c:	2308      	movs	r3, #8
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008432:	e016      	b.n	8008462 <UART_SetConfig+0x2fe>
 8008434:	2310      	movs	r3, #16
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843a:	e012      	b.n	8008462 <UART_SetConfig+0x2fe>
 800843c:	cfff69f3 	.word	0xcfff69f3
 8008440:	40008000 	.word	0x40008000
 8008444:	40013800 	.word	0x40013800
 8008448:	40021000 	.word	0x40021000
 800844c:	40004400 	.word	0x40004400
 8008450:	40004800 	.word	0x40004800
 8008454:	40004c00 	.word	0x40004c00
 8008458:	40005000 	.word	0x40005000
 800845c:	2310      	movs	r3, #16
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4ab0      	ldr	r2, [pc, #704]	; (8008728 <UART_SetConfig+0x5c4>)
 8008468:	4293      	cmp	r3, r2
 800846a:	f040 809b 	bne.w	80085a4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800846e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008472:	2b08      	cmp	r3, #8
 8008474:	d827      	bhi.n	80084c6 <UART_SetConfig+0x362>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0x318>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084c7 	.word	0x080084c7
 800848c:	080084b7 	.word	0x080084b7
 8008490:	080084c7 	.word	0x080084c7
 8008494:	080084c7 	.word	0x080084c7
 8008498:	080084c7 	.word	0x080084c7
 800849c:	080084bf 	.word	0x080084bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a0:	f7fe f994 	bl	80067cc <HAL_RCC_GetPCLK1Freq>
 80084a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084a6:	e014      	b.n	80084d2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a8:	f7fe f9a4 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ae:	e010      	b.n	80084d2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084b0:	4b9e      	ldr	r3, [pc, #632]	; (800872c <UART_SetConfig+0x5c8>)
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084b4:	e00d      	b.n	80084d2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b6:	f7fe f8d7 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084bc:	e009      	b.n	80084d2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084c4:	e005      	b.n	80084d2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 8130 	beq.w	800873a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	4a94      	ldr	r2, [pc, #592]	; (8008730 <UART_SetConfig+0x5cc>)
 80084e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	4413      	add	r3, r2
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d305      	bcc.n	800850a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	429a      	cmp	r2, r3
 8008508:	d903      	bls.n	8008512 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008510:	e113      	b.n	800873a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	2200      	movs	r2, #0
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	60fa      	str	r2, [r7, #12]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	4a84      	ldr	r2, [pc, #528]	; (8008730 <UART_SetConfig+0x5cc>)
 8008520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008524:	b29b      	uxth	r3, r3
 8008526:	2200      	movs	r2, #0
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008534:	f7f7 fe7e 	bl	8000234 <__aeabi_uldivmod>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4610      	mov	r0, r2
 800853e:	4619      	mov	r1, r3
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	020b      	lsls	r3, r1, #8
 800854a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800854e:	0202      	lsls	r2, r0, #8
 8008550:	6979      	ldr	r1, [r7, #20]
 8008552:	6849      	ldr	r1, [r1, #4]
 8008554:	0849      	lsrs	r1, r1, #1
 8008556:	2000      	movs	r0, #0
 8008558:	460c      	mov	r4, r1
 800855a:	4605      	mov	r5, r0
 800855c:	eb12 0804 	adds.w	r8, r2, r4
 8008560:	eb43 0905 	adc.w	r9, r3, r5
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	469a      	mov	sl, r3
 800856c:	4693      	mov	fp, r2
 800856e:	4652      	mov	r2, sl
 8008570:	465b      	mov	r3, fp
 8008572:	4640      	mov	r0, r8
 8008574:	4649      	mov	r1, r9
 8008576:	f7f7 fe5d 	bl	8000234 <__aeabi_uldivmod>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4613      	mov	r3, r2
 8008580:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008588:	d308      	bcc.n	800859c <UART_SetConfig+0x438>
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008590:	d204      	bcs.n	800859c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6a3a      	ldr	r2, [r7, #32]
 8008598:	60da      	str	r2, [r3, #12]
 800859a:	e0ce      	b.n	800873a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085a2:	e0ca      	b.n	800873a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ac:	d166      	bne.n	800867c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80085ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085b2:	2b08      	cmp	r3, #8
 80085b4:	d827      	bhi.n	8008606 <UART_SetConfig+0x4a2>
 80085b6:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <UART_SetConfig+0x458>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	080085e1 	.word	0x080085e1
 80085c0:	080085e9 	.word	0x080085e9
 80085c4:	080085f1 	.word	0x080085f1
 80085c8:	08008607 	.word	0x08008607
 80085cc:	080085f7 	.word	0x080085f7
 80085d0:	08008607 	.word	0x08008607
 80085d4:	08008607 	.word	0x08008607
 80085d8:	08008607 	.word	0x08008607
 80085dc:	080085ff 	.word	0x080085ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085e0:	f7fe f8f4 	bl	80067cc <HAL_RCC_GetPCLK1Freq>
 80085e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085e6:	e014      	b.n	8008612 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085e8:	f7fe f904 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
 80085ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085ee:	e010      	b.n	8008612 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085f0:	4b4e      	ldr	r3, [pc, #312]	; (800872c <UART_SetConfig+0x5c8>)
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085f4:	e00d      	b.n	8008612 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085f6:	f7fe f837 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 80085fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085fc:	e009      	b.n	8008612 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008604:	e005      	b.n	8008612 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 8090 	beq.w	800873a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	4a44      	ldr	r2, [pc, #272]	; (8008730 <UART_SetConfig+0x5cc>)
 8008620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008624:	461a      	mov	r2, r3
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	fbb3 f3f2 	udiv	r3, r3, r2
 800862c:	005a      	lsls	r2, r3, #1
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	441a      	add	r2, r3
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	fbb2 f3f3 	udiv	r3, r2, r3
 800863e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	2b0f      	cmp	r3, #15
 8008644:	d916      	bls.n	8008674 <UART_SetConfig+0x510>
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864c:	d212      	bcs.n	8008674 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f023 030f 	bic.w	r3, r3, #15
 8008656:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	b29a      	uxth	r2, r3
 8008664:	8bfb      	ldrh	r3, [r7, #30]
 8008666:	4313      	orrs	r3, r2
 8008668:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	8bfa      	ldrh	r2, [r7, #30]
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	e062      	b.n	800873a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800867a:	e05e      	b.n	800873a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800867c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008680:	2b08      	cmp	r3, #8
 8008682:	d828      	bhi.n	80086d6 <UART_SetConfig+0x572>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x528>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b9 	.word	0x080086b9
 8008694:	080086c1 	.word	0x080086c1
 8008698:	080086d7 	.word	0x080086d7
 800869c:	080086c7 	.word	0x080086c7
 80086a0:	080086d7 	.word	0x080086d7
 80086a4:	080086d7 	.word	0x080086d7
 80086a8:	080086d7 	.word	0x080086d7
 80086ac:	080086cf 	.word	0x080086cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b0:	f7fe f88c 	bl	80067cc <HAL_RCC_GetPCLK1Freq>
 80086b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086b6:	e014      	b.n	80086e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086b8:	f7fe f89c 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
 80086bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086be:	e010      	b.n	80086e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c0:	4b1a      	ldr	r3, [pc, #104]	; (800872c <UART_SetConfig+0x5c8>)
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086c4:	e00d      	b.n	80086e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086c6:	f7fd ffcf 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 80086ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086cc:	e009      	b.n	80086e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086d4:	e005      	b.n	80086e2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086e0:	bf00      	nop
    }

    if (pclk != 0U)
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d028      	beq.n	800873a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	4a10      	ldr	r2, [pc, #64]	; (8008730 <UART_SetConfig+0x5cc>)
 80086ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f2:	461a      	mov	r2, r3
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	441a      	add	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	fbb2 f3f3 	udiv	r3, r2, r3
 800870a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	2b0f      	cmp	r3, #15
 8008710:	d910      	bls.n	8008734 <UART_SetConfig+0x5d0>
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008718:	d20c      	bcs.n	8008734 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	b29a      	uxth	r2, r3
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60da      	str	r2, [r3, #12]
 8008724:	e009      	b.n	800873a <UART_SetConfig+0x5d6>
 8008726:	bf00      	nop
 8008728:	40008000 	.word	0x40008000
 800872c:	00f42400 	.word	0x00f42400
 8008730:	0800aa38 	.word	0x0800aa38
      }
      else
      {
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2201      	movs	r2, #1
 800873e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2201      	movs	r2, #1
 8008746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2200      	movs	r2, #0
 800874e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2200      	movs	r2, #0
 8008754:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008756:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800875a:	4618      	mov	r0, r3
 800875c:	3730      	adds	r7, #48	; 0x30
 800875e:	46bd      	mov	sp, r7
 8008760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01a      	beq.n	800887a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008862:	d10a      	bne.n	800887a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b098      	sub	sp, #96	; 0x60
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088b8:	f7fb f908 	bl	8003acc <HAL_GetTick>
 80088bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d12f      	bne.n	800892c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088d4:	2200      	movs	r2, #0
 80088d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f88e 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d022      	beq.n	800892c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088fa:	653b      	str	r3, [r7, #80]	; 0x50
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008904:	647b      	str	r3, [r7, #68]	; 0x44
 8008906:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800890a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e063      	b.n	80089f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d149      	bne.n	80089ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800893a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008942:	2200      	movs	r2, #0
 8008944:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f857 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d03c      	beq.n	80089ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	623b      	str	r3, [r7, #32]
   return(result);
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
 8008974:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e6      	bne.n	8008954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3308      	adds	r3, #8
 800898c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	60fb      	str	r3, [r7, #12]
   return(result);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	64bb      	str	r3, [r7, #72]	; 0x48
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3308      	adds	r3, #8
 80089a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a6:	61fa      	str	r2, [r7, #28]
 80089a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	69b9      	ldr	r1, [r7, #24]
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	617b      	str	r3, [r7, #20]
   return(result);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e5      	bne.n	8008986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e012      	b.n	80089f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3758      	adds	r7, #88	; 0x58
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0c:	e049      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d045      	beq.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a16:	f7fb f859 	bl	8003acc <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e048      	b.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d031      	beq.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	f003 0308 	and.w	r3, r3, #8
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d110      	bne.n	8008a6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2208      	movs	r2, #8
 8008a52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 f920 	bl	8008c9a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2208      	movs	r2, #8
 8008a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e029      	b.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a7c:	d111      	bne.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 f906 	bl	8008c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e00f      	b.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	bf0c      	ite	eq
 8008ab2:	2301      	moveq	r3, #1
 8008ab4:	2300      	movne	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d0a6      	beq.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b096      	sub	sp, #88	; 0x58
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	88fa      	ldrh	r2, [r7, #6]
 8008ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2222      	movs	r2, #34	; 0x22
 8008af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d02d      	beq.n	8008b5e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b08:	4a40      	ldr	r2, [pc, #256]	; (8008c0c <UART_Start_Receive_DMA+0x140>)
 8008b0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b12:	4a3f      	ldr	r2, [pc, #252]	; (8008c10 <UART_Start_Receive_DMA+0x144>)
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b1c:	4a3d      	ldr	r2, [pc, #244]	; (8008c14 <UART_Start_Receive_DMA+0x148>)
 8008b1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b26:	2200      	movs	r2, #0
 8008b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3324      	adds	r3, #36	; 0x24
 8008b36:	4619      	mov	r1, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	f7fc f928 	bl	8004d94 <HAL_DMA_Start_IT>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2210      	movs	r2, #16
 8008b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e051      	b.n	8008c02 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d018      	beq.n	8008b98 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	461a      	mov	r2, r3
 8008b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b86:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b8c:	e841 2300 	strex	r3, r2, [r1]
 8008b90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e6      	bne.n	8008b66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	f043 0301 	orr.w	r3, r3, #1
 8008bae:	653b      	str	r3, [r7, #80]	; 0x50
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bb8:	637a      	str	r2, [r7, #52]	; 0x34
 8008bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e5      	bne.n	8008b98 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	613b      	str	r3, [r7, #16]
   return(result);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bec:	623a      	str	r2, [r7, #32]
 8008bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	69f9      	ldr	r1, [r7, #28]
 8008bf2:	6a3a      	ldr	r2, [r7, #32]
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e5      	bne.n	8008bcc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3758      	adds	r7, #88	; 0x58
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	08008e1d 	.word	0x08008e1d
 8008c10:	08008f49 	.word	0x08008f49
 8008c14:	08008f87 	.word	0x08008f87

08008c18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b08f      	sub	sp, #60	; 0x3c
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c40:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e6      	bne.n	8008c20 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3308      	adds	r3, #8
 8008c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c72:	61ba      	str	r2, [r7, #24]
 8008c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	6979      	ldr	r1, [r7, #20]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1e5      	bne.n	8008c52 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008c8e:	bf00      	nop
 8008c90:	373c      	adds	r7, #60	; 0x3c
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b095      	sub	sp, #84	; 0x54
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008cc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e6      	bne.n	8008ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cea:	f023 0301 	bic.w	r3, r3, #1
 8008cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e3      	bne.n	8008cd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d118      	bne.n	8008d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f023 0310 	bic.w	r3, r3, #16
 8008d28:	647b      	str	r3, [r7, #68]	; 0x44
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6979      	ldr	r1, [r7, #20]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e6      	bne.n	8008d14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d5a:	bf00      	nop
 8008d5c:	3754      	adds	r7, #84	; 0x54
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b090      	sub	sp, #64	; 0x40
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d137      	bne.n	8008df2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	623b      	str	r3, [r7, #32]
   return(result);
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008daa:	633a      	str	r2, [r7, #48]	; 0x30
 8008dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e5      	bne.n	8008d8a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ddc:	61fb      	str	r3, [r7, #28]
 8008dde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	69b9      	ldr	r1, [r7, #24]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e6      	bne.n	8008dbe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008df0:	e002      	b.n	8008df8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008df2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008df4:	f7ff f998 	bl	8008128 <HAL_UART_TxCpltCallback>
}
 8008df8:	bf00      	nop
 8008dfa:	3740      	adds	r7, #64	; 0x40
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff f994 	bl	800813c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b09c      	sub	sp, #112	; 0x70
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d171      	bne.n	8008f1c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e6      	bne.n	8008e40 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3308      	adds	r3, #8
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	f023 0301 	bic.w	r3, r3, #1
 8008e88:	667b      	str	r3, [r7, #100]	; 0x64
 8008e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e92:	647a      	str	r2, [r7, #68]	; 0x44
 8008e94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e5      	bne.n	8008e72 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8008ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e5      	bne.n	8008ea6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d118      	bne.n	8008f1c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0310 	bic.w	r3, r3, #16
 8008efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	69b9      	ldr	r1, [r7, #24]
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	617b      	str	r3, [r7, #20]
   return(result);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1e:	2200      	movs	r2, #0
 8008f20:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d107      	bne.n	8008f3a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f30:	4619      	mov	r1, r3
 8008f32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f34:	f7f7 fbc6 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f38:	e002      	b.n	8008f40 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008f3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f3c:	f7f7 fc64 	bl	8000808 <HAL_UART_RxCpltCallback>
}
 8008f40:	bf00      	nop
 8008f42:	3770      	adds	r7, #112	; 0x70
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d109      	bne.n	8008f78 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f6a:	085b      	lsrs	r3, r3, #1
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7f7 fba7 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f76:	e002      	b.n	8008f7e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f7ff f8e9 	bl	8008150 <HAL_UART_RxHalfCpltCallback>
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b086      	sub	sp, #24
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fae:	2b80      	cmp	r3, #128	; 0x80
 8008fb0:	d109      	bne.n	8008fc6 <UART_DMAError+0x40>
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	2b21      	cmp	r3, #33	; 0x21
 8008fb6:	d106      	bne.n	8008fc6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008fc0:	6978      	ldr	r0, [r7, #20]
 8008fc2:	f7ff fe29 	bl	8008c18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	d109      	bne.n	8008fe8 <UART_DMAError+0x62>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b22      	cmp	r3, #34	; 0x22
 8008fd8:	d106      	bne.n	8008fe8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008fe2:	6978      	ldr	r0, [r7, #20]
 8008fe4:	f7ff fe59 	bl	8008c9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fee:	f043 0210 	orr.w	r2, r3, #16
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ff8:	6978      	ldr	r0, [r7, #20]
 8008ffa:	f7f7 fc69 	bl	80008d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ffe:	bf00      	nop
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7f7 fc53 	bl	80008d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b088      	sub	sp, #32
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	60bb      	str	r3, [r7, #8]
   return(result);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800904e:	61fb      	str	r3, [r7, #28]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	61bb      	str	r3, [r7, #24]
 800905a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	6979      	ldr	r1, [r7, #20]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	613b      	str	r3, [r7, #16]
   return(result);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e6      	bne.n	800903a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2220      	movs	r2, #32
 8009070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff f854 	bl	8008128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009080:	bf00      	nop
 8009082:	3720      	adds	r7, #32
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d101      	bne.n	80090da <HAL_UARTEx_DisableFifoMode+0x16>
 80090d6:	2302      	movs	r3, #2
 80090d8:	e027      	b.n	800912a <HAL_UARTEx_DisableFifoMode+0x66>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2224      	movs	r2, #36	; 0x24
 80090e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0201 	bic.w	r2, r2, #1
 8009100:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009108:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009146:	2b01      	cmp	r3, #1
 8009148:	d101      	bne.n	800914e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800914a:	2302      	movs	r3, #2
 800914c:	e02d      	b.n	80091aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2224      	movs	r2, #36	; 0x24
 800915a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0201 	bic.w	r2, r2, #1
 8009174:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f8a4 	bl	80092d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e02d      	b.n	8009226 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2224      	movs	r2, #36	; 0x24
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0201 	bic.w	r2, r2, #1
 80091f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f866 	bl	80092d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b08c      	sub	sp, #48	; 0x30
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	4613      	mov	r3, r2
 800923a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009242:	2b20      	cmp	r3, #32
 8009244:	d142      	bne.n	80092cc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e03b      	b.n	80092ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	461a      	mov	r2, r3
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fc2f 	bl	8008acc <UART_Start_Receive_DMA>
 800926e:	4603      	mov	r3, r0
 8009270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009278:	2b00      	cmp	r3, #0
 800927a:	d124      	bne.n	80092c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009280:	2b01      	cmp	r3, #1
 8009282:	d11d      	bne.n	80092c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2210      	movs	r2, #16
 800928a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	617b      	str	r3, [r7, #20]
   return(result);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f043 0310 	orr.w	r3, r3, #16
 80092a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
 80092ac:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6a39      	ldr	r1, [r7, #32]
 80092b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e6      	bne.n	800928c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80092be:	e002      	b.n	80092c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80092c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092ca:	e000      	b.n	80092ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80092cc:	2302      	movs	r3, #2
  }
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3730      	adds	r7, #48	; 0x30
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d108      	bne.n	80092fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092f8:	e031      	b.n	800935e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092fa:	2308      	movs	r3, #8
 80092fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092fe:	2308      	movs	r3, #8
 8009300:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	0e5b      	lsrs	r3, r3, #25
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	0f5b      	lsrs	r3, r3, #29
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	7b3a      	ldrb	r2, [r7, #12]
 8009326:	4911      	ldr	r1, [pc, #68]	; (800936c <UARTEx_SetNbDataToProcess+0x94>)
 8009328:	5c8a      	ldrb	r2, [r1, r2]
 800932a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800932e:	7b3a      	ldrb	r2, [r7, #12]
 8009330:	490f      	ldr	r1, [pc, #60]	; (8009370 <UARTEx_SetNbDataToProcess+0x98>)
 8009332:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009334:	fb93 f3f2 	sdiv	r3, r3, r2
 8009338:	b29a      	uxth	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	7b7a      	ldrb	r2, [r7, #13]
 8009344:	4909      	ldr	r1, [pc, #36]	; (800936c <UARTEx_SetNbDataToProcess+0x94>)
 8009346:	5c8a      	ldrb	r2, [r1, r2]
 8009348:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800934c:	7b7a      	ldrb	r2, [r7, #13]
 800934e:	4908      	ldr	r1, [pc, #32]	; (8009370 <UARTEx_SetNbDataToProcess+0x98>)
 8009350:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009352:	fb93 f3f2 	sdiv	r3, r3, r2
 8009356:	b29a      	uxth	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	0800aa50 	.word	0x0800aa50
 8009370:	0800aa58 	.word	0x0800aa58

08009374 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009374:	b480      	push	{r7}
 8009376:	b08b      	sub	sp, #44	; 0x2c
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	fa93 f3a3 	rbit	r3, r3
 800938e:	613b      	str	r3, [r7, #16]
  return result;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800939a:	2320      	movs	r3, #32
 800939c:	e003      	b.n	80093a6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	fab3 f383 	clz	r3, r3
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	2103      	movs	r1, #3
 80093aa:	fa01 f303 	lsl.w	r3, r1, r3
 80093ae:	43db      	mvns	r3, r3
 80093b0:	401a      	ands	r2, r3
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	fa93 f3a3 	rbit	r3, r3
 80093bc:	61fb      	str	r3, [r7, #28]
  return result;
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80093c8:	2320      	movs	r3, #32
 80093ca:	e003      	b.n	80093d4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	fab3 f383 	clz	r3, r3
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	fa01 f303 	lsl.w	r3, r1, r3
 80093dc:	431a      	orrs	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	601a      	str	r2, [r3, #0]
}
 80093e2:	bf00      	nop
 80093e4:	372c      	adds	r7, #44	; 0x2c
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	43db      	mvns	r3, r3
 8009402:	401a      	ands	r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	431a      	orrs	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	605a      	str	r2, [r3, #4]
}
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800941e:	b480      	push	{r7}
 8009420:	b08b      	sub	sp, #44	; 0x2c
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	fa93 f3a3 	rbit	r3, r3
 8009438:	613b      	str	r3, [r7, #16]
  return result;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009444:	2320      	movs	r3, #32
 8009446:	e003      	b.n	8009450 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	fab3 f383 	clz	r3, r3
 800944e:	b2db      	uxtb	r3, r3
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	2103      	movs	r1, #3
 8009454:	fa01 f303 	lsl.w	r3, r1, r3
 8009458:	43db      	mvns	r3, r3
 800945a:	401a      	ands	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	fa93 f3a3 	rbit	r3, r3
 8009466:	61fb      	str	r3, [r7, #28]
  return result;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009472:	2320      	movs	r3, #32
 8009474:	e003      	b.n	800947e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	fab3 f383 	clz	r3, r3
 800947c:	b2db      	uxtb	r3, r3
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	fa01 f303 	lsl.w	r3, r1, r3
 8009486:	431a      	orrs	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800948c:	bf00      	nop
 800948e:	372c      	adds	r7, #44	; 0x2c
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009498:	b480      	push	{r7}
 800949a:	b08b      	sub	sp, #44	; 0x2c
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	fa93 f3a3 	rbit	r3, r3
 80094b2:	613b      	str	r3, [r7, #16]
  return result;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80094be:	2320      	movs	r3, #32
 80094c0:	e003      	b.n	80094ca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	fab3 f383 	clz	r3, r3
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	2103      	movs	r1, #3
 80094ce:	fa01 f303 	lsl.w	r3, r1, r3
 80094d2:	43db      	mvns	r3, r3
 80094d4:	401a      	ands	r2, r3
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	fa93 f3a3 	rbit	r3, r3
 80094e0:	61fb      	str	r3, [r7, #28]
  return result;
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80094ec:	2320      	movs	r3, #32
 80094ee:	e003      	b.n	80094f8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	fab3 f383 	clz	r3, r3
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009500:	431a      	orrs	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	60da      	str	r2, [r3, #12]
}
 8009506:	bf00      	nop
 8009508:	372c      	adds	r7, #44	; 0x2c
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009512:	b480      	push	{r7}
 8009514:	b08b      	sub	sp, #44	; 0x2c
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a1a      	ldr	r2, [r3, #32]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	fa93 f3a3 	rbit	r3, r3
 800952c:	613b      	str	r3, [r7, #16]
  return result;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009538:	2320      	movs	r3, #32
 800953a:	e003      	b.n	8009544 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	fab3 f383 	clz	r3, r3
 8009542:	b2db      	uxtb	r3, r3
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	210f      	movs	r1, #15
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	43db      	mvns	r3, r3
 800954e:	401a      	ands	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	fa93 f3a3 	rbit	r3, r3
 800955a:	61fb      	str	r3, [r7, #28]
  return result;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009566:	2320      	movs	r3, #32
 8009568:	e003      	b.n	8009572 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	fab3 f383 	clz	r3, r3
 8009570:	b2db      	uxtb	r3, r3
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	fa01 f303 	lsl.w	r3, r1, r3
 800957a:	431a      	orrs	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009580:	bf00      	nop
 8009582:	372c      	adds	r7, #44	; 0x2c
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800958c:	b480      	push	{r7}
 800958e:	b08b      	sub	sp, #44	; 0x2c
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	0a1b      	lsrs	r3, r3, #8
 80095a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	fa93 f3a3 	rbit	r3, r3
 80095a8:	613b      	str	r3, [r7, #16]
  return result;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80095b4:	2320      	movs	r3, #32
 80095b6:	e003      	b.n	80095c0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	fab3 f383 	clz	r3, r3
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	210f      	movs	r1, #15
 80095c4:	fa01 f303 	lsl.w	r3, r1, r3
 80095c8:	43db      	mvns	r3, r3
 80095ca:	401a      	ands	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	fa93 f3a3 	rbit	r3, r3
 80095d8:	61fb      	str	r3, [r7, #28]
  return result;
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80095e4:	2320      	movs	r3, #32
 80095e6:	e003      	b.n	80095f0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	fab3 f383 	clz	r3, r3
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	fa01 f303 	lsl.w	r3, r1, r3
 80095f8:	431a      	orrs	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80095fe:	bf00      	nop
 8009600:	372c      	adds	r7, #44	; 0x2c
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b088      	sub	sp, #32
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	fa93 f3a3 	rbit	r3, r3
 8009620:	60fb      	str	r3, [r7, #12]
  return result;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <LL_GPIO_Init+0x26>
    return 32U;
 800962c:	2320      	movs	r3, #32
 800962e:	e003      	b.n	8009638 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	fab3 f383 	clz	r3, r3
 8009636:	b2db      	uxtb	r3, r3
 8009638:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800963a:	e047      	b.n	80096cc <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	2101      	movs	r1, #1
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	fa01 f303 	lsl.w	r3, r1, r3
 8009648:	4013      	ands	r3, r2
 800964a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d039      	beq.n	80096c6 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d003      	beq.n	8009662 <LL_GPIO_Init+0x58>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2b02      	cmp	r3, #2
 8009660:	d10d      	bne.n	800967e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	461a      	mov	r2, r3
 8009668:	69b9      	ldr	r1, [r7, #24]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff fed7 	bl	800941e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	461a      	mov	r2, r3
 8009676:	69b9      	ldr	r1, [r7, #24]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff feb8 	bl	80093ee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	461a      	mov	r2, r3
 8009684:	69b9      	ldr	r1, [r7, #24]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff ff06 	bl	8009498 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d111      	bne.n	80096b8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	2bff      	cmp	r3, #255	; 0xff
 8009698:	d807      	bhi.n	80096aa <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	461a      	mov	r2, r3
 80096a0:	69b9      	ldr	r1, [r7, #24]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ff35 	bl	8009512 <LL_GPIO_SetAFPin_0_7>
 80096a8:	e006      	b.n	80096b8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	461a      	mov	r2, r3
 80096b0:	69b9      	ldr	r1, [r7, #24]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff ff6a 	bl	800958c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	461a      	mov	r2, r3
 80096be:	69b9      	ldr	r1, [r7, #24]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fe57 	bl	8009374 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	3301      	adds	r3, #1
 80096ca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	fa22 f303 	lsr.w	r3, r2, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1b0      	bne.n	800963c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80096f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	43db      	mvns	r3, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	4013      	ands	r3, r2
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800971a:	b084      	sub	sp, #16
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	f107 0014 	add.w	r0, r7, #20
 8009728:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	b004      	add	sp, #16
 800975a:	4770      	bx	lr

0800975c <_ZdlPvj>:
 800975c:	f000 b811 	b.w	8009782 <_ZdlPv>

08009760 <_Znwj>:
 8009760:	2801      	cmp	r0, #1
 8009762:	bf38      	it	cc
 8009764:	2001      	movcc	r0, #1
 8009766:	b510      	push	{r4, lr}
 8009768:	4604      	mov	r4, r0
 800976a:	4620      	mov	r0, r4
 800976c:	f000 f844 	bl	80097f8 <malloc>
 8009770:	b930      	cbnz	r0, 8009780 <_Znwj+0x20>
 8009772:	f000 f809 	bl	8009788 <_ZSt15get_new_handlerv>
 8009776:	b908      	cbnz	r0, 800977c <_Znwj+0x1c>
 8009778:	f000 f80c 	bl	8009794 <abort>
 800977c:	4780      	blx	r0
 800977e:	e7f4      	b.n	800976a <_Znwj+0xa>
 8009780:	bd10      	pop	{r4, pc}

08009782 <_ZdlPv>:
 8009782:	f000 b841 	b.w	8009808 <free>
	...

08009788 <_ZSt15get_new_handlerv>:
 8009788:	4b01      	ldr	r3, [pc, #4]	; (8009790 <_ZSt15get_new_handlerv+0x8>)
 800978a:	e8d3 0faf 	lda	r0, [r3]
 800978e:	4770      	bx	lr
 8009790:	20001720 	.word	0x20001720

08009794 <abort>:
 8009794:	2006      	movs	r0, #6
 8009796:	b508      	push	{r3, lr}
 8009798:	f000 f97c 	bl	8009a94 <raise>
 800979c:	2001      	movs	r0, #1
 800979e:	f7f9 fbad 	bl	8002efc <_exit>
	...

080097a4 <__errno>:
 80097a4:	4b01      	ldr	r3, [pc, #4]	; (80097ac <__errno+0x8>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	20000014 	.word	0x20000014

080097b0 <__libc_init_array>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	4d0d      	ldr	r5, [pc, #52]	; (80097e8 <__libc_init_array+0x38>)
 80097b4:	2600      	movs	r6, #0
 80097b6:	4c0d      	ldr	r4, [pc, #52]	; (80097ec <__libc_init_array+0x3c>)
 80097b8:	1b64      	subs	r4, r4, r5
 80097ba:	10a4      	asrs	r4, r4, #2
 80097bc:	42a6      	cmp	r6, r4
 80097be:	d109      	bne.n	80097d4 <__libc_init_array+0x24>
 80097c0:	4d0b      	ldr	r5, [pc, #44]	; (80097f0 <__libc_init_array+0x40>)
 80097c2:	2600      	movs	r6, #0
 80097c4:	4c0b      	ldr	r4, [pc, #44]	; (80097f4 <__libc_init_array+0x44>)
 80097c6:	f000 f98f 	bl	8009ae8 <_init>
 80097ca:	1b64      	subs	r4, r4, r5
 80097cc:	10a4      	asrs	r4, r4, #2
 80097ce:	42a6      	cmp	r6, r4
 80097d0:	d105      	bne.n	80097de <__libc_init_array+0x2e>
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d8:	3601      	adds	r6, #1
 80097da:	4798      	blx	r3
 80097dc:	e7ee      	b.n	80097bc <__libc_init_array+0xc>
 80097de:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e2:	3601      	adds	r6, #1
 80097e4:	4798      	blx	r3
 80097e6:	e7f2      	b.n	80097ce <__libc_init_array+0x1e>
 80097e8:	0800aa68 	.word	0x0800aa68
 80097ec:	0800aa68 	.word	0x0800aa68
 80097f0:	0800aa68 	.word	0x0800aa68
 80097f4:	0800aa70 	.word	0x0800aa70

080097f8 <malloc>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <malloc+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f000 b89d 	b.w	800993c <_malloc_r>
 8009802:	bf00      	nop
 8009804:	20000014 	.word	0x20000014

08009808 <free>:
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <free+0xc>)
 800980a:	4601      	mov	r1, r0
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f000 b829 	b.w	8009864 <_free_r>
 8009812:	bf00      	nop
 8009814:	20000014 	.word	0x20000014

08009818 <memcmp>:
 8009818:	3901      	subs	r1, #1
 800981a:	4402      	add	r2, r0
 800981c:	b510      	push	{r4, lr}
 800981e:	4290      	cmp	r0, r2
 8009820:	d101      	bne.n	8009826 <memcmp+0xe>
 8009822:	2000      	movs	r0, #0
 8009824:	e005      	b.n	8009832 <memcmp+0x1a>
 8009826:	7803      	ldrb	r3, [r0, #0]
 8009828:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800982c:	42a3      	cmp	r3, r4
 800982e:	d001      	beq.n	8009834 <memcmp+0x1c>
 8009830:	1b18      	subs	r0, r3, r4
 8009832:	bd10      	pop	{r4, pc}
 8009834:	3001      	adds	r0, #1
 8009836:	e7f2      	b.n	800981e <memcmp+0x6>

08009838 <memcpy>:
 8009838:	440a      	add	r2, r1
 800983a:	1e43      	subs	r3, r0, #1
 800983c:	4291      	cmp	r1, r2
 800983e:	d100      	bne.n	8009842 <memcpy+0xa>
 8009840:	4770      	bx	lr
 8009842:	b510      	push	{r4, lr}
 8009844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009848:	4291      	cmp	r1, r2
 800984a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800984e:	d1f9      	bne.n	8009844 <memcpy+0xc>
 8009850:	bd10      	pop	{r4, pc}

08009852 <memset>:
 8009852:	4402      	add	r2, r0
 8009854:	4603      	mov	r3, r0
 8009856:	4293      	cmp	r3, r2
 8009858:	d100      	bne.n	800985c <memset+0xa>
 800985a:	4770      	bx	lr
 800985c:	f803 1b01 	strb.w	r1, [r3], #1
 8009860:	e7f9      	b.n	8009856 <memset+0x4>
	...

08009864 <_free_r>:
 8009864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009866:	2900      	cmp	r1, #0
 8009868:	d043      	beq.n	80098f2 <_free_r+0x8e>
 800986a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986e:	1f0c      	subs	r4, r1, #4
 8009870:	9001      	str	r0, [sp, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	bfb8      	it	lt
 8009876:	18e4      	addlt	r4, r4, r3
 8009878:	f000 f928 	bl	8009acc <__malloc_lock>
 800987c:	4a1e      	ldr	r2, [pc, #120]	; (80098f8 <_free_r+0x94>)
 800987e:	9801      	ldr	r0, [sp, #4]
 8009880:	6813      	ldr	r3, [r2, #0]
 8009882:	b933      	cbnz	r3, 8009892 <_free_r+0x2e>
 8009884:	6063      	str	r3, [r4, #4]
 8009886:	6014      	str	r4, [r2, #0]
 8009888:	b003      	add	sp, #12
 800988a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800988e:	f000 b923 	b.w	8009ad8 <__malloc_unlock>
 8009892:	42a3      	cmp	r3, r4
 8009894:	d908      	bls.n	80098a8 <_free_r+0x44>
 8009896:	6825      	ldr	r5, [r4, #0]
 8009898:	1961      	adds	r1, r4, r5
 800989a:	428b      	cmp	r3, r1
 800989c:	bf01      	itttt	eq
 800989e:	6819      	ldreq	r1, [r3, #0]
 80098a0:	685b      	ldreq	r3, [r3, #4]
 80098a2:	1949      	addeq	r1, r1, r5
 80098a4:	6021      	streq	r1, [r4, #0]
 80098a6:	e7ed      	b.n	8009884 <_free_r+0x20>
 80098a8:	461a      	mov	r2, r3
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	b10b      	cbz	r3, 80098b2 <_free_r+0x4e>
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	d9fa      	bls.n	80098a8 <_free_r+0x44>
 80098b2:	6811      	ldr	r1, [r2, #0]
 80098b4:	1855      	adds	r5, r2, r1
 80098b6:	42a5      	cmp	r5, r4
 80098b8:	d10b      	bne.n	80098d2 <_free_r+0x6e>
 80098ba:	6824      	ldr	r4, [r4, #0]
 80098bc:	4421      	add	r1, r4
 80098be:	1854      	adds	r4, r2, r1
 80098c0:	6011      	str	r1, [r2, #0]
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	d1e0      	bne.n	8009888 <_free_r+0x24>
 80098c6:	681c      	ldr	r4, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	4421      	add	r1, r4
 80098cc:	6053      	str	r3, [r2, #4]
 80098ce:	6011      	str	r1, [r2, #0]
 80098d0:	e7da      	b.n	8009888 <_free_r+0x24>
 80098d2:	d902      	bls.n	80098da <_free_r+0x76>
 80098d4:	230c      	movs	r3, #12
 80098d6:	6003      	str	r3, [r0, #0]
 80098d8:	e7d6      	b.n	8009888 <_free_r+0x24>
 80098da:	6825      	ldr	r5, [r4, #0]
 80098dc:	1961      	adds	r1, r4, r5
 80098de:	428b      	cmp	r3, r1
 80098e0:	bf02      	ittt	eq
 80098e2:	6819      	ldreq	r1, [r3, #0]
 80098e4:	685b      	ldreq	r3, [r3, #4]
 80098e6:	1949      	addeq	r1, r1, r5
 80098e8:	6063      	str	r3, [r4, #4]
 80098ea:	bf08      	it	eq
 80098ec:	6021      	streq	r1, [r4, #0]
 80098ee:	6054      	str	r4, [r2, #4]
 80098f0:	e7ca      	b.n	8009888 <_free_r+0x24>
 80098f2:	b003      	add	sp, #12
 80098f4:	bd30      	pop	{r4, r5, pc}
 80098f6:	bf00      	nop
 80098f8:	20001724 	.word	0x20001724

080098fc <sbrk_aligned>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	4e0e      	ldr	r6, [pc, #56]	; (8009938 <sbrk_aligned+0x3c>)
 8009900:	460c      	mov	r4, r1
 8009902:	4605      	mov	r5, r0
 8009904:	6831      	ldr	r1, [r6, #0]
 8009906:	b911      	cbnz	r1, 800990e <sbrk_aligned+0x12>
 8009908:	f000 f88c 	bl	8009a24 <_sbrk_r>
 800990c:	6030      	str	r0, [r6, #0]
 800990e:	4621      	mov	r1, r4
 8009910:	4628      	mov	r0, r5
 8009912:	f000 f887 	bl	8009a24 <_sbrk_r>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d00a      	beq.n	8009930 <sbrk_aligned+0x34>
 800991a:	1cc4      	adds	r4, r0, #3
 800991c:	f024 0403 	bic.w	r4, r4, #3
 8009920:	42a0      	cmp	r0, r4
 8009922:	d007      	beq.n	8009934 <sbrk_aligned+0x38>
 8009924:	1a21      	subs	r1, r4, r0
 8009926:	4628      	mov	r0, r5
 8009928:	f000 f87c 	bl	8009a24 <_sbrk_r>
 800992c:	3001      	adds	r0, #1
 800992e:	d101      	bne.n	8009934 <sbrk_aligned+0x38>
 8009930:	f04f 34ff 	mov.w	r4, #4294967295
 8009934:	4620      	mov	r0, r4
 8009936:	bd70      	pop	{r4, r5, r6, pc}
 8009938:	20001728 	.word	0x20001728

0800993c <_malloc_r>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	1ccd      	adds	r5, r1, #3
 8009942:	4607      	mov	r7, r0
 8009944:	f025 0503 	bic.w	r5, r5, #3
 8009948:	3508      	adds	r5, #8
 800994a:	2d0c      	cmp	r5, #12
 800994c:	bf38      	it	cc
 800994e:	250c      	movcc	r5, #12
 8009950:	2d00      	cmp	r5, #0
 8009952:	db01      	blt.n	8009958 <_malloc_r+0x1c>
 8009954:	42a9      	cmp	r1, r5
 8009956:	d905      	bls.n	8009964 <_malloc_r+0x28>
 8009958:	230c      	movs	r3, #12
 800995a:	2600      	movs	r6, #0
 800995c:	603b      	str	r3, [r7, #0]
 800995e:	4630      	mov	r0, r6
 8009960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009964:	4e2e      	ldr	r6, [pc, #184]	; (8009a20 <_malloc_r+0xe4>)
 8009966:	f000 f8b1 	bl	8009acc <__malloc_lock>
 800996a:	6833      	ldr	r3, [r6, #0]
 800996c:	461c      	mov	r4, r3
 800996e:	bb34      	cbnz	r4, 80099be <_malloc_r+0x82>
 8009970:	4629      	mov	r1, r5
 8009972:	4638      	mov	r0, r7
 8009974:	f7ff ffc2 	bl	80098fc <sbrk_aligned>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	4604      	mov	r4, r0
 800997c:	d14d      	bne.n	8009a1a <_malloc_r+0xde>
 800997e:	6834      	ldr	r4, [r6, #0]
 8009980:	4626      	mov	r6, r4
 8009982:	2e00      	cmp	r6, #0
 8009984:	d140      	bne.n	8009a08 <_malloc_r+0xcc>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	4631      	mov	r1, r6
 800998a:	4638      	mov	r0, r7
 800998c:	eb04 0803 	add.w	r8, r4, r3
 8009990:	f000 f848 	bl	8009a24 <_sbrk_r>
 8009994:	4580      	cmp	r8, r0
 8009996:	d13a      	bne.n	8009a0e <_malloc_r+0xd2>
 8009998:	6821      	ldr	r1, [r4, #0]
 800999a:	3503      	adds	r5, #3
 800999c:	4638      	mov	r0, r7
 800999e:	1a6d      	subs	r5, r5, r1
 80099a0:	f025 0503 	bic.w	r5, r5, #3
 80099a4:	3508      	adds	r5, #8
 80099a6:	2d0c      	cmp	r5, #12
 80099a8:	bf38      	it	cc
 80099aa:	250c      	movcc	r5, #12
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7ff ffa5 	bl	80098fc <sbrk_aligned>
 80099b2:	3001      	adds	r0, #1
 80099b4:	d02b      	beq.n	8009a0e <_malloc_r+0xd2>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	442b      	add	r3, r5
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	e00e      	b.n	80099dc <_malloc_r+0xa0>
 80099be:	6822      	ldr	r2, [r4, #0]
 80099c0:	1b52      	subs	r2, r2, r5
 80099c2:	d41e      	bmi.n	8009a02 <_malloc_r+0xc6>
 80099c4:	2a0b      	cmp	r2, #11
 80099c6:	d916      	bls.n	80099f6 <_malloc_r+0xba>
 80099c8:	1961      	adds	r1, r4, r5
 80099ca:	42a3      	cmp	r3, r4
 80099cc:	6025      	str	r5, [r4, #0]
 80099ce:	bf18      	it	ne
 80099d0:	6059      	strne	r1, [r3, #4]
 80099d2:	6863      	ldr	r3, [r4, #4]
 80099d4:	bf08      	it	eq
 80099d6:	6031      	streq	r1, [r6, #0]
 80099d8:	5162      	str	r2, [r4, r5]
 80099da:	604b      	str	r3, [r1, #4]
 80099dc:	f104 060b 	add.w	r6, r4, #11
 80099e0:	4638      	mov	r0, r7
 80099e2:	f000 f879 	bl	8009ad8 <__malloc_unlock>
 80099e6:	1d23      	adds	r3, r4, #4
 80099e8:	f026 0607 	bic.w	r6, r6, #7
 80099ec:	1af2      	subs	r2, r6, r3
 80099ee:	d0b6      	beq.n	800995e <_malloc_r+0x22>
 80099f0:	1b9b      	subs	r3, r3, r6
 80099f2:	50a3      	str	r3, [r4, r2]
 80099f4:	e7b3      	b.n	800995e <_malloc_r+0x22>
 80099f6:	6862      	ldr	r2, [r4, #4]
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	bf0c      	ite	eq
 80099fc:	6032      	streq	r2, [r6, #0]
 80099fe:	605a      	strne	r2, [r3, #4]
 8009a00:	e7ec      	b.n	80099dc <_malloc_r+0xa0>
 8009a02:	4623      	mov	r3, r4
 8009a04:	6864      	ldr	r4, [r4, #4]
 8009a06:	e7b2      	b.n	800996e <_malloc_r+0x32>
 8009a08:	4634      	mov	r4, r6
 8009a0a:	6876      	ldr	r6, [r6, #4]
 8009a0c:	e7b9      	b.n	8009982 <_malloc_r+0x46>
 8009a0e:	230c      	movs	r3, #12
 8009a10:	4638      	mov	r0, r7
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	f000 f860 	bl	8009ad8 <__malloc_unlock>
 8009a18:	e7a1      	b.n	800995e <_malloc_r+0x22>
 8009a1a:	6025      	str	r5, [r4, #0]
 8009a1c:	e7de      	b.n	80099dc <_malloc_r+0xa0>
 8009a1e:	bf00      	nop
 8009a20:	20001724 	.word	0x20001724

08009a24 <_sbrk_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	2300      	movs	r3, #0
 8009a28:	4d05      	ldr	r5, [pc, #20]	; (8009a40 <_sbrk_r+0x1c>)
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	602b      	str	r3, [r5, #0]
 8009a30:	f7f9 fa6e 	bl	8002f10 <_sbrk>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_sbrk_r+0x1a>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_sbrk_r+0x1a>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	2000172c 	.word	0x2000172c

08009a44 <_raise_r>:
 8009a44:	291f      	cmp	r1, #31
 8009a46:	b538      	push	{r3, r4, r5, lr}
 8009a48:	4604      	mov	r4, r0
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	d904      	bls.n	8009a58 <_raise_r+0x14>
 8009a4e:	2316      	movs	r3, #22
 8009a50:	6003      	str	r3, [r0, #0]
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a5a:	b112      	cbz	r2, 8009a62 <_raise_r+0x1e>
 8009a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a60:	b94b      	cbnz	r3, 8009a76 <_raise_r+0x32>
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 f830 	bl	8009ac8 <_getpid_r>
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a72:	f000 b817 	b.w	8009aa4 <_kill_r>
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d00a      	beq.n	8009a90 <_raise_r+0x4c>
 8009a7a:	1c59      	adds	r1, r3, #1
 8009a7c:	d103      	bne.n	8009a86 <_raise_r+0x42>
 8009a7e:	2316      	movs	r3, #22
 8009a80:	6003      	str	r3, [r0, #0]
 8009a82:	2001      	movs	r0, #1
 8009a84:	e7e7      	b.n	8009a56 <_raise_r+0x12>
 8009a86:	2400      	movs	r4, #0
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a8e:	4798      	blx	r3
 8009a90:	2000      	movs	r0, #0
 8009a92:	e7e0      	b.n	8009a56 <_raise_r+0x12>

08009a94 <raise>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <raise+0xc>)
 8009a96:	4601      	mov	r1, r0
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	f7ff bfd3 	b.w	8009a44 <_raise_r>
 8009a9e:	bf00      	nop
 8009aa0:	20000014 	.word	0x20000014

08009aa4 <_kill_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4d06      	ldr	r5, [pc, #24]	; (8009ac4 <_kill_r+0x20>)
 8009aaa:	4604      	mov	r4, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	4611      	mov	r1, r2
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	f7f9 fa13 	bl	8002edc <_kill>
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	d102      	bne.n	8009ac0 <_kill_r+0x1c>
 8009aba:	682b      	ldr	r3, [r5, #0]
 8009abc:	b103      	cbz	r3, 8009ac0 <_kill_r+0x1c>
 8009abe:	6023      	str	r3, [r4, #0]
 8009ac0:	bd38      	pop	{r3, r4, r5, pc}
 8009ac2:	bf00      	nop
 8009ac4:	2000172c 	.word	0x2000172c

08009ac8 <_getpid_r>:
 8009ac8:	f7f9 ba00 	b.w	8002ecc <_getpid>

08009acc <__malloc_lock>:
 8009acc:	4801      	ldr	r0, [pc, #4]	; (8009ad4 <__malloc_lock+0x8>)
 8009ace:	f000 b809 	b.w	8009ae4 <__retarget_lock_acquire_recursive>
 8009ad2:	bf00      	nop
 8009ad4:	20001730 	.word	0x20001730

08009ad8 <__malloc_unlock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	; (8009ae0 <__malloc_unlock+0x8>)
 8009ada:	f000 b804 	b.w	8009ae6 <__retarget_lock_release_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20001730 	.word	0x20001730

08009ae4 <__retarget_lock_acquire_recursive>:
 8009ae4:	4770      	bx	lr

08009ae6 <__retarget_lock_release_recursive>:
 8009ae6:	4770      	bx	lr

08009ae8 <_init>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	bf00      	nop
 8009aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aee:	bc08      	pop	{r3}
 8009af0:	469e      	mov	lr, r3
 8009af2:	4770      	bx	lr

08009af4 <_fini>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	bf00      	nop
 8009af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afa:	bc08      	pop	{r3}
 8009afc:	469e      	mov	lr, r3
 8009afe:	4770      	bx	lr
