
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd4  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e48  08007e48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007e48  08007e48  00017e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e50  08007e50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000070  08007ec8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08007ec8  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f74  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fbe  00000000  00000000  0004601a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0004afd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001640  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000331e7  00000000  00000000  0004de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020107  00000000  00000000  00081037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012faab  00000000  00000000  000a113e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d0be9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067fc  00000000  00000000  001d0c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	08007db0 	.word	0x08007db0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	08007db0 	.word	0x08007db0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN9RCControlC1Ev>:
    };

    float &operator[] (int i) { return ControlSignals[i]; }

    /*  initial values*/
    RCControl()
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    {
        ControlSignals[0] = 50.0f;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000560:	601a      	str	r2, [r3, #0]
        ControlSignals[1] = 50.0f;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000566:	605a      	str	r2, [r3, #4]
        ControlSignals[2] = 0.0f;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
        ControlSignals[3] = 50.0f;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000574:	60da      	str	r2, [r3, #12]
        ControlSignals[4] = 0.0f;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
        ControlSignals[5] = 0.0f;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f04f 0200 	mov.w	r2, #0
 8000584:	615a      	str	r2, [r3, #20]
        ControlSignals[6] = 0.0f;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
        ControlSignals[7] = 0.0f;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f04f 0200 	mov.w	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
        ControlSignals[8] = 0.0f;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
        ControlSignals[9] = 0.0f;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
        ControlSignals[10] = 0.0f;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
        ControlSignals[11] = 0.0f;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
        ControlSignals[12] = 0.0f;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
        ControlSignals[13] = 0.0f;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f04f 0200 	mov.w	r2, #0
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
        ControlSignals[14] = 0.0f;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	639a      	str	r2, [r3, #56]	; 0x38
        ControlSignals[15] = 0.0f;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f04f 0200 	mov.w	r2, #0
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	42480000 	.word	0x42480000

080005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSReceiver* SBUSReceiver::singleton_ = NULL;

SBUSReceiver* SBUSReceiver::getInstance(UART_HandleTypeDef* uart){
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    if (singleton_ == NULL)
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10a      	bne.n	800060e <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x26>
    	singleton_ = new SBUSReceiver(uart);
 80005f8:	2088      	movs	r0, #136	; 0x88
 80005fa:	f007 fa89 	bl	8007b10 <_Znwj>
 80005fe:	4603      	mov	r3, r0
 8000600:	461c      	mov	r4, r3
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4620      	mov	r0, r4
 8000606:	f000 f80b 	bl	8000620 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 800060c:	601c      	str	r4, [r3, #0]

    // returning the instance pointer
    return singleton_;
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000610:	681b      	ldr	r3, [r3, #0]
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	bf00      	nop
 800061c:	2000008c 	.word	0x2000008c

08000620 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	61da      	str	r2, [r3, #28]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3348      	adds	r3, #72	; 0x48
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff8d 	bl	8000554 <_ZN9RCControlC1Ev>
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	dc0a      	bgt.n	800065a <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x3a>
    {
        received_sbus_.ch[i] = 1000;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	3210      	adds	r2, #16
 800064a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800064e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e7f1      	b.n	800063e <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x1e>
    }
    received_sbus_.ch17 = false;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    HAL_UART_Receive_DMA (uart_, raw_sbus_, SBUS_FRAME_SIZE);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	2219      	movs	r2, #25
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fbf4 	bl	8005e78 <HAL_UART_Receive_DMA>
}
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN12SBUSReceiver7GetSBUSEv>:

SBus SBUSReceiver::GetSBUS(){
 800069a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
    return received_sbus_;
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	f103 0420 	add.w	r4, r3, #32
 80006ac:	4694      	mov	ip, r2
 80006ae:	f104 0e20 	add.w	lr, r4, #32
 80006b2:	4665      	mov	r5, ip
 80006b4:	4626      	mov	r6, r4
 80006b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80006b8:	6028      	str	r0, [r5, #0]
 80006ba:	6069      	str	r1, [r5, #4]
 80006bc:	60aa      	str	r2, [r5, #8]
 80006be:	60eb      	str	r3, [r5, #12]
 80006c0:	3410      	adds	r4, #16
 80006c2:	f10c 0c10 	add.w	ip, ip, #16
 80006c6:	4574      	cmp	r4, lr
 80006c8:	d1f3      	bne.n	80006b2 <_ZN12SBUSReceiver7GetSBUSEv+0x18>
 80006ca:	4663      	mov	r3, ip
 80006cc:	4622      	mov	r2, r4
 80006ce:	6810      	ldr	r0, [r2, #0]
 80006d0:	6018      	str	r0, [r3, #0]
 80006d2:	8892      	ldrh	r2, [r2, #4]
 80006d4:	809a      	strh	r2, [r3, #4]
}
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006de <_ZN12SBUSReceiver12GetRCControlEv>:

RCControl SBUSReceiver::GetRCControl(){
 80006de:	b5b0      	push	{r4, r5, r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
    cast_rccontrol();
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f000 f985 	bl	80009f8 <_ZN12SBUSReceiver14cast_rccontrolEv>
    return received_rccontrol_;
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4615      	mov	r5, r2
 80006f4:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000708:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bdb0      	pop	{r4, r5, r7, pc}

08000714 <_ZN12SBUSReceiver5parseEv>:

void SBUSReceiver::parse()
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    if ((raw_sbus_[0] == HEADER_) && (raw_sbus_[24] == FOOTER_)) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	f040 815e 	bne.w	80009e2 <_ZN12SBUSReceiver5parseEv+0x2ce>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7e1b      	ldrb	r3, [r3, #24]
 800072a:	2b00      	cmp	r3, #0
 800072c:	f040 8159 	bne.w	80009e2 <_ZN12SBUSReceiver5parseEv+0x2ce>

        //exactal parsing
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[2] << 8) & 0x07FF));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000742:	b21b      	sxth	r3, r3
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	841a      	strh	r2, [r3, #32]
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[3] << 5) & 0x07FF));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	015b      	lsls	r3, r3, #5
 800075e:	b21b      	sxth	r3, r3
 8000760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000764:	b21b      	sxth	r3, r3
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000766:	4313      	orrs	r3, r2
 8000768:	b21b      	sxth	r3, r3
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	845a      	strh	r2, [r3, #34]	; 0x22
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	099b      	lsrs	r3, r3, #6
 8000776:	b2db      	uxtb	r3, r3
 8000778:	b21a      	sxth	r2, r3
                                            (raw_sbus_[4] << 2) |
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[5] << 10) & 0x07FF));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	b21b      	sxth	r3, r3
 800078e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000792:	b21b      	sxth	r3, r3
                                            (raw_sbus_[4] << 2) |
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	849a      	strh	r2, [r3, #36]	; 0x24
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	085b      	lsrs	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[6] << 7) & 0x07FF));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	799b      	ldrb	r3, [r3, #6]
 80007ac:	01db      	lsls	r3, r3, #7
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007b4:	b21b      	sxth	r3, r3
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	84da      	strh	r2, [r3, #38]	; 0x26
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	799b      	ldrb	r3, [r3, #6]
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[7] << 4) & 0x07FF));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	79db      	ldrb	r3, [r3, #7]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007d6:	b21b      	sxth	r3, r3
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	b29a      	uxth	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	851a      	strh	r2, [r3, #40]	; 0x28
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	79db      	ldrb	r3, [r3, #7]
 80007e6:	09db      	lsrs	r3, r3, #7
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	b21a      	sxth	r2, r3
                                            (raw_sbus_[8] << 1) |
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a1b      	ldrb	r3, [r3, #8]
 80007f0:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[9] << 9) & 0x07FF));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7a5b      	ldrb	r3, [r3, #9]
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	b21b      	sxth	r3, r3
 8000800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000804:	b21b      	sxth	r3, r3
                                            (raw_sbus_[8] << 1) |
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 800080a:	b29a      	uxth	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	855a      	strh	r2, [r3, #42]	; 0x2a
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7a5b      	ldrb	r3, [r3, #9]
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[10] << 6) & 0x07FF));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7a9b      	ldrb	r3, [r3, #10]
 800081e:	019b      	lsls	r3, r3, #6
 8000820:	b21b      	sxth	r3, r3
 8000822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000826:	b21b      	sxth	r3, r3
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000828:	4313      	orrs	r3, r2
 800082a:	b21b      	sxth	r3, r3
 800082c:	b29a      	uxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	859a      	strh	r2, [r3, #44]	; 0x2c
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a9b      	ldrb	r3, [r3, #10]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[11] << 3) & 0x07FF));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7adb      	ldrb	r3, [r3, #11]
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	b21b      	sxth	r3, r3
 8000844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000848:	b21b      	sxth	r3, r3
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	85da      	strh	r2, [r3, #46]	; 0x2e
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b1b      	ldrb	r3, [r3, #12]
 8000858:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[13] << 8) & 0x07FF));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7b5b      	ldrb	r3, [r3, #13]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21b      	sxth	r3, r3
 8000862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000866:	b21b      	sxth	r3, r3
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000868:	4313      	orrs	r3, r2
 800086a:	b21b      	sxth	r3, r3
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	861a      	strh	r2, [r3, #48]	; 0x30
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7b5b      	ldrb	r3, [r3, #13]
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[14] << 5) & 0x07FF));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7b9b      	ldrb	r3, [r3, #14]
 8000880:	015b      	lsls	r3, r3, #5
 8000882:	b21b      	sxth	r3, r3
 8000884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000888:	b21b      	sxth	r3, r3
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 800088a:	4313      	orrs	r3, r2
 800088c:	b21b      	sxth	r3, r3
 800088e:	b29a      	uxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	865a      	strh	r2, [r3, #50]	; 0x32
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7b9b      	ldrb	r3, [r3, #14]
 8000898:	099b      	lsrs	r3, r3, #6
 800089a:	b2db      	uxtb	r3, r3
 800089c:	b21a      	sxth	r2, r3
                                            (raw_sbus_[15] << 2) |
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7bdb      	ldrb	r3, [r3, #15]
 80008a2:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[16] << 10) & 0x07FF));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7c1b      	ldrb	r3, [r3, #16]
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008b6:	b21b      	sxth	r3, r3
                                            (raw_sbus_[15] << 2) |
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21b      	sxth	r3, r3
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	869a      	strh	r2, [r3, #52]	; 0x34
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7c1b      	ldrb	r3, [r3, #16]
 80008c6:	085b      	lsrs	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[17] << 7) & 0x07FF));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7c5b      	ldrb	r3, [r3, #17]
 80008d0:	01db      	lsls	r3, r3, #7
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d8:	b21b      	sxth	r3, r3
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b29a      	uxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	86da      	strh	r2, [r3, #54]	; 0x36
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7c5b      	ldrb	r3, [r3, #17]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[18] << 4) & 0x07FF));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7c9b      	ldrb	r3, [r3, #18]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008fa:	b21b      	sxth	r3, r3
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	b29a      	uxth	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	871a      	strh	r2, [r3, #56]	; 0x38
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7c9b      	ldrb	r3, [r3, #18]
 800090a:	09db      	lsrs	r3, r3, #7
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b21a      	sxth	r2, r3
                                            (raw_sbus_[19] << 1) |
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7cdb      	ldrb	r3, [r3, #19]
 8000914:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000916:	b21b      	sxth	r3, r3
 8000918:	4313      	orrs	r3, r2
 800091a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[20] << 9) & 0x07FF));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7d1b      	ldrb	r3, [r3, #20]
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	b21b      	sxth	r3, r3
 8000924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000928:	b21b      	sxth	r3, r3
                                            (raw_sbus_[19] << 1) |
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 800092e:	b29a      	uxth	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	875a      	strh	r2, [r3, #58]	; 0x3a
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7d1b      	ldrb	r3, [r3, #20]
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	b2db      	uxtb	r3, r3
 800093c:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[21] << 6) & 0x07FF));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7d5b      	ldrb	r3, [r3, #21]
 8000942:	019b      	lsls	r3, r3, #6
 8000944:	b21b      	sxth	r3, r3
 8000946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800094a:	b21b      	sxth	r3, r3
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	879a      	strh	r2, [r3, #60]	; 0x3c
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7d5b      	ldrb	r3, [r3, #21]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[22] << 3) & 0x07FF));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7d9b      	ldrb	r3, [r3, #22]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	b21b      	sxth	r3, r3
 8000968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800096c:	b21b      	sxth	r3, r3
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 800096e:	4313      	orrs	r3, r2
 8000970:	b21b      	sxth	r3, r3
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* CH 17 */
        received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7ddb      	ldrb	r3, [r3, #23]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        /* CH 18 */
        received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7ddb      	ldrb	r3, [r3, #23]
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        /* Grab the lost frame */
        received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7ddb      	ldrb	r3, [r3, #23]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        /* Grab the failsafe */
        received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7ddb      	ldrb	r3, [r3, #23]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        received_sbus_.new_data = true;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009e0:	e004      	b.n	80009ec <_ZN12SBUSReceiver5parseEv+0x2d8>

    }else{
    	received_sbus_.new_data = false;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_ZN12SBUSReceiver14cast_rccontrolEv>:

void SBUSReceiver::cast_rccontrol()
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < 16; i++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d816      	bhi.n	8000a38 <_ZN12SBUSReceiver14cast_rccontrolEv+0x40>
        received_rccontrol_.ControlSignals[i] = sbus_to_rccontrol(received_sbus_.ch[i]);
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3210      	adds	r2, #16
 8000a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a14:	7bfc      	ldrb	r4, [r7, #15]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f811 	bl	8000a40 <_ZN12SBUSReceiver17sbus_to_rccontrolEt>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	f104 0312 	add.w	r3, r4, #18
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	edc3 7a00 	vstr	s15, [r3]
    for(uint8_t i = 0; i < 16; i++){
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3301      	adds	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e7e5      	b.n	8000a04 <_ZN12SBUSReceiver14cast_rccontrolEv+0xc>
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <_ZN12SBUSReceiver17sbus_to_rccontrolEt>:

 float SBUSReceiver::sbus_to_rccontrol(uint16_t channel_value)
 {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
    if(channel_value < SBUS_RANGE_MIN)
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	2bbf      	cmp	r3, #191	; 0xbf
 8000a50:	d801      	bhi.n	8000a56 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x16>
        channel_value = SBUS_RANGE_MIN;
 8000a52:	23c0      	movs	r3, #192	; 0xc0
 8000a54:	807b      	strh	r3, [r7, #2]
    if(channel_value > SBUS_RANGE_MAX)
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000a5c:	d902      	bls.n	8000a64 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x24>
        channel_value = SBUS_RANGE_MAX;
 8000a5e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a62:	807b      	strh	r3, [r7, #2]
    return static_cast<float>((channel_value - SBUS_RANGE_MIN) * (100.0f / SBUS_RANGE_RANGE));
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	3bc0      	subs	r3, #192	; 0xc0
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a70:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a88 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x48>
 8000a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 }
 8000a78:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	3d800000 	.word	0x3d800000

08000a8c <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	 SBUSReceiver::getInstance(huart)->parse();
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fda7 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe39 	bl	8000714 <_ZN12SBUSReceiver5parseEv>
	 HAL_UART_Receive_DMA (huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fda0 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2219      	movs	r2, #25
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f005 f9e2 	bl	8005e78 <HAL_UART_Receive_DMA>
	 SBUSSender::getInstance(huart)->assemble_packet();
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f811 	bl	8000adc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f87e 	bl	8000bbe <_ZN10SBUSSender15assemble_packetEv>
	 HAL_UART_Transmit_DMA(huart, SBUSSender::getInstance(huart)->send_buf_, SBUS_FRAME_SIZE);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f80a 	bl	8000adc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2219      	movs	r2, #25
 8000acc:	4619      	mov	r1, r3
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f005 f952 	bl	8005d78 <HAL_UART_Transmit_DMA>
 }
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender* SBUSSender::singleton_ = NULL;

SBUSSender* SBUSSender::getInstance(UART_HandleTypeDef* uart){
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    if (singleton_ == nullptr)
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10a      	bne.n	8000b02 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x26>
      singleton_ = new SBUSSender(uart);
 8000aec:	2048      	movs	r0, #72	; 0x48
 8000aee:	f007 f80f 	bl	8007b10 <_Znwj>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461c      	mov	r4, r3
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4620      	mov	r0, r4
 8000afa:	f000 f80b 	bl	8000b14 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b00:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000b02:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b04:	681b      	ldr	r3, [r3, #0]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000090 	.word	0x20000090

08000b14 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	dc0a      	bgt.n	8000b44 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x30>
	{
		send_sbus_.ch[i] = 1000;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	3210      	adds	r2, #16
 8000b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e7f1      	b.n	8000b28 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x14>
	}
	send_sbus_.ch17 = false;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	send_sbus_.ch18 = false;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	send_sbus_.failsafe = false;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	send_sbus_.lost_frame = false;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	send_sbus_.new_data = false;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit_DMA(uart_, send_buf_, SBUS_FRAME_SIZE);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2219      	movs	r2, #25
 8000b74:	4618      	mov	r0, r3
 8000b76:	f005 f8ff 	bl	8005d78 <HAL_UART_Transmit_DMA>
}
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_ZN10SBUSSender12SetSBusValueE4SBus>:

void SBUSSender::SetChannelValue(uint8_t channel, float value){
	send_sbus_.ch[channel] = rccontrol_to_sbus(value);
}

void SBUSSender::SetSBusValue(SBus values){
 8000b84:	b084      	sub	sp, #16
 8000b86:	b4b0      	push	{r4, r5, r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	f107 001c 	add.w	r0, r7, #28
 8000b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    send_sbus_ = values;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f103 0420 	add.w	r4, r3, #32
 8000b9c:	f107 051c 	add.w	r5, r7, #28
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bac:	6020      	str	r0, [r4, #0]
 8000bae:	3404      	adds	r4, #4
 8000bb0:	8021      	strh	r1, [r4, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bcb0      	pop	{r4, r5, r7}
 8000bba:	b004      	add	sp, #16
 8000bbc:	4770      	bx	lr

08000bbe <_ZN10SBUSSender15assemble_packetEv>:
      send_sbus_.ch[i] = rccontrol_to_sbus(values.ControlSignals[i]);
    }
}

void SBUSSender::assemble_packet()
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	220f      	movs	r2, #15
 8000bca:	701a      	strb	r2, [r3, #0]
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	8c1b      	ldrh	r3, [r3, #32]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	705a      	strb	r2, [r3, #1]
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	8c1b      	ldrh	r3, [r3, #32]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	f023 0307 	bic.w	r3, r3, #7
 8000bf2:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	709a      	strb	r2, [r3, #2]
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c0c:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c12:	019b      	lsls	r3, r3, #6
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c1a:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	70da      	strb	r2, [r3, #3]
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	711a      	strb	r2, [r3, #4]
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c38:	0a9b      	lsrs	r3, r3, #10
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	715a      	strb	r2, [r3, #5]
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c60:	09db      	lsrs	r3, r3, #7
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	f023 030f 	bic.w	r3, r3, #15
 8000c78:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	719a      	strb	r2, [r3, #6]
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c88:	091b      	lsrs	r3, r3, #4
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c92:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c98:	01db      	lsls	r3, r3, #7
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ca0:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	71da      	strb	r2, [r3, #7]
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cb0:	085b      	lsrs	r3, r3, #1
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	721a      	strb	r2, [r3, #8]
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cbe:	0a5b      	lsrs	r3, r3, #9
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	f023 0303 	bic.w	r3, r3, #3
 8000cd6:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	725a      	strb	r2, [r3, #9]
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ce6:	099b      	lsrs	r3, r3, #6
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	f003 031f 	and.w	r3, r3, #31
 8000cf0:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000cf6:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	729a      	strb	r2, [r3, #10]
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d08:	08db      	lsrs	r3, r3, #3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	72da      	strb	r2, [r3, #11]
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	731a      	strb	r2, [r3, #12]
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	f023 0307 	bic.w	r3, r3, #7
 8000d38:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	735a      	strb	r2, [r3, #13]
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d48:	095b      	lsrs	r3, r3, #5
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d52:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d60:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	739a      	strb	r2, [r3, #14]
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	73da      	strb	r2, [r3, #15]
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d7e:	0a9b      	lsrs	r3, r3, #10
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	f023 0301 	bic.w	r3, r3, #1
 8000d96:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	741a      	strb	r2, [r3, #16]
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000da6:	09db      	lsrs	r3, r3, #7
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	f023 030f 	bic.w	r3, r3, #15
 8000dbe:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	745a      	strb	r2, [r3, #17]
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dd8:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000dde:	01db      	lsls	r3, r3, #7
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000de6:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	749a      	strb	r2, [r3, #18]
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000df6:	085b      	lsrs	r3, r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	74da      	strb	r2, [r3, #19]
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000e04:	0a5b      	lsrs	r3, r3, #9
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f023 0303 	bic.w	r3, r3, #3
 8000e1c:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	751a      	strb	r2, [r3, #20]
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000e2c:	099b      	lsrs	r3, r3, #6
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e3c:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	755a      	strb	r2, [r3, #21]
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e4e:	08db      	lsrs	r3, r3, #3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	759a      	strb	r2, [r3, #22]
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	75da      	strb	r2, [r3, #23]
  send_buf_[24] = FOOTER_;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_ZN3SSM11getInstanceEv>:
 */
#include "../Inc/Simple_Sytem_Manager.hpp"

SSM* SSM::singleton_= NULL;

SSM* SSM::getInstance(){
 8000ea8:	b598      	push	{r3, r4, r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    if (singleton_ == NULL)
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_ZN3SSM11getInstanceEv+0x28>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d109      	bne.n	8000ec8 <_ZN3SSM11getInstanceEv+0x20>
      singleton_ = new SSM();
 8000eb4:	2008      	movs	r0, #8
 8000eb6:	f006 fe2b 	bl	8007b10 <_Znwj>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f000 f81c 	bl	8000efc <_ZN3SSMC1Ev>
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <_ZN3SSM11getInstanceEv+0x28>)
 8000ec6:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <_ZN3SSM11getInstanceEv+0x28>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	bd98      	pop	{r3, r4, r7, pc}
 8000ed0:	20000094 	.word	0x20000094

08000ed4 <_ZN3SSM19execute_manual_modeEv>:


void SSM::execute_manual_mode()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    SBus sbus_data;
    fetch_command(sbus_data);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f826 	bl	8000f34 <_ZN3SSM13fetch_commandER4SBus>
    transmit_command(sbus_data);
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4619      	mov	r1, r3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f96e 	bl	80011d0 <_ZN3SSM16transmit_commandER4SBus>
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_ZN3SSMC1Ev>:

SSM::SSM(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    config();
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f805 	bl	8000f14 <_ZN3SSM6configEv>
}
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_ZN3SSM6configEv>:

SSM::~SSM(){
}

void SSM::config(){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    sbus_uart_ = &huart2;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <_ZN3SSM6configEv+0x1c>)
 8000f20:	605a      	str	r2, [r3, #4]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200001c0 	.word	0x200001c0

08000f34 <_ZN3SSM13fetch_commandER4SBus>:

void SSM::fetch_command(SBus &sbus_data)
{
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	b0a3      	sub	sp, #140	; 0x8c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f3c:	62b9      	str	r1, [r7, #40]	; 0x28
    RCControl command = SBUSReceiver::getInstance(sbus_uart_)->GetRCControl();
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fb50 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fbc4 	bl	80006de <_ZN12SBUSReceiver12GetRCControlEv>
    sbus_data = SBUSReceiver::getInstance(sbus_uart_)->GetSBUS();
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fb44 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000f60:	4602      	mov	r2, r0
 8000f62:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000f64:	463b      	mov	r3, r7
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fb96 	bl	800069a <_ZN12SBUSReceiver7GetSBUSEv>
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4620      	mov	r0, r4
 8000f72:	f103 0420 	add.w	r4, r3, #32
 8000f76:	4602      	mov	r2, r0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f8d1 c000 	ldr.w	ip, [r1]
 8000f7e:	684e      	ldr	r6, [r1, #4]
 8000f80:	688d      	ldr	r5, [r1, #8]
 8000f82:	68c9      	ldr	r1, [r1, #12]
 8000f84:	f8c2 c000 	str.w	ip, [r2]
 8000f88:	6056      	str	r6, [r2, #4]
 8000f8a:	6095      	str	r5, [r2, #8]
 8000f8c:	60d1      	str	r1, [r2, #12]
 8000f8e:	3310      	adds	r3, #16
 8000f90:	3010      	adds	r0, #16
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d1ef      	bne.n	8000f76 <_ZN3SSM13fetch_commandER4SBus+0x42>
 8000f96:	4602      	mov	r2, r0
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	6011      	str	r1, [r2, #0]
 8000f9c:	889b      	ldrh	r3, [r3, #4]
 8000f9e:	8093      	strh	r3, [r2, #4]
    /* map the signal to the corresponse flight mode*/
    if(command.mode >= 0 && command.mode < (100.0f/6.0f) )
 8000fa0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f93f 	bl	8001228 <_ZN10ControlRefILh7EfEcvRfEv>
 8000faa:	4603      	mov	r3, r0
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	db0e      	blt.n	8000fd8 <_ZN3SSM13fetch_commandER4SBus+0xa4>
 8000fba:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <_ZN3SSM13fetch_commandER4SBus+0x270>)
 8000fbc:	677b      	str	r3, [r7, #116]	; 0x74
 8000fbe:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f939 	bl	8001240 <_ZN10ControlRefILh7EfEltERKf>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZN3SSM13fetch_commandER4SBus+0xa4>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <_ZN3SSM13fetch_commandER4SBus+0xa6>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <_ZN3SSM13fetch_commandER4SBus+0xb2>
    {
        flight_mode_ = static_cast<Flight_Mode>(1);
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	705a      	strb	r2, [r3, #1]
 8000fe4:	e0bb      	b.n	800115e <_ZN3SSM13fetch_commandER4SBus+0x22a>
    } else if (command.mode >  (100.0f/6.0f) && command.mode < 2 * (100.0f/6.0f) )
 8000fe6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f91c 	bl	8001228 <_ZN10ControlRefILh7EfEcvRfEv>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80011a8 <_ZN3SSM13fetch_commandER4SBus+0x274>
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd0e      	ble.n	8001022 <_ZN3SSM13fetch_commandER4SBus+0xee>
 8001004:	4b69      	ldr	r3, [pc, #420]	; (80011ac <_ZN3SSM13fetch_commandER4SBus+0x278>)
 8001006:	67bb      	str	r3, [r7, #120]	; 0x78
 8001008:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800100c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f914 	bl	8001240 <_ZN10ControlRefILh7EfEltERKf>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <_ZN3SSM13fetch_commandER4SBus+0xee>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <_ZN3SSM13fetch_commandER4SBus+0xf0>
 8001022:	2300      	movs	r3, #0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <_ZN3SSM13fetch_commandER4SBus+0xfc>
    {
        flight_mode_ = static_cast<Flight_Mode>(2);
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	2202      	movs	r2, #2
 800102c:	705a      	strb	r2, [r3, #1]
 800102e:	e096      	b.n	800115e <_ZN3SSM13fetch_commandER4SBus+0x22a>
    }else if (command.mode >  2 * (100.0f/6.0f) && command.mode < 3 * (100.0f/6.0f) )
 8001030:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f8f7 	bl	8001228 <_ZN10ControlRefILh7EfEcvRfEv>
 800103a:	4603      	mov	r3, r0
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80011b0 <_ZN3SSM13fetch_commandER4SBus+0x27c>
 8001044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	dd0e      	ble.n	800106c <_ZN3SSM13fetch_commandER4SBus+0x138>
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <_ZN3SSM13fetch_commandER4SBus+0x280>)
 8001050:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001052:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001056:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f8ef 	bl	8001240 <_ZN10ControlRefILh7EfEltERKf>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <_ZN3SSM13fetch_commandER4SBus+0x138>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <_ZN3SSM13fetch_commandER4SBus+0x13a>
 800106c:	2300      	movs	r3, #0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <_ZN3SSM13fetch_commandER4SBus+0x146>
    {
        flight_mode_ = static_cast<Flight_Mode>(3);
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	2203      	movs	r2, #3
 8001076:	705a      	strb	r2, [r3, #1]
 8001078:	e071      	b.n	800115e <_ZN3SSM13fetch_commandER4SBus+0x22a>
    }else if (command.mode >  3 * (100.0f/6.0f) && command.mode < 4 * (100.0f/6.0f) )
 800107a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f8d2 	bl	8001228 <_ZN10ControlRefILh7EfEcvRfEv>
 8001084:	4603      	mov	r3, r0
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80011b8 <_ZN3SSM13fetch_commandER4SBus+0x284>
 800108e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	dd0f      	ble.n	80010b8 <_ZN3SSM13fetch_commandER4SBus+0x184>
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <_ZN3SSM13fetch_commandER4SBus+0x288>)
 800109a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800109e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80010a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f8c9 	bl	8001240 <_ZN10ControlRefILh7EfEltERKf>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <_ZN3SSM13fetch_commandER4SBus+0x184>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <_ZN3SSM13fetch_commandER4SBus+0x186>
 80010b8:	2300      	movs	r3, #0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <_ZN3SSM13fetch_commandER4SBus+0x192>
    {
        flight_mode_ = static_cast<Flight_Mode>(4);
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	2204      	movs	r2, #4
 80010c2:	705a      	strb	r2, [r3, #1]
 80010c4:	e04b      	b.n	800115e <_ZN3SSM13fetch_commandER4SBus+0x22a>
    }else if (command.mode >  4 * (100.0f/6.0f) && command.mode < 5 * (100.0f/6.0f) )
 80010c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f8ac 	bl	8001228 <_ZN10ControlRefILh7EfEcvRfEv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80011c0 <_ZN3SSM13fetch_commandER4SBus+0x28c>
 80010da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dd0f      	ble.n	8001104 <_ZN3SSM13fetch_commandER4SBus+0x1d0>
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <_ZN3SSM13fetch_commandER4SBus+0x290>)
 80010e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80010ea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80010ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f8a3 	bl	8001240 <_ZN10ControlRefILh7EfEltERKf>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_ZN3SSM13fetch_commandER4SBus+0x1d0>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <_ZN3SSM13fetch_commandER4SBus+0x1d2>
 8001104:	2300      	movs	r3, #0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <_ZN3SSM13fetch_commandER4SBus+0x1de>
    {
        flight_mode_ = static_cast<Flight_Mode>(5);
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	2205      	movs	r2, #5
 800110e:	705a      	strb	r2, [r3, #1]
 8001110:	e025      	b.n	800115e <_ZN3SSM13fetch_commandER4SBus+0x22a>
    }else if (command.mode >  5 * (100.0f/6.0f) && command.mode <= 100 )
 8001112:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f886 	bl	8001228 <_ZN10ControlRefILh7EfEcvRfEv>
 800111c:	4603      	mov	r3, r0
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80011c8 <_ZN3SSM13fetch_commandER4SBus+0x294>
 8001126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd10      	ble.n	8001152 <_ZN3SSM13fetch_commandER4SBus+0x21e>
 8001130:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f877 	bl	8001228 <_ZN10ControlRefILh7EfEcvRfEv>
 800113a:	4603      	mov	r3, r0
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80011cc <_ZN3SSM13fetch_commandER4SBus+0x298>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d801      	bhi.n	8001152 <_ZN3SSM13fetch_commandER4SBus+0x21e>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <_ZN3SSM13fetch_commandER4SBus+0x220>
 8001152:	2300      	movs	r3, #0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <_ZN3SSM13fetch_commandER4SBus+0x22a>
    {
        flight_mode_ = static_cast<Flight_Mode>(6);
 8001158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115a:	2206      	movs	r2, #6
 800115c:	705a      	strb	r2, [r3, #1]
    }

    if(flight_mode_ == stablize || flight_mode_ == alt_hold || flight_mode_ == loiter || flight_mode_ == acro)
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00b      	beq.n	800117e <_ZN3SSM13fetch_commandER4SBus+0x24a>
 8001166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d007      	beq.n	800117e <_ZN3SSM13fetch_commandER4SBus+0x24a>
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d003      	beq.n	800117e <_ZN3SSM13fetch_commandER4SBus+0x24a>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	2b06      	cmp	r3, #6
 800117c:	d102      	bne.n	8001184 <_ZN3SSM13fetch_commandER4SBus+0x250>
        status_ = manual;
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    if(flight_mode_ == RTL || flight_mode_ == autoo)
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	2b04      	cmp	r3, #4
 800118a:	d003      	beq.n	8001194 <_ZN3SSM13fetch_commandER4SBus+0x260>
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d102      	bne.n	800119a <_ZN3SSM13fetch_commandER4SBus+0x266>
        status_ = autonomous;
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	378c      	adds	r7, #140	; 0x8c
 800119e:	46bd      	mov	sp, r7
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	41855555 	.word	0x41855555
 80011a8:	41855555 	.word	0x41855555
 80011ac:	42055555 	.word	0x42055555
 80011b0:	42055555 	.word	0x42055555
 80011b4:	42480000 	.word	0x42480000
 80011b8:	42480000 	.word	0x42480000
 80011bc:	42855555 	.word	0x42855555
 80011c0:	42855555 	.word	0x42855555
 80011c4:	42a6aaaa 	.word	0x42a6aaaa
 80011c8:	42a6aaaa 	.word	0x42a6aaaa
 80011cc:	42c80000 	.word	0x42c80000

080011d0 <_ZN3SSM16transmit_commandER4SBus>:

bool SSM::transmit_command(SBus &sbus_data)
{
 80011d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d4:	b08a      	sub	sp, #40	; 0x28
 80011d6:	af08      	add	r7, sp, #32
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
    SBUSSender::getInstance(&huart2)->SetSBusValue(sbus_data);
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <_ZN3SSM16transmit_commandER4SBus+0x54>)
 80011de:	f7ff fc7d 	bl	8000adc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 80011e2:	4606      	mov	r6, r0
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4690      	mov	r8, r2
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4696      	mov	lr, r2
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	4694      	mov	ip, r2
 80011f2:	466c      	mov	r4, sp
 80011f4:	f103 050c 	add.w	r5, r3, #12
 80011f8:	6828      	ldr	r0, [r5, #0]
 80011fa:	6869      	ldr	r1, [r5, #4]
 80011fc:	68aa      	ldr	r2, [r5, #8]
 80011fe:	68eb      	ldr	r3, [r5, #12]
 8001200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001202:	6928      	ldr	r0, [r5, #16]
 8001204:	6969      	ldr	r1, [r5, #20]
 8001206:	c403      	stmia	r4!, {r0, r1}
 8001208:	8b2b      	ldrh	r3, [r5, #24]
 800120a:	8023      	strh	r3, [r4, #0]
 800120c:	4641      	mov	r1, r8
 800120e:	4672      	mov	r2, lr
 8001210:	4663      	mov	r3, ip
 8001212:	4630      	mov	r0, r6
 8001214:	f7ff fcb6 	bl	8000b84 <_ZN10SBUSSender12SetSBusValueE4SBus>
}
 8001218:	bf00      	nop
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001224:	200001c0 	.word	0x200001c0

08001228 <_ZN10ControlRefILh7EfEcvRfEv>:

//the background work that allows a variable name refer to the same memory to an array element
template<uint8_t Index, class T>
struct ControlRef
{
    operator T&() // allows: double d = object.Member;
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    {
        return ((T*)(this))[Index];
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	331c      	adds	r3, #28
    }
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_ZN10ControlRefILh7EfEltERKf>:
    T* operator&() // allows: double *p = &object.Member;
    {
        return &((T*)(this))[Index];
    }

    bool operator<(T const &rhs) // allows: if(object.Member < 1.0)
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    {
        return ((T*)(this))[Index] < rhs;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	331c      	adds	r3, #28
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	bf4c      	ite	mi
 8001262:	2301      	movmi	r3, #1
 8001264:	2300      	movpl	r3, #0
 8001266:	b2db      	uxtb	r3, r3
    }
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_ADC1_Init+0xe0>)
 8001298:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <MX_ADC1_Init+0xe4>)
 800129a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_ADC1_Init+0xe0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012b6:	2204      	movs	r2, #4
 80012b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <MX_ADC1_Init+0xe0>)
 80012f8:	f001 f8dc 	bl	80024b4 <HAL_ADC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001302:	f000 f9dd 	bl	80016c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4810      	ldr	r0, [pc, #64]	; (8001354 <MX_ADC1_Init+0xe0>)
 8001312:	f001 fe2b 	bl	8002f6c <HAL_ADCEx_MultiModeConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800131c:	f000 f9d0 	bl	80016c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_ADC1_Init+0xe8>)
 8001322:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001324:	2306      	movs	r3, #6
 8001326:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800132c:	237f      	movs	r3, #127	; 0x7f
 800132e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001330:	2304      	movs	r3, #4
 8001332:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_ADC1_Init+0xe0>)
 800133e:	f001 fa05 	bl	800274c <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001348:	f000 f9ba 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000098 	.word	0x20000098
 8001358:	42028000 	.word	0x42028000
 800135c:	0c900008 	.word	0x0c900008

08001360 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ae      	sub	sp, #184	; 0xb8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2294      	movs	r2, #148	; 0x94
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f006 fc17 	bl	8007bb4 <memset>
  if(adcHandle->Instance==ADC1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_ADC_MspInit+0xa8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d137      	bne.n	8001400 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001394:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001396:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fe48 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80013ae:	f000 f987 	bl	80016c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_ADC_MspInit+0xac>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <HAL_ADC_MspInit+0xac>)
 80013b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_ADC_MspInit+0xac>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_ADC_MspInit+0xac>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_ADC_MspInit+0xac>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_ADC_MspInit+0xac>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80013e2:	2304      	movs	r3, #4
 80013e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <HAL_ADC_MspInit+0xb0>)
 80013fc:	f002 fb18 	bl	8003a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001400:	bf00      	nop
 8001402:	37b8      	adds	r7, #184	; 0xb8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	42028000 	.word	0x42028000
 800140c:	40021000 	.word	0x40021000
 8001410:	42020800 	.word	0x42020800

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_DMA_Init+0x60>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <MX_DMA_Init+0x60>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6493      	str	r3, [r2, #72]	; 0x48
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_DMA_Init+0x60>)
 8001428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_DMA_Init+0x60>)
 8001434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <MX_DMA_Init+0x60>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6493      	str	r3, [r2, #72]	; 0x48
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <MX_DMA_Init+0x60>)
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	201d      	movs	r0, #29
 8001450:	f001 ff0b 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001454:	201d      	movs	r0, #29
 8001456:	f001 ff22 	bl	800329e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	201e      	movs	r0, #30
 8001460:	f001 ff03 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001464:	201e      	movs	r0, #30
 8001466:	f001 ff1a 	bl	800329e <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <MX_GPIO_Init+0x114>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a3e      	ldr	r2, [pc, #248]	; (800158c <MX_GPIO_Init+0x114>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <MX_GPIO_Init+0x114>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <MX_GPIO_Init+0x114>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a38      	ldr	r2, [pc, #224]	; (800158c <MX_GPIO_Init+0x114>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <MX_GPIO_Init+0x114>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <MX_GPIO_Init+0x114>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <MX_GPIO_Init+0x114>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <MX_GPIO_Init+0x114>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <MX_GPIO_Init+0x114>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4a2c      	ldr	r2, [pc, #176]	; (800158c <MX_GPIO_Init+0x114>)
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <MX_GPIO_Init+0x114>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80014ee:	f002 fdb5 	bl	800405c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	4826      	ldr	r0, [pc, #152]	; (8001590 <MX_GPIO_Init+0x118>)
 80014f8:	f002 fc1a 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001502:	4824      	ldr	r0, [pc, #144]	; (8001594 <MX_GPIO_Init+0x11c>)
 8001504:	f002 fc14 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	21a0      	movs	r1, #160	; 0xa0
 800150c:	4822      	ldr	r0, [pc, #136]	; (8001598 <MX_GPIO_Init+0x120>)
 800150e:	f002 fc0f 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001518:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	481b      	ldr	r0, [pc, #108]	; (8001598 <MX_GPIO_Init+0x120>)
 800152a:	f002 fa81 	bl	8003a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_GPIO_Init+0x118>)
 8001546:	f002 fa73 	bl	8003a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800154a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_GPIO_Init+0x11c>)
 8001564:	f002 fa64 	bl	8003a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_GPIO_Init+0x120>)
 8001580:	f002 fa56 	bl	8003a30 <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	42020800 	.word	0x42020800
 8001594:	42020000 	.word	0x42020000
 8001598:	42020400 	.word	0x42020400

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b09a      	sub	sp, #104	; 0x68
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a2:	f000 fd70 	bl	8002086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a6:	f000 f81b 	bl	80015e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015aa:	f7ff ff65 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ae:	f7ff ff31 	bl	8001414 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80015b2:	f000 fafd 	bl	8001bb0 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80015b6:	f000 f889 	bl	80016cc <MX_RTC_Init>
  MX_UCPD1_Init();
 80015ba:	f000 fac3 	bl	8001b44 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80015be:	f000 fcb1 	bl	8001f24 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80015c2:	f7ff fe57 	bl	8001274 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80015c6:	f000 fb41 	bl	8001c4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SBus sbus_data;
  RCControl control_data;
 80015ca:	463b      	mov	r3, r7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffc1 	bl	8000554 <_ZN9RCControlC1Ev>
    
    /* USER CODE BEGIN 3 */
//     sbus_data = SBUSReceiver::getInstance(&huart2)->GetSBUS();
//     control_data = SBUSReceiver::getInstance(&huart2)->GetRCControl();
//     SBUSSender::getInstance(&huart2)->SetSBusValue(sbus_data);
    SSM::getInstance()->execute_manual_mode();
 80015d2:	f7ff fc69 	bl	8000ea8 <_ZN3SSM11getInstanceEv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc7b 	bl	8000ed4 <_ZN3SSM19execute_manual_modeEv>
 80015de:	e7f8      	b.n	80015d2 <main+0x36>

080015e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b098      	sub	sp, #96	; 0x60
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	2248      	movs	r2, #72	; 0x48
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 fae0 	bl	8007bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001602:	2000      	movs	r0, #0
 8001604:	f002 fcce 	bl	8003fa4 <HAL_PWREx_ControlVoltageScaling>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001618:	f000 f852 	bl	80016c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800161c:	f002 fca4 	bl	8003f68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <_Z18SystemClock_Configv+0xdc>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001626:	4a25      	ldr	r2, [pc, #148]	; (80016bc <_Z18SystemClock_Configv+0xdc>)
 8001628:	f023 0318 	bic.w	r3, r3, #24
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8001630:	2334      	movs	r3, #52	; 0x34
 8001632:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001634:	2381      	movs	r3, #129	; 0x81
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800163c:	2301      	movs	r3, #1
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001640:	2300      	movs	r3, #0
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001644:	2360      	movs	r3, #96	; 0x60
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001648:	2302      	movs	r3, #2
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800164c:	2301      	movs	r3, #1
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001650:	2301      	movs	r3, #1
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001654:	2337      	movs	r3, #55	; 0x37
 8001656:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001658:	2307      	movs	r3, #7
 800165a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fd2b 	bl	80040c4 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800167e:	f000 f81f 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2303      	movs	r3, #3
 8001688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2105      	movs	r1, #5
 800169a:	4618      	mov	r0, r3
 800169c:	f003 f9e8 	bl	8004a70 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf14      	ite	ne
 80016a6:	2301      	movne	r3, #1
 80016a8:	2300      	moveq	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80016b0:	f000 f806 	bl	80016c0 <Error_Handler>
  }
}
 80016b4:	bf00      	nop
 80016b6:	3760      	adds	r7, #96	; 0x60
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_RTC_Init+0x8c>)
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <MX_RTC_Init+0x90>)
 80016e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_RTC_Init+0x8c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_RTC_Init+0x8c>)
 80016f0:	227f      	movs	r2, #127	; 0x7f
 80016f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_RTC_Init+0x8c>)
 80016f6:	22ff      	movs	r2, #255	; 0xff
 80016f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_RTC_Init+0x8c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_RTC_Init+0x8c>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_RTC_Init+0x8c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_RTC_Init+0x8c>)
 800170e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001712:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_RTC_Init+0x8c>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800171a:	480f      	ldr	r0, [pc, #60]	; (8001758 <MX_RTC_Init+0x8c>)
 800171c:	f004 f9a2 	bl	8005a64 <HAL_RTC_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001726:	f7ff ffcb 	bl	80016c0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_RTC_Init+0x8c>)
 8001740:	f004 fa9e 	bl	8005c80 <HAL_RTCEx_PrivilegeModeSet>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800174a:	f7ff ffb9 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000100 	.word	0x20000100
 800175c:	40002800 	.word	0x40002800

08001760 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0a8      	sub	sp, #160	; 0xa0
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2294      	movs	r2, #148	; 0x94
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f006 fa1f 	bl	8007bb4 <memset>
  if(rtcHandle->Instance==RTC)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_RTC_MspInit+0x74>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d124      	bne.n	80017ca <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001784:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fc50 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800179e:	f7ff ff8f 	bl	80016c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_RTC_MspInit+0x78>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_RTC_MspInit+0x78>)
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RTC_MspInit+0x78>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_RTC_MspInit+0x78>)
 80017b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RTC_MspInit+0x78>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017ca:	bf00      	nop
 80017cc:	37a0      	adds	r7, #160	; 0xa0
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40002800 	.word	0x40002800
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6613      	str	r3, [r2, #96]	; 0x60
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <NMI_Handler+0x4>

0800182a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler+0x4>

08001836 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler+0x4>

08001842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f000 fc60 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Channel1_IRQHandler+0x10>)
 800187e:	f001 ff07 	bl	8003690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000254 	.word	0x20000254

0800188c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA1_Channel2_IRQHandler+0x10>)
 8001892:	f001 fefd 	bl	8003690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200002bc 	.word	0x200002bc

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART2_IRQHandler+0x10>)
 80018a6:	f004 fb33 	bl	8005f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001c0 	.word	0x200001c0

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_kill>:

int _kill(int pid, int sig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ce:	f006 f93f 	bl	8007b50 <__errno>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2216      	movs	r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
  return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0x12>

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f006 f912 	bl	8007b50 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20030000 	.word	0x20030000
 8001958:	00000400 	.word	0x00000400
 800195c:	20000128 	.word	0x20000128
 8001960:	20000630 	.word	0x20000630

08001964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800198e:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <SystemCoreClockUpdate+0x144>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <SystemCoreClockUpdate+0x144>)
 800199c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e005      	b.n	80019b6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80019aa:	4b48      	ldr	r3, [pc, #288]	; (8001acc <SystemCoreClockUpdate+0x144>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80019b6:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <SystemCoreClockUpdate+0x148>)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c0:	4b42      	ldr	r3, [pc, #264]	; (8001acc <SystemCoreClockUpdate+0x144>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d866      	bhi.n	8001a9a <SystemCoreClockUpdate+0x112>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <SystemCoreClockUpdate+0x4c>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	08001a09 	.word	0x08001a09
 80019d8:	08001a9b 	.word	0x08001a9b
 80019dc:	08001a9b 	.word	0x08001a9b
 80019e0:	08001a9b 	.word	0x08001a9b
 80019e4:	08001a11 	.word	0x08001a11
 80019e8:	08001a9b 	.word	0x08001a9b
 80019ec:	08001a9b 	.word	0x08001a9b
 80019f0:	08001a9b 	.word	0x08001a9b
 80019f4:	08001a19 	.word	0x08001a19
 80019f8:	08001a9b 	.word	0x08001a9b
 80019fc:	08001a9b 	.word	0x08001a9b
 8001a00:	08001a9b 	.word	0x08001a9b
 8001a04:	08001a21 	.word	0x08001a21
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001a08:	4a32      	ldr	r2, [pc, #200]	; (8001ad4 <SystemCoreClockUpdate+0x14c>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	6013      	str	r3, [r2, #0]
      break;
 8001a0e:	e048      	b.n	8001aa2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001a10:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <SystemCoreClockUpdate+0x14c>)
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <SystemCoreClockUpdate+0x150>)
 8001a14:	601a      	str	r2, [r3, #0]
      break;
 8001a16:	e044      	b.n	8001aa2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <SystemCoreClockUpdate+0x14c>)
 8001a1a:	4a30      	ldr	r2, [pc, #192]	; (8001adc <SystemCoreClockUpdate+0x154>)
 8001a1c:	601a      	str	r2, [r3, #0]
      break;
 8001a1e:	e040      	b.n	8001aa2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <SystemCoreClockUpdate+0x144>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001a2a:	4b28      	ldr	r3, [pc, #160]	; (8001acc <SystemCoreClockUpdate+0x144>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	3301      	adds	r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <SystemCoreClockUpdate+0xbe>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d006      	beq.n	8001a52 <SystemCoreClockUpdate+0xca>
 8001a44:	e00b      	b.n	8001a5e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001a46:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <SystemCoreClockUpdate+0x150>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	613b      	str	r3, [r7, #16]
          break;
 8001a50:	e00b      	b.n	8001a6a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001a52:	4a22      	ldr	r2, [pc, #136]	; (8001adc <SystemCoreClockUpdate+0x154>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	613b      	str	r3, [r7, #16]
          break;
 8001a5c:	e005      	b.n	8001a6a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	613b      	str	r3, [r7, #16]
          break;
 8001a68:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <SystemCoreClockUpdate+0x144>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <SystemCoreClockUpdate+0x144>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0e5b      	lsrs	r3, r3, #25
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <SystemCoreClockUpdate+0x14c>)
 8001a96:	6013      	str	r3, [r2, #0]
      break;
 8001a98:	e003      	b.n	8001aa2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <SystemCoreClockUpdate+0x14c>)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	6013      	str	r3, [r2, #0]
      break;
 8001aa0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <SystemCoreClockUpdate+0x144>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <SystemCoreClockUpdate+0x158>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <SystemCoreClockUpdate+0x14c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <SystemCoreClockUpdate+0x14c>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	08007de0 	.word	0x08007de0
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	007a1200 	.word	0x007a1200
 8001ae0:	08007dc8 	.word	0x08007dc8

08001ae4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40021000 	.word	0x40021000

08001b14 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000

08001b44 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001b5a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b5e:	f7ff ffd9 	bl	8001b14 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7ff ffbe 	bl	8001ae4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff ffbb 	bl	8001ae4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b74:	2303      	movs	r3, #3
 8001b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <MX_UCPD1_Init+0x64>)
 8001b82:	f005 ff1c 	bl	80079be <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_UCPD1_Init+0x68>)
 8001b9a:	f005 ff10 	bl	80079be <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	42020400 	.word	0x42020400
 8001bac:	42020000 	.word	0x42020000

08001bb0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <MX_LPUART1_UART_Init+0x94>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bbc:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <MX_LPUART1_UART_Init+0x98>)
 8001bbe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001bf8:	f004 f86e 	bl	8005cd8 <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001c02:	f7ff fd5d 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001c0a:	f005 fcc2 	bl	8007592 <HAL_UARTEx_SetTxFifoThreshold>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001c14:	f7ff fd54 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001c1c:	f005 fcf7 	bl	800760e <HAL_UARTEx_SetRxFifoThreshold>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001c26:	f7ff fd4b 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_LPUART1_UART_Init+0x90>)
 8001c2c:	f005 fc78 	bl	8007520 <HAL_UARTEx_DisableFifoMode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001c36:	f7ff fd43 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000012c 	.word	0x2000012c
 8001c44:	40008000 	.word	0x40008000
 8001c48:	00033324 	.word	0x00033324

08001c4c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <MX_USART2_UART_Init+0x98>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c58:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <MX_USART2_UART_Init+0x9c>)
 8001c5a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c98:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c9a:	f004 f81d 	bl	8005cd8 <HAL_UART_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001ca4:	f7ff fd0c 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001cac:	f005 fc71 	bl	8007592 <HAL_UARTEx_SetTxFifoThreshold>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001cb6:	f7ff fd03 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001cbe:	f005 fca6 	bl	800760e <HAL_UARTEx_SetRxFifoThreshold>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001cc8:	f7ff fcfa 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001cce:	f005 fc27 	bl	8007520 <HAL_UARTEx_DisableFifoMode>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001cd8:	f7ff fcf2 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200001c0 	.word	0x200001c0
 8001ce4:	40004400 	.word	0x40004400
 8001ce8:	000186a0 	.word	0x000186a0

08001cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0b0      	sub	sp, #192	; 0xc0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	2294      	movs	r2, #148	; 0x94
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f005 ff51 	bl	8007bb4 <memset>
  if(uartHandle->Instance==LPUART1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7a      	ldr	r2, [pc, #488]	; (8001f00 <HAL_UART_MspInit+0x214>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d13e      	bne.n	8001d9a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d24:	f107 0318 	add.w	r3, r7, #24
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 f985 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d34:	f7ff fcc4 	bl	80016c0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d38:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	4a71      	ldr	r2, [pc, #452]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d44:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d50:	4b6c      	ldr	r3, [pc, #432]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	4a6b      	ldr	r2, [pc, #428]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5c:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001d68:	f002 f978 	bl	800405c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001d6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d86:	2308      	movs	r3, #8
 8001d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d90:	4619      	mov	r1, r3
 8001d92:	485d      	ldr	r0, [pc, #372]	; (8001f08 <HAL_UART_MspInit+0x21c>)
 8001d94:	f001 fe4c 	bl	8003a30 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d98:	e0ad      	b.n	8001ef6 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a5b      	ldr	r2, [pc, #364]	; (8001f0c <HAL_UART_MspInit+0x220>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	f040 80a8 	bne.w	8001ef6 <HAL_UART_MspInit+0x20a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dae:	f107 0318 	add.w	r3, r7, #24
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f940 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001dbe:	f7ff fc7f 	bl	80016c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a49      	ldr	r2, [pc, #292]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_UART_MspInit+0x218>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001df2:	230c      	movs	r3, #12
 8001df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e14:	4619      	mov	r1, r3
 8001e16:	483e      	ldr	r0, [pc, #248]	; (8001f10 <HAL_UART_MspInit+0x224>)
 8001e18:	f001 fe0a 	bl	8003a30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <HAL_UART_MspInit+0x22c>)
 8001e20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e24:	221b      	movs	r2, #27
 8001e26:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e28:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2e:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e48:	2220      	movs	r2, #32
 8001e4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e52:	4830      	ldr	r0, [pc, #192]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e54:	f001 fa3e 	bl	80032d4 <HAL_DMA_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001e5e:	f7ff fc2f 	bl	80016c0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e62:	2110      	movs	r1, #16
 8001e64:	482b      	ldr	r0, [pc, #172]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e66:	f001 fd13 	bl	8003890 <HAL_DMA_ConfigChannelAttributes>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001e70:	f7ff fc26 	bl	80016c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <HAL_UART_MspInit+0x228>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_UART_MspInit+0x234>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001e8a:	221c      	movs	r2, #28
 8001e8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001e90:	2210      	movs	r2, #16
 8001e92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001eb8:	4818      	ldr	r0, [pc, #96]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001eba:	f001 fa0b 	bl	80032d4 <HAL_DMA_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001ec4:	f7ff fbfc 	bl	80016c0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ec8:	2110      	movs	r1, #16
 8001eca:	4814      	ldr	r0, [pc, #80]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001ecc:	f001 fce0 	bl	8003890 <HAL_DMA_ConfigChannelAttributes>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8001ed6:	f7ff fbf3 	bl	80016c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001ede:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_UART_MspInit+0x230>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	203e      	movs	r0, #62	; 0x3e
 8001eec:	f001 f9bd 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ef0:	203e      	movs	r0, #62	; 0x3e
 8001ef2:	f001 f9d4 	bl	800329e <HAL_NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	37c0      	adds	r7, #192	; 0xc0
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40008000 	.word	0x40008000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	42021800 	.word	0x42021800
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	42020000 	.word	0x42020000
 8001f14:	20000254 	.word	0x20000254
 8001f18:	40020008 	.word	0x40020008
 8001f1c:	200002bc 	.word	0x200002bc
 8001f20:	4002001c 	.word	0x4002001c

08001f24 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <MX_USB_PCD_Init+0x4c>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f30:	2208      	movs	r2, #8
 8001f32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_USB_PCD_Init+0x48>)
 8001f5a:	f001 ff01 	bl	8003d60 <HAL_PCD_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001f64:	f7ff fbac 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000324 	.word	0x20000324
 8001f70:	4000d400 	.word	0x4000d400

08001f74 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0ae      	sub	sp, #184	; 0xb8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	2294      	movs	r2, #148	; 0x94
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f005 fe0d 	bl	8007bb4 <memset>
  if(pcdHandle->Instance==USB)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_PCD_MspInit+0xb4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d13d      	bne.n	8002020 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f003 f83f 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fc0:	f7ff fb7e 	bl	80016c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_PCD_MspInit+0xb8>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_PCD_MspInit+0xb8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_PCD_MspInit+0xb8>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002000:	4619      	mov	r1, r3
 8002002:	480b      	ldr	r0, [pc, #44]	; (8002030 <HAL_PCD_MspInit+0xbc>)
 8002004:	f001 fd14 	bl	8003a30 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_PCD_MspInit+0xb8>)
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_PCD_MspInit+0xb8>)
 800200e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002012:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_PCD_MspInit+0xb8>)
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002020:	bf00      	nop
 8002022:	37b8      	adds	r7, #184	; 0xb8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	4000d400 	.word	0x4000d400
 800202c:	40021000 	.word	0x40021000
 8002030:	42020000 	.word	0x42020000

08002034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002038:	f7ff fc94 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800203c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800203e:	e003      	b.n	8002048 <LoopCopyDataInit>

08002040 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002042:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002044:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002046:	3104      	adds	r1, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002048:	480a      	ldr	r0, [pc, #40]	; (8002074 <LoopForever+0xa>)
	ldr	r3, =_edata
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <LoopForever+0xe>)
	adds	r2, r0, r1
 800204c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800204e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002050:	d3f6      	bcc.n	8002040 <CopyDataInit>
	ldr	r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002054:	e002      	b.n	800205c <LoopFillZerobss>

08002056 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002056:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002058:	f842 3b04 	str.w	r3, [r2], #4

0800205c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <LoopForever+0x16>)
	cmp	r2, r3
 800205e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002060:	d3f9      	bcc.n	8002056 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002062:	f005 fd7b 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002066:	f7ff fa99 	bl	800159c <main>

0800206a <LoopForever>:

LoopForever:
    b LoopForever
 800206a:	e7fe      	b.n	800206a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800206c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002070:	08007e58 	.word	0x08007e58
	ldr	r0, =_sdata
 8002074:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002078:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800207c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002080:	20000630 	.word	0x20000630

08002084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_2_IRQHandler>

08002086 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002090:	2004      	movs	r0, #4
 8002092:	f001 f8df 	bl	8003254 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002096:	f7ff fc77 	bl	8001988 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f80e 	bl	80020bc <HAL_InitTick>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	e001      	b.n	80020b0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ac:	f7ff fb96 	bl	80017dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_InitTick+0x6c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d023      	beq.n	8002118 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_InitTick+0x70>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_InitTick+0x6c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f001 f8e7 	bl	80032ba <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b07      	cmp	r3, #7
 80020f6:	d809      	bhi.n	800210c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f001 f8b3 	bl	800326a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_InitTick+0x74>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e007      	b.n	800211c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e004      	b.n	800211c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e001      	b.n	800211c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000008 	.word	0x20000008
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008
 8002158:	20000618 	.word	0x20000618

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000618 	.word	0x20000618

08002174 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3360      	adds	r3, #96	; 0x60
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <LL_ADC_SetOffset+0x44>)
 80021fe:	4013      	ands	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	4313      	orrs	r3, r2
 800220c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	03fff000 	.word	0x03fff000

08002224 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3360      	adds	r3, #96	; 0x60
 8002232:	461a      	mov	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3360      	adds	r3, #96	; 0x60
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	431a      	orrs	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	615a      	str	r2, [r3, #20]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3330      	adds	r3, #48	; 0x30
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	4413      	add	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	211f      	movs	r1, #31
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 011f 	and.w	r1, r3, #31
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	431a      	orrs	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3314      	adds	r3, #20
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	0e5b      	lsrs	r3, r3, #25
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	4413      	add	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	0d1b      	lsrs	r3, r3, #20
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2107      	movs	r1, #7
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	401a      	ands	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	0d1b      	lsrs	r3, r3, #20
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	431a      	orrs	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0318 	and.w	r3, r3, #24
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002380:	40d9      	lsrs	r1, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	400b      	ands	r3, r1
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	0007ffff 	.word	0x0007ffff

080023a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6093      	str	r3, [r2, #8]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023dc:	d101      	bne.n	80023e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002404:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800242c:	d101      	bne.n	8002432 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <LL_ADC_IsEnabled+0x18>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_ADC_IsEnabled+0x1a>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d101      	bne.n	800247e <LL_ADC_REG_IsConversionOngoing+0x18>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b08      	cmp	r3, #8
 800249e:	d101      	bne.n	80024a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e12e      	b.n	800272c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7fe ff3f 	bl	8001360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff67 	bl	80023c8 <LL_ADC_IsDeepPowerDownEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff4d 	bl	80023a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff82 	bl	8002418 <LL_ADC_IsInternalRegulatorEnabled>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d115      	bne.n	8002546 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff66 	bl	80023f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002524:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_ADC_Init+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	4a83      	ldr	r2, [pc, #524]	; (8002738 <HAL_ADC_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002538:	e002      	b.n	8002540 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3b01      	subs	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff64 	bl	8002418 <LL_ADC_IsInternalRegulatorEnabled>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff75 	bl	8002466 <LL_ADC_REG_IsConversionOngoing>
 800257c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 80c7 	bne.w	800271a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 80c3 	bne.w	800271a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800259c:	f043 0202 	orr.w	r2, r3, #2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff49 	bl	8002440 <LL_ADC_IsEnabled>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d110      	bne.n	80025d6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b4:	4861      	ldr	r0, [pc, #388]	; (800273c <HAL_ADC_Init+0x288>)
 80025b6:	f7ff ff43 	bl	8002440 <LL_ADC_IsEnabled>
 80025ba:	4604      	mov	r4, r0
 80025bc:	4860      	ldr	r0, [pc, #384]	; (8002740 <HAL_ADC_Init+0x28c>)
 80025be:	f7ff ff3f 	bl	8002440 <LL_ADC_IsEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4323      	orrs	r3, r4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4619      	mov	r1, r3
 80025d0:	485c      	ldr	r0, [pc, #368]	; (8002744 <HAL_ADC_Init+0x290>)
 80025d2:	f7ff fdcf 	bl	8002174 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7e5b      	ldrb	r3, [r3, #25]
 80025da:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025e0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025e6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025ec:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	3b01      	subs	r3, #1
 800260a:	045b      	lsls	r3, r3, #17
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b44      	ldr	r3, [pc, #272]	; (8002748 <HAL_ADC_Init+0x294>)
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	69b9      	ldr	r1, [r7, #24]
 800263e:	430b      	orrs	r3, r1
 8002640:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff20 	bl	800248c <LL_ADC_INJ_IsConversionOngoing>
 800264c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d140      	bne.n	80026d6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13d      	bne.n	80026d6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7e1b      	ldrb	r3, [r3, #24]
 8002662:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002664:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800266c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267c:	f023 0306 	bic.w	r3, r3, #6
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	69b9      	ldr	r1, [r7, #24]
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002690:	2b01      	cmp	r3, #1
 8002692:	d118      	bne.n	80026c6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026b6:	430a      	orrs	r2, r1
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	611a      	str	r2, [r3, #16]
 80026c4:	e007      	b.n	80026d6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10c      	bne.n	80026f8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f023 010f 	bic.w	r1, r3, #15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
 80026f6:	e007      	b.n	8002708 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 020f 	bic.w	r2, r2, #15
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f023 0303 	bic.w	r3, r3, #3
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	659a      	str	r2, [r3, #88]	; 0x58
 8002718:	e007      	b.n	800272a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800272a:	7ffb      	ldrb	r3, [r7, #31]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3724      	adds	r7, #36	; 0x24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	20000000 	.word	0x20000000
 8002738:	053e2d63 	.word	0x053e2d63
 800273c:	42028000 	.word	0x42028000
 8002740:	42028100 	.word	0x42028100
 8002744:	42028300 	.word	0x42028300
 8002748:	fff0c007 	.word	0xfff0c007

0800274c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b0b7      	sub	sp, #220	; 0xdc
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x22>
 800276a:	2302      	movs	r3, #2
 800276c:	e3c1      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x7a6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fe73 	bl	8002466 <LL_ADC_REG_IsConversionOngoing>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 83a6 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	f7ff fd89 	bl	80022ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fe61 	bl	8002466 <LL_ADC_REG_IsConversionOngoing>
 80027a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fe6d 	bl	800248c <LL_ADC_INJ_IsConversionOngoing>
 80027b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 81c1 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 81bc 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d2:	d10f      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	4619      	mov	r1, r3
 80027e0:	f7ff fd90 	bl	8002304 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fd4a 	bl	8002286 <LL_ADC_SetSamplingTimeCommonConfig>
 80027f2:	e00e      	b.n	8002812 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6819      	ldr	r1, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	461a      	mov	r2, r3
 8002802:	f7ff fd7f 	bl	8002304 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fd3a 	bl	8002286 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00a      	beq.n	800284a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6919      	ldr	r1, [r3, #16]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002844:	f7ff fcca 	bl	80021dc <LL_ADC_SetOffset>
 8002848:	e17b      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fce7 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x12a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fcdc 	bl	8002224 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	e01e      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x168>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fcd1 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800289c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e004      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80028a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x180>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	e018      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1b2>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e004      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80028f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028fe:	429a      	cmp	r2, r3
 8002900:	d106      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fca0 	bl	8002250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fc84 	bl	8002224 <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1f0>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fc79 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 021f 	and.w	r2, r3, #31
 800293a:	e01e      	b.n	800297a <HAL_ADC_ConfigChannel+0x22e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fc6e 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800295a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800295e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e004      	b.n	8002978 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800296e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x246>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	e018      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x278>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e004      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80029ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d106      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fc3d 	bl	8002250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fc21 	bl	8002224 <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x2b6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2102      	movs	r1, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fc16 	bl	8002224 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	e01e      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x2f4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fc0b 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x30c>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	e016      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x33a>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e004      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d106      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2102      	movs	r1, #2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fbdc 	bl	8002250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2103      	movs	r1, #3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fbc0 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x378>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fbb5 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 021f 	and.w	r2, r3, #31
 8002ac2:	e017      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x3a8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2103      	movs	r1, #3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fbaa 	bl	8002224 <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ade:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x3c0>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	e011      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x3e4>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fb87 	bl	8002250 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fc7a 	bl	8002440 <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 81c9 	bne.w	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	461a      	mov	r2, r3
 8002b62:	f7ff fbfb 	bl	800235c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a8f      	ldr	r2, [pc, #572]	; (8002da8 <HAL_ADC_ConfigChannel+0x65c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f040 8131 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x44e>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	bf94      	ite	ls
 8002b92:	2301      	movls	r3, #1
 8002b94:	2300      	movhi	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e019      	b.n	8002bce <HAL_ADC_ConfigChannel+0x482>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e003      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	bf94      	ite	ls
 8002bc8:	2301      	movls	r3, #1
 8002bca:	2300      	movhi	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d079      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x4a2>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	3301      	adds	r3, #1
 8002be6:	069b      	lsls	r3, r3, #26
 8002be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bec:	e015      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x4ce>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e003      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	069b      	lsls	r3, r3, #26
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x4ee>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2101      	movs	r1, #1
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	e017      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x51e>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	ea42 0103 	orr.w	r1, r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x544>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	e018      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x576>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	e081      	b.n	8002dca <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x596>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	3301      	adds	r3, #1
 8002cda:	069b      	lsls	r3, r3, #26
 8002cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce0:	e015      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x5c2>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e003      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	069b      	lsls	r3, r3, #26
 8002d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x5e2>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	e017      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x612>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x63e>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	3301      	adds	r3, #1
 8002d76:	f003 021f 	and.w	r2, r3, #31
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b1e      	subs	r3, #30
 8002d82:	051b      	lsls	r3, r3, #20
 8002d84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d88:	e01e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x67c>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	613b      	str	r3, [r7, #16]
  return result;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e006      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x668>
 8002da6:	bf00      	nop
 8002da8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 021f 	and.w	r2, r3, #31
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b1e      	subs	r3, #30
 8002dc2:	051b      	lsls	r3, r3, #20
 8002dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6892      	ldr	r2, [r2, #8]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7ff fa98 	bl	8002304 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b48      	ldr	r3, [pc, #288]	; (8002efc <HAL_ADC_ConfigChannel+0x7b0>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8082 	beq.w	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de2:	4847      	ldr	r0, [pc, #284]	; (8002f00 <HAL_ADC_ConfigChannel+0x7b4>)
 8002de4:	f7ff f9ec 	bl	80021c0 <LL_ADC_GetCommonPathInternalCh>
 8002de8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dec:	4845      	ldr	r0, [pc, #276]	; (8002f04 <HAL_ADC_ConfigChannel+0x7b8>)
 8002dee:	f7ff fb27 	bl	8002440 <LL_ADC_IsEnabled>
 8002df2:	4604      	mov	r4, r0
 8002df4:	4844      	ldr	r0, [pc, #272]	; (8002f08 <HAL_ADC_ConfigChannel+0x7bc>)
 8002df6:	f7ff fb23 	bl	8002440 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4323      	orrs	r3, r4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d15e      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a41      	ldr	r2, [pc, #260]	; (8002f0c <HAL_ADC_ConfigChannel+0x7c0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d127      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d121      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a39      	ldr	r2, [pc, #228]	; (8002f04 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d161      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4834      	ldr	r0, [pc, #208]	; (8002f00 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e2e:	f7ff f9b4 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e32:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	4a36      	ldr	r2, [pc, #216]	; (8002f14 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002e4a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e4c:	e002      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f9      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e5a:	e044      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d113      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d134      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e84:	4619      	mov	r1, r3
 8002e86:	481e      	ldr	r0, [pc, #120]	; (8002f00 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e88:	f7ff f987 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8c:	e02b      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_ADC_ConfigChannel+0x7d0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d126      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d120      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <HAL_ADC_ConfigChannel+0x7b8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d11b      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4811      	ldr	r0, [pc, #68]	; (8002f00 <HAL_ADC_ConfigChannel+0x7b4>)
 8002eba:	f7ff f96e 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
 8002ebe:	e012      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ed2:	e008      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002eee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	37dc      	adds	r7, #220	; 0xdc
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	80080000 	.word	0x80080000
 8002f00:	42028300 	.word	0x42028300
 8002f04:	42028000 	.word	0x42028000
 8002f08:	42028100 	.word	0x42028100
 8002f0c:	c7520000 	.word	0xc7520000
 8002f10:	20000000 	.word	0x20000000
 8002f14:	053e2d63 	.word	0x053e2d63
 8002f18:	cb840000 	.word	0xcb840000
 8002f1c:	80000001 	.word	0x80000001

08002f20 <LL_ADC_IsEnabled>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <LL_ADC_IsEnabled+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_ADC_IsEnabled+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b0a1      	sub	sp, #132	; 0x84
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e089      	b.n	800309e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f92:	2300      	movs	r3, #0
 8002f94:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f96:	2300      	movs	r3, #0
 8002f98:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a42      	ldr	r2, [pc, #264]	; (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d102      	bne.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fa4:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e001      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e068      	b.n	800309e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ffb9 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 8002fd4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ffb3 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d14a      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d147      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002fee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d027      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800300a:	035b      	lsls	r3, r3, #13
 800300c:	430b      	orrs	r3, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003012:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003014:	4824      	ldr	r0, [pc, #144]	; (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003016:	f7ff ff83 	bl	8002f20 <LL_ADC_IsEnabled>
 800301a:	4604      	mov	r4, r0
 800301c:	4823      	ldr	r0, [pc, #140]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800301e:	f7ff ff7f 	bl	8002f20 <LL_ADC_IsEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	4323      	orrs	r3, r4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d132      	bne.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800302a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003032:	f023 030f 	bic.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	6892      	ldr	r2, [r2, #8]
 800303e:	430a      	orrs	r2, r1
 8003040:	431a      	orrs	r2, r3
 8003042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003044:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003046:	e023      	b.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003054:	4814      	ldr	r0, [pc, #80]	; (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003056:	f7ff ff63 	bl	8002f20 <LL_ADC_IsEnabled>
 800305a:	4604      	mov	r4, r0
 800305c:	4813      	ldr	r0, [pc, #76]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800305e:	f7ff ff5f 	bl	8002f20 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	4323      	orrs	r3, r4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d112      	bne.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003072:	f023 030f 	bic.w	r3, r3, #15
 8003076:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003078:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800307a:	e009      	b.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800308e:	e000      	b.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003090:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800309a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3784      	adds	r7, #132	; 0x84
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	42028000 	.word	0x42028000
 80030ac:	42028100 	.word	0x42028100
 80030b0:	42028300 	.word	0x42028300

080030b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	60d3      	str	r3, [r2, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <__NVIC_GetPriorityGrouping+0x18>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f003 0307 	and.w	r3, r3, #7
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0b      	blt.n	8003142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <__NVIC_EnableIRQ+0x38>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2001      	movs	r0, #1
 800313a:	fa00 f202 	lsl.w	r2, r0, r2
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db0a      	blt.n	800317e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	490c      	ldr	r1, [pc, #48]	; (80031a0 <__NVIC_SetPriority+0x4c>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	0152      	lsls	r2, r2, #5
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	440b      	add	r3, r1
 8003178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800317c:	e00a      	b.n	8003194 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <__NVIC_SetPriority+0x50>)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3b04      	subs	r3, #4
 800318c:	0152      	lsls	r2, r2, #5
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	440b      	add	r3, r1
 8003192:	761a      	strb	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	bf28      	it	cs
 80031c6:	2303      	movcs	r3, #3
 80031c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3303      	adds	r3, #3
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <NVIC_EncodePriority+0x30>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3b04      	subs	r3, #4
 80031d6:	e000      	b.n	80031da <NVIC_EncodePriority+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	401a      	ands	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	4313      	orrs	r3, r2
         );
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003220:	d301      	bcc.n	8003226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003222:	2301      	movs	r3, #1
 8003224:	e00f      	b.n	8003246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <SysTick_Config+0x40>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322e:	2107      	movs	r1, #7
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	f7ff ff8e 	bl	8003154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <SysTick_Config+0x40>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <SysTick_Config+0x40>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010

08003254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff29 	bl	80030b4 <__NVIC_SetPriorityGrouping>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003278:	f7ff ff40 	bl	80030fc <__NVIC_GetPriorityGrouping>
 800327c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f7ff ff90 	bl	80031a8 <NVIC_EncodePriority>
 8003288:	4602      	mov	r2, r0
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff5f 	bl	8003154 <__NVIC_SetPriority>
}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff33 	bl	8003118 <__NVIC_EnableIRQ>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffa4 	bl	8003210 <SysTick_Config>
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e08d      	b.n	8003402 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_DMA_Init+0x138>)
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d80f      	bhi.n	8003312 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b45      	ldr	r3, [pc, #276]	; (8003410 <HAL_DMA_Init+0x13c>)
 80032fa:	4413      	add	r3, r2
 80032fc:	4a45      	ldr	r2, [pc, #276]	; (8003414 <HAL_DMA_Init+0x140>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a42      	ldr	r2, [pc, #264]	; (8003418 <HAL_DMA_Init+0x144>)
 800330e:	649a      	str	r2, [r3, #72]	; 0x48
 8003310:	e00e      	b.n	8003330 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_DMA_Init+0x148>)
 800331a:	4413      	add	r3, r2
 800331c:	4a3d      	ldr	r2, [pc, #244]	; (8003414 <HAL_DMA_Init+0x140>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	009a      	lsls	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a3c      	ldr	r2, [pc, #240]	; (8003420 <HAL_DMA_Init+0x14c>)
 800332e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8003346:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800334a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 faf2 	bl	800396c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003390:	d102      	bne.n	8003398 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033ac:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d010      	beq.n	80033d8 <HAL_DMA_Init+0x104>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d80c      	bhi.n	80033d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fb12 	bl	80039e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e008      	b.n	80033ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020407 	.word	0x40020407
 8003410:	bffdfff8 	.word	0xbffdfff8
 8003414:	cccccccd 	.word	0xcccccccd
 8003418:	40020000 	.word	0x40020000
 800341c:	bffdfbf8 	.word	0xbffdfbf8
 8003420:	40020400 	.word	0x40020400

08003424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_DMA_Start_IT+0x20>
 8003440:	2302      	movs	r3, #2
 8003442:	e066      	b.n	8003512 <HAL_DMA_Start_IT+0xee>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d155      	bne.n	8003504 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fa37 	bl	80038f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 020e 	orr.w	r2, r2, #14
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e00f      	b.n	80034bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0204 	bic.w	r2, r2, #4
 80034aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 020a 	orr.w	r2, r2, #10
 80034ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e005      	b.n	8003510 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800350c:	2302      	movs	r3, #2
 800350e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003510:	7dfb      	ldrb	r3, [r7, #23]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d008      	beq.n	8003544 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2204      	movs	r2, #4
 8003536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e040      	b.n	80035c6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 020e 	bic.w	r2, r2, #14
 8003552:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003578:	f003 021c 	and.w	r2, r3, #28
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003590:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80035b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d005      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e047      	b.n	8003686 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 020e 	bic.w	r2, r2, #14
 8003604:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	f003 021c 	and.w	r2, r3, #28
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003642:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800365a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003664:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	4798      	blx	r3
    }
  }
  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	f003 031c 	and.w	r3, r3, #28
 80036b0:	2204      	movs	r2, #4
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d053      	beq.n	8003764 <HAL_DMA_IRQHandler+0xd4>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d04e      	beq.n	8003764 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d024      	beq.n	800371e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d8:	f003 021c 	and.w	r2, r3, #28
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	2104      	movs	r1, #4
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80c0 	beq.w	8003880 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003708:	e0ba      	b.n	8003880 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80b6 	beq.w	8003880 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800371c:	e0b0      	b.n	8003880 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003740:	f003 021c 	and.w	r2, r3, #28
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	2104      	movs	r1, #4
 800374a:	fa01 f202 	lsl.w	r2, r1, r2
 800374e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8093 	beq.w	8003880 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003762:	e08d      	b.n	8003880 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	f003 031c 	and.w	r3, r3, #28
 800376c:	2202      	movs	r2, #2
 800376e:	409a      	lsls	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d04e      	beq.n	8003816 <HAL_DMA_IRQHandler+0x186>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d049      	beq.n	8003816 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d06e      	beq.n	8003884 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80037ae:	e069      	b.n	8003884 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d065      	beq.n	8003884 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80037c0:	e060      	b.n	8003884 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020a 	bic.w	r2, r2, #10
 80037de:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ec:	f003 021c 	and.w	r2, r3, #28
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f4:	2102      	movs	r1, #2
 80037f6:	fa01 f202 	lsl.w	r2, r1, r2
 80037fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003814:	e036      	b.n	8003884 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	f003 031c 	and.w	r3, r3, #28
 800381e:	2208      	movs	r2, #8
 8003820:	409a      	lsls	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d02e      	beq.n	8003888 <HAL_DMA_IRQHandler+0x1f8>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d029      	beq.n	8003888 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 020e 	bic.w	r2, r2, #14
 8003842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	f003 021c 	and.w	r2, r3, #28
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800387e:	e002      	b.n	8003886 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003884:	bf00      	nop
  return;
 8003886:	bf00      	nop
 8003888:	bf00      	nop
}
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	72fb      	strb	r3, [r7, #11]
    return status;
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	e01b      	b.n	80038e4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e003      	b.n	80038da <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038d8:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]

  return status;
 80038e2:	7afb      	ldrb	r3, [r7, #11]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003906:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003918:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	f003 021c 	and.w	r2, r3, #28
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	2101      	movs	r1, #1
 8003928:	fa01 f202 	lsl.w	r2, r1, r2
 800392c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b10      	cmp	r3, #16
 800393c:	d108      	bne.n	8003950 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800394e:	e007      	b.n	8003960 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800397c:	429a      	cmp	r2, r3
 800397e:	d80a      	bhi.n	8003996 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800398c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6513      	str	r3, [r2, #80]	; 0x50
 8003994:	e007      	b.n	80039a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039a0:	4413      	add	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	3b08      	subs	r3, #8
 80039ae:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0a      	ldr	r2, [pc, #40]	; (80039e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40020407 	.word	0x40020407
 80039dc:	40020820 	.word	0x40020820
 80039e0:	cccccccd 	.word	0xcccccccd
 80039e4:	40020880 	.word	0x40020880

080039e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	461a      	mov	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2201      	movs	r2, #1
 8003a16:	409a      	lsls	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	1000823f 	.word	0x1000823f
 8003a2c:	40020940 	.word	0x40020940

08003a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a3e:	e158      	b.n	8003cf2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 814a 	beq.w	8003cec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d005      	beq.n	8003a70 <HAL_GPIO_Init+0x40>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d130      	bne.n	8003ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0201 	and.w	r2, r3, #1
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d017      	beq.n	8003b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	2203      	movs	r2, #3
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d123      	bne.n	8003b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	08da      	lsrs	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3208      	adds	r2, #8
 8003b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	220f      	movs	r2, #15
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3208      	adds	r2, #8
 8003b5c:	6939      	ldr	r1, [r7, #16]
 8003b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4013      	ands	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0203 	and.w	r2, r3, #3
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80a4 	beq.w	8003cec <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003ba4:	4a5a      	ldr	r2, [pc, #360]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	3318      	adds	r3, #24
 8003bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	220f      	movs	r2, #15
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a52      	ldr	r2, [pc, #328]	; (8003d14 <HAL_GPIO_Init+0x2e4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d025      	beq.n	8003c1c <HAL_GPIO_Init+0x1ec>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a51      	ldr	r2, [pc, #324]	; (8003d18 <HAL_GPIO_Init+0x2e8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d01f      	beq.n	8003c18 <HAL_GPIO_Init+0x1e8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a50      	ldr	r2, [pc, #320]	; (8003d1c <HAL_GPIO_Init+0x2ec>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d019      	beq.n	8003c14 <HAL_GPIO_Init+0x1e4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a4f      	ldr	r2, [pc, #316]	; (8003d20 <HAL_GPIO_Init+0x2f0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_GPIO_Init+0x1e0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a4e      	ldr	r2, [pc, #312]	; (8003d24 <HAL_GPIO_Init+0x2f4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00d      	beq.n	8003c0c <HAL_GPIO_Init+0x1dc>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a4d      	ldr	r2, [pc, #308]	; (8003d28 <HAL_GPIO_Init+0x2f8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <HAL_GPIO_Init+0x1d8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a4c      	ldr	r2, [pc, #304]	; (8003d2c <HAL_GPIO_Init+0x2fc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_GPIO_Init+0x1d4>
 8003c00:	2306      	movs	r3, #6
 8003c02:	e00c      	b.n	8003c1e <HAL_GPIO_Init+0x1ee>
 8003c04:	2307      	movs	r3, #7
 8003c06:	e00a      	b.n	8003c1e <HAL_GPIO_Init+0x1ee>
 8003c08:	2305      	movs	r3, #5
 8003c0a:	e008      	b.n	8003c1e <HAL_GPIO_Init+0x1ee>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e006      	b.n	8003c1e <HAL_GPIO_Init+0x1ee>
 8003c10:	2303      	movs	r3, #3
 8003c12:	e004      	b.n	8003c1e <HAL_GPIO_Init+0x1ee>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e002      	b.n	8003c1e <HAL_GPIO_Init+0x1ee>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_GPIO_Init+0x1ee>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	f002 0203 	and.w	r2, r2, #3
 8003c24:	00d2      	lsls	r2, r2, #3
 8003c26:	4093      	lsls	r3, r2
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003c2e:	4938      	ldr	r1, [pc, #224]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	3318      	adds	r3, #24
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c3c:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c60:	4a2b      	ldr	r2, [pc, #172]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_GPIO_Init+0x2e0>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f47f ae9f 	bne.w	8003a40 <HAL_GPIO_Init+0x10>
  }
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	4002f400 	.word	0x4002f400
 8003d14:	42020000 	.word	0x42020000
 8003d18:	42020400 	.word	0x42020400
 8003d1c:	42020800 	.word	0x42020800
 8003d20:	42020c00 	.word	0x42020c00
 8003d24:	42021000 	.word	0x42021000
 8003d28:	42021400 	.word	0x42021400
 8003d2c:	42021800 	.word	0x42021800

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d4c:	e002      	b.n	8003d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d62:	b08b      	sub	sp, #44	; 0x2c
 8003d64:	af06      	add	r7, sp, #24
 8003d66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0cb      	b.n	8003f0a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe f8f4 	bl	8001f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2203      	movs	r2, #3
 8003d90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f003 fe7d 	bl	8007a98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e040      	b.n	8003e26 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	3301      	adds	r3, #1
 8003db6:	2201      	movs	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	440b      	add	r3, r1
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	3303      	adds	r3, #3
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3338      	adds	r3, #56	; 0x38
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	440b      	add	r3, r1
 8003e06:	333c      	adds	r3, #60	; 0x3c
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	3340      	adds	r3, #64	; 0x40
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3b9      	bcc.n	8003da4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e044      	b.n	8003ec0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	440b      	add	r3, r1
 8003e70:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d3b5      	bcc.n	8003e36 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	687e      	ldr	r6, [r7, #4]
 8003ed2:	466d      	mov	r5, sp
 8003ed4:	f106 0410 	add.w	r4, r6, #16
 8003ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	1d33      	adds	r3, r6, #4
 8003ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee4:	6838      	ldr	r0, [r7, #0]
 8003ee6:	f003 fdf2 	bl	8007ace <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f805 	bl	8003f12 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f12 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40007000 	.word	0x40007000

08003f88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40007000 	.word	0x40007000

08003fa4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003fac:	4b27      	ldr	r3, [pc, #156]	; (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fb4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003fb6:	f000 f861 	bl	800407c <HAL_PWREx_SMPS_GetEffectiveMode>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d101      	bne.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e03e      	b.n	8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d101      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e035      	b.n	8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d101      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e02f      	b.n	8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003fec:	4917      	ldr	r1, [pc, #92]	; (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003ff4:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	09db      	lsrs	r3, r3, #7
 8004002:	2232      	movs	r2, #50	; 0x32
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	08db      	lsrs	r3, r3, #3
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004014:	e002      	b.n	800401c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b01      	subs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004028:	d102      	bne.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f2      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403c:	d101      	bne.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e000      	b.n	8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40007000 	.word	0x40007000
 8004050:	20000000 	.word	0x20000000
 8004054:	0a7c5ac5 	.word	0x0a7c5ac5
 8004058:	cccccccd 	.word	0xcccccccd

0800405c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406a:	6053      	str	r3, [r2, #4]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40007000 	.word	0x40007000

0800407c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004082:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004096:	607b      	str	r3, [r7, #4]
 8004098:	e00a      	b.n	80040b0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d103      	bne.n	80040ac <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80040a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	e001      	b.n	80040b0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80040ac:	2300      	movs	r3, #0
 80040ae:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80040b0:	687b      	ldr	r3, [r7, #4]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40007000 	.word	0x40007000

080040c4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f000 bcc2 	b.w	8004a5c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d8:	4b99      	ldr	r3, [pc, #612]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e2:	4b97      	ldr	r3, [pc, #604]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80e9 	beq.w	80042cc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d006      	beq.n	800410e <HAL_RCC_OscConfig+0x4a>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	f040 8083 	bne.w	800420e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d17f      	bne.n	800420e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800410e:	4b8c      	ldr	r3, [pc, #560]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <HAL_RCC_OscConfig+0x64>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f000 bc9a 	b.w	8004a5c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412c:	4b84      	ldr	r3, [pc, #528]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_RCC_OscConfig+0x7e>
 8004138:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004140:	e005      	b.n	800414e <HAL_RCC_OscConfig+0x8a>
 8004142:	4b7f      	ldr	r3, [pc, #508]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414e:	4293      	cmp	r3, r2
 8004150:	d224      	bcs.n	800419c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fe9c 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f000 bc7a 	b.w	8004a5c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004168:	4b75      	ldr	r3, [pc, #468]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a74      	ldr	r2, [pc, #464]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b72      	ldr	r3, [pc, #456]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	496f      	ldr	r1, [pc, #444]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004186:	4b6e      	ldr	r3, [pc, #440]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	496a      	ldr	r1, [pc, #424]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
 800419a:	e026      	b.n	80041ea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800419c:	4b68      	ldr	r3, [pc, #416]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a67      	ldr	r2, [pc, #412]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	f043 0308 	orr.w	r3, r3, #8
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b65      	ldr	r3, [pc, #404]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	4962      	ldr	r1, [pc, #392]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ba:	4b61      	ldr	r3, [pc, #388]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	495d      	ldr	r1, [pc, #372]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fe5b 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f000 bc39 	b.w	8004a5c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041ea:	f000 fe17 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4a54      	ldr	r2, [pc, #336]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80041f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041f4:	4b54      	ldr	r3, [pc, #336]	; (8004348 <HAL_RCC_OscConfig+0x284>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fd ff5f 	bl	80020bc <HAL_InitTick>
 80041fe:	4603      	mov	r3, r0
 8004200:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d060      	beq.n	80042ca <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	f000 bc27 	b.w	8004a5c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d039      	beq.n	800428a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004216:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a49      	ldr	r2, [pc, #292]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004222:	f7fd ff9b 	bl	800215c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004228:	e00f      	b.n	800424a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422a:	f7fd ff97 	bl	800215c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d908      	bls.n	800424a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004238:	4b41      	ldr	r3, [pc, #260]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	f000 bc09 	b.w	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800424a:	4b3d      	ldr	r3, [pc, #244]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0e9      	beq.n	800422a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004256:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a39      	ldr	r2, [pc, #228]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800425c:	f043 0308 	orr.w	r3, r3, #8
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	4934      	ldr	r1, [pc, #208]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004274:	4b32      	ldr	r3, [pc, #200]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	492f      	ldr	r1, [pc, #188]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
 8004288:	e020      	b.n	80042cc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800428a:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004296:	f7fd ff61 	bl	800215c <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800429c:	e00e      	b.n	80042bc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429e:	f7fd ff5d 	bl	800215c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d907      	bls.n	80042bc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042ac:	4b24      	ldr	r3, [pc, #144]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e3cf      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042bc:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ea      	bne.n	800429e <HAL_RCC_OscConfig+0x1da>
 80042c8:	e000      	b.n	80042cc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d07e      	beq.n	80043d6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d005      	beq.n	80042ea <HAL_RCC_OscConfig+0x226>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d10e      	bne.n	8004302 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d10b      	bne.n	8004302 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d06e      	beq.n	80043d4 <HAL_RCC_OscConfig+0x310>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d16a      	bne.n	80043d4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e3ac      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d106      	bne.n	800431a <HAL_RCC_OscConfig+0x256>
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e024      	b.n	8004364 <HAL_RCC_OscConfig+0x2a0>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004322:	d113      	bne.n	800434c <HAL_RCC_OscConfig+0x288>
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a05      	ldr	r2, [pc, #20]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 800432a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a02      	ldr	r2, [pc, #8]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e012      	b.n	8004364 <HAL_RCC_OscConfig+0x2a0>
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	20000000 	.word	0x20000000
 8004348:	20000004 	.word	0x20000004
 800434c:	4b8b      	ldr	r3, [pc, #556]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a8a      	ldr	r2, [pc, #552]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b88      	ldr	r3, [pc, #544]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a87      	ldr	r2, [pc, #540]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d019      	beq.n	80043a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd fef6 	bl	800215c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004372:	e00e      	b.n	8004392 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7fd fef2 	bl	800215c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d907      	bls.n	8004392 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004382:	4b7e      	ldr	r3, [pc, #504]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e364      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004392:	4b7a      	ldr	r3, [pc, #488]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ea      	beq.n	8004374 <HAL_RCC_OscConfig+0x2b0>
 800439e:	e01a      	b.n	80043d6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fd fedc 	bl	800215c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a6:	e00e      	b.n	80043c6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd fed8 	bl	800215c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d907      	bls.n	80043c6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b6:	4b71      	ldr	r3, [pc, #452]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e34a      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ea      	bne.n	80043a8 <HAL_RCC_OscConfig+0x2e4>
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06c      	beq.n	80044bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_OscConfig+0x330>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d116      	bne.n	8004422 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f4:	4b61      	ldr	r3, [pc, #388]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_OscConfig+0x348>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e327      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b5b      	ldr	r3, [pc, #364]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	4958      	ldr	r1, [pc, #352]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004420:	e04c      	b.n	80044bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d029      	beq.n	800447e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442a:	4b54      	ldr	r3, [pc, #336]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a53      	ldr	r2, [pc, #332]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fd fe91 	bl	800215c <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443c:	e00e      	b.n	800445c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443e:	f7fd fe8d 	bl	800215c <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d907      	bls.n	800445c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444c:	4b4b      	ldr	r3, [pc, #300]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e2ff      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800445c:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ea      	beq.n	800443e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004468:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	4941      	ldr	r1, [pc, #260]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
 800447c:	e01e      	b.n	80044bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447e:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3e      	ldr	r2, [pc, #248]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fd fe67 	bl	800215c <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004490:	e00e      	b.n	80044b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004492:	f7fd fe63 	bl	800215c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d907      	bls.n	80044b0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a0:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e2d5      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b0:	4b32      	ldr	r3, [pc, #200]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ea      	bne.n	8004492 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d062      	beq.n	800458e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d038      	beq.n	8004542 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d108      	bne.n	80044ea <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80044d8:	4b28      	ldr	r3, [pc, #160]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044de:	4a27      	ldr	r2, [pc, #156]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	f023 0310 	bic.w	r3, r3, #16
 80044e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80044e8:	e007      	b.n	80044fa <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f043 0310 	orr.w	r3, r3, #16
 80044f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004500:	4a1e      	ldr	r2, [pc, #120]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd fe27 	bl	800215c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004510:	e00f      	b.n	8004532 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004512:	f7fd fe23 	bl	800215c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b07      	cmp	r3, #7
 800451e:	d908      	bls.n	8004532 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004520:	4b16      	ldr	r3, [pc, #88]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e294      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0e8      	beq.n	8004512 <HAL_RCC_OscConfig+0x44e>
 8004540:	e025      	b.n	800458e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004542:	4b0e      	ldr	r3, [pc, #56]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 8004544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004548:	4a0c      	ldr	r2, [pc, #48]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fe03 	bl	800215c <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004558:	e012      	b.n	8004580 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455a:	f7fd fdff 	bl	800215c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b07      	cmp	r3, #7
 8004566:	d90b      	bls.n	8004580 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <HAL_RCC_OscConfig+0x4b8>)
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e270      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004580:	4ba8      	ldr	r3, [pc, #672]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 812d 	beq.w	80047f6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459c:	2300      	movs	r3, #0
 800459e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045a0:	4ba0      	ldr	r3, [pc, #640]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ac:	4b9d      	ldr	r3, [pc, #628]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	4a9c      	ldr	r2, [pc, #624]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6593      	str	r3, [r2, #88]	; 0x58
 80045b8:	4b9a      	ldr	r3, [pc, #616]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c4:	2301      	movs	r3, #1
 80045c6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c8:	4b97      	ldr	r3, [pc, #604]	; (8004828 <HAL_RCC_OscConfig+0x764>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11e      	bne.n	8004612 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d4:	4b94      	ldr	r3, [pc, #592]	; (8004828 <HAL_RCC_OscConfig+0x764>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a93      	ldr	r2, [pc, #588]	; (8004828 <HAL_RCC_OscConfig+0x764>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e0:	f7fd fdbc 	bl	800215c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e6:	e00e      	b.n	8004606 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e8:	f7fd fdb8 	bl	800215c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d907      	bls.n	8004606 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f6:	4b8c      	ldr	r3, [pc, #560]	; (8004828 <HAL_RCC_OscConfig+0x764>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e22a      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004606:	4b88      	ldr	r3, [pc, #544]	; (8004828 <HAL_RCC_OscConfig+0x764>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ea      	beq.n	80045e8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01f      	beq.n	800465e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800462a:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	4a7c      	ldr	r2, [pc, #496]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800463a:	4b7a      	ldr	r3, [pc, #488]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	4a78      	ldr	r2, [pc, #480]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464a:	e018      	b.n	800467e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800464c:	4b75      	ldr	r3, [pc, #468]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	4a74      	ldr	r2, [pc, #464]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800465c:	e00f      	b.n	800467e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800465e:	4b71      	ldr	r3, [pc, #452]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	4a6f      	ldr	r2, [pc, #444]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	4a6b      	ldr	r2, [pc, #428]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d068      	beq.n	8004758 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd fd69 	bl	800215c <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468c:	e011      	b.n	80046b2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fd fd65 	bl	800215c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d908      	bls.n	80046b2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a0:	4b60      	ldr	r3, [pc, #384]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e1d4      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b2:	4b5c      	ldr	r3, [pc, #368]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0e6      	beq.n	800468e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d022      	beq.n	8004712 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046cc:	4b55      	ldr	r3, [pc, #340]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	4a54      	ldr	r2, [pc, #336]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80046dc:	e011      	b.n	8004702 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fd fd3d 	bl	800215c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d908      	bls.n	8004702 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80046f0:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e1ac      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004702:	4b48      	ldr	r3, [pc, #288]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0e6      	beq.n	80046de <HAL_RCC_OscConfig+0x61a>
 8004710:	e068      	b.n	80047e4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004712:	4b44      	ldr	r3, [pc, #272]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	4a42      	ldr	r2, [pc, #264]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004722:	e011      	b.n	8004748 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fd fd1a 	bl	800215c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d908      	bls.n	8004748 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e189      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <HAL_RCC_OscConfig+0x660>
 8004756:	e045      	b.n	80047e4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fd00 	bl	800215c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800475e:	e011      	b.n	8004784 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004760:	f7fd fcfc 	bl	800215c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d908      	bls.n	8004784 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004772:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e16b      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e6      	bne.n	8004760 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d021      	beq.n	80047e4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047a0:	4b20      	ldr	r3, [pc, #128]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80047a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047b0:	e011      	b.n	80047d6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fd fcd3 	bl	800215c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d908      	bls.n	80047d6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e142      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 80047f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d04f      	beq.n	80048a2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d028      	beq.n	800485c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 800480c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004810:	4a04      	ldr	r2, [pc, #16]	; (8004824 <HAL_RCC_OscConfig+0x760>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481a:	f7fd fc9f 	bl	800215c <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004820:	e014      	b.n	800484c <HAL_RCC_OscConfig+0x788>
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800482c:	f7fd fc96 	bl	800215c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d908      	bls.n	800484c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800483a:	4b8a      	ldr	r3, [pc, #552]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 800483c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e107      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800484c:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 800484e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0e8      	beq.n	800482c <HAL_RCC_OscConfig+0x768>
 800485a:	e022      	b.n	80048a2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800485c:	4b81      	ldr	r3, [pc, #516]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 800485e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004862:	4a80      	ldr	r2, [pc, #512]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fd fc76 	bl	800215c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004872:	e00f      	b.n	8004894 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004874:	f7fd fc72 	bl	800215c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d908      	bls.n	8004894 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004882:	4b78      	ldr	r3, [pc, #480]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0e3      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004894:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e8      	bne.n	8004874 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80d7 	beq.w	8004a5a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ac:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	f000 8091 	beq.w	80049dc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d166      	bne.n	8004990 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c2:	4b68      	ldr	r3, [pc, #416]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a67      	ldr	r2, [pc, #412]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80048c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fd fc45 	bl	800215c <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d4:	e00e      	b.n	80048f4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fd fc41 	bl	800215c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d907      	bls.n	80048f4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e4:	4b5f      	ldr	r3, [pc, #380]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0b3      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f4:	4b5b      	ldr	r3, [pc, #364]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ea      	bne.n	80048d6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004900:	4b58      	ldr	r3, [pc, #352]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <HAL_RCC_OscConfig+0x9a4>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004910:	3a01      	subs	r2, #1
 8004912:	0112      	lsls	r2, r2, #4
 8004914:	4311      	orrs	r1, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800491a:	0212      	lsls	r2, r2, #8
 800491c:	4311      	orrs	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004922:	0852      	lsrs	r2, r2, #1
 8004924:	3a01      	subs	r2, #1
 8004926:	0552      	lsls	r2, r2, #21
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800492e:	0852      	lsrs	r2, r2, #1
 8004930:	3a01      	subs	r2, #1
 8004932:	0652      	lsls	r2, r2, #25
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800493a:	06d2      	lsls	r2, r2, #27
 800493c:	430a      	orrs	r2, r1
 800493e:	4949      	ldr	r1, [pc, #292]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004944:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a46      	ldr	r2, [pc, #280]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004950:	4b44      	ldr	r3, [pc, #272]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a43      	ldr	r2, [pc, #268]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd fbfe 	bl	800215c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	e00e      	b.n	8004982 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd fbfa 	bl	800215c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d907      	bls.n	8004982 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004972:	4b3c      	ldr	r3, [pc, #240]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e06c      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004982:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ea      	beq.n	8004964 <HAL_RCC_OscConfig+0x8a0>
 800498e:	e064      	b.n	8004a5a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004990:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a33      	ldr	r2, [pc, #204]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 8004996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd fbde 	bl	800215c <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a2:	e00e      	b.n	80049c2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fd fbda 	bl	800215c <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d907      	bls.n	80049c2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b2:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e04c      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c2:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ea      	bne.n	80049a4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049ce:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	4924      	ldr	r1, [pc, #144]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80049d4:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <HAL_RCC_OscConfig+0x9a8>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	60cb      	str	r3, [r1, #12]
 80049da:	e03e      	b.n	8004a5a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e039      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <HAL_RCC_OscConfig+0x9a0>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f003 0203 	and.w	r2, r3, #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d12c      	bne.n	8004a56 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	3b01      	subs	r3, #1
 8004a08:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d123      	bne.n	8004a56 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d11b      	bne.n	8004a56 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d113      	bne.n	8004a56 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d109      	bne.n	8004a56 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	019f800c 	.word	0x019f800c
 8004a6c:	feeefffc 	.word	0xfeeefffc

08004a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e11c      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b90      	ldr	r3, [pc, #576]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d910      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b8d      	ldr	r3, [pc, #564]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 020f 	bic.w	r2, r3, #15
 8004a9e:	498b      	ldr	r1, [pc, #556]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b89      	ldr	r3, [pc, #548]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e104      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d908      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b7e      	ldr	r3, [pc, #504]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	497b      	ldr	r1, [pc, #492]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8085 	beq.w	8004bfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d11f      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afc:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0da      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b0c:	f000 fa26 	bl	8004f5c <RCC_GetSysClockFreqFromPLLSource>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4a6f      	ldr	r2, [pc, #444]	; (8004cd4 <HAL_RCC_ClockConfig+0x264>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d947      	bls.n	8004baa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b1a:	4b6d      	ldr	r3, [pc, #436]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d141      	bne.n	8004baa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b26:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b2e:	4a68      	ldr	r2, [pc, #416]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e036      	b.n	8004baa <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b44:	4b62      	ldr	r3, [pc, #392]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d115      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b6      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b5c:	4b5c      	ldr	r3, [pc, #368]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0aa      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6c:	4b58      	ldr	r3, [pc, #352]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0a2      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b7c:	f000 f8b0 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4a53      	ldr	r2, [pc, #332]	; (8004cd4 <HAL_RCC_ClockConfig+0x264>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d90f      	bls.n	8004baa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b8a:	4b51      	ldr	r3, [pc, #324]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b96:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b9e:	4a4c      	ldr	r2, [pc, #304]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004baa:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f023 0203 	bic.w	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4946      	ldr	r1, [pc, #280]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbc:	f7fd face 	bl	800215c <HAL_GetTick>
 8004bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	e013      	b.n	8004bec <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc4:	f7fd faca 	bl	800215c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d90a      	bls.n	8004bec <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 020c 	and.w	r2, r3, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e06a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bec:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 020c 	and.w	r2, r3, #12
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d1e2      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c04:	4b32      	ldr	r3, [pc, #200]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4a31      	ldr	r2, [pc, #196]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d208      	bcs.n	8004c3e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2c:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4925      	ldr	r1, [pc, #148]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3e:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d210      	bcs.n	8004c6e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4c:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 020f 	bic.w	r2, r3, #15
 8004c54:	491d      	ldr	r1, [pc, #116]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <HAL_RCC_ClockConfig+0x25c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e029      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	4912      	ldr	r1, [pc, #72]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	490a      	ldr	r1, [pc, #40]	; (8004cd0 <HAL_RCC_ClockConfig+0x260>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cac:	f000 f8b6 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <HAL_RCC_ClockConfig+0x268>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x26c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd f9fe 	bl	80020bc <HAL_InitTick>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	04c4b400 	.word	0x04c4b400
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	20000004 	.word	0x20000004

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf8:	4b44      	ldr	r3, [pc, #272]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x34>
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d121      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d11e      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d14:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d20:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	e005      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d30:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004d3c:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x130>)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d44:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10d      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d102      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d58:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x134>)
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e004      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d64:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d146      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d6e:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d003      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0xb4>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d00d      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0xce>
 8004d92:	e019      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d94:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x134>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d9e:	68d2      	ldr	r2, [r2, #12]
 8004da0:	0a12      	lsrs	r2, r2, #8
 8004da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	617b      	str	r3, [r7, #20]
        break;
 8004dac:	e019      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dae:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004db8:	68d2      	ldr	r2, [r2, #12]
 8004dba:	0a12      	lsrs	r2, r2, #8
 8004dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
        break;
 8004dc6:	e00c      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004dd2:	68d2      	ldr	r2, [r2, #12]
 8004dd4:	0a12      	lsrs	r2, r2, #8
 8004dd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	617b      	str	r3, [r7, #20]
        break;
 8004de0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	0e5b      	lsrs	r3, r3, #25
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	3301      	adds	r3, #1
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3724      	adds	r7, #36	; 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	08007de0 	.word	0x08007de0
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	007a1200 	.word	0x007a1200

08004e1c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004e20:	f7ff ff5e 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x20>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	4903      	ldr	r1, [pc, #12]	; (8004e40 <HAL_RCC_GetHCLKFreq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	08007dc8 	.word	0x08007dc8

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff ffe8 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000
 8004e68:	08007dd8 	.word	0x08007dd8

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffd4 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0adb      	lsrs	r3, r3, #11
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	08007dd8 	.word	0x08007dd8

08004e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ea0:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eac:	f7ff f86c 	bl	8003f88 <HAL_PWREx_GetVoltageRange>
 8004eb0:	6138      	str	r0, [r7, #16]
 8004eb2:	e014      	b.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ecc:	f7ff f85c 	bl	8003f88 <HAL_PWREx_GetVoltageRange>
 8004ed0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ed2:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004edc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eea:	d10b      	bne.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d919      	bls.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2ba0      	cmp	r3, #160	; 0xa0
 8004ef6:	d902      	bls.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ef8:	2302      	movs	r3, #2
 8004efa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004efc:	e013      	b.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004efe:	2301      	movs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004f02:	e010      	b.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d902      	bls.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e00a      	b.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d102      	bne.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f16:	2302      	movs	r3, #2
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e004      	b.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b70      	cmp	r3, #112	; 0x70
 8004f20:	d101      	bne.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f22:	2301      	movs	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f26:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 020f 	bic.w	r2, r3, #15
 8004f2e:	490a      	ldr	r1, [pc, #40]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004f36:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40022000 	.word	0x40022000

08004f5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f62:	4b31      	ldr	r3, [pc, #196]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f6c:	4b2e      	ldr	r3, [pc, #184]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	3301      	adds	r3, #1
 8004f78:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d015      	beq.n	8004fac <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d839      	bhi.n	8004ffa <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d01c      	beq.n	8004fc6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d133      	bne.n	8004ffa <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f92:	4a26      	ldr	r2, [pc, #152]	; (800502c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	4a23      	ldr	r2, [pc, #140]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f9c:	68d2      	ldr	r2, [r2, #12]
 8004f9e:	0a12      	lsrs	r2, r2, #8
 8004fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	613b      	str	r3, [r7, #16]
      break;
 8004faa:	e029      	b.n	8005000 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fac:	4a20      	ldr	r2, [pc, #128]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004fb6:	68d2      	ldr	r2, [r2, #12]
 8004fb8:	0a12      	lsrs	r2, r2, #8
 8004fba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	613b      	str	r3, [r7, #16]
      break;
 8004fc4:	e01c      	b.n	8005000 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc6:	4b18      	ldr	r3, [pc, #96]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d107      	bne.n	8004fe2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd8:	0a1b      	lsrs	r3, r3, #8
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e005      	b.n	8004fee <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004fee:	4a11      	ldr	r2, [pc, #68]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff6:	613b      	str	r3, [r7, #16]
        break;
 8004ff8:	e002      	b.n	8005000 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
      break;
 8004ffe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0e5b      	lsrs	r3, r3, #25
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	3301      	adds	r3, #1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800501a:	683b      	ldr	r3, [r7, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40021000 	.word	0x40021000
 800502c:	00f42400 	.word	0x00f42400
 8005030:	007a1200 	.word	0x007a1200
 8005034:	08007de0 	.word	0x08007de0

08005038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005040:	2300      	movs	r3, #0
 8005042:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005044:	2300      	movs	r3, #0
 8005046:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005050:	2b00      	cmp	r3, #0
 8005052:	d040      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d02a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800505c:	2b80      	cmp	r3, #128	; 0x80
 800505e:	d825      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005060:	2b60      	cmp	r3, #96	; 0x60
 8005062:	d026      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005064:	2b60      	cmp	r3, #96	; 0x60
 8005066:	d821      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d006      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d81d      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005074:	2b20      	cmp	r3, #32
 8005076:	d010      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005078:	e018      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800507a:	4b8f      	ldr	r3, [pc, #572]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	4a8e      	ldr	r2, [pc, #568]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005084:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005086:	e015      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fb56 	bl	8005740 <RCCEx_PLLSAI1_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005098:	e00c      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3320      	adds	r3, #32
 800509e:	2100      	movs	r1, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fc33 	bl	800590c <RCCEx_PLLSAI2_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	77fb      	strb	r3, [r7, #31]
        break;
 80050b0:	e000      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80050b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b4:	7ffb      	ldrb	r3, [r7, #31]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ba:	4b7f      	ldr	r3, [pc, #508]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c8:	497b      	ldr	r1, [pc, #492]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050d0:	e001      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d2:	7ffb      	ldrb	r3, [r7, #31]
 80050d4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d047      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ea:	d030      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f0:	d82a      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f6:	d02a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fc:	d824      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005102:	d008      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005108:	d81e      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	d010      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005114:	e018      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005116:	4b68      	ldr	r3, [pc, #416]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a67      	ldr	r2, [pc, #412]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005122:	e015      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fb08 	bl	8005740 <RCCEx_PLLSAI1_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005134:	e00c      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3320      	adds	r3, #32
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fbe5 	bl	800590c <RCCEx_PLLSAI2_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005146:	e003      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	77fb      	strb	r3, [r7, #31]
        break;
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800514e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005156:	4b58      	ldr	r3, [pc, #352]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800515c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	4954      	ldr	r1, [pc, #336]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80ab 	beq.w	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005180:	2300      	movs	r3, #0
 8005182:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005184:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005190:	4b49      	ldr	r3, [pc, #292]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	4a48      	ldr	r2, [pc, #288]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519a:	6593      	str	r3, [r2, #88]	; 0x58
 800519c:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a42      	ldr	r2, [pc, #264]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051b8:	f7fc ffd0 	bl	800215c <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051be:	e00f      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c0:	f7fc ffcc 	bl	800215c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d908      	bls.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ce:	4b3b      	ldr	r3, [pc, #236]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80051de:	e006      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e0:	4b36      	ldr	r3, [pc, #216]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0e9      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80051ec:	e000      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80051ee:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80051f0:	7ffb      	ldrb	r3, [r7, #31]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d164      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051f6:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005200:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01f      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d019      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005214:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005220:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	4a20      	ldr	r2, [pc, #128]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01f      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fc ff83 	bl	800215c <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005258:	e012      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525a:	f7fc ff7f 	bl	800215c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f241 3288 	movw	r2, #5000	; 0x1388
 8005268:	4293      	cmp	r3, r2
 800526a:	d909      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800526c:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800527e:	e007      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0e5      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005290:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005292:	7ffb      	ldrb	r3, [r7, #31]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10c      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052b0:	e008      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
 80052b4:	77bb      	strb	r3, [r7, #30]
 80052b6:	e005      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	7ffb      	ldrb	r3, [r7, #31]
 80052c2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d105      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ca:	4b9c      	ldr	r3, [pc, #624]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	4a9b      	ldr	r2, [pc, #620]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052e2:	4b96      	ldr	r3, [pc, #600]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f023 0203 	bic.w	r2, r3, #3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	4992      	ldr	r1, [pc, #584]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005304:	4b8d      	ldr	r3, [pc, #564]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f023 020c 	bic.w	r2, r3, #12
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	498a      	ldr	r1, [pc, #552]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005326:	4b85      	ldr	r3, [pc, #532]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	4981      	ldr	r1, [pc, #516]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005348:	4b7c      	ldr	r3, [pc, #496]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	4979      	ldr	r1, [pc, #484]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800536a:	4b74      	ldr	r3, [pc, #464]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005378:	4970      	ldr	r1, [pc, #448]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800538c:	4b6b      	ldr	r3, [pc, #428]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539a:	4968      	ldr	r1, [pc, #416]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ae:	4b63      	ldr	r3, [pc, #396]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	495f      	ldr	r1, [pc, #380]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d0:	4b5a      	ldr	r3, [pc, #360]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	4957      	ldr	r1, [pc, #348]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80053f2:	4b52      	ldr	r3, [pc, #328]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005400:	494e      	ldr	r1, [pc, #312]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d031      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800541c:	d00e      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800541e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005422:	d814      	bhi.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d015      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800542c:	d10f      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542e:	4b43      	ldr	r3, [pc, #268]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	4a42      	ldr	r2, [pc, #264]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005438:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800543a:	e00c      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f97c 	bl	8005740 <RCCEx_PLLSAI1_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	77fb      	strb	r3, [r7, #31]
        break;
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005456:	7ffb      	ldrb	r3, [r7, #31]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800545c:	4b37      	ldr	r3, [pc, #220]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800546a:	4934      	ldr	r1, [pc, #208]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005472:	e001      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	7ffb      	ldrb	r3, [r7, #31]
 8005476:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005484:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005492:	492a      	ldr	r1, [pc, #168]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a6:	4b25      	ldr	r3, [pc, #148]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	4921      	ldr	r1, [pc, #132]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c8:	4b1c      	ldr	r3, [pc, #112]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	4919      	ldr	r1, [pc, #100]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ea:	4b14      	ldr	r3, [pc, #80]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054f0:	f023 0203 	bic.w	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	4910      	ldr	r1, [pc, #64]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d02b      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551a:	4908      	ldr	r1, [pc, #32]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552a:	d109      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a02      	ldr	r2, [pc, #8]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	60d3      	str	r3, [r2, #12]
 8005538:	e014      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005548:	d10c      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	2101      	movs	r1, #1
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f8f5 	bl	8005740 <RCCEx_PLLSAI1_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800555a:	7ffb      	ldrb	r3, [r7, #31]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005560:	7ffb      	ldrb	r3, [r7, #31]
 8005562:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d04a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005578:	d108      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800557a:	4b70      	ldr	r3, [pc, #448]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800557c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005580:	4a6e      	ldr	r2, [pc, #440]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005586:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800558a:	e012      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800558c:	4b6b      	ldr	r3, [pc, #428]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559a:	4968      	ldr	r1, [pc, #416]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055a2:	4b66      	ldr	r3, [pc, #408]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a8:	4a64      	ldr	r2, [pc, #400]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ba:	d10d      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f8bc 	bl	8005740 <RCCEx_PLLSAI1_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80055cc:	7ffb      	ldrb	r3, [r7, #31]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d019      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80055d2:	7ffb      	ldrb	r3, [r7, #31]
 80055d4:	77bb      	strb	r3, [r7, #30]
 80055d6:	e016      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e0:	d106      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e2:	4b56      	ldr	r3, [pc, #344]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	4a55      	ldr	r2, [pc, #340]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ec:	60d3      	str	r3, [r2, #12]
 80055ee:	e00a      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f8:	d105      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055fa:	4b50      	ldr	r3, [pc, #320]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	4a4f      	ldr	r2, [pc, #316]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005604:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d028      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005612:	4b4a      	ldr	r3, [pc, #296]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005620:	4946      	ldr	r1, [pc, #280]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005630:	d106      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005632:	4b42      	ldr	r3, [pc, #264]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	4a41      	ldr	r2, [pc, #260]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800563c:	60d3      	str	r3, [r2, #12]
 800563e:	e011      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005648:	d10c      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	2101      	movs	r1, #1
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f875 	bl	8005740 <RCCEx_PLLSAI1_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800565a:	7ffb      	ldrb	r3, [r7, #31]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005660:	7ffb      	ldrb	r3, [r7, #31]
 8005662:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01e      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005670:	4b32      	ldr	r3, [pc, #200]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005680:	492e      	ldr	r1, [pc, #184]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005692:	d10c      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	2102      	movs	r1, #2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f850 	bl	8005740 <RCCEx_PLLSAI1_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80056a4:	7ffb      	ldrb	r3, [r7, #31]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80056aa:	7ffb      	ldrb	r3, [r7, #31]
 80056ac:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ba:	4b20      	ldr	r3, [pc, #128]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c0:	f023 0204 	bic.w	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ca:	491c      	ldr	r1, [pc, #112]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056de:	4b17      	ldr	r3, [pc, #92]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056e4:	f023 0218 	bic.w	r2, r3, #24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	4913      	ldr	r1, [pc, #76]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d017      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005702:	4b0e      	ldr	r3, [pc, #56]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005712:	490a      	ldr	r1, [pc, #40]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005724:	d105      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	4a04      	ldr	r2, [pc, #16]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800572c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005730:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005732:	7fbb      	ldrb	r3, [r7, #30]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40021000 	.word	0x40021000

08005740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b03      	cmp	r3, #3
 8005754:	d018      	beq.n	8005788 <RCCEx_PLLSAI1_Config+0x48>
 8005756:	2b03      	cmp	r3, #3
 8005758:	d81f      	bhi.n	800579a <RCCEx_PLLSAI1_Config+0x5a>
 800575a:	2b01      	cmp	r3, #1
 800575c:	d002      	beq.n	8005764 <RCCEx_PLLSAI1_Config+0x24>
 800575e:	2b02      	cmp	r3, #2
 8005760:	d009      	beq.n	8005776 <RCCEx_PLLSAI1_Config+0x36>
 8005762:	e01a      	b.n	800579a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005764:	4b65      	ldr	r3, [pc, #404]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d117      	bne.n	80057a0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005774:	e014      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005776:	4b61      	ldr	r3, [pc, #388]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577e:	2b00      	cmp	r3, #0
 8005780:	d110      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005786:	e00d      	b.n	80057a4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005788:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005798:	e006      	b.n	80057a8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
      break;
 800579e:	e004      	b.n	80057aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80057a0:	bf00      	nop
 80057a2:	e002      	b.n	80057aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80057a4:	bf00      	nop
 80057a6:	e000      	b.n	80057aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80057a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 809f 	bne.w	80058f0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057b2:	4b52      	ldr	r3, [pc, #328]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a51      	ldr	r2, [pc, #324]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80057b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057be:	f7fc fccd 	bl	800215c <HAL_GetTick>
 80057c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057c4:	e00f      	b.n	80057e6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057c6:	f7fc fcc9 	bl	800215c <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d908      	bls.n	80057e6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057d4:	4b49      	ldr	r3, [pc, #292]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057e4:	e006      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057e6:	4b45      	ldr	r3, [pc, #276]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e9      	bne.n	80057c6 <RCCEx_PLLSAI1_Config+0x86>
 80057f2:	e000      	b.n	80057f6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80057f4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d179      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d116      	bne.n	8005830 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	4b3e      	ldr	r3, [pc, #248]	; (8005900 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005808:	4013      	ands	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	0211      	lsls	r1, r2, #8
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68d2      	ldr	r2, [r2, #12]
 8005814:	06d2      	lsls	r2, r2, #27
 8005816:	4311      	orrs	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6852      	ldr	r2, [r2, #4]
 800581c:	3a01      	subs	r2, #1
 800581e:	0112      	lsls	r2, r2, #4
 8005820:	4311      	orrs	r1, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	4934      	ldr	r1, [pc, #208]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	610b      	str	r3, [r1, #16]
 800582e:	e033      	b.n	8005898 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d118      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005836:	4b31      	ldr	r3, [pc, #196]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	4b32      	ldr	r3, [pc, #200]	; (8005904 <RCCEx_PLLSAI1_Config+0x1c4>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6892      	ldr	r2, [r2, #8]
 8005842:	0211      	lsls	r1, r2, #8
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6912      	ldr	r2, [r2, #16]
 8005848:	0852      	lsrs	r2, r2, #1
 800584a:	3a01      	subs	r2, #1
 800584c:	0552      	lsls	r2, r2, #21
 800584e:	4311      	orrs	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6852      	ldr	r2, [r2, #4]
 8005854:	3a01      	subs	r2, #1
 8005856:	0112      	lsls	r2, r2, #4
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	4926      	ldr	r1, [pc, #152]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
 8005866:	e017      	b.n	8005898 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005868:	4b24      	ldr	r3, [pc, #144]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	4b26      	ldr	r3, [pc, #152]	; (8005908 <RCCEx_PLLSAI1_Config+0x1c8>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6892      	ldr	r2, [r2, #8]
 8005874:	0211      	lsls	r1, r2, #8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6952      	ldr	r2, [r2, #20]
 800587a:	0852      	lsrs	r2, r2, #1
 800587c:	3a01      	subs	r2, #1
 800587e:	0652      	lsls	r2, r2, #25
 8005880:	4311      	orrs	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6852      	ldr	r2, [r2, #4]
 8005886:	3a01      	subs	r2, #1
 8005888:	0112      	lsls	r2, r2, #4
 800588a:	4311      	orrs	r1, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	491a      	ldr	r1, [pc, #104]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005894:	4313      	orrs	r3, r2
 8005896:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005898:	4b18      	ldr	r3, [pc, #96]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800589e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a4:	f7fc fc5a 	bl	800215c <HAL_GetTick>
 80058a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058aa:	e00f      	b.n	80058cc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ac:	f7fc fc56 	bl	800215c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d908      	bls.n	80058cc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80058ca:	e006      	b.n	80058da <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0e9      	beq.n	80058ac <RCCEx_PLLSAI1_Config+0x16c>
 80058d8:	e000      	b.n	80058dc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80058da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	4904      	ldr	r1, [pc, #16]	; (80058fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
 8005900:	07ff800c 	.word	0x07ff800c
 8005904:	ff9f800c 	.word	0xff9f800c
 8005908:	f9ff800c 	.word	0xf9ff800c

0800590c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d018      	beq.n	8005954 <RCCEx_PLLSAI2_Config+0x48>
 8005922:	2b03      	cmp	r3, #3
 8005924:	d81f      	bhi.n	8005966 <RCCEx_PLLSAI2_Config+0x5a>
 8005926:	2b01      	cmp	r3, #1
 8005928:	d002      	beq.n	8005930 <RCCEx_PLLSAI2_Config+0x24>
 800592a:	2b02      	cmp	r3, #2
 800592c:	d009      	beq.n	8005942 <RCCEx_PLLSAI2_Config+0x36>
 800592e:	e01a      	b.n	8005966 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005930:	4b4a      	ldr	r3, [pc, #296]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d117      	bne.n	800596c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005940:	e014      	b.n	800596c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005942:	4b46      	ldr	r3, [pc, #280]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594a:	2b00      	cmp	r3, #0
 800594c:	d110      	bne.n	8005970 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005952:	e00d      	b.n	8005970 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005954:	4b41      	ldr	r3, [pc, #260]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005964:	e006      	b.n	8005974 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
      break;
 800596a:	e004      	b.n	8005976 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800596c:	bf00      	nop
 800596e:	e002      	b.n	8005976 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005970:	bf00      	nop
 8005972:	e000      	b.n	8005976 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005974:	bf00      	nop
  }

  if (status == HAL_OK)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d169      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800597c:	4b37      	ldr	r3, [pc, #220]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a36      	ldr	r2, [pc, #216]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005988:	f7fc fbe8 	bl	800215c <HAL_GetTick>
 800598c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800598e:	e00f      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005990:	f7fc fbe4 	bl	800215c <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d908      	bls.n	80059b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800599e:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059ae:	e006      	b.n	80059be <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059b0:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e9      	bne.n	8005990 <RCCEx_PLLSAI2_Config+0x84>
 80059bc:	e000      	b.n	80059c0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80059be:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d144      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d115      	bne.n	80059f8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059cc:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <RCCEx_PLLSAI2_Config+0x154>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6892      	ldr	r2, [r2, #8]
 80059d8:	0211      	lsls	r1, r2, #8
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	06d2      	lsls	r2, r2, #27
 80059e0:	4311      	orrs	r1, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6852      	ldr	r2, [r2, #4]
 80059e6:	3a01      	subs	r2, #1
 80059e8:	0112      	lsls	r2, r2, #4
 80059ea:	4311      	orrs	r1, r2
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	491a      	ldr	r1, [pc, #104]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059f8:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 80059fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fc fbaa 	bl	800215c <HAL_GetTick>
 8005a08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a0a:	e00f      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a0c:	f7fc fba6 	bl	800215c <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d908      	bls.n	8005a2c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005a2a:	e006      	b.n	8005a3a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0e9      	beq.n	8005a0c <RCCEx_PLLSAI2_Config+0x100>
 8005a38:	e000      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005a3a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	4904      	ldr	r1, [pc, #16]	; (8005a5c <RCCEx_PLLSAI2_Config+0x150>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	07ff800c 	.word	0x07ff800c

08005a64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d066      	beq.n	8005b44 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fe68 	bl	8001760 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d045      	beq.n	8005b32 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005aa8:	22ca      	movs	r2, #202	; 0xca
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8005aac:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005aae:	2253      	movs	r2, #83	; 0x53
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f872 	bl	8005b9c <RTC_EnterInitMode>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d121      	bne.n	8005b06 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005ac8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4319      	orrs	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	491a      	ldr	r1, [pc, #104]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	041b      	lsls	r3, r3, #16
 8005af6:	4916      	ldr	r1, [pc, #88]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f881 	bl	8005c04 <RTC_ExitInitMode>
 8005b02:	4603      	mov	r3, r0
 8005b04:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10e      	bne.n	8005b2a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8005b0c:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a19      	ldr	r1, [r3, #32]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4319      	orrs	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	430b      	orrs	r3, r1
 8005b24:	490a      	ldr	r1, [pc, #40]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <HAL_RTC_Init+0xec>)
 8005b2c:	22ff      	movs	r2, #255	; 0xff
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b30:	e001      	b.n	8005b36 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40002800 	.word	0x40002800

08005b54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <HAL_RTC_WaitForSynchro+0x40>)
 8005b5e:	4a0e      	ldr	r2, [pc, #56]	; (8005b98 <HAL_RTC_WaitForSynchro+0x44>)
 8005b60:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b62:	f7fc fafb 	bl	800215c <HAL_GetTick>
 8005b66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b68:	e009      	b.n	8005b7e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b6a:	f7fc faf7 	bl	800215c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b78:	d901      	bls.n	8005b7e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e006      	b.n	8005b8c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RTC_WaitForSynchro+0x40>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0ef      	beq.n	8005b6a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40002800 	.word	0x40002800
 8005b98:	0001005c 	.word	0x0001005c

08005b9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005ba8:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <RTC_EnterInitMode+0x64>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d120      	bne.n	8005bf6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <RTC_EnterInitMode+0x64>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <RTC_EnterInitMode+0x64>)
 8005bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005bc0:	f7fc facc 	bl	800215c <HAL_GetTick>
 8005bc4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bc6:	e00d      	b.n	8005be4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005bc8:	f7fc fac8 	bl	800215c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd6:	d905      	bls.n	8005be4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2203      	movs	r2, #3
 8005be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <RTC_EnterInitMode+0x64>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <RTC_EnterInitMode+0x5a>
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d1e8      	bne.n	8005bc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40002800 	.word	0x40002800

08005c04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c10:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c1c:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10c      	bne.n	8005c42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff93 	bl	8005b54 <HAL_RTC_WaitForSynchro>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01e      	beq.n	8005c72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2203      	movs	r2, #3
 8005c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	73fb      	strb	r3, [r7, #15]
 8005c40:	e017      	b.n	8005c72 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c42:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c48:	f023 0320 	bic.w	r3, r3, #32
 8005c4c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ff80 	bl	8005b54 <HAL_RTC_WaitForSynchro>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40002800 	.word	0x40002800

08005c80 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	490f      	ldr	r1, [pc, #60]	; (8005cd0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	490c      	ldr	r1, [pc, #48]	; (8005cd4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6919      	ldr	r1, [r3, #16]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	4906      	ldr	r1, [pc, #24]	; (8005cd4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40002800 	.word	0x40002800
 8005cd4:	40003400 	.word	0x40003400

08005cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e042      	b.n	8005d70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fb fff5 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2224      	movs	r2, #36	; 0x24
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fc50 	bl	80065c0 <UART_SetConfig>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e022      	b.n	8005d70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 ff44 	bl	8006bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 ffcb 	bl	8006d04 <UART_CheckIdleState>
 8005d6e:	4603      	mov	r3, r0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d167      	bne.n	8005e60 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_UART_Transmit_DMA+0x24>
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e060      	b.n	8005e62 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	88fa      	ldrh	r2, [r7, #6]
 8005daa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2221      	movs	r2, #33	; 0x21
 8005dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d028      	beq.n	8005e20 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd2:	4a26      	ldr	r2, [pc, #152]	; (8005e6c <HAL_UART_Transmit_DMA+0xf4>)
 8005dd4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dda:	4a25      	ldr	r2, [pc, #148]	; (8005e70 <HAL_UART_Transmit_DMA+0xf8>)
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de2:	4a24      	ldr	r2, [pc, #144]	; (8005e74 <HAL_UART_Transmit_DMA+0xfc>)
 8005de4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dea:	2200      	movs	r2, #0
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	4619      	mov	r1, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3328      	adds	r3, #40	; 0x28
 8005dfe:	461a      	mov	r2, r3
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	f7fd fb0f 	bl	8003424 <HAL_DMA_Start_IT>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e020      	b.n	8005e62 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2240      	movs	r2, #64	; 0x40
 8005e26:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	613b      	str	r3, [r7, #16]
   return(result);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e48:	623a      	str	r2, [r7, #32]
 8005e4a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
  }
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3728      	adds	r7, #40	; 0x28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	080071c3 	.word	0x080071c3
 8005e70:	0800725d 	.word	0x0800725d
 8005e74:	080073e3 	.word	0x080073e3

08005e78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d137      	bne.n	8005f00 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_UART_Receive_DMA+0x24>
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e030      	b.n	8005f02 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_UART_Receive_DMA+0x94>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d01f      	beq.n	8005ef0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	613b      	str	r3, [r7, #16]
   return(result);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	623b      	str	r3, [r7, #32]
 8005ede:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e6      	bne.n	8005ebe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f001 f816 	bl	8006f28 <UART_Start_Receive_DMA>
 8005efc:	4603      	mov	r3, r0
 8005efe:	e000      	b.n	8005f02 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3728      	adds	r7, #40	; 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40008000 	.word	0x40008000

08005f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b0ba      	sub	sp, #232	; 0xe8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f3e:	4013      	ands	r3, r2
 8005f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d11b      	bne.n	8005f84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d105      	bne.n	8005f70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 82e3 	beq.w	8006540 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	4798      	blx	r3
      }
      return;
 8005f82:	e2dd      	b.n	8006540 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8123 	beq.w	80061d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f92:	4b8d      	ldr	r3, [pc, #564]	; (80061c8 <HAL_UART_IRQHandler+0x2b8>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f9e:	4b8b      	ldr	r3, [pc, #556]	; (80061cc <HAL_UART_IRQHandler+0x2bc>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8116 	beq.w	80061d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d011      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xc8>
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	f043 0201 	orr.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d011      	beq.n	8006008 <HAL_UART_IRQHandler+0xf8>
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffe:	f043 0204 	orr.w	r2, r3, #4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d011      	beq.n	8006038 <HAL_UART_IRQHandler+0x128>
 8006014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2204      	movs	r2, #4
 8006026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f043 0202 	orr.w	r2, r3, #2
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b00      	cmp	r3, #0
 8006042:	d017      	beq.n	8006074 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006050:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006054:	4b5c      	ldr	r3, [pc, #368]	; (80061c8 <HAL_UART_IRQHandler+0x2b8>)
 8006056:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2208      	movs	r2, #8
 8006062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f043 0208 	orr.w	r2, r3, #8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800607c:	2b00      	cmp	r3, #0
 800607e:	d012      	beq.n	80060a6 <HAL_UART_IRQHandler+0x196>
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f043 0220 	orr.w	r2, r3, #32
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8249 	beq.w	8006544 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d013      	beq.n	80060e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d005      	beq.n	800610a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006102:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006106:	2b00      	cmp	r3, #0
 8006108:	d054      	beq.n	80061b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fff3 	bl	80070f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d146      	bne.n	80061ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3308      	adds	r3, #8
 8006124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800614a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800614e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1d9      	bne.n	800611e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800617a:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <HAL_UART_IRQHandler+0x2c0>)
 800617c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006184:	4618      	mov	r0, r3
 8006186:	f7fd fa24 	bl	80035d2 <HAL_DMA_Abort_IT>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d019      	beq.n	80061c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800619e:	4610      	mov	r0, r2
 80061a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a2:	e00f      	b.n	80061c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f9f5 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061aa:	e00b      	b.n	80061c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f9f1 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b2:	e007      	b.n	80061c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9ed 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80061c2:	e1bf      	b.n	8006544 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	bf00      	nop
    return;
 80061c6:	e1bd      	b.n	8006544 <HAL_UART_IRQHandler+0x634>
 80061c8:	10000001 	.word	0x10000001
 80061cc:	04000120 	.word	0x04000120
 80061d0:	08007463 	.word	0x08007463

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	f040 8153 	bne.w	8006484 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 814c 	beq.w	8006484 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8145 	beq.w	8006484 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2210      	movs	r2, #16
 8006200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	f040 80bb 	bne.w	8006388 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 818f 	beq.w	8006548 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006230:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006234:	429a      	cmp	r2, r3
 8006236:	f080 8187 	bcs.w	8006548 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 8087 	bne.w	8006366 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800626c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006286:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800628e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800629a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1da      	bne.n	8006258 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3308      	adds	r3, #8
 80062c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e1      	bne.n	80062a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006302:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e3      	bne.n	80062de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006334:	f023 0310 	bic.w	r3, r3, #16
 8006338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006346:	65bb      	str	r3, [r7, #88]	; 0x58
 8006348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800634c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e4      	bne.n	8006324 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006360:	4618      	mov	r0, r3
 8006362:	f7fd f8da 	bl	800351a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006378:	b29b      	uxth	r3, r3
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f911 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006386:	e0df      	b.n	8006548 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006394:	b29b      	uxth	r3, r3
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80d1 	beq.w	800654c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80063aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80cc 	beq.w	800654c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063d6:	647b      	str	r3, [r7, #68]	; 0x44
 80063d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e4      	bne.n	80063b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	623b      	str	r3, [r7, #32]
   return(result);
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006412:	633a      	str	r2, [r7, #48]	; 0x30
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e1      	bne.n	80063ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	60fb      	str	r3, [r7, #12]
   return(result);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	69b9      	ldr	r1, [r7, #24]
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	617b      	str	r3, [r7, #20]
   return(result);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e4      	bne.n	800643a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f893 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006482:	e063      	b.n	800654c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <HAL_UART_IRQHandler+0x59e>
 8006490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 f81c 	bl	80074e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064ac:	e051      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d014      	beq.n	80064e4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d105      	bne.n	80064d2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d03a      	beq.n	8006550 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4798      	blx	r3
    }
    return;
 80064e2:	e035      	b.n	8006550 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <HAL_UART_IRQHandler+0x5f4>
 80064f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 ffc6 	bl	800748e <UART_EndTransmit_IT>
    return;
 8006502:	e026      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <HAL_UART_IRQHandler+0x614>
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fff5 	bl	800750c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006522:	e016      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d010      	beq.n	8006552 <HAL_UART_IRQHandler+0x642>
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006534:	2b00      	cmp	r3, #0
 8006536:	da0c      	bge.n	8006552 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 ffdd 	bl	80074f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800653e:	e008      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
      return;
 8006540:	bf00      	nop
 8006542:	e006      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
    return;
 8006544:	bf00      	nop
 8006546:	e004      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
      return;
 8006548:	bf00      	nop
 800654a:	e002      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
      return;
 800654c:	bf00      	nop
 800654e:	e000      	b.n	8006552 <HAL_UART_IRQHandler+0x642>
    return;
 8006550:	bf00      	nop
  }
}
 8006552:	37e8      	adds	r7, #232	; 0xe8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c4:	b08c      	sub	sp, #48	; 0x30
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	431a      	orrs	r2, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	431a      	orrs	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4baa      	ldr	r3, [pc, #680]	; (8006898 <UART_SetConfig+0x2d8>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a9f      	ldr	r2, [pc, #636]	; (800689c <UART_SetConfig+0x2dc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006628:	4313      	orrs	r3, r2
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006636:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006640:	430b      	orrs	r3, r1
 8006642:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	f023 010f 	bic.w	r1, r3, #15
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a90      	ldr	r2, [pc, #576]	; (80068a0 <UART_SetConfig+0x2e0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d125      	bne.n	80066b0 <UART_SetConfig+0xf0>
 8006664:	4b8f      	ldr	r3, [pc, #572]	; (80068a4 <UART_SetConfig+0x2e4>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b03      	cmp	r3, #3
 8006670:	d81a      	bhi.n	80066a8 <UART_SetConfig+0xe8>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0xb8>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	08006689 	.word	0x08006689
 800667c:	08006699 	.word	0x08006699
 8006680:	08006691 	.word	0x08006691
 8006684:	080066a1 	.word	0x080066a1
 8006688:	2301      	movs	r3, #1
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e116      	b.n	80068be <UART_SetConfig+0x2fe>
 8006690:	2302      	movs	r3, #2
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006696:	e112      	b.n	80068be <UART_SetConfig+0x2fe>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e10e      	b.n	80068be <UART_SetConfig+0x2fe>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a6:	e10a      	b.n	80068be <UART_SetConfig+0x2fe>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ae:	e106      	b.n	80068be <UART_SetConfig+0x2fe>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a7c      	ldr	r2, [pc, #496]	; (80068a8 <UART_SetConfig+0x2e8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d138      	bne.n	800672c <UART_SetConfig+0x16c>
 80066ba:	4b7a      	ldr	r3, [pc, #488]	; (80068a4 <UART_SetConfig+0x2e4>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	d82d      	bhi.n	8006724 <UART_SetConfig+0x164>
 80066c8:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0x110>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	08006705 	.word	0x08006705
 80066d4:	08006725 	.word	0x08006725
 80066d8:	08006725 	.word	0x08006725
 80066dc:	08006725 	.word	0x08006725
 80066e0:	08006715 	.word	0x08006715
 80066e4:	08006725 	.word	0x08006725
 80066e8:	08006725 	.word	0x08006725
 80066ec:	08006725 	.word	0x08006725
 80066f0:	0800670d 	.word	0x0800670d
 80066f4:	08006725 	.word	0x08006725
 80066f8:	08006725 	.word	0x08006725
 80066fc:	08006725 	.word	0x08006725
 8006700:	0800671d 	.word	0x0800671d
 8006704:	2300      	movs	r3, #0
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670a:	e0d8      	b.n	80068be <UART_SetConfig+0x2fe>
 800670c:	2302      	movs	r3, #2
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006712:	e0d4      	b.n	80068be <UART_SetConfig+0x2fe>
 8006714:	2304      	movs	r3, #4
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671a:	e0d0      	b.n	80068be <UART_SetConfig+0x2fe>
 800671c:	2308      	movs	r3, #8
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006722:	e0cc      	b.n	80068be <UART_SetConfig+0x2fe>
 8006724:	2310      	movs	r3, #16
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672a:	e0c8      	b.n	80068be <UART_SetConfig+0x2fe>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a5e      	ldr	r2, [pc, #376]	; (80068ac <UART_SetConfig+0x2ec>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d125      	bne.n	8006782 <UART_SetConfig+0x1c2>
 8006736:	4b5b      	ldr	r3, [pc, #364]	; (80068a4 <UART_SetConfig+0x2e4>)
 8006738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006740:	2b30      	cmp	r3, #48	; 0x30
 8006742:	d016      	beq.n	8006772 <UART_SetConfig+0x1b2>
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d818      	bhi.n	800677a <UART_SetConfig+0x1ba>
 8006748:	2b20      	cmp	r3, #32
 800674a:	d00a      	beq.n	8006762 <UART_SetConfig+0x1a2>
 800674c:	2b20      	cmp	r3, #32
 800674e:	d814      	bhi.n	800677a <UART_SetConfig+0x1ba>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <UART_SetConfig+0x19a>
 8006754:	2b10      	cmp	r3, #16
 8006756:	d008      	beq.n	800676a <UART_SetConfig+0x1aa>
 8006758:	e00f      	b.n	800677a <UART_SetConfig+0x1ba>
 800675a:	2300      	movs	r3, #0
 800675c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006760:	e0ad      	b.n	80068be <UART_SetConfig+0x2fe>
 8006762:	2302      	movs	r3, #2
 8006764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006768:	e0a9      	b.n	80068be <UART_SetConfig+0x2fe>
 800676a:	2304      	movs	r3, #4
 800676c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006770:	e0a5      	b.n	80068be <UART_SetConfig+0x2fe>
 8006772:	2308      	movs	r3, #8
 8006774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006778:	e0a1      	b.n	80068be <UART_SetConfig+0x2fe>
 800677a:	2310      	movs	r3, #16
 800677c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006780:	e09d      	b.n	80068be <UART_SetConfig+0x2fe>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a4a      	ldr	r2, [pc, #296]	; (80068b0 <UART_SetConfig+0x2f0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d125      	bne.n	80067d8 <UART_SetConfig+0x218>
 800678c:	4b45      	ldr	r3, [pc, #276]	; (80068a4 <UART_SetConfig+0x2e4>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006792:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006796:	2bc0      	cmp	r3, #192	; 0xc0
 8006798:	d016      	beq.n	80067c8 <UART_SetConfig+0x208>
 800679a:	2bc0      	cmp	r3, #192	; 0xc0
 800679c:	d818      	bhi.n	80067d0 <UART_SetConfig+0x210>
 800679e:	2b80      	cmp	r3, #128	; 0x80
 80067a0:	d00a      	beq.n	80067b8 <UART_SetConfig+0x1f8>
 80067a2:	2b80      	cmp	r3, #128	; 0x80
 80067a4:	d814      	bhi.n	80067d0 <UART_SetConfig+0x210>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <UART_SetConfig+0x1f0>
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d008      	beq.n	80067c0 <UART_SetConfig+0x200>
 80067ae:	e00f      	b.n	80067d0 <UART_SetConfig+0x210>
 80067b0:	2300      	movs	r3, #0
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b6:	e082      	b.n	80068be <UART_SetConfig+0x2fe>
 80067b8:	2302      	movs	r3, #2
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067be:	e07e      	b.n	80068be <UART_SetConfig+0x2fe>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c6:	e07a      	b.n	80068be <UART_SetConfig+0x2fe>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ce:	e076      	b.n	80068be <UART_SetConfig+0x2fe>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d6:	e072      	b.n	80068be <UART_SetConfig+0x2fe>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a35      	ldr	r2, [pc, #212]	; (80068b4 <UART_SetConfig+0x2f4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d12a      	bne.n	8006838 <UART_SetConfig+0x278>
 80067e2:	4b30      	ldr	r3, [pc, #192]	; (80068a4 <UART_SetConfig+0x2e4>)
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f0:	d01a      	beq.n	8006828 <UART_SetConfig+0x268>
 80067f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f6:	d81b      	bhi.n	8006830 <UART_SetConfig+0x270>
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	d00c      	beq.n	8006818 <UART_SetConfig+0x258>
 80067fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006802:	d815      	bhi.n	8006830 <UART_SetConfig+0x270>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <UART_SetConfig+0x250>
 8006808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680c:	d008      	beq.n	8006820 <UART_SetConfig+0x260>
 800680e:	e00f      	b.n	8006830 <UART_SetConfig+0x270>
 8006810:	2300      	movs	r3, #0
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006816:	e052      	b.n	80068be <UART_SetConfig+0x2fe>
 8006818:	2302      	movs	r3, #2
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681e:	e04e      	b.n	80068be <UART_SetConfig+0x2fe>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006826:	e04a      	b.n	80068be <UART_SetConfig+0x2fe>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682e:	e046      	b.n	80068be <UART_SetConfig+0x2fe>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006836:	e042      	b.n	80068be <UART_SetConfig+0x2fe>
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a17      	ldr	r2, [pc, #92]	; (800689c <UART_SetConfig+0x2dc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d13a      	bne.n	80068b8 <UART_SetConfig+0x2f8>
 8006842:	4b18      	ldr	r3, [pc, #96]	; (80068a4 <UART_SetConfig+0x2e4>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800684c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006850:	d01a      	beq.n	8006888 <UART_SetConfig+0x2c8>
 8006852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006856:	d81b      	bhi.n	8006890 <UART_SetConfig+0x2d0>
 8006858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685c:	d00c      	beq.n	8006878 <UART_SetConfig+0x2b8>
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	d815      	bhi.n	8006890 <UART_SetConfig+0x2d0>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <UART_SetConfig+0x2b0>
 8006868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686c:	d008      	beq.n	8006880 <UART_SetConfig+0x2c0>
 800686e:	e00f      	b.n	8006890 <UART_SetConfig+0x2d0>
 8006870:	2300      	movs	r3, #0
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006876:	e022      	b.n	80068be <UART_SetConfig+0x2fe>
 8006878:	2302      	movs	r3, #2
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687e:	e01e      	b.n	80068be <UART_SetConfig+0x2fe>
 8006880:	2304      	movs	r3, #4
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006886:	e01a      	b.n	80068be <UART_SetConfig+0x2fe>
 8006888:	2308      	movs	r3, #8
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688e:	e016      	b.n	80068be <UART_SetConfig+0x2fe>
 8006890:	2310      	movs	r3, #16
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006896:	e012      	b.n	80068be <UART_SetConfig+0x2fe>
 8006898:	cfff69f3 	.word	0xcfff69f3
 800689c:	40008000 	.word	0x40008000
 80068a0:	40013800 	.word	0x40013800
 80068a4:	40021000 	.word	0x40021000
 80068a8:	40004400 	.word	0x40004400
 80068ac:	40004800 	.word	0x40004800
 80068b0:	40004c00 	.word	0x40004c00
 80068b4:	40005000 	.word	0x40005000
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4ab0      	ldr	r2, [pc, #704]	; (8006b84 <UART_SetConfig+0x5c4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f040 809b 	bne.w	8006a00 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d827      	bhi.n	8006922 <UART_SetConfig+0x362>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0x318>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	080068fd 	.word	0x080068fd
 80068dc:	08006905 	.word	0x08006905
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	08006923 	.word	0x08006923
 80068e8:	08006913 	.word	0x08006913
 80068ec:	08006923 	.word	0x08006923
 80068f0:	08006923 	.word	0x08006923
 80068f4:	08006923 	.word	0x08006923
 80068f8:	0800691b 	.word	0x0800691b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fe faa2 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8006900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006902:	e014      	b.n	800692e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006904:	f7fe fab2 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8006908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800690a:	e010      	b.n	800692e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800690c:	4b9e      	ldr	r3, [pc, #632]	; (8006b88 <UART_SetConfig+0x5c8>)
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006910:	e00d      	b.n	800692e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006912:	f7fe f9e5 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8006916:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006918:	e009      	b.n	800692e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006920:	e005      	b.n	800692e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800692c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8130 	beq.w	8006b96 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	4a94      	ldr	r2, [pc, #592]	; (8006b8c <UART_SetConfig+0x5cc>)
 800693c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006940:	461a      	mov	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	fbb3 f3f2 	udiv	r3, r3, r2
 8006948:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	429a      	cmp	r2, r3
 8006958:	d305      	bcc.n	8006966 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	429a      	cmp	r2, r3
 8006964:	d903      	bls.n	800696e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800696c:	e113      	b.n	8006b96 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	2200      	movs	r2, #0
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	60fa      	str	r2, [r7, #12]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	4a84      	ldr	r2, [pc, #528]	; (8006b8c <UART_SetConfig+0x5cc>)
 800697c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006980:	b29b      	uxth	r3, r3
 8006982:	2200      	movs	r2, #0
 8006984:	603b      	str	r3, [r7, #0]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006990:	f7f9 fc50 	bl	8000234 <__aeabi_uldivmod>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4610      	mov	r0, r2
 800699a:	4619      	mov	r1, r3
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	020b      	lsls	r3, r1, #8
 80069a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069aa:	0202      	lsls	r2, r0, #8
 80069ac:	6979      	ldr	r1, [r7, #20]
 80069ae:	6849      	ldr	r1, [r1, #4]
 80069b0:	0849      	lsrs	r1, r1, #1
 80069b2:	2000      	movs	r0, #0
 80069b4:	460c      	mov	r4, r1
 80069b6:	4605      	mov	r5, r0
 80069b8:	eb12 0804 	adds.w	r8, r2, r4
 80069bc:	eb43 0905 	adc.w	r9, r3, r5
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	469a      	mov	sl, r3
 80069c8:	4693      	mov	fp, r2
 80069ca:	4652      	mov	r2, sl
 80069cc:	465b      	mov	r3, fp
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7f9 fc2f 	bl	8000234 <__aeabi_uldivmod>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4613      	mov	r3, r2
 80069dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069e4:	d308      	bcc.n	80069f8 <UART_SetConfig+0x438>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ec:	d204      	bcs.n	80069f8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a3a      	ldr	r2, [r7, #32]
 80069f4:	60da      	str	r2, [r3, #12]
 80069f6:	e0ce      	b.n	8006b96 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069fe:	e0ca      	b.n	8006b96 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a08:	d166      	bne.n	8006ad8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8006a0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d827      	bhi.n	8006a62 <UART_SetConfig+0x4a2>
 8006a12:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <UART_SetConfig+0x458>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006a3d 	.word	0x08006a3d
 8006a1c:	08006a45 	.word	0x08006a45
 8006a20:	08006a4d 	.word	0x08006a4d
 8006a24:	08006a63 	.word	0x08006a63
 8006a28:	08006a53 	.word	0x08006a53
 8006a2c:	08006a63 	.word	0x08006a63
 8006a30:	08006a63 	.word	0x08006a63
 8006a34:	08006a63 	.word	0x08006a63
 8006a38:	08006a5b 	.word	0x08006a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a3c:	f7fe fa02 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8006a40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a42:	e014      	b.n	8006a6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a44:	f7fe fa12 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a4a:	e010      	b.n	8006a6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a4c:	4b4e      	ldr	r3, [pc, #312]	; (8006b88 <UART_SetConfig+0x5c8>)
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a50:	e00d      	b.n	8006a6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a52:	f7fe f945 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8006a56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a58:	e009      	b.n	8006a6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a60:	e005      	b.n	8006a6e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8090 	beq.w	8006b96 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	4a44      	ldr	r2, [pc, #272]	; (8006b8c <UART_SetConfig+0x5cc>)
 8006a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a88:	005a      	lsls	r2, r3, #1
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	441a      	add	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	2b0f      	cmp	r3, #15
 8006aa0:	d916      	bls.n	8006ad0 <UART_SetConfig+0x510>
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa8:	d212      	bcs.n	8006ad0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f023 030f 	bic.w	r3, r3, #15
 8006ab2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	8bfb      	ldrh	r3, [r7, #30]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	8bfa      	ldrh	r2, [r7, #30]
 8006acc:	60da      	str	r2, [r3, #12]
 8006ace:	e062      	b.n	8006b96 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ad6:	e05e      	b.n	8006b96 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d828      	bhi.n	8006b32 <UART_SetConfig+0x572>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x528>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	08006b33 	.word	0x08006b33
 8006af8:	08006b23 	.word	0x08006b23
 8006afc:	08006b33 	.word	0x08006b33
 8006b00:	08006b33 	.word	0x08006b33
 8006b04:	08006b33 	.word	0x08006b33
 8006b08:	08006b2b 	.word	0x08006b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fe f99a 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8006b10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b12:	e014      	b.n	8006b3e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fe f9aa 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8006b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b1a:	e010      	b.n	8006b3e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b1c:	4b1a      	ldr	r3, [pc, #104]	; (8006b88 <UART_SetConfig+0x5c8>)
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b20:	e00d      	b.n	8006b3e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b22:	f7fe f8dd 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b28:	e009      	b.n	8006b3e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b30:	e005      	b.n	8006b3e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d028      	beq.n	8006b96 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <UART_SetConfig+0x5cc>)
 8006b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	441a      	add	r2, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2b0f      	cmp	r3, #15
 8006b6c:	d910      	bls.n	8006b90 <UART_SetConfig+0x5d0>
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b74:	d20c      	bcs.n	8006b90 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60da      	str	r2, [r3, #12]
 8006b80:	e009      	b.n	8006b96 <UART_SetConfig+0x5d6>
 8006b82:	bf00      	nop
 8006b84:	40008000 	.word	0x40008000
 8006b88:	00f42400 	.word	0x00f42400
 8006b8c:	08007e20 	.word	0x08007e20
      }
      else
      {
        ret = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006bb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3730      	adds	r7, #48	; 0x30
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbe:	d10a      	bne.n	8006cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b098      	sub	sp, #96	; 0x60
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d14:	f7fb fa22 	bl	800215c <HAL_GetTick>
 8006d18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d12f      	bne.n	8006d88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d30:	2200      	movs	r2, #0
 8006d32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f88e 	bl	8006e58 <UART_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d022      	beq.n	8006d88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d56:	653b      	str	r3, [r7, #80]	; 0x50
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d60:	647b      	str	r3, [r7, #68]	; 0x44
 8006d62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e6      	bne.n	8006d42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e063      	b.n	8006e50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d149      	bne.n	8006e2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f857 	bl	8006e58 <UART_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d03c      	beq.n	8006e2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e6      	bne.n	8006db0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e02:	61fa      	str	r2, [r7, #28]
 8006e04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	69b9      	ldr	r1, [r7, #24]
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e5      	bne.n	8006de2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e012      	b.n	8006e50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3758      	adds	r7, #88	; 0x58
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e68:	e049      	b.n	8006efe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d045      	beq.n	8006efe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e72:	f7fb f973 	bl	800215c <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e048      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d031      	beq.n	8006efe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d110      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2208      	movs	r2, #8
 8006eae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f920 	bl	80070f6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2208      	movs	r2, #8
 8006eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e029      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed8:	d111      	bne.n	8006efe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f906 	bl	80070f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e00f      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4013      	ands	r3, r2
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	2300      	movne	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d0a6      	beq.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b096      	sub	sp, #88	; 0x58
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2222      	movs	r2, #34	; 0x22
 8006f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d02d      	beq.n	8006fba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f64:	4a40      	ldr	r2, [pc, #256]	; (8007068 <UART_Start_Receive_DMA+0x140>)
 8006f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f6e:	4a3f      	ldr	r2, [pc, #252]	; (800706c <UART_Start_Receive_DMA+0x144>)
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f78:	4a3d      	ldr	r2, [pc, #244]	; (8007070 <UART_Start_Receive_DMA+0x148>)
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f82:	2200      	movs	r2, #0
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3324      	adds	r3, #36	; 0x24
 8006f92:	4619      	mov	r1, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f98:	461a      	mov	r2, r3
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	f7fc fa42 	bl	8003424 <HAL_DMA_Start_IT>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2210      	movs	r2, #16
 8006faa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e051      	b.n	800705e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	653b      	str	r3, [r7, #80]	; 0x50
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007014:	637a      	str	r2, [r7, #52]	; 0x34
 8007016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800701a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e5      	bne.n	8006ff4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	613b      	str	r3, [r7, #16]
   return(result);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800703e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007048:	623a      	str	r2, [r7, #32]
 800704a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	6a3a      	ldr	r2, [r7, #32]
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	61bb      	str	r3, [r7, #24]
   return(result);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3758      	adds	r7, #88	; 0x58
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	08007279 	.word	0x08007279
 800706c:	080073a5 	.word	0x080073a5
 8007070:	080073e3 	.word	0x080073e3

08007074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b08f      	sub	sp, #60	; 0x3c
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	61fb      	str	r3, [r7, #28]
   return(result);
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800709c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e6      	bne.n	800707c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80070c4:	633b      	str	r3, [r7, #48]	; 0x30
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ce:	61ba      	str	r2, [r7, #24]
 80070d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6979      	ldr	r1, [r7, #20]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	613b      	str	r3, [r7, #16]
   return(result);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e5      	bne.n	80070ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80070ea:	bf00      	nop
 80070ec:	373c      	adds	r7, #60	; 0x3c
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b095      	sub	sp, #84	; 0x54
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711c:	643b      	str	r3, [r7, #64]	; 0x40
 800711e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e6      	bne.n	80070fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	64bb      	str	r3, [r7, #72]	; 0x48
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800715a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e3      	bne.n	8007130 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d118      	bne.n	80071a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	60bb      	str	r3, [r7, #8]
   return(result);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f023 0310 	bic.w	r3, r3, #16
 8007184:	647b      	str	r3, [r7, #68]	; 0x44
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718e:	61bb      	str	r3, [r7, #24]
 8007190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6979      	ldr	r1, [r7, #20]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	613b      	str	r3, [r7, #16]
   return(result);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e6      	bne.n	8007170 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80071b6:	bf00      	nop
 80071b8:	3754      	adds	r7, #84	; 0x54
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b090      	sub	sp, #64	; 0x40
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d137      	bne.n	800724e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	623b      	str	r3, [r7, #32]
   return(result);
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80071fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007206:	633a      	str	r2, [r7, #48]	; 0x30
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800720c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800721a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	60fb      	str	r3, [r7, #12]
   return(result);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722e:	637b      	str	r3, [r7, #52]	; 0x34
 8007230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	61fb      	str	r3, [r7, #28]
 800723a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	69b9      	ldr	r1, [r7, #24]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	617b      	str	r3, [r7, #20]
   return(result);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e6      	bne.n	800721a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800724c:	e002      	b.n	8007254 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800724e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007250:	f7ff f982 	bl	8006558 <HAL_UART_TxCpltCallback>
}
 8007254:	bf00      	nop
 8007256:	3740      	adds	r7, #64	; 0x40
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff f97e 	bl	800656c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b09c      	sub	sp, #112	; 0x70
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d171      	bne.n	8007378 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007296:	2200      	movs	r2, #0
 8007298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800729c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80072bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e6      	bne.n	800729c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	f023 0301 	bic.w	r3, r3, #1
 80072e4:	667b      	str	r3, [r7, #100]	; 0x64
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072ee:	647a      	str	r2, [r7, #68]	; 0x44
 80072f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e5      	bne.n	80072ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	623b      	str	r3, [r7, #32]
   return(result);
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007318:	663b      	str	r3, [r7, #96]	; 0x60
 800731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007322:	633a      	str	r2, [r7, #48]	; 0x30
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e5      	bne.n	8007302 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007338:	2220      	movs	r2, #32
 800733a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d118      	bne.n	8007378 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60fb      	str	r3, [r7, #12]
   return(result);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800735c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	617b      	str	r3, [r7, #20]
   return(result);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737a:	2200      	movs	r2, #0
 800737c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007382:	2b01      	cmp	r3, #1
 8007384:	d107      	bne.n	8007396 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800738c:	4619      	mov	r1, r3
 800738e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007390:	f7ff f90a 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007394:	e002      	b.n	800739c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007396:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007398:	f7f9 fb78 	bl	8000a8c <HAL_UART_RxCpltCallback>
}
 800739c:	bf00      	nop
 800739e:	3770      	adds	r7, #112	; 0x70
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d109      	bne.n	80073d4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4619      	mov	r1, r3
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7ff f8eb 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073d2:	e002      	b.n	80073da <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7ff f8d3 	bl	8006580 <HAL_UART_RxHalfCpltCallback>
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b086      	sub	sp, #24
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740a:	2b80      	cmp	r3, #128	; 0x80
 800740c:	d109      	bne.n	8007422 <UART_DMAError+0x40>
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b21      	cmp	r3, #33	; 0x21
 8007412:	d106      	bne.n	8007422 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2200      	movs	r2, #0
 8007418:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800741c:	6978      	ldr	r0, [r7, #20]
 800741e:	f7ff fe29 	bl	8007074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	d109      	bne.n	8007444 <UART_DMAError+0x62>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b22      	cmp	r3, #34	; 0x22
 8007434:	d106      	bne.n	8007444 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2200      	movs	r2, #0
 800743a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800743e:	6978      	ldr	r0, [r7, #20]
 8007440:	f7ff fe59 	bl	80070f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	f043 0210 	orr.w	r2, r3, #16
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007454:	6978      	ldr	r0, [r7, #20]
 8007456:	f7ff f89d 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800745a:	bf00      	nop
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff f887 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6979      	ldr	r1, [r7, #20]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	613b      	str	r3, [r7, #16]
   return(result);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e6      	bne.n	8007496 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff f83e 	bl	8006558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074dc:	bf00      	nop
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_UARTEx_DisableFifoMode+0x16>
 8007532:	2302      	movs	r3, #2
 8007534:	e027      	b.n	8007586 <HAL_UARTEx_DisableFifoMode+0x66>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2224      	movs	r2, #36	; 0x24
 8007542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0201 	bic.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007564:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e02d      	b.n	8007606 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2224      	movs	r2, #36	; 0x24
 80075b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f850 	bl	800768c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007622:	2302      	movs	r3, #2
 8007624:	e02d      	b.n	8007682 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2224      	movs	r2, #36	; 0x24
 8007632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f812 	bl	800768c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007698:	2b00      	cmp	r3, #0
 800769a:	d108      	bne.n	80076ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076ac:	e031      	b.n	8007712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076ae:	2308      	movs	r3, #8
 80076b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076b2:	2308      	movs	r3, #8
 80076b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	0e5b      	lsrs	r3, r3, #25
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	0f5b      	lsrs	r3, r3, #29
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	7b3a      	ldrb	r2, [r7, #12]
 80076da:	4911      	ldr	r1, [pc, #68]	; (8007720 <UARTEx_SetNbDataToProcess+0x94>)
 80076dc:	5c8a      	ldrb	r2, [r1, r2]
 80076de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076e2:	7b3a      	ldrb	r2, [r7, #12]
 80076e4:	490f      	ldr	r1, [pc, #60]	; (8007724 <UARTEx_SetNbDataToProcess+0x98>)
 80076e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	7b7a      	ldrb	r2, [r7, #13]
 80076f8:	4909      	ldr	r1, [pc, #36]	; (8007720 <UARTEx_SetNbDataToProcess+0x94>)
 80076fa:	5c8a      	ldrb	r2, [r1, r2]
 80076fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007700:	7b7a      	ldrb	r2, [r7, #13]
 8007702:	4908      	ldr	r1, [pc, #32]	; (8007724 <UARTEx_SetNbDataToProcess+0x98>)
 8007704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007706:	fb93 f3f2 	sdiv	r3, r3, r2
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007712:	bf00      	nop
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	08007e38 	.word	0x08007e38
 8007724:	08007e40 	.word	0x08007e40

08007728 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007728:	b480      	push	{r7}
 800772a:	b08b      	sub	sp, #44	; 0x2c
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	fa93 f3a3 	rbit	r3, r3
 8007742:	613b      	str	r3, [r7, #16]
  return result;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800774e:	2320      	movs	r3, #32
 8007750:	e003      	b.n	800775a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	fab3 f383 	clz	r3, r3
 8007758:	b2db      	uxtb	r3, r3
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	2103      	movs	r1, #3
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	43db      	mvns	r3, r3
 8007764:	401a      	ands	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	fa93 f3a3 	rbit	r3, r3
 8007770:	61fb      	str	r3, [r7, #28]
  return result;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800777c:	2320      	movs	r3, #32
 800777e:	e003      	b.n	8007788 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	fab3 f383 	clz	r3, r3
 8007786:	b2db      	uxtb	r3, r3
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	fa01 f303 	lsl.w	r3, r1, r3
 8007790:	431a      	orrs	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	601a      	str	r2, [r3, #0]
}
 8007796:	bf00      	nop
 8007798:	372c      	adds	r7, #44	; 0x2c
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	401a      	ands	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	fb01 f303 	mul.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	605a      	str	r2, [r3, #4]
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b08b      	sub	sp, #44	; 0x2c
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	fa93 f3a3 	rbit	r3, r3
 80077ec:	613b      	str	r3, [r7, #16]
  return result;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80077f8:	2320      	movs	r3, #32
 80077fa:	e003      	b.n	8007804 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	fab3 f383 	clz	r3, r3
 8007802:	b2db      	uxtb	r3, r3
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	2103      	movs	r1, #3
 8007808:	fa01 f303 	lsl.w	r3, r1, r3
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	fa93 f3a3 	rbit	r3, r3
 800781a:	61fb      	str	r3, [r7, #28]
  return result;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007826:	2320      	movs	r3, #32
 8007828:	e003      	b.n	8007832 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	fab3 f383 	clz	r3, r3
 8007830:	b2db      	uxtb	r3, r3
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	fa01 f303 	lsl.w	r3, r1, r3
 800783a:	431a      	orrs	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007840:	bf00      	nop
 8007842:	372c      	adds	r7, #44	; 0x2c
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800784c:	b480      	push	{r7}
 800784e:	b08b      	sub	sp, #44	; 0x2c
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	fa93 f3a3 	rbit	r3, r3
 8007866:	613b      	str	r3, [r7, #16]
  return result;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007872:	2320      	movs	r3, #32
 8007874:	e003      	b.n	800787e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	fab3 f383 	clz	r3, r3
 800787c:	b2db      	uxtb	r3, r3
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	2103      	movs	r1, #3
 8007882:	fa01 f303 	lsl.w	r3, r1, r3
 8007886:	43db      	mvns	r3, r3
 8007888:	401a      	ands	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	fa93 f3a3 	rbit	r3, r3
 8007894:	61fb      	str	r3, [r7, #28]
  return result;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80078a0:	2320      	movs	r3, #32
 80078a2:	e003      	b.n	80078ac <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	fab3 f383 	clz	r3, r3
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	fa01 f303 	lsl.w	r3, r1, r3
 80078b4:	431a      	orrs	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	60da      	str	r2, [r3, #12]
}
 80078ba:	bf00      	nop
 80078bc:	372c      	adds	r7, #44	; 0x2c
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b08b      	sub	sp, #44	; 0x2c
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1a      	ldr	r2, [r3, #32]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	fa93 f3a3 	rbit	r3, r3
 80078e0:	613b      	str	r3, [r7, #16]
  return result;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80078ec:	2320      	movs	r3, #32
 80078ee:	e003      	b.n	80078f8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	fab3 f383 	clz	r3, r3
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	210f      	movs	r1, #15
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	401a      	ands	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	fa93 f3a3 	rbit	r3, r3
 800790e:	61fb      	str	r3, [r7, #28]
  return result;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800791a:	2320      	movs	r3, #32
 800791c:	e003      	b.n	8007926 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	fab3 f383 	clz	r3, r3
 8007924:	b2db      	uxtb	r3, r3
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	fa01 f303 	lsl.w	r3, r1, r3
 800792e:	431a      	orrs	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007934:	bf00      	nop
 8007936:	372c      	adds	r7, #44	; 0x2c
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007940:	b480      	push	{r7}
 8007942:	b08b      	sub	sp, #44	; 0x2c
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	fa93 f3a3 	rbit	r3, r3
 800795c:	613b      	str	r3, [r7, #16]
  return result;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007968:	2320      	movs	r3, #32
 800796a:	e003      	b.n	8007974 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	fab3 f383 	clz	r3, r3
 8007972:	b2db      	uxtb	r3, r3
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	210f      	movs	r1, #15
 8007978:	fa01 f303 	lsl.w	r3, r1, r3
 800797c:	43db      	mvns	r3, r3
 800797e:	401a      	ands	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	fa93 f3a3 	rbit	r3, r3
 800798c:	61fb      	str	r3, [r7, #28]
  return result;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007998:	2320      	movs	r3, #32
 800799a:	e003      	b.n	80079a4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	fab3 f383 	clz	r3, r3
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80079b2:	bf00      	nop
 80079b4:	372c      	adds	r7, #44	; 0x2c
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b088      	sub	sp, #32
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	fa93 f3a3 	rbit	r3, r3
 80079d4:	60fb      	str	r3, [r7, #12]
  return result;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <LL_GPIO_Init+0x26>
    return 32U;
 80079e0:	2320      	movs	r3, #32
 80079e2:	e003      	b.n	80079ec <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	fab3 f383 	clz	r3, r3
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80079ee:	e047      	b.n	8007a80 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	2101      	movs	r1, #1
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	fa01 f303 	lsl.w	r3, r1, r3
 80079fc:	4013      	ands	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d039      	beq.n	8007a7a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d003      	beq.n	8007a16 <LL_GPIO_Init+0x58>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d10d      	bne.n	8007a32 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	69b9      	ldr	r1, [r7, #24]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff fed7 	bl	80077d2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	69b9      	ldr	r1, [r7, #24]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff feb8 	bl	80077a2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	461a      	mov	r2, r3
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff ff06 	bl	800784c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d111      	bne.n	8007a6c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	2bff      	cmp	r3, #255	; 0xff
 8007a4c:	d807      	bhi.n	8007a5e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	461a      	mov	r2, r3
 8007a54:	69b9      	ldr	r1, [r7, #24]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff ff35 	bl	80078c6 <LL_GPIO_SetAFPin_0_7>
 8007a5c:	e006      	b.n	8007a6c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	461a      	mov	r2, r3
 8007a64:	69b9      	ldr	r1, [r7, #24]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff ff6a 	bl	8007940 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	461a      	mov	r2, r3
 8007a72:	69b9      	ldr	r1, [r7, #24]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff fe57 	bl	8007728 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1b0      	bne.n	80079f0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007aa0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007aa4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ace:	b084      	sub	sp, #16
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	f107 0014 	add.w	r0, r7, #20
 8007adc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	b004      	add	sp, #16
 8007b0e:	4770      	bx	lr

08007b10 <_Znwj>:
 8007b10:	2801      	cmp	r0, #1
 8007b12:	bf38      	it	cc
 8007b14:	2001      	movcc	r0, #1
 8007b16:	b510      	push	{r4, lr}
 8007b18:	4604      	mov	r4, r0
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 f842 	bl	8007ba4 <malloc>
 8007b20:	b930      	cbnz	r0, 8007b30 <_Znwj+0x20>
 8007b22:	f000 f807 	bl	8007b34 <_ZSt15get_new_handlerv>
 8007b26:	b908      	cbnz	r0, 8007b2c <_Znwj+0x1c>
 8007b28:	f000 f80a 	bl	8007b40 <abort>
 8007b2c:	4780      	blx	r0
 8007b2e:	e7f4      	b.n	8007b1a <_Znwj+0xa>
 8007b30:	bd10      	pop	{r4, pc}
	...

08007b34 <_ZSt15get_new_handlerv>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <_ZSt15get_new_handlerv+0x8>)
 8007b36:	e8d3 0faf 	lda	r0, [r3]
 8007b3a:	4770      	bx	lr
 8007b3c:	2000061c 	.word	0x2000061c

08007b40 <abort>:
 8007b40:	2006      	movs	r0, #6
 8007b42:	b508      	push	{r3, lr}
 8007b44:	f000 f90a 	bl	8007d5c <raise>
 8007b48:	2001      	movs	r0, #1
 8007b4a:	f7f9 fecb 	bl	80018e4 <_exit>
	...

08007b50 <__errno>:
 8007b50:	4b01      	ldr	r3, [pc, #4]	; (8007b58 <__errno+0x8>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	2000000c 	.word	0x2000000c

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	; (8007b94 <__libc_init_array+0x38>)
 8007b60:	2600      	movs	r6, #0
 8007b62:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b64:	1b64      	subs	r4, r4, r5
 8007b66:	10a4      	asrs	r4, r4, #2
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	; (8007b9c <__libc_init_array+0x40>)
 8007b6e:	2600      	movs	r6, #0
 8007b70:	4c0b      	ldr	r4, [pc, #44]	; (8007ba0 <__libc_init_array+0x44>)
 8007b72:	f000 f91d 	bl	8007db0 <_init>
 8007b76:	1b64      	subs	r4, r4, r5
 8007b78:	10a4      	asrs	r4, r4, #2
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	3601      	adds	r6, #1
 8007b86:	4798      	blx	r3
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	3601      	adds	r6, #1
 8007b90:	4798      	blx	r3
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08007e50 	.word	0x08007e50
 8007b98:	08007e50 	.word	0x08007e50
 8007b9c:	08007e50 	.word	0x08007e50
 8007ba0:	08007e54 	.word	0x08007e54

08007ba4 <malloc>:
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <malloc+0xc>)
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f000 b82b 	b.w	8007c04 <_malloc_r>
 8007bae:	bf00      	nop
 8007bb0:	2000000c 	.word	0x2000000c

08007bb4 <memset>:
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d100      	bne.n	8007bbe <memset+0xa>
 8007bbc:	4770      	bx	lr
 8007bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc2:	e7f9      	b.n	8007bb8 <memset+0x4>

08007bc4 <sbrk_aligned>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	4e0e      	ldr	r6, [pc, #56]	; (8007c00 <sbrk_aligned+0x3c>)
 8007bc8:	460c      	mov	r4, r1
 8007bca:	4605      	mov	r5, r0
 8007bcc:	6831      	ldr	r1, [r6, #0]
 8007bce:	b911      	cbnz	r1, 8007bd6 <sbrk_aligned+0x12>
 8007bd0:	f000 f88c 	bl	8007cec <_sbrk_r>
 8007bd4:	6030      	str	r0, [r6, #0]
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 f887 	bl	8007cec <_sbrk_r>
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	d00a      	beq.n	8007bf8 <sbrk_aligned+0x34>
 8007be2:	1cc4      	adds	r4, r0, #3
 8007be4:	f024 0403 	bic.w	r4, r4, #3
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d007      	beq.n	8007bfc <sbrk_aligned+0x38>
 8007bec:	1a21      	subs	r1, r4, r0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 f87c 	bl	8007cec <_sbrk_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d101      	bne.n	8007bfc <sbrk_aligned+0x38>
 8007bf8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	20000624 	.word	0x20000624

08007c04 <_malloc_r>:
 8007c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c08:	1ccd      	adds	r5, r1, #3
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	f025 0503 	bic.w	r5, r5, #3
 8007c10:	3508      	adds	r5, #8
 8007c12:	2d0c      	cmp	r5, #12
 8007c14:	bf38      	it	cc
 8007c16:	250c      	movcc	r5, #12
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	db01      	blt.n	8007c20 <_malloc_r+0x1c>
 8007c1c:	42a9      	cmp	r1, r5
 8007c1e:	d905      	bls.n	8007c2c <_malloc_r+0x28>
 8007c20:	230c      	movs	r3, #12
 8007c22:	2600      	movs	r6, #0
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4630      	mov	r0, r6
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	4e2e      	ldr	r6, [pc, #184]	; (8007ce8 <_malloc_r+0xe4>)
 8007c2e:	f000 f8b1 	bl	8007d94 <__malloc_lock>
 8007c32:	6833      	ldr	r3, [r6, #0]
 8007c34:	461c      	mov	r4, r3
 8007c36:	bb34      	cbnz	r4, 8007c86 <_malloc_r+0x82>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f7ff ffc2 	bl	8007bc4 <sbrk_aligned>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	4604      	mov	r4, r0
 8007c44:	d14d      	bne.n	8007ce2 <_malloc_r+0xde>
 8007c46:	6834      	ldr	r4, [r6, #0]
 8007c48:	4626      	mov	r6, r4
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	d140      	bne.n	8007cd0 <_malloc_r+0xcc>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	4631      	mov	r1, r6
 8007c52:	4638      	mov	r0, r7
 8007c54:	eb04 0803 	add.w	r8, r4, r3
 8007c58:	f000 f848 	bl	8007cec <_sbrk_r>
 8007c5c:	4580      	cmp	r8, r0
 8007c5e:	d13a      	bne.n	8007cd6 <_malloc_r+0xd2>
 8007c60:	6821      	ldr	r1, [r4, #0]
 8007c62:	3503      	adds	r5, #3
 8007c64:	4638      	mov	r0, r7
 8007c66:	1a6d      	subs	r5, r5, r1
 8007c68:	f025 0503 	bic.w	r5, r5, #3
 8007c6c:	3508      	adds	r5, #8
 8007c6e:	2d0c      	cmp	r5, #12
 8007c70:	bf38      	it	cc
 8007c72:	250c      	movcc	r5, #12
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7ff ffa5 	bl	8007bc4 <sbrk_aligned>
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d02b      	beq.n	8007cd6 <_malloc_r+0xd2>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	442b      	add	r3, r5
 8007c82:	6023      	str	r3, [r4, #0]
 8007c84:	e00e      	b.n	8007ca4 <_malloc_r+0xa0>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	1b52      	subs	r2, r2, r5
 8007c8a:	d41e      	bmi.n	8007cca <_malloc_r+0xc6>
 8007c8c:	2a0b      	cmp	r2, #11
 8007c8e:	d916      	bls.n	8007cbe <_malloc_r+0xba>
 8007c90:	1961      	adds	r1, r4, r5
 8007c92:	42a3      	cmp	r3, r4
 8007c94:	6025      	str	r5, [r4, #0]
 8007c96:	bf18      	it	ne
 8007c98:	6059      	strne	r1, [r3, #4]
 8007c9a:	6863      	ldr	r3, [r4, #4]
 8007c9c:	bf08      	it	eq
 8007c9e:	6031      	streq	r1, [r6, #0]
 8007ca0:	5162      	str	r2, [r4, r5]
 8007ca2:	604b      	str	r3, [r1, #4]
 8007ca4:	f104 060b 	add.w	r6, r4, #11
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f000 f879 	bl	8007da0 <__malloc_unlock>
 8007cae:	1d23      	adds	r3, r4, #4
 8007cb0:	f026 0607 	bic.w	r6, r6, #7
 8007cb4:	1af2      	subs	r2, r6, r3
 8007cb6:	d0b6      	beq.n	8007c26 <_malloc_r+0x22>
 8007cb8:	1b9b      	subs	r3, r3, r6
 8007cba:	50a3      	str	r3, [r4, r2]
 8007cbc:	e7b3      	b.n	8007c26 <_malloc_r+0x22>
 8007cbe:	6862      	ldr	r2, [r4, #4]
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	bf0c      	ite	eq
 8007cc4:	6032      	streq	r2, [r6, #0]
 8007cc6:	605a      	strne	r2, [r3, #4]
 8007cc8:	e7ec      	b.n	8007ca4 <_malloc_r+0xa0>
 8007cca:	4623      	mov	r3, r4
 8007ccc:	6864      	ldr	r4, [r4, #4]
 8007cce:	e7b2      	b.n	8007c36 <_malloc_r+0x32>
 8007cd0:	4634      	mov	r4, r6
 8007cd2:	6876      	ldr	r6, [r6, #4]
 8007cd4:	e7b9      	b.n	8007c4a <_malloc_r+0x46>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	4638      	mov	r0, r7
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	f000 f860 	bl	8007da0 <__malloc_unlock>
 8007ce0:	e7a1      	b.n	8007c26 <_malloc_r+0x22>
 8007ce2:	6025      	str	r5, [r4, #0]
 8007ce4:	e7de      	b.n	8007ca4 <_malloc_r+0xa0>
 8007ce6:	bf00      	nop
 8007ce8:	20000620 	.word	0x20000620

08007cec <_sbrk_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	2300      	movs	r3, #0
 8007cf0:	4d05      	ldr	r5, [pc, #20]	; (8007d08 <_sbrk_r+0x1c>)
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	f7f9 fdfe 	bl	80018f8 <_sbrk>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_sbrk_r+0x1a>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_sbrk_r+0x1a>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20000628 	.word	0x20000628

08007d0c <_raise_r>:
 8007d0c:	291f      	cmp	r1, #31
 8007d0e:	b538      	push	{r3, r4, r5, lr}
 8007d10:	4604      	mov	r4, r0
 8007d12:	460d      	mov	r5, r1
 8007d14:	d904      	bls.n	8007d20 <_raise_r+0x14>
 8007d16:	2316      	movs	r3, #22
 8007d18:	6003      	str	r3, [r0, #0]
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d22:	b112      	cbz	r2, 8007d2a <_raise_r+0x1e>
 8007d24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d28:	b94b      	cbnz	r3, 8007d3e <_raise_r+0x32>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 f830 	bl	8007d90 <_getpid_r>
 8007d30:	462a      	mov	r2, r5
 8007d32:	4601      	mov	r1, r0
 8007d34:	4620      	mov	r0, r4
 8007d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d3a:	f000 b817 	b.w	8007d6c <_kill_r>
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d00a      	beq.n	8007d58 <_raise_r+0x4c>
 8007d42:	1c59      	adds	r1, r3, #1
 8007d44:	d103      	bne.n	8007d4e <_raise_r+0x42>
 8007d46:	2316      	movs	r3, #22
 8007d48:	6003      	str	r3, [r0, #0]
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	e7e7      	b.n	8007d1e <_raise_r+0x12>
 8007d4e:	2400      	movs	r4, #0
 8007d50:	4628      	mov	r0, r5
 8007d52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d56:	4798      	blx	r3
 8007d58:	2000      	movs	r0, #0
 8007d5a:	e7e0      	b.n	8007d1e <_raise_r+0x12>

08007d5c <raise>:
 8007d5c:	4b02      	ldr	r3, [pc, #8]	; (8007d68 <raise+0xc>)
 8007d5e:	4601      	mov	r1, r0
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	f7ff bfd3 	b.w	8007d0c <_raise_r>
 8007d66:	bf00      	nop
 8007d68:	2000000c 	.word	0x2000000c

08007d6c <_kill_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4d06      	ldr	r5, [pc, #24]	; (8007d8c <_kill_r+0x20>)
 8007d72:	4604      	mov	r4, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	602b      	str	r3, [r5, #0]
 8007d7a:	f7f9 fda3 	bl	80018c4 <_kill>
 8007d7e:	1c43      	adds	r3, r0, #1
 8007d80:	d102      	bne.n	8007d88 <_kill_r+0x1c>
 8007d82:	682b      	ldr	r3, [r5, #0]
 8007d84:	b103      	cbz	r3, 8007d88 <_kill_r+0x1c>
 8007d86:	6023      	str	r3, [r4, #0]
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000628 	.word	0x20000628

08007d90 <_getpid_r>:
 8007d90:	f7f9 bd90 	b.w	80018b4 <_getpid>

08007d94 <__malloc_lock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__malloc_lock+0x8>)
 8007d96:	f000 b809 	b.w	8007dac <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	2000062c 	.word	0x2000062c

08007da0 <__malloc_unlock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__malloc_unlock+0x8>)
 8007da2:	f000 b804 	b.w	8007dae <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	2000062c 	.word	0x2000062c

08007dac <__retarget_lock_acquire_recursive>:
 8007dac:	4770      	bx	lr

08007dae <__retarget_lock_release_recursive>:
 8007dae:	4770      	bx	lr

08007db0 <_init>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr

08007dbc <_fini>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr
