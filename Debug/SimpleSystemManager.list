
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c54  08007c54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c5c  08007c5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000070  08007cd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08007cd4  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024090  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b47  00000000  00000000  00044136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00048c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  0004a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032ebc  00000000  00000000  0004ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f324  00000000  00000000  0007e904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f761  00000000  00000000  0009dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cd389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  001cd3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	08007bbc 	.word	0x08007bbc

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	08007bbc 	.word	0x08007bbc

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN9RCControlC1Ev>:
    };

    float &operator[] (int i) { return ControlSignals[i]; }

    /*  initial values*/
    RCControl()
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    {
        ControlSignals[0] = 50.0f;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000560:	601a      	str	r2, [r3, #0]
        ControlSignals[1] = 50.0f;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000566:	605a      	str	r2, [r3, #4]
        ControlSignals[2] = 0.0f;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
        ControlSignals[3] = 50.0f;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000574:	60da      	str	r2, [r3, #12]
        ControlSignals[4] = 0.0f;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
        ControlSignals[5] = 0.0f;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f04f 0200 	mov.w	r2, #0
 8000584:	615a      	str	r2, [r3, #20]
        ControlSignals[6] = 0.0f;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
        ControlSignals[7] = 0.0f;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f04f 0200 	mov.w	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
        ControlSignals[8] = 0.0f;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
        ControlSignals[9] = 0.0f;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
        ControlSignals[10] = 0.0f;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
        ControlSignals[11] = 0.0f;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
        ControlSignals[12] = 0.0f;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
        ControlSignals[13] = 0.0f;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f04f 0200 	mov.w	r2, #0
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
        ControlSignals[14] = 0.0f;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	639a      	str	r2, [r3, #56]	; 0x38
        ControlSignals[15] = 0.0f;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f04f 0200 	mov.w	r2, #0
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	42480000 	.word	0x42480000

080005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSReceiver* SBUSReceiver::singleton_ = NULL;

SBUSReceiver* SBUSReceiver::getInstance(UART_HandleTypeDef* uart){
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    if (singleton_ == NULL)
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10a      	bne.n	800060e <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x26>
    	singleton_ = new SBUSReceiver(uart);
 80005f8:	2088      	movs	r0, #136	; 0x88
 80005fa:	f007 f98f 	bl	800791c <_Znwj>
 80005fe:	4603      	mov	r3, r0
 8000600:	461c      	mov	r4, r3
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4620      	mov	r0, r4
 8000606:	f000 f80b 	bl	8000620 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 800060c:	601c      	str	r4, [r3, #0]

    // returning the instance pointer
    return singleton_;
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000610:	681b      	ldr	r3, [r3, #0]
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	bf00      	nop
 800061c:	2000008c 	.word	0x2000008c

08000620 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	61da      	str	r2, [r3, #28]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3348      	adds	r3, #72	; 0x48
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff8d 	bl	8000554 <_ZN9RCControlC1Ev>
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	dc0a      	bgt.n	800065a <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x3a>
    {
        received_sbus_.ch[i] = 1000;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	3210      	adds	r2, #16
 800064a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800064e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e7f1      	b.n	800063e <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x1e>
    }
    received_sbus_.ch17 = false;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    HAL_UART_Receive_DMA (uart_, raw_sbus_, SBUS_FRAME_SIZE);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	2219      	movs	r2, #25
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fafa 	bl	8005c84 <HAL_UART_Receive_DMA>
}
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN12SBUSReceiver7GetSBUSEv>:

SBus SBUSReceiver::GetSBUS(){
 800069a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
    return received_sbus_;
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	f103 0420 	add.w	r4, r3, #32
 80006ac:	4694      	mov	ip, r2
 80006ae:	f104 0e20 	add.w	lr, r4, #32
 80006b2:	4665      	mov	r5, ip
 80006b4:	4626      	mov	r6, r4
 80006b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80006b8:	6028      	str	r0, [r5, #0]
 80006ba:	6069      	str	r1, [r5, #4]
 80006bc:	60aa      	str	r2, [r5, #8]
 80006be:	60eb      	str	r3, [r5, #12]
 80006c0:	3410      	adds	r4, #16
 80006c2:	f10c 0c10 	add.w	ip, ip, #16
 80006c6:	4574      	cmp	r4, lr
 80006c8:	d1f3      	bne.n	80006b2 <_ZN12SBUSReceiver7GetSBUSEv+0x18>
 80006ca:	4663      	mov	r3, ip
 80006cc:	4622      	mov	r2, r4
 80006ce:	6810      	ldr	r0, [r2, #0]
 80006d0:	6018      	str	r0, [r3, #0]
 80006d2:	8892      	ldrh	r2, [r2, #4]
 80006d4:	809a      	strh	r2, [r3, #4]
}
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006de <_ZN12SBUSReceiver12GetRCControlEv>:

RCControl SBUSReceiver::GetRCControl(){
 80006de:	b5b0      	push	{r4, r5, r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
    cast_rccontrol();
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f000 f985 	bl	80009f8 <_ZN12SBUSReceiver14cast_rccontrolEv>
    return received_rccontrol_;
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4615      	mov	r5, r2
 80006f4:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000708:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bdb0      	pop	{r4, r5, r7, pc}

08000714 <_ZN12SBUSReceiver5parseEv>:

void SBUSReceiver::parse()
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    if ((raw_sbus_[0] == HEADER_) && (raw_sbus_[24] == FOOTER_)) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	f040 815e 	bne.w	80009e2 <_ZN12SBUSReceiver5parseEv+0x2ce>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7e1b      	ldrb	r3, [r3, #24]
 800072a:	2b00      	cmp	r3, #0
 800072c:	f040 8159 	bne.w	80009e2 <_ZN12SBUSReceiver5parseEv+0x2ce>

        //exactal parsing
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[2] << 8) & 0x07FF));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000742:	b21b      	sxth	r3, r3
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	841a      	strh	r2, [r3, #32]
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[3] << 5) & 0x07FF));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	015b      	lsls	r3, r3, #5
 800075e:	b21b      	sxth	r3, r3
 8000760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000764:	b21b      	sxth	r3, r3
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000766:	4313      	orrs	r3, r2
 8000768:	b21b      	sxth	r3, r3
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	845a      	strh	r2, [r3, #34]	; 0x22
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	099b      	lsrs	r3, r3, #6
 8000776:	b2db      	uxtb	r3, r3
 8000778:	b21a      	sxth	r2, r3
                                            (raw_sbus_[4] << 2) |
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[5] << 10) & 0x07FF));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	b21b      	sxth	r3, r3
 800078e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000792:	b21b      	sxth	r3, r3
                                            (raw_sbus_[4] << 2) |
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	849a      	strh	r2, [r3, #36]	; 0x24
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	085b      	lsrs	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[6] << 7) & 0x07FF));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	799b      	ldrb	r3, [r3, #6]
 80007ac:	01db      	lsls	r3, r3, #7
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007b4:	b21b      	sxth	r3, r3
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	84da      	strh	r2, [r3, #38]	; 0x26
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	799b      	ldrb	r3, [r3, #6]
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[7] << 4) & 0x07FF));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	79db      	ldrb	r3, [r3, #7]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007d6:	b21b      	sxth	r3, r3
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	b29a      	uxth	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	851a      	strh	r2, [r3, #40]	; 0x28
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	79db      	ldrb	r3, [r3, #7]
 80007e6:	09db      	lsrs	r3, r3, #7
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	b21a      	sxth	r2, r3
                                            (raw_sbus_[8] << 1) |
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a1b      	ldrb	r3, [r3, #8]
 80007f0:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[9] << 9) & 0x07FF));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7a5b      	ldrb	r3, [r3, #9]
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	b21b      	sxth	r3, r3
 8000800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000804:	b21b      	sxth	r3, r3
                                            (raw_sbus_[8] << 1) |
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 800080a:	b29a      	uxth	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	855a      	strh	r2, [r3, #42]	; 0x2a
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7a5b      	ldrb	r3, [r3, #9]
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[10] << 6) & 0x07FF));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7a9b      	ldrb	r3, [r3, #10]
 800081e:	019b      	lsls	r3, r3, #6
 8000820:	b21b      	sxth	r3, r3
 8000822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000826:	b21b      	sxth	r3, r3
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000828:	4313      	orrs	r3, r2
 800082a:	b21b      	sxth	r3, r3
 800082c:	b29a      	uxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	859a      	strh	r2, [r3, #44]	; 0x2c
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a9b      	ldrb	r3, [r3, #10]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[11] << 3) & 0x07FF));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7adb      	ldrb	r3, [r3, #11]
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	b21b      	sxth	r3, r3
 8000844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000848:	b21b      	sxth	r3, r3
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	85da      	strh	r2, [r3, #46]	; 0x2e
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b1b      	ldrb	r3, [r3, #12]
 8000858:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[13] << 8) & 0x07FF));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7b5b      	ldrb	r3, [r3, #13]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21b      	sxth	r3, r3
 8000862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000866:	b21b      	sxth	r3, r3
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000868:	4313      	orrs	r3, r2
 800086a:	b21b      	sxth	r3, r3
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	861a      	strh	r2, [r3, #48]	; 0x30
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7b5b      	ldrb	r3, [r3, #13]
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[14] << 5) & 0x07FF));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7b9b      	ldrb	r3, [r3, #14]
 8000880:	015b      	lsls	r3, r3, #5
 8000882:	b21b      	sxth	r3, r3
 8000884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000888:	b21b      	sxth	r3, r3
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 800088a:	4313      	orrs	r3, r2
 800088c:	b21b      	sxth	r3, r3
 800088e:	b29a      	uxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	865a      	strh	r2, [r3, #50]	; 0x32
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7b9b      	ldrb	r3, [r3, #14]
 8000898:	099b      	lsrs	r3, r3, #6
 800089a:	b2db      	uxtb	r3, r3
 800089c:	b21a      	sxth	r2, r3
                                            (raw_sbus_[15] << 2) |
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7bdb      	ldrb	r3, [r3, #15]
 80008a2:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[16] << 10) & 0x07FF));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7c1b      	ldrb	r3, [r3, #16]
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008b6:	b21b      	sxth	r3, r3
                                            (raw_sbus_[15] << 2) |
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21b      	sxth	r3, r3
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	869a      	strh	r2, [r3, #52]	; 0x34
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7c1b      	ldrb	r3, [r3, #16]
 80008c6:	085b      	lsrs	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[17] << 7) & 0x07FF));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7c5b      	ldrb	r3, [r3, #17]
 80008d0:	01db      	lsls	r3, r3, #7
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d8:	b21b      	sxth	r3, r3
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b29a      	uxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	86da      	strh	r2, [r3, #54]	; 0x36
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7c5b      	ldrb	r3, [r3, #17]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[18] << 4) & 0x07FF));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7c9b      	ldrb	r3, [r3, #18]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008fa:	b21b      	sxth	r3, r3
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	b29a      	uxth	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	871a      	strh	r2, [r3, #56]	; 0x38
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7c9b      	ldrb	r3, [r3, #18]
 800090a:	09db      	lsrs	r3, r3, #7
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b21a      	sxth	r2, r3
                                            (raw_sbus_[19] << 1) |
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7cdb      	ldrb	r3, [r3, #19]
 8000914:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000916:	b21b      	sxth	r3, r3
 8000918:	4313      	orrs	r3, r2
 800091a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[20] << 9) & 0x07FF));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7d1b      	ldrb	r3, [r3, #20]
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	b21b      	sxth	r3, r3
 8000924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000928:	b21b      	sxth	r3, r3
                                            (raw_sbus_[19] << 1) |
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 800092e:	b29a      	uxth	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	875a      	strh	r2, [r3, #58]	; 0x3a
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7d1b      	ldrb	r3, [r3, #20]
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	b2db      	uxtb	r3, r3
 800093c:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[21] << 6) & 0x07FF));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7d5b      	ldrb	r3, [r3, #21]
 8000942:	019b      	lsls	r3, r3, #6
 8000944:	b21b      	sxth	r3, r3
 8000946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800094a:	b21b      	sxth	r3, r3
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	879a      	strh	r2, [r3, #60]	; 0x3c
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7d5b      	ldrb	r3, [r3, #21]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[22] << 3) & 0x07FF));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7d9b      	ldrb	r3, [r3, #22]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	b21b      	sxth	r3, r3
 8000968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800096c:	b21b      	sxth	r3, r3
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 800096e:	4313      	orrs	r3, r2
 8000970:	b21b      	sxth	r3, r3
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* CH 17 */
        received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7ddb      	ldrb	r3, [r3, #23]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        /* CH 18 */
        received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7ddb      	ldrb	r3, [r3, #23]
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        /* Grab the lost frame */
        received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7ddb      	ldrb	r3, [r3, #23]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        /* Grab the failsafe */
        received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7ddb      	ldrb	r3, [r3, #23]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        received_sbus_.new_data = true;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009e0:	e004      	b.n	80009ec <_ZN12SBUSReceiver5parseEv+0x2d8>

    }else{
    	received_sbus_.new_data = false;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_ZN12SBUSReceiver14cast_rccontrolEv>:

void SBUSReceiver::cast_rccontrol()
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < 16; i++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d816      	bhi.n	8000a38 <_ZN12SBUSReceiver14cast_rccontrolEv+0x40>
        received_rccontrol_.ControlSignals[i] = sbus_to_rccontrol(received_sbus_.ch[i]);
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3210      	adds	r2, #16
 8000a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a14:	7bfc      	ldrb	r4, [r7, #15]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f811 	bl	8000a40 <_ZN12SBUSReceiver17sbus_to_rccontrolEt>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	f104 0312 	add.w	r3, r4, #18
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	edc3 7a00 	vstr	s15, [r3]
    for(uint8_t i = 0; i < 16; i++){
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3301      	adds	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e7e5      	b.n	8000a04 <_ZN12SBUSReceiver14cast_rccontrolEv+0xc>
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <_ZN12SBUSReceiver17sbus_to_rccontrolEt>:

 float SBUSReceiver::sbus_to_rccontrol(uint16_t channel_value)
 {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
    if(channel_value < SBUS_RANGE_MIN)
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	2bbf      	cmp	r3, #191	; 0xbf
 8000a50:	d801      	bhi.n	8000a56 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x16>
        channel_value = SBUS_RANGE_MIN;
 8000a52:	23c0      	movs	r3, #192	; 0xc0
 8000a54:	807b      	strh	r3, [r7, #2]
    if(channel_value > SBUS_RANGE_MAX)
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000a5c:	d902      	bls.n	8000a64 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x24>
        channel_value = SBUS_RANGE_MAX;
 8000a5e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a62:	807b      	strh	r3, [r7, #2]
    return static_cast<float>((channel_value - SBUS_RANGE_MIN) * (100.0f / SBUS_RANGE_RANGE));
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	3bc0      	subs	r3, #192	; 0xc0
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a70:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a88 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x48>
 8000a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 }
 8000a78:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	3d800000 	.word	0x3d800000

08000a8c <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	4816      	ldr	r0, [pc, #88]	; (8000af4 <HAL_UART_RxCpltCallback+0x68>)
 8000a9a:	f002 ffc1 	bl	8003a20 <HAL_GPIO_WritePin>
	 SBUSReceiver::getInstance(huart)->parse();
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fda2 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fe34 	bl	8000714 <_ZN12SBUSReceiver5parseEv>
	 HAL_UART_Receive_DMA (huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fd9b 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2219      	movs	r2, #25
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f005 f8e3 	bl	8005c84 <HAL_UART_Receive_DMA>
	 SBUSSender::getInstance(huart)->assemble_packet();
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f81a 	bl	8000af8 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f887 	bl	8000bda <_ZN10SBUSSender15assemble_packetEv>
	 HAL_UART_Transmit(huart, SBUSSender::getInstance(huart)->send_buf_, SBUS_FRAME_SIZE, 10);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f813 	bl	8000af8 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	2219      	movs	r2, #25
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f004 ffc4 	bl	8005a68 <HAL_UART_Transmit>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <HAL_UART_RxCpltCallback+0x68>)
 8000ae6:	f002 ff9b 	bl	8003a20 <HAL_GPIO_WritePin>
 }
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	42020400 	.word	0x42020400

08000af8 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender* SBUSSender::singleton_ = NULL;

SBUSSender* SBUSSender::getInstance(UART_HandleTypeDef* uart){
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    if (singleton_ == nullptr)
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10a      	bne.n	8000b1e <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x26>
      singleton_ = new SBUSSender(uart);
 8000b08:	2048      	movs	r0, #72	; 0x48
 8000b0a:	f006 ff07 	bl	800791c <_Znwj>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461c      	mov	r4, r3
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	4620      	mov	r0, r4
 8000b16:	f000 f80b 	bl	8000b30 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b1c:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000b1e:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b20:	681b      	ldr	r3, [r3, #0]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000090 	.word	0x20000090

08000b30 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	dc0a      	bgt.n	8000b60 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x30>
	{
		send_sbus_.ch[i] = 1000;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	3210      	adds	r2, #16
 8000b50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e7f1      	b.n	8000b44 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x14>
	}
	send_sbus_.ch17 = false;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	send_sbus_.ch18 = false;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	send_sbus_.failsafe = false;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	send_sbus_.lost_frame = false;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	send_sbus_.new_data = false;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit_DMA(uart_, send_buf_, SBUS_FRAME_SIZE);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	2219      	movs	r2, #25
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fff7 	bl	8005b84 <HAL_UART_Transmit_DMA>
}
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN10SBUSSender12SetSBusValueE4SBus>:

void SBUSSender::SetChannelValue(uint8_t channel, float value){
	send_sbus_.ch[channel] = rccontrol_to_sbus(value);
}

void SBUSSender::SetSBusValue(SBus values){
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	b4b0      	push	{r4, r5, r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	f107 001c 	add.w	r0, r7, #28
 8000bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    send_sbus_ = values;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f103 0420 	add.w	r4, r3, #32
 8000bb8:	f107 051c 	add.w	r5, r7, #28
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bc8:	6020      	str	r0, [r4, #0]
 8000bca:	3404      	adds	r4, #4
 8000bcc:	8021      	strh	r1, [r4, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bcb0      	pop	{r4, r5, r7}
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr

08000bda <_ZN10SBUSSender15assemble_packetEv>:
      send_sbus_.ch[i] = rccontrol_to_sbus(values.ControlSignals[i]);
    }
}

void SBUSSender::assemble_packet()
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	220f      	movs	r2, #15
 8000be6:	701a      	strb	r2, [r3, #0]
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	8c1b      	ldrh	r3, [r3, #32]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	705a      	strb	r2, [r3, #1]
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	8c1b      	ldrh	r3, [r3, #32]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	f023 0307 	bic.w	r3, r3, #7
 8000c0e:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	709a      	strb	r2, [r3, #2]
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c28:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c2e:	019b      	lsls	r3, r3, #6
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c36:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	70da      	strb	r2, [r3, #3]
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	711a      	strb	r2, [r3, #4]
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c54:	0a9b      	lsrs	r3, r3, #10
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	f023 0301 	bic.w	r3, r3, #1
 8000c6c:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	715a      	strb	r2, [r3, #5]
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c7c:	09db      	lsrs	r3, r3, #7
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	f023 030f 	bic.w	r3, r3, #15
 8000c94:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	719a      	strb	r2, [r3, #6]
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cae:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cb4:	01db      	lsls	r3, r3, #7
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000cbc:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	71da      	strb	r2, [r3, #7]
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ccc:	085b      	lsrs	r3, r3, #1
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	721a      	strb	r2, [r3, #8]
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cda:	0a5b      	lsrs	r3, r3, #9
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	f023 0303 	bic.w	r3, r3, #3
 8000cf2:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	725a      	strb	r2, [r3, #9]
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d02:	099b      	lsrs	r3, r3, #6
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d12:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	729a      	strb	r2, [r3, #10]
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	72da      	strb	r2, [r3, #11]
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	731a      	strb	r2, [r3, #12]
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	f023 0307 	bic.w	r3, r3, #7
 8000d54:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	735a      	strb	r2, [r3, #13]
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d6e:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d7c:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	739a      	strb	r2, [r3, #14]
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	73da      	strb	r2, [r3, #15]
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d9a:	0a9b      	lsrs	r3, r3, #10
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	741a      	strb	r2, [r3, #16]
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000dc2:	09db      	lsrs	r3, r3, #7
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	f003 030f 	and.w	r3, r3, #15
 8000dcc:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	f023 030f 	bic.w	r3, r3, #15
 8000dda:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	745a      	strb	r2, [r3, #17]
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000df4:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000dfa:	01db      	lsls	r3, r3, #7
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e02:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	749a      	strb	r2, [r3, #18]
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	74da      	strb	r2, [r3, #19]
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000e20:	0a5b      	lsrs	r3, r3, #9
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	f023 0303 	bic.w	r3, r3, #3
 8000e38:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	751a      	strb	r2, [r3, #20]
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000e48:	099b      	lsrs	r3, r3, #6
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e58:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	755a      	strb	r2, [r3, #21]
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	759a      	strb	r2, [r3, #22]
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	75da      	strb	r2, [r3, #23]
  send_buf_[24] = FOOTER_;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000ee8:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <MX_ADC1_Init+0xe4>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f48:	f001 f92c 	bl	80021a4 <HAL_ADC_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f52:	f000 fa25 	bl	80013a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f62:	f001 fe7b 	bl	8002c5c <HAL_ADCEx_MultiModeConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f6c:	f000 fa18 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_ADC1_Init+0xe8>)
 8000f72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f74:	2306      	movs	r3, #6
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7c:	237f      	movs	r3, #127	; 0x7f
 8000f7e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f80:	2304      	movs	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_ADC1_Init+0xe0>)
 8000f8e:	f001 fa55 	bl	800243c <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f98:	f000 fa02 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000094 	.word	0x20000094
 8000fa8:	42028000 	.word	0x42028000
 8000fac:	0c900008 	.word	0x0c900008

08000fb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ae      	sub	sp, #184	; 0xb8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2294      	movs	r2, #148	; 0x94
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fcf5 	bl	80079c0 <memset>
  if(adcHandle->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_ADC_MspInit+0xa8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d137      	bne.n	8001050 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fe6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fe98 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000ffe:	f000 f9cf 	bl	80013a0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_ADC_MspInit+0xac>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_ADC_MspInit+0xac>)
 8001008:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_ADC_MspInit+0xac>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_ADC_MspInit+0xac>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a0f      	ldr	r2, [pc, #60]	; (800105c <HAL_ADC_MspInit+0xac>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_ADC_MspInit+0xac>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001032:	2304      	movs	r3, #4
 8001034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001038:	2303      	movs	r3, #3
 800103a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_ADC_MspInit+0xb0>)
 800104c:	f002 fb68 	bl	8003720 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001050:	bf00      	nop
 8001052:	37b8      	adds	r7, #184	; 0xb8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	42028000 	.word	0x42028000
 800105c:	40021000 	.word	0x40021000
 8001060:	42020800 	.word	0x42020800

08001064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_DMA_Init+0x60>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <MX_DMA_Init+0x60>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6493      	str	r3, [r2, #72]	; 0x48
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_DMA_Init+0x60>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x60>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x60>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6493      	str	r3, [r2, #72]	; 0x48
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x60>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	201d      	movs	r0, #29
 80010a0:	f001 ff5b 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a4:	201d      	movs	r0, #29
 80010a6:	f001 ff72 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	201e      	movs	r0, #30
 80010b0:	f001 ff53 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010b4:	201e      	movs	r0, #30
 80010b6:	f001 ff6a 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <MX_GPIO_Init+0x114>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a3e      	ldr	r2, [pc, #248]	; (80011dc <MX_GPIO_Init+0x114>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MX_GPIO_Init+0x114>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <MX_GPIO_Init+0x114>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a38      	ldr	r2, [pc, #224]	; (80011dc <MX_GPIO_Init+0x114>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <MX_GPIO_Init+0x114>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MX_GPIO_Init+0x114>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a32      	ldr	r2, [pc, #200]	; (80011dc <MX_GPIO_Init+0x114>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_GPIO_Init+0x114>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_GPIO_Init+0x114>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a2c      	ldr	r2, [pc, #176]	; (80011dc <MX_GPIO_Init+0x114>)
 800112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_GPIO_Init+0x114>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800113e:	f002 fe05 	bl	8003d4c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4826      	ldr	r0, [pc, #152]	; (80011e0 <MX_GPIO_Init+0x118>)
 8001148:	f002 fc6a 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001152:	4824      	ldr	r0, [pc, #144]	; (80011e4 <MX_GPIO_Init+0x11c>)
 8001154:	f002 fc64 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	21a0      	movs	r1, #160	; 0xa0
 800115c:	4822      	ldr	r0, [pc, #136]	; (80011e8 <MX_GPIO_Init+0x120>)
 800115e:	f002 fc5f 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001162:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001168:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	481b      	ldr	r0, [pc, #108]	; (80011e8 <MX_GPIO_Init+0x120>)
 800117a:	f002 fad1 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <MX_GPIO_Init+0x118>)
 8001196:	f002 fac3 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800119a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_GPIO_Init+0x11c>)
 80011b4:	f002 fab4 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80011b8:	23a0      	movs	r3, #160	; 0xa0
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_GPIO_Init+0x120>)
 80011d0:	f002 faa6 	bl	8003720 <HAL_GPIO_Init>

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	42020800 	.word	0x42020800
 80011e4:	42020000 	.word	0x42020000
 80011e8:	42020400 	.word	0x42020400

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	b0bd      	sub	sp, #244	; 0xf4
 80011f0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 fdc0 	bl	8001d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f863 	bl	80012c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f7ff ff65 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fe:	f7ff ff31 	bl	8001064 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001202:	f000 fb45 	bl	8001890 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8001206:	f000 f8d1 	bl	80013ac <MX_RTC_Init>
  MX_UCPD1_Init();
 800120a:	f000 fb0b 	bl	8001824 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800120e:	f000 fd01 	bl	8001c14 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8001212:	f7ff fe57 	bl	8000ec4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001216:	f000 fb89 	bl	800192c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SBus sbus_data;
  RCControl control_data;
 800121a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f998 	bl	8000554 <_ZN9RCControlC1Ev>
  while (1)
  {
    /* USER CODE END WHILE */
    
    /* USER CODE BEGIN 3 */
     sbus_data = SBUSReceiver::getInstance(&huart2)->GetSBUS();
 8001224:	4825      	ldr	r0, [pc, #148]	; (80012bc <main+0xd0>)
 8001226:	f7ff f9df 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 800122a:	4602      	mov	r2, r0
 800122c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fa31 	bl	800069a <_ZN12SBUSReceiver7GetSBUSEv>
 8001238:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800123c:	f107 06a8 	add.w	r6, r7, #168	; 0xa8
 8001240:	f104 0c20 	add.w	ip, r4, #32
 8001244:	4635      	mov	r5, r6
 8001246:	4623      	mov	r3, r4
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	6859      	ldr	r1, [r3, #4]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001252:	3410      	adds	r4, #16
 8001254:	3610      	adds	r6, #16
 8001256:	4564      	cmp	r4, ip
 8001258:	d1f4      	bne.n	8001244 <main+0x58>
 800125a:	4633      	mov	r3, r6
 800125c:	4622      	mov	r2, r4
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	6018      	str	r0, [r3, #0]
 8001262:	8892      	ldrh	r2, [r2, #4]
 8001264:	809a      	strh	r2, [r3, #4]
     control_data = SBUSReceiver::getInstance(&huart2)->GetRCControl();
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <main+0xd0>)
 8001268:	f7ff f9be 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 800126c:	4602      	mov	r2, r0
 800126e:	463b      	mov	r3, r7
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fa33 	bl	80006de <_ZN12SBUSReceiver12GetRCControlEv>
 8001278:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800127c:	463d      	mov	r5, r7
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800128e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     SBUSSender::getInstance(&huart2)->SetSBusValue(sbus_data);
 8001292:	480a      	ldr	r0, [pc, #40]	; (80012bc <main+0xd0>)
 8001294:	f7ff fc30 	bl	8000af8 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8001298:	4606      	mov	r6, r0
 800129a:	466c      	mov	r4, sp
 800129c:	f107 05b4 	add.w	r5, r7, #180	; 0xb4
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a8:	c403      	stmia	r4!, {r0, r1}
 80012aa:	8022      	strh	r2, [r4, #0]
 80012ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b2:	4630      	mov	r0, r6
 80012b4:	f7ff fc74 	bl	8000ba0 <_ZN10SBUSSender12SetSBusValueE4SBus>
     sbus_data = SBUSReceiver::getInstance(&huart2)->GetSBUS();
 80012b8:	e7b4      	b.n	8001224 <main+0x38>
 80012ba:	bf00      	nop
 80012bc:	200001bc 	.word	0x200001bc

080012c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b098      	sub	sp, #96	; 0x60
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	2248      	movs	r2, #72	; 0x48
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f006 fb76 	bl	80079c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f002 fcd6 	bl	8003c94 <HAL_PWREx_ControlVoltageScaling>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80012f8:	f000 f852 	bl	80013a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012fc:	f002 fcac 	bl	8003c58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <_Z18SystemClock_Configv+0xdc>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	4a25      	ldr	r2, [pc, #148]	; (800139c <_Z18SystemClock_Configv+0xdc>)
 8001308:	f023 0318 	bic.w	r3, r3, #24
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8001310:	2334      	movs	r3, #52	; 0x34
 8001312:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001314:	2381      	movs	r3, #129	; 0x81
 8001316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001320:	2300      	movs	r3, #0
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001324:	2360      	movs	r3, #96	; 0x60
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001328:	2302      	movs	r3, #2
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800132c:	2301      	movs	r3, #1
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001334:	2337      	movs	r3, #55	; 0x37
 8001336:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001338:	2307      	movs	r3, #7
 800133a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fd33 	bl	8003db4 <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800135e:	f000 f81f 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2303      	movs	r3, #3
 8001368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2105      	movs	r1, #5
 800137a:	4618      	mov	r0, r3
 800137c:	f003 f9f0 	bl	8004760 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001390:	f000 f806 	bl	80013a0 <Error_Handler>
  }
}
 8001394:	bf00      	nop
 8001396:	3760      	adds	r7, #96	; 0x60
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_RTC_Init+0x8c>)
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <MX_RTC_Init+0x90>)
 80013c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_RTC_Init+0x8c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_RTC_Init+0x8c>)
 80013d0:	227f      	movs	r2, #127	; 0x7f
 80013d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_RTC_Init+0x8c>)
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_RTC_Init+0x8c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_RTC_Init+0x8c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_RTC_Init+0x8c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_RTC_Init+0x8c>)
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_RTC_Init+0x8c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013fa:	480f      	ldr	r0, [pc, #60]	; (8001438 <MX_RTC_Init+0x8c>)
 80013fc:	f004 f9aa 	bl	8005754 <HAL_RTC_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001406:	f7ff ffcb 	bl	80013a0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_RTC_Init+0x8c>)
 8001420:	f004 faa6 	bl	8005970 <HAL_RTCEx_PrivilegeModeSet>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800142a:	f7ff ffb9 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000fc 	.word	0x200000fc
 800143c:	40002800 	.word	0x40002800

08001440 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0a8      	sub	sp, #160	; 0xa0
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2294      	movs	r2, #148	; 0x94
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f006 fab5 	bl	80079c0 <memset>
  if(rtcHandle->Instance==RTC)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_RTC_MspInit+0x74>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d124      	bne.n	80014aa <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001464:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fc58 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800147e:	f7ff ff8f 	bl	80013a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_RTC_MspInit+0x78>)
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_RTC_MspInit+0x78>)
 800148a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RTC_MspInit+0x78>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_RTC_MspInit+0x78>)
 8001498:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_RTC_MspInit+0x78>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	37a0      	adds	r7, #160	; 0xa0
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40002800 	.word	0x40002800
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_MspInit+0x44>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_MspInit+0x44>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6613      	str	r3, [r2, #96]	; 0x60
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_MspInit+0x44>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_MspInit+0x44>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_MspInit+0x44>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6593      	str	r3, [r2, #88]	; 0x58
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_MspInit+0x44>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f000 fc68 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DMA1_Channel1_IRQHandler+0x10>)
 800155e:	f001 ff0f 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000250 	.word	0x20000250

0800156c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <DMA1_Channel2_IRQHandler+0x10>)
 8001572:	f001 ff05 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002b8 	.word	0x200002b8

08001580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <USART2_IRQHandler+0x10>)
 8001586:	f004 fbc9 	bl	8005d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001bc 	.word	0x200001bc

08001594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_kill>:

int _kill(int pid, int sig)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ae:	f006 f9d5 	bl	800795c <__errno>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2216      	movs	r2, #22
 80015b6:	601a      	str	r2, [r3, #0]
  return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_exit>:

void _exit (int status)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ffe7 	bl	80015a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d6:	e7fe      	b.n	80015d6 <_exit+0x12>

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f006 f9a8 	bl	800795c <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20030000 	.word	0x20030000
 8001638:	00000400 	.word	0x00000400
 800163c:	20000124 	.word	0x20000124
 8001640:	20000630 	.word	0x20000630

08001644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <SystemInit+0x20>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <SystemInit+0x20>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800166e:	4b4f      	ldr	r3, [pc, #316]	; (80017ac <SystemCoreClockUpdate+0x144>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d107      	bne.n	800168a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800167a:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <SystemCoreClockUpdate+0x144>)
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e005      	b.n	8001696 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800168a:	4b48      	ldr	r3, [pc, #288]	; (80017ac <SystemCoreClockUpdate+0x144>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001696:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <SystemCoreClockUpdate+0x148>)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a0:	4b42      	ldr	r3, [pc, #264]	; (80017ac <SystemCoreClockUpdate+0x144>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	d866      	bhi.n	800177a <SystemCoreClockUpdate+0x112>
 80016ac:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <SystemCoreClockUpdate+0x4c>)
 80016ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b2:	bf00      	nop
 80016b4:	080016e9 	.word	0x080016e9
 80016b8:	0800177b 	.word	0x0800177b
 80016bc:	0800177b 	.word	0x0800177b
 80016c0:	0800177b 	.word	0x0800177b
 80016c4:	080016f1 	.word	0x080016f1
 80016c8:	0800177b 	.word	0x0800177b
 80016cc:	0800177b 	.word	0x0800177b
 80016d0:	0800177b 	.word	0x0800177b
 80016d4:	080016f9 	.word	0x080016f9
 80016d8:	0800177b 	.word	0x0800177b
 80016dc:	0800177b 	.word	0x0800177b
 80016e0:	0800177b 	.word	0x0800177b
 80016e4:	08001701 	.word	0x08001701
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80016e8:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <SystemCoreClockUpdate+0x14c>)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6013      	str	r3, [r2, #0]
      break;
 80016ee:	e048      	b.n	8001782 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <SystemCoreClockUpdate+0x14c>)
 80016f2:	4a31      	ldr	r2, [pc, #196]	; (80017b8 <SystemCoreClockUpdate+0x150>)
 80016f4:	601a      	str	r2, [r3, #0]
      break;
 80016f6:	e044      	b.n	8001782 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <SystemCoreClockUpdate+0x14c>)
 80016fa:	4a30      	ldr	r2, [pc, #192]	; (80017bc <SystemCoreClockUpdate+0x154>)
 80016fc:	601a      	str	r2, [r3, #0]
      break;
 80016fe:	e040      	b.n	8001782 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <SystemCoreClockUpdate+0x144>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <SystemCoreClockUpdate+0x144>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	3301      	adds	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d003      	beq.n	8001726 <SystemCoreClockUpdate+0xbe>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d006      	beq.n	8001732 <SystemCoreClockUpdate+0xca>
 8001724:	e00b      	b.n	800173e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001726:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <SystemCoreClockUpdate+0x150>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	613b      	str	r3, [r7, #16]
          break;
 8001730:	e00b      	b.n	800174a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001732:	4a22      	ldr	r2, [pc, #136]	; (80017bc <SystemCoreClockUpdate+0x154>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	613b      	str	r3, [r7, #16]
          break;
 800173c:	e005      	b.n	800174a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	613b      	str	r3, [r7, #16]
          break;
 8001748:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <SystemCoreClockUpdate+0x144>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <SystemCoreClockUpdate+0x144>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0e5b      	lsrs	r3, r3, #25
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	3301      	adds	r3, #1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <SystemCoreClockUpdate+0x14c>)
 8001776:	6013      	str	r3, [r2, #0]
      break;
 8001778:	e003      	b.n	8001782 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <SystemCoreClockUpdate+0x14c>)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	6013      	str	r3, [r2, #0]
      break;
 8001780:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <SystemCoreClockUpdate+0x144>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <SystemCoreClockUpdate+0x158>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <SystemCoreClockUpdate+0x14c>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <SystemCoreClockUpdate+0x14c>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	08007bec 	.word	0x08007bec
 80017b4:	20000000 	.word	0x20000000
 80017b8:	00f42400 	.word	0x00f42400
 80017bc:	007a1200 	.word	0x007a1200
 80017c0:	08007bd4 	.word	0x08007bd4

080017c4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <LL_APB1_GRP2_EnableClock+0x2c>)
 80017fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4313      	orrs	r3, r2
 8001806:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <LL_APB1_GRP2_EnableClock+0x2c>)
 800180a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4013      	ands	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000

08001824 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800183a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800183e:	f7ff ffd9 	bl	80017f4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff ffbe 	bl	80017c4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff ffbb 	bl	80017c4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001852:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001854:	2303      	movs	r3, #3
 8001856:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <MX_UCPD1_Init+0x64>)
 8001862:	f005 ffb2 	bl	80077ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800186a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800186c:	2303      	movs	r3, #3
 800186e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_UCPD1_Init+0x68>)
 800187a:	f005 ffa6 	bl	80077ca <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	42020400 	.word	0x42020400
 800188c:	42020000 	.word	0x42020000

08001890 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 8001896:	4a23      	ldr	r2, [pc, #140]	; (8001924 <MX_LPUART1_UART_Init+0x94>)
 8001898:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 800189c:	4a22      	ldr	r2, [pc, #136]	; (8001928 <MX_LPUART1_UART_Init+0x98>)
 800189e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018b4:	220c      	movs	r2, #12
 80018b6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018d6:	4812      	ldr	r0, [pc, #72]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018d8:	f004 f876 	bl	80059c8 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80018e2:	f7ff fd5d 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018ea:	f005 fd58 	bl	800739e <HAL_UARTEx_SetTxFifoThreshold>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80018f4:	f7ff fd54 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 80018fc:	f005 fd8d 	bl	800741a <HAL_UARTEx_SetRxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001906:	f7ff fd4b 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_LPUART1_UART_Init+0x90>)
 800190c:	f005 fd0e 	bl	800732c <HAL_UARTEx_DisableFifoMode>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001916:	f7ff fd43 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000128 	.word	0x20000128
 8001924:	40008000 	.word	0x40008000
 8001928:	00033324 	.word	0x00033324

0800192c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <MX_USART2_UART_Init+0xa8>)
 8001934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <MX_USART2_UART_Init+0xac>)
 800193a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 800193e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 800194e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001974:	2203      	movs	r2, #3
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 800197a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 8001982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001988:	4811      	ldr	r0, [pc, #68]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 800198a:	f004 f81d 	bl	80059c8 <HAL_UART_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001994:	f7ff fd04 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 800199c:	f005 fcff 	bl	800739e <HAL_UARTEx_SetTxFifoThreshold>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80019a6:	f7ff fcfb 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 80019ae:	f005 fd34 	bl	800741a <HAL_UARTEx_SetRxFifoThreshold>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80019b8:	f7ff fcf2 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_USART2_UART_Init+0xa4>)
 80019be:	f005 fcb5 	bl	800732c <HAL_UARTEx_DisableFifoMode>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 80019c8:	f7ff fcea 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200001bc 	.word	0x200001bc
 80019d4:	40004400 	.word	0x40004400
 80019d8:	000186a0 	.word	0x000186a0

080019dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0b0      	sub	sp, #192	; 0xc0
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	2294      	movs	r2, #148	; 0x94
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 ffdf 	bl	80079c0 <memset>
  if(uartHandle->Instance==LPUART1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_UART_MspInit+0x214>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d13e      	bne.n	8001a8a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 f985 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a24:	f7ff fcbc 	bl	80013a0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a28:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a40:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	4a6b      	ldr	r2, [pc, #428]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4c:	4b69      	ldr	r3, [pc, #420]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001a58:	f002 f978 	bl	8003d4c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001a5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a76:	2308      	movs	r3, #8
 8001a78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a80:	4619      	mov	r1, r3
 8001a82:	485d      	ldr	r0, [pc, #372]	; (8001bf8 <HAL_UART_MspInit+0x21c>)
 8001a84:	f001 fe4c 	bl	8003720 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a88:	e0ad      	b.n	8001be6 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5b      	ldr	r2, [pc, #364]	; (8001bfc <HAL_UART_MspInit+0x220>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	f040 80a8 	bne.w	8001be6 <HAL_UART_MspInit+0x20a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 f940 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001aae:	f7ff fc77 	bl	80013a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58
 8001abe:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a49      	ldr	r2, [pc, #292]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_UART_MspInit+0x218>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afa:	2307      	movs	r3, #7
 8001afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b04:	4619      	mov	r1, r3
 8001b06:	483e      	ldr	r0, [pc, #248]	; (8001c00 <HAL_UART_MspInit+0x224>)
 8001b08:	f001 fe0a 	bl	8003720 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b0e:	4a3e      	ldr	r2, [pc, #248]	; (8001c08 <HAL_UART_MspInit+0x22c>)
 8001b10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b14:	221b      	movs	r2, #27
 8001b16:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b24:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2a:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b38:	2220      	movs	r2, #32
 8001b3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b42:	4830      	ldr	r0, [pc, #192]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b44:	f001 fa3e 	bl	8002fc4 <HAL_DMA_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001b4e:	f7ff fc27 	bl	80013a0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b52:	2110      	movs	r1, #16
 8001b54:	482b      	ldr	r0, [pc, #172]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b56:	f001 fd13 	bl	8003580 <HAL_DMA_ConfigChannelAttributes>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001b60:	f7ff fc1e 	bl	80013a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <HAL_UART_MspInit+0x228>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <HAL_UART_MspInit+0x234>)
 8001b76:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b7a:	221c      	movs	r2, #28
 8001b7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b80:	2210      	movs	r2, #16
 8001b82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ba8:	4818      	ldr	r0, [pc, #96]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001baa:	f001 fa0b 	bl	8002fc4 <HAL_DMA_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001bb4:	f7ff fbf4 	bl	80013a0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4814      	ldr	r0, [pc, #80]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001bbc:	f001 fce0 	bl	8003580 <HAL_DMA_ConfigChannelAttributes>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8001bc6:	f7ff fbeb 	bl	80013a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001bce:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_UART_MspInit+0x230>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	203e      	movs	r0, #62	; 0x3e
 8001bdc:	f001 f9bd 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001be0:	203e      	movs	r0, #62	; 0x3e
 8001be2:	f001 f9d4 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	37c0      	adds	r7, #192	; 0xc0
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40008000 	.word	0x40008000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42021800 	.word	0x42021800
 8001bfc:	40004400 	.word	0x40004400
 8001c00:	42020000 	.word	0x42020000
 8001c04:	20000250 	.word	0x20000250
 8001c08:	40020008 	.word	0x40020008
 8001c0c:	200002b8 	.word	0x200002b8
 8001c10:	4002001c 	.word	0x4002001c

08001c14 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <MX_USB_PCD_Init+0x4c>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c20:	2208      	movs	r2, #8
 8001c22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_USB_PCD_Init+0x48>)
 8001c4a:	f001 ff01 	bl	8003a50 <HAL_PCD_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001c54:	f7ff fba4 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000320 	.word	0x20000320
 8001c60:	4000d400 	.word	0x4000d400

08001c64 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0ae      	sub	sp, #184	; 0xb8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2294      	movs	r2, #148	; 0x94
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 fe9b 	bl	80079c0 <memset>
  if(pcdHandle->Instance==USB)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a22      	ldr	r2, [pc, #136]	; (8001d18 <HAL_PCD_MspInit+0xb4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d13d      	bne.n	8001d10 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 f83f 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001cb0:	f7ff fb76 	bl	80013a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_PCD_MspInit+0xb8>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <HAL_PCD_MspInit+0xb8>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_PCD_MspInit+0xb8>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ccc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <HAL_PCD_MspInit+0xbc>)
 8001cf4:	f001 fd14 	bl	8003720 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_PCD_MspInit+0xb8>)
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_PCD_MspInit+0xb8>)
 8001cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d02:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_PCD_MspInit+0xb8>)
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001d10:	bf00      	nop
 8001d12:	37b8      	adds	r7, #184	; 0xb8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	4000d400 	.word	0x4000d400
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	42020000 	.word	0x42020000

08001d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d28:	f7ff fc8c 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d2e:	e003      	b.n	8001d38 <LoopCopyDataInit>

08001d30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d36:	3104      	adds	r1, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d40:	d3f6      	bcc.n	8001d30 <CopyDataInit>
	ldr	r2, =_sbss
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d44:	e002      	b.n	8001d4c <LoopFillZerobss>

08001d46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d48:	f842 3b04 	str.w	r3, [r2], #4

08001d4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <LoopForever+0x16>)
	cmp	r2, r3
 8001d4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d50:	d3f9      	bcc.n	8001d46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d52:	f005 fe09 	bl	8007968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d56:	f7ff fa49 	bl	80011ec <main>

08001d5a <LoopForever>:

LoopForever:
    b LoopForever
 8001d5a:	e7fe      	b.n	8001d5a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d5c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001d60:	08007c64 	.word	0x08007c64
	ldr	r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d68:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001d6c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001d70:	2000062c 	.word	0x2000062c

08001d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC1_2_IRQHandler>

08001d76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f001 f8df 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001d86:	f7ff fc6f 	bl	8001668 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f80e 	bl	8001dac <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	e001      	b.n	8001da0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9c:	f7ff fb8e 	bl	80014bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da0:	79fb      	ldrb	r3, [r7, #7]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_InitTick+0x6c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d023      	beq.n	8001e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_InitTick+0x70>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_InitTick+0x6c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 f8e7 	bl	8002faa <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b07      	cmp	r3, #7
 8001de6:	d809      	bhi.n	8001dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f001 f8b3 	bl	8002f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_InitTick+0x74>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e007      	b.n	8001e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e004      	b.n	8001e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e001      	b.n	8001e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008
 8001e48:	20000614 	.word	0x20000614

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000614 	.word	0x20000614

08001e64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3360      	adds	r3, #96	; 0x60
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <LL_ADC_SetOffset+0x44>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	03fff000 	.word	0x03fff000

08001f14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3360      	adds	r3, #96	; 0x60
 8001f22:	461a      	mov	r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3360      	adds	r3, #96	; 0x60
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	615a      	str	r2, [r3, #20]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3330      	adds	r3, #48	; 0x30
 8001fac:	461a      	mov	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	4413      	add	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	211f      	movs	r1, #31
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	401a      	ands	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	f003 011f 	and.w	r1, r3, #31
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3314      	adds	r3, #20
 8002004:	461a      	mov	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	0e5b      	lsrs	r3, r3, #25
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	0d1b      	lsrs	r3, r3, #20
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2107      	movs	r1, #7
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	401a      	ands	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	0d1b      	lsrs	r3, r3, #20
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0318 	and.w	r3, r3, #24
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002070:	40d9      	lsrs	r1, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	400b      	ands	r3, r1
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	431a      	orrs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	0007ffff 	.word	0x0007ffff

08002094 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6093      	str	r3, [r2, #8]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800211c:	d101      	bne.n	8002122 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <LL_ADC_IsEnabled+0x18>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <LL_ADC_IsEnabled+0x1a>
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b04      	cmp	r3, #4
 8002168:	d101      	bne.n	800216e <LL_ADC_REG_IsConversionOngoing+0x18>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d101      	bne.n	8002194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e12e      	b.n	800241c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7fe feef 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff67 	bl	80020b8 <LL_ADC_IsDeepPowerDownEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff4d 	bl	8002094 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff82 	bl	8002108 <LL_ADC_IsInternalRegulatorEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff66 	bl	80020e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002214:	4b83      	ldr	r3, [pc, #524]	; (8002424 <HAL_ADC_Init+0x280>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	4a83      	ldr	r2, [pc, #524]	; (8002428 <HAL_ADC_Init+0x284>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002228:	e002      	b.n	8002230 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3b01      	subs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff64 	bl	8002108 <LL_ADC_IsInternalRegulatorEnabled>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff75 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 800226c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 80c7 	bne.w	800240a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 80c3 	bne.w	800240a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800228c:	f043 0202 	orr.w	r2, r3, #2
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff49 	bl	8002130 <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d110      	bne.n	80022c6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a4:	4861      	ldr	r0, [pc, #388]	; (800242c <HAL_ADC_Init+0x288>)
 80022a6:	f7ff ff43 	bl	8002130 <LL_ADC_IsEnabled>
 80022aa:	4604      	mov	r4, r0
 80022ac:	4860      	ldr	r0, [pc, #384]	; (8002430 <HAL_ADC_Init+0x28c>)
 80022ae:	f7ff ff3f 	bl	8002130 <LL_ADC_IsEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4323      	orrs	r3, r4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4619      	mov	r1, r3
 80022c0:	485c      	ldr	r0, [pc, #368]	; (8002434 <HAL_ADC_Init+0x290>)
 80022c2:	f7ff fdcf 	bl	8001e64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7e5b      	ldrb	r3, [r3, #25]
 80022ca:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022d0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022d6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022dc:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	3b01      	subs	r3, #1
 80022fa:	045b      	lsls	r3, r3, #17
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b44      	ldr	r3, [pc, #272]	; (8002438 <HAL_ADC_Init+0x294>)
 8002326:	4013      	ands	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff20 	bl	800217c <LL_ADC_INJ_IsConversionOngoing>
 800233c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d140      	bne.n	80023c6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d13d      	bne.n	80023c6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7e1b      	ldrb	r3, [r3, #24]
 8002352:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002354:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800235c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800236c:	f023 0306 	bic.w	r3, r3, #6
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	69b9      	ldr	r1, [r7, #24]
 8002376:	430b      	orrs	r3, r1
 8002378:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002380:	2b01      	cmp	r3, #1
 8002382:	d118      	bne.n	80023b6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800238e:	f023 0304 	bic.w	r3, r3, #4
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023a6:	430a      	orrs	r2, r1
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	e007      	b.n	80023c6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10c      	bne.n	80023e8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f023 010f 	bic.w	r1, r3, #15
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
 80023e6:	e007      	b.n	80023f8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 020f 	bic.w	r2, r2, #15
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f023 0303 	bic.w	r3, r3, #3
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
 8002408:	e007      	b.n	800241a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800241a:	7ffb      	ldrb	r3, [r7, #31]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3724      	adds	r7, #36	; 0x24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	20000000 	.word	0x20000000
 8002428:	053e2d63 	.word	0x053e2d63
 800242c:	42028000 	.word	0x42028000
 8002430:	42028100 	.word	0x42028100
 8002434:	42028300 	.word	0x42028300
 8002438:	fff0c007 	.word	0xfff0c007

0800243c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b0b7      	sub	sp, #220	; 0xdc
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x22>
 800245a:	2302      	movs	r3, #2
 800245c:	e3c1      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x7a6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe73 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 83a6 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	f7ff fd89 	bl	8001f9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe61 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 8002494:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fe6d 	bl	800217c <LL_ADC_INJ_IsConversionOngoing>
 80024a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 81c1 	bne.w	8002832 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 81bc 	bne.w	8002832 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024c2:	d10f      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7ff fd90 	bl	8001ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fd4a 	bl	8001f76 <LL_ADC_SetSamplingTimeCommonConfig>
 80024e2:	e00e      	b.n	8002502 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff fd7f 	bl	8001ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fd3a 	bl	8001f76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d00a      	beq.n	800253a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002534:	f7ff fcca 	bl	8001ecc <LL_ADC_SetOffset>
 8002538:	e17b      	b.n	8002832 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fce7 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x12a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fcdc 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	e01e      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x168>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fcd1 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800258c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e004      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x180>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	e018      	b.n	80025ee <HAL_ADC_ConfigChannel+0x1b2>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e004      	b.n	80025ee <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80025e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d106      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fca0 	bl	8001f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fc84 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1f0>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fc79 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	f003 021f 	and.w	r2, r3, #31
 800262a:	e01e      	b.n	800266a <HAL_ADC_ConfigChannel+0x22e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fc6e 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800264a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800264e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e004      	b.n	8002668 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800265e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x246>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	e018      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x278>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800269a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800269e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80026aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	2101      	movs	r1, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fc3d 	bl	8001f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2102      	movs	r1, #2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fc21 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x2b6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2102      	movs	r1, #2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fc16 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	e01e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x2f4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2102      	movs	r1, #2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fc0b 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e004      	b.n	800272e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x30c>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	e016      	b.n	8002776 <HAL_ADC_ConfigChannel+0x33a>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800275a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e004      	b.n	8002776 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800276c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002776:	429a      	cmp	r2, r3
 8002778:	d106      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fbdc 	bl	8001f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2103      	movs	r1, #3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fbc0 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x378>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2103      	movs	r1, #3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fbb5 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	e017      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x3a8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2103      	movs	r1, #3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fbaa 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80027da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x3c0>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e011      	b.n	8002820 <HAL_ADC_ConfigChannel+0x3e4>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800280a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800280c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2103      	movs	r1, #3
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb87 	bl	8001f40 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fc7a 	bl	8002130 <LL_ADC_IsEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 81c9 	bne.w	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	461a      	mov	r2, r3
 8002852:	f7ff fbfb 	bl	800204c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a8f      	ldr	r2, [pc, #572]	; (8002a98 <HAL_ADC_ConfigChannel+0x65c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	f040 8131 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <HAL_ADC_ConfigChannel+0x44e>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	3301      	adds	r3, #1
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2b09      	cmp	r3, #9
 8002880:	bf94      	ite	ls
 8002882:	2301      	movls	r3, #1
 8002884:	2300      	movhi	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	e019      	b.n	80028be <HAL_ADC_ConfigChannel+0x482>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800289c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e003      	b.n	80028ae <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80028a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d079      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <HAL_ADC_ConfigChannel+0x4a2>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028dc:	e015      	b.n	800290a <HAL_ADC_ConfigChannel+0x4ce>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	069b      	lsls	r3, r3, #26
 8002906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_ADC_ConfigChannel+0x4ee>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	3301      	adds	r3, #1
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	e017      	b.n	800295a <HAL_ADC_ConfigChannel+0x51e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800293c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	ea42 0103 	orr.w	r1, r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x544>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	3301      	adds	r3, #1
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	e018      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x576>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 021f 	and.w	r2, r3, #31
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b2:	430b      	orrs	r3, r1
 80029b4:	e081      	b.n	8002aba <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x596>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	3301      	adds	r3, #1
 80029ca:	069b      	lsls	r3, r3, #26
 80029cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d0:	e015      	b.n	80029fe <HAL_ADC_ConfigChannel+0x5c2>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e003      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	069b      	lsls	r3, r3, #26
 80029fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x5e2>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	e017      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x612>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	ea42 0103 	orr.w	r1, r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x63e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	3301      	adds	r3, #1
 8002a66:	f003 021f 	and.w	r2, r3, #31
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b1e      	subs	r3, #30
 8002a72:	051b      	lsls	r3, r3, #20
 8002a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x67c>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	613b      	str	r3, [r7, #16]
  return result;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e006      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x668>
 8002a96:	bf00      	nop
 8002a98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	051b      	lsls	r3, r3, #20
 8002ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	6892      	ldr	r2, [r2, #8]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f7ff fa98 	bl	8001ff4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b48      	ldr	r3, [pc, #288]	; (8002bec <HAL_ADC_ConfigChannel+0x7b0>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8082 	beq.w	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad2:	4847      	ldr	r0, [pc, #284]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002ad4:	f7ff f9ec 	bl	8001eb0 <LL_ADC_GetCommonPathInternalCh>
 8002ad8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002adc:	4845      	ldr	r0, [pc, #276]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ade:	f7ff fb27 	bl	8002130 <LL_ADC_IsEnabled>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	4844      	ldr	r0, [pc, #272]	; (8002bf8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ae6:	f7ff fb23 	bl	8002130 <LL_ADC_IsEnabled>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4323      	orrs	r3, r4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d15e      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d127      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d121      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d161      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4834      	ldr	r0, [pc, #208]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b1e:	f7ff f9b4 	bl	8001e8a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	4a36      	ldr	r2, [pc, #216]	; (8002c04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002b3a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002b3c:	e002      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f9      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4a:	e044      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d113      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d134      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b74:	4619      	mov	r1, r3
 8002b76:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b78:	f7ff f987 	bl	8001e8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b7c:	e02b      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_ADC_ConfigChannel+0x7d0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d126      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d120      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d11b      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4811      	ldr	r0, [pc, #68]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002baa:	f7ff f96e 	bl	8001e8a <LL_ADC_SetCommonPathInternalCh>
 8002bae:	e012      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bc2:	e008      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	37dc      	adds	r7, #220	; 0xdc
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd90      	pop	{r4, r7, pc}
 8002bea:	bf00      	nop
 8002bec:	80080000 	.word	0x80080000
 8002bf0:	42028300 	.word	0x42028300
 8002bf4:	42028000 	.word	0x42028000
 8002bf8:	42028100 	.word	0x42028100
 8002bfc:	c7520000 	.word	0xc7520000
 8002c00:	20000000 	.word	0x20000000
 8002c04:	053e2d63 	.word	0x053e2d63
 8002c08:	cb840000 	.word	0xcb840000
 8002c0c:	80000001 	.word	0x80000001

08002c10 <LL_ADC_IsEnabled>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_IsEnabled+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_IsEnabled+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d101      	bne.n	8002c4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b0a1      	sub	sp, #132	; 0x84
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e089      	b.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c82:	2300      	movs	r3, #0
 8002c84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c86:	2300      	movs	r3, #0
 8002c88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a42      	ldr	r2, [pc, #264]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c94:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e001      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e068      	b.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ffb9 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 8002cc4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ffb3 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d14a      	bne.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d147      	bne.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002cde:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d027      	beq.n	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cfa:	035b      	lsls	r3, r3, #13
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d04:	4824      	ldr	r0, [pc, #144]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d06:	f7ff ff83 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4823      	ldr	r0, [pc, #140]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d0e:	f7ff ff7f 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4323      	orrs	r3, r4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d132      	bne.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d22:	f023 030f 	bic.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	6811      	ldr	r1, [r2, #0]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	6892      	ldr	r2, [r2, #8]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d34:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d36:	e023      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d44:	4814      	ldr	r0, [pc, #80]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d46:	f7ff ff63 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4813      	ldr	r0, [pc, #76]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d4e:	f7ff ff5f 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4323      	orrs	r3, r4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d112      	bne.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d62:	f023 030f 	bic.w	r3, r3, #15
 8002d66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6a:	e009      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d7e:	e000      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3784      	adds	r7, #132	; 0x84
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}
 8002d96:	bf00      	nop
 8002d98:	42028000 	.word	0x42028000
 8002d9c:	42028100 	.word	0x42028100
 8002da0:	42028300 	.word	0x42028300

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0152      	lsls	r2, r2, #5
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0152      	lsls	r2, r2, #5
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	bf28      	it	cs
 8002eb6:	2303      	movcs	r3, #3
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3303      	adds	r3, #3
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	2107      	movs	r1, #7
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff40 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff33 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa4 	bl	8002f00 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e08d      	b.n	80030f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_DMA_Init+0x138>)
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d80f      	bhi.n	8003002 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b45      	ldr	r3, [pc, #276]	; (8003100 <HAL_DMA_Init+0x13c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	4a45      	ldr	r2, [pc, #276]	; (8003104 <HAL_DMA_Init+0x140>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	009a      	lsls	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_DMA_Init+0x144>)
 8002ffe:	649a      	str	r2, [r3, #72]	; 0x48
 8003000:	e00e      	b.n	8003020 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_DMA_Init+0x148>)
 800300a:	4413      	add	r3, r2
 800300c:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <HAL_DMA_Init+0x140>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <HAL_DMA_Init+0x14c>)
 800301e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8003036:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800303a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 faf2 	bl	800365c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003080:	d102      	bne.n	8003088 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800309c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_DMA_Init+0x104>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d80c      	bhi.n	80030c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fb12 	bl	80036d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	e008      	b.n	80030da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020407 	.word	0x40020407
 8003100:	bffdfff8 	.word	0xbffdfff8
 8003104:	cccccccd 	.word	0xcccccccd
 8003108:	40020000 	.word	0x40020000
 800310c:	bffdfbf8 	.word	0xbffdfbf8
 8003110:	40020400 	.word	0x40020400

08003114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Start_IT+0x20>
 8003130:	2302      	movs	r3, #2
 8003132:	e066      	b.n	8003202 <HAL_DMA_Start_IT+0xee>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d155      	bne.n	80031f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fa37 	bl	80035e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 020e 	orr.w	r2, r2, #14
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e00f      	b.n	80031ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 020a 	orr.w	r2, r2, #10
 80031aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e005      	b.n	8003200 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d008      	beq.n	8003234 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2204      	movs	r2, #4
 8003226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e040      	b.n	80032b6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 020e 	bic.w	r2, r2, #14
 8003242:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003252:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	f003 021c 	and.w	r2, r3, #28
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f202 	lsl.w	r2, r1, r2
 8003276:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003280:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80032a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d005      	beq.n	80032e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2204      	movs	r2, #4
 80032de:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e047      	b.n	8003376 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 020e 	bic.w	r2, r2, #14
 80032f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003314:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	f003 021c 	and.w	r2, r3, #28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f202 	lsl.w	r2, r1, r2
 8003328:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003332:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800334a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003354:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
    }
  }
  return status;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339c:	f003 031c 	and.w	r3, r3, #28
 80033a0:	2204      	movs	r2, #4
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d053      	beq.n	8003454 <HAL_DMA_IRQHandler+0xd4>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04e      	beq.n	8003454 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d024      	beq.n	800340e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c8:	f003 021c 	and.w	r2, r3, #28
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d0:	2104      	movs	r1, #4
 80033d2:	fa01 f202 	lsl.w	r2, r1, r2
 80033d6:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80c0 	beq.w	8003570 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80033f8:	e0ba      	b.n	8003570 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80b6 	beq.w	8003570 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800340c:	e0b0      	b.n	8003570 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003430:	f003 021c 	and.w	r2, r3, #28
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	2104      	movs	r1, #4
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8093 	beq.w	8003570 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003452:	e08d      	b.n	8003570 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	f003 031c 	and.w	r3, r3, #28
 800345c:	2202      	movs	r2, #2
 800345e:	409a      	lsls	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d04e      	beq.n	8003506 <HAL_DMA_IRQHandler+0x186>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d049      	beq.n	8003506 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	2b00      	cmp	r3, #0
 8003494:	d06e      	beq.n	8003574 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800349e:	e069      	b.n	8003574 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d065      	beq.n	8003574 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80034b0:	e060      	b.n	8003574 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 020a 	bic.w	r2, r2, #10
 80034ce:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034dc:	f003 021c 	and.w	r2, r3, #28
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e4:	2102      	movs	r1, #2
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003504:	e036      	b.n	8003574 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	f003 031c 	and.w	r3, r3, #28
 800350e:	2208      	movs	r2, #8
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02e      	beq.n	8003578 <HAL_DMA_IRQHandler+0x1f8>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d029      	beq.n	8003578 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 020e 	bic.w	r2, r2, #14
 8003532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	f003 021c 	and.w	r2, r3, #28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800356e:	e002      	b.n	8003576 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003574:	bf00      	nop
  return;
 8003576:	bf00      	nop
 8003578:	bf00      	nop
}
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	72fb      	strb	r3, [r7, #11]
    return status;
 8003598:	7afb      	ldrb	r3, [r7, #11]
 800359a:	e01b      	b.n	80035d4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e003      	b.n	80035ca <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035c8:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]

  return status;
 80035d2:	7afb      	ldrb	r3, [r7, #11]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035f6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360e:	f003 021c 	and.w	r2, r3, #28
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b10      	cmp	r3, #16
 800362c:	d108      	bne.n	8003640 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800363e:	e007      	b.n	8003650 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800366c:	429a      	cmp	r2, r3
 800366e:	d80a      	bhi.n	8003686 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800367c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6513      	str	r3, [r2, #80]	; 0x50
 8003684:	e007      	b.n	8003696 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	009a      	lsls	r2, r3, #2
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003690:	4413      	add	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	3b08      	subs	r3, #8
 800369e:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	; 0x58
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40020407 	.word	0x40020407
 80036cc:	40020820 	.word	0x40020820
 80036d0:	cccccccd 	.word	0xcccccccd
 80036d4:	40020880 	.word	0x40020880

080036d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a08      	ldr	r2, [pc, #32]	; (800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3b01      	subs	r3, #1
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	1000823f 	.word	0x1000823f
 800371c:	40020940 	.word	0x40020940

08003720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800372e:	e158      	b.n	80039e2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	2101      	movs	r1, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 814a 	beq.w	80039dc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d005      	beq.n	8003760 <HAL_GPIO_Init+0x40>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d130      	bne.n	80037c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003796:	2201      	movs	r2, #1
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0201 	and.w	r2, r3, #1
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d017      	beq.n	80037fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d123      	bne.n	8003852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	08da      	lsrs	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3208      	adds	r2, #8
 800384c:	6939      	ldr	r1, [r7, #16]
 800384e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	2203      	movs	r2, #3
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0203 	and.w	r2, r3, #3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80a4 	beq.w	80039dc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003894:	4a5a      	ldr	r2, [pc, #360]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	3318      	adds	r3, #24
 800389c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	220f      	movs	r2, #15
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a52      	ldr	r2, [pc, #328]	; (8003a04 <HAL_GPIO_Init+0x2e4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d025      	beq.n	800390c <HAL_GPIO_Init+0x1ec>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a51      	ldr	r2, [pc, #324]	; (8003a08 <HAL_GPIO_Init+0x2e8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01f      	beq.n	8003908 <HAL_GPIO_Init+0x1e8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a50      	ldr	r2, [pc, #320]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d019      	beq.n	8003904 <HAL_GPIO_Init+0x1e4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a4f      	ldr	r2, [pc, #316]	; (8003a10 <HAL_GPIO_Init+0x2f0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_GPIO_Init+0x1e0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a4e      	ldr	r2, [pc, #312]	; (8003a14 <HAL_GPIO_Init+0x2f4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00d      	beq.n	80038fc <HAL_GPIO_Init+0x1dc>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a4d      	ldr	r2, [pc, #308]	; (8003a18 <HAL_GPIO_Init+0x2f8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <HAL_GPIO_Init+0x1d8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a4c      	ldr	r2, [pc, #304]	; (8003a1c <HAL_GPIO_Init+0x2fc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_GPIO_Init+0x1d4>
 80038f0:	2306      	movs	r3, #6
 80038f2:	e00c      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 80038f4:	2307      	movs	r3, #7
 80038f6:	e00a      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 80038f8:	2305      	movs	r3, #5
 80038fa:	e008      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 80038fc:	2304      	movs	r3, #4
 80038fe:	e006      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003900:	2303      	movs	r3, #3
 8003902:	e004      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003904:	2302      	movs	r3, #2
 8003906:	e002      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 800390c:	2300      	movs	r3, #0
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	f002 0203 	and.w	r2, r2, #3
 8003914:	00d2      	lsls	r2, r2, #3
 8003916:	4093      	lsls	r3, r2
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800391e:	4938      	ldr	r1, [pc, #224]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3318      	adds	r3, #24
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	43db      	mvns	r3, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003950:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43db      	mvns	r3, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003980:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 8003982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039a6:	4a16      	ldr	r2, [pc, #88]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80039ae:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 80039b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039d4:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3301      	adds	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f47f ae9f 	bne.w	8003730 <HAL_GPIO_Init+0x10>
  }
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	4002f400 	.word	0x4002f400
 8003a04:	42020000 	.word	0x42020000
 8003a08:	42020400 	.word	0x42020400
 8003a0c:	42020800 	.word	0x42020800
 8003a10:	42020c00 	.word	0x42020c00
 8003a14:	42021000 	.word	0x42021000
 8003a18:	42021400 	.word	0x42021400
 8003a1c:	42021800 	.word	0x42021800

08003a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a52:	b08b      	sub	sp, #44	; 0x2c
 8003a54:	af06      	add	r7, sp, #24
 8003a56:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0cb      	b.n	8003bfa <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe f8f4 	bl	8001c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 ff0b 	bl	80078a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
 8003a92:	e040      	b.n	8003b16 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	3303      	adds	r3, #3
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3338      	adds	r3, #56	; 0x38
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	333c      	adds	r3, #60	; 0x3c
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	440b      	add	r3, r1
 8003b0a:	3340      	adds	r3, #64	; 0x40
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	3301      	adds	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d3b9      	bcc.n	8003a94 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e044      	b.n	8003bb0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	440b      	add	r3, r1
 8003b34:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	440b      	add	r3, r1
 8003b60:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	440b      	add	r3, r1
 8003b76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	3301      	adds	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3b5      	bcc.n	8003b26 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	687e      	ldr	r6, [r7, #4]
 8003bc2:	466d      	mov	r5, sp
 8003bc4:	f106 0410 	add.w	r4, r6, #16
 8003bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	1d33      	adds	r3, r6, #4
 8003bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd4:	6838      	ldr	r0, [r7, #0]
 8003bd6:	f003 fe80 	bl	80078da <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f805 	bl	8003c02 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40007000 	.word	0x40007000

08003c78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003c9c:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ca4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003ca6:	f000 f861 	bl	8003d6c <HAL_PWREx_SMPS_GetEffectiveMode>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb0:	d101      	bne.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e03e      	b.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003cb6:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e035      	b.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d101      	bne.n	8003cd4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e02f      	b.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003cdc:	4917      	ldr	r1, [pc, #92]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	09db      	lsrs	r3, r3, #7
 8003cf2:	2232      	movs	r2, #50	; 0x32
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	08db      	lsrs	r3, r3, #3
 8003d00:	3301      	adds	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d04:	e002      	b.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d102      	bne.n	8003d20 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f2      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d101      	bne.n	8003d32 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e000      	b.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	20000000 	.word	0x20000000
 8003d44:	0a7c5ac5 	.word	0x0a7c5ac5
 8003d48:	cccccccd 	.word	0xcccccccd

08003d4c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d5a:	6053      	str	r3, [r2, #4]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	e00a      	b.n	8003da0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	e001      	b.n	8003da0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003da0:	687b      	ldr	r3, [r7, #4]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40007000 	.word	0x40007000

08003db4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 bcc2 	b.w	800474c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc8:	4b99      	ldr	r3, [pc, #612]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd2:	4b97      	ldr	r3, [pc, #604]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80e9 	beq.w	8003fbc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_RCC_OscConfig+0x4a>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	f040 8083 	bne.w	8003efe <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d17f      	bne.n	8003efe <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfe:	4b8c      	ldr	r3, [pc, #560]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <HAL_RCC_OscConfig+0x64>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f000 bc9a 	b.w	800474c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e1c:	4b84      	ldr	r3, [pc, #528]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_RCC_OscConfig+0x7e>
 8003e28:	4b81      	ldr	r3, [pc, #516]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e30:	e005      	b.n	8003e3e <HAL_RCC_OscConfig+0x8a>
 8003e32:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d224      	bcs.n	8003e8c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fe9c 	bl	8004b84 <RCC_SetFlashLatencyFromMSIRange>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f000 bc7a 	b.w	800474c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e58:	4b75      	ldr	r3, [pc, #468]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a74      	ldr	r2, [pc, #464]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e5e:	f043 0308 	orr.w	r3, r3, #8
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b72      	ldr	r3, [pc, #456]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	496f      	ldr	r1, [pc, #444]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e76:	4b6e      	ldr	r3, [pc, #440]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	496a      	ldr	r1, [pc, #424]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
 8003e8a:	e026      	b.n	8003eda <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e8c:	4b68      	ldr	r3, [pc, #416]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a67      	ldr	r2, [pc, #412]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e92:	f043 0308 	orr.w	r3, r3, #8
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b65      	ldr	r3, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	4962      	ldr	r1, [pc, #392]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eaa:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	495d      	ldr	r1, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fe5b 	bl	8004b84 <RCC_SetFlashLatencyFromMSIRange>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f000 bc39 	b.w	800474c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003eda:	f000 fe17 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a54      	ldr	r2, [pc, #336]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003ee2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ee4:	4b54      	ldr	r3, [pc, #336]	; (8004038 <HAL_RCC_OscConfig+0x284>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fd ff5f 	bl	8001dac <HAL_InitTick>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d060      	beq.n	8003fba <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	f000 bc27 	b.w	800474c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d039      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a49      	ldr	r2, [pc, #292]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f12:	f7fd ff9b 	bl	8001e4c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f18:	e00f      	b.n	8003f3a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f1a:	f7fd ff97 	bl	8001e4c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d908      	bls.n	8003f3a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f28:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	f000 bc09 	b.w	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0e9      	beq.n	8003f1a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f46:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a39      	ldr	r2, [pc, #228]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	4934      	ldr	r1, [pc, #208]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f64:	4b32      	ldr	r3, [pc, #200]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	492f      	ldr	r1, [pc, #188]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
 8003f78:	e020      	b.n	8003fbc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f86:	f7fd ff61 	bl	8001e4c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f8c:	e00e      	b.n	8003fac <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f8e:	f7fd ff5d 	bl	8001e4c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d907      	bls.n	8003fac <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e3cf      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ea      	bne.n	8003f8e <HAL_RCC_OscConfig+0x1da>
 8003fb8:	e000      	b.n	8003fbc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d07e      	beq.n	80040c6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x226>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d10e      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d06e      	beq.n	80040c4 <HAL_RCC_OscConfig+0x310>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d16a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e3ac      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x256>
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e024      	b.n	8004054 <HAL_RCC_OscConfig+0x2a0>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004012:	d113      	bne.n	800403c <HAL_RCC_OscConfig+0x288>
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a05      	ldr	r2, [pc, #20]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 800401a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a02      	ldr	r2, [pc, #8]	; (8004030 <HAL_RCC_OscConfig+0x27c>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e012      	b.n	8004054 <HAL_RCC_OscConfig+0x2a0>
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	20000000 	.word	0x20000000
 8004038:	20000004 	.word	0x20000004
 800403c:	4b8b      	ldr	r3, [pc, #556]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a8a      	ldr	r2, [pc, #552]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b88      	ldr	r3, [pc, #544]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a87      	ldr	r2, [pc, #540]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d019      	beq.n	8004090 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd fef6 	bl	8001e4c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004062:	e00e      	b.n	8004082 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fd fef2 	bl	8001e4c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d907      	bls.n	8004082 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004072:	4b7e      	ldr	r3, [pc, #504]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e364      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004082:	4b7a      	ldr	r3, [pc, #488]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ea      	beq.n	8004064 <HAL_RCC_OscConfig+0x2b0>
 800408e:	e01a      	b.n	80040c6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fedc 	bl	8001e4c <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004096:	e00e      	b.n	80040b6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fd fed8 	bl	8001e4c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d907      	bls.n	80040b6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a6:	4b71      	ldr	r3, [pc, #452]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e34a      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b6:	4b6d      	ldr	r3, [pc, #436]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ea      	bne.n	8004098 <HAL_RCC_OscConfig+0x2e4>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d06c      	beq.n	80041ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x330>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d119      	bne.n	8004112 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d116      	bne.n	8004112 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	4b61      	ldr	r3, [pc, #388]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_OscConfig+0x348>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e327      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b5b      	ldr	r3, [pc, #364]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	4958      	ldr	r1, [pc, #352]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004110:	e04c      	b.n	80041ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d029      	beq.n	800416e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411a:	4b54      	ldr	r3, [pc, #336]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a53      	ldr	r2, [pc, #332]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd fe91 	bl	8001e4c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	e00e      	b.n	800414c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7fd fe8d 	bl	8001e4c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d907      	bls.n	800414c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800413c:	4b4b      	ldr	r3, [pc, #300]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e2ff      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800414c:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ea      	beq.n	800412e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b44      	ldr	r3, [pc, #272]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	4941      	ldr	r1, [pc, #260]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
 800416c:	e01e      	b.n	80041ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b3f      	ldr	r3, [pc, #252]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3e      	ldr	r2, [pc, #248]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd fe67 	bl	8001e4c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004180:	e00e      	b.n	80041a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004182:	f7fd fe63 	bl	8001e4c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d907      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004190:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e2d5      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a0:	4b32      	ldr	r3, [pc, #200]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ea      	bne.n	8004182 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d062      	beq.n	800427e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d038      	beq.n	8004232 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80041c8:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ce:	4a27      	ldr	r2, [pc, #156]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	f023 0310 	bic.w	r3, r3, #16
 80041d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041d8:	e007      	b.n	80041ea <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80041da:	4b24      	ldr	r3, [pc, #144]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f043 0310 	orr.w	r3, r3, #16
 80041e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ea:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f0:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fa:	f7fd fe27 	bl	8001e4c <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004200:	e00f      	b.n	8004222 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004202:	f7fd fe23 	bl	8001e4c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b07      	cmp	r3, #7
 800420e:	d908      	bls.n	8004222 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004210:	4b16      	ldr	r3, [pc, #88]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e294      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0e8      	beq.n	8004202 <HAL_RCC_OscConfig+0x44e>
 8004230:	e025      	b.n	800427e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	4a0c      	ldr	r2, [pc, #48]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd fe03 	bl	8001e4c <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004248:	e012      	b.n	8004270 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fd fdff 	bl	8001e4c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b07      	cmp	r3, #7
 8004256:	d90b      	bls.n	8004270 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e270      	b.n	800474c <HAL_RCC_OscConfig+0x998>
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004270:	4ba8      	ldr	r3, [pc, #672]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e5      	bne.n	800424a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 812d 	beq.w	80044e6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004290:	4ba0      	ldr	r3, [pc, #640]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10d      	bne.n	80042b8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429c:	4b9d      	ldr	r3, [pc, #628]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	4a9c      	ldr	r2, [pc, #624]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6593      	str	r3, [r2, #88]	; 0x58
 80042a8:	4b9a      	ldr	r3, [pc, #616]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b8:	4b97      	ldr	r3, [pc, #604]	; (8004518 <HAL_RCC_OscConfig+0x764>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11e      	bne.n	8004302 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c4:	4b94      	ldr	r3, [pc, #592]	; (8004518 <HAL_RCC_OscConfig+0x764>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a93      	ldr	r2, [pc, #588]	; (8004518 <HAL_RCC_OscConfig+0x764>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d0:	f7fd fdbc 	bl	8001e4c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d6:	e00e      	b.n	80042f6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fd fdb8 	bl	8001e4c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d907      	bls.n	80042f6 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	4b8c      	ldr	r3, [pc, #560]	; (8004518 <HAL_RCC_OscConfig+0x764>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e22a      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f6:	4b88      	ldr	r3, [pc, #544]	; (8004518 <HAL_RCC_OscConfig+0x764>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ea      	beq.n	80042d8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01f      	beq.n	800434e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800431a:	4b7e      	ldr	r3, [pc, #504]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	4a7c      	ldr	r2, [pc, #496]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004322:	f043 0304 	orr.w	r3, r3, #4
 8004326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800432a:	4b7a      	ldr	r3, [pc, #488]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	4a78      	ldr	r2, [pc, #480]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800433a:	e018      	b.n	800436e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800433c:	4b75      	ldr	r3, [pc, #468]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	4a74      	ldr	r2, [pc, #464]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434c:	e00f      	b.n	800436e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800434e:	4b71      	ldr	r3, [pc, #452]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	4a6f      	ldr	r2, [pc, #444]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800435e:	4b6d      	ldr	r3, [pc, #436]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	4a6b      	ldr	r2, [pc, #428]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004366:	f023 0304 	bic.w	r3, r3, #4
 800436a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d068      	beq.n	8004448 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fd fd69 	bl	8001e4c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437c:	e011      	b.n	80043a2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd fd65 	bl	8001e4c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d908      	bls.n	80043a2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004390:	4b60      	ldr	r3, [pc, #384]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1d4      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0e6      	beq.n	800437e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043bc:	4b55      	ldr	r3, [pc, #340]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	4a54      	ldr	r2, [pc, #336]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80043c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80043cc:	e011      	b.n	80043f2 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fd fd3d 	bl	8001e4c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d908      	bls.n	80043f2 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80043e0:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1ac      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80043f2:	4b48      	ldr	r3, [pc, #288]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0e6      	beq.n	80043ce <HAL_RCC_OscConfig+0x61a>
 8004400:	e068      	b.n	80044d4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004402:	4b44      	ldr	r3, [pc, #272]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	4a42      	ldr	r2, [pc, #264]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 800440a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004412:	e011      	b.n	8004438 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7fd fd1a 	bl	8001e4c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d908      	bls.n	8004438 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004426:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e189      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004438:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <HAL_RCC_OscConfig+0x660>
 8004446:	e045      	b.n	80044d4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd fd00 	bl	8001e4c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800444e:	e011      	b.n	8004474 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fd fcfc 	bl	8001e4c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d908      	bls.n	8004474 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004462:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e16b      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e6      	bne.n	8004450 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004482:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d021      	beq.n	80044d4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044a0:	e011      	b.n	80044c6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fd fcd3 	bl	8001e4c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d908      	bls.n	80044c6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e142      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e6      	bne.n	80044a2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044d4:	7ffb      	ldrb	r3, [r7, #31]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80044e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04f      	beq.n	8004592 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d028      	beq.n	800454c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 80044fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_RCC_OscConfig+0x760>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd fc9f 	bl	8001e4c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004510:	e014      	b.n	800453c <HAL_RCC_OscConfig+0x788>
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800451c:	f7fd fc96 	bl	8001e4c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d908      	bls.n	800453c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800452a:	4b8a      	ldr	r3, [pc, #552]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 800452c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e107      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453c:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 800453e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0e8      	beq.n	800451c <HAL_RCC_OscConfig+0x768>
 800454a:	e022      	b.n	8004592 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800454c:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 800454e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004552:	4a80      	ldr	r2, [pc, #512]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fd fc76 	bl	8001e4c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004562:	e00f      	b.n	8004584 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004564:	f7fd fc72 	bl	8001e4c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d908      	bls.n	8004584 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004572:	4b78      	ldr	r3, [pc, #480]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e0e3      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004584:	4b73      	ldr	r3, [pc, #460]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e8      	bne.n	8004564 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80d7 	beq.w	800474a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800459c:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	f000 8091 	beq.w	80046cc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d166      	bne.n	8004680 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b2:	4b68      	ldr	r3, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a67      	ldr	r2, [pc, #412]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80045b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fd fc45 	bl	8001e4c <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c4:	e00e      	b.n	80045e4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fd fc41 	bl	8001e4c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d907      	bls.n	80045e4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d4:	4b5f      	ldr	r3, [pc, #380]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e0b3      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e4:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ea      	bne.n	80045c6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f0:	4b58      	ldr	r3, [pc, #352]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b58      	ldr	r3, [pc, #352]	; (8004758 <HAL_RCC_OscConfig+0x9a4>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004600:	3a01      	subs	r2, #1
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800460a:	0212      	lsls	r2, r2, #8
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004612:	0852      	lsrs	r2, r2, #1
 8004614:	3a01      	subs	r2, #1
 8004616:	0552      	lsls	r2, r2, #21
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800461e:	0852      	lsrs	r2, r2, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	0652      	lsls	r2, r2, #25
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800462a:	06d2      	lsls	r2, r2, #27
 800462c:	430a      	orrs	r2, r1
 800462e:	4949      	ldr	r1, [pc, #292]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004630:	4313      	orrs	r3, r2
 8004632:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004634:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a46      	ldr	r2, [pc, #280]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004640:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a43      	ldr	r2, [pc, #268]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fbfe 	bl	8001e4c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	e00e      	b.n	8004672 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd fbfa 	bl	8001e4c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d907      	bls.n	8004672 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004662:	4b3c      	ldr	r3, [pc, #240]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e06c      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ea      	beq.n	8004654 <HAL_RCC_OscConfig+0x8a0>
 800467e:	e064      	b.n	800474a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004680:	4b34      	ldr	r3, [pc, #208]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a33      	ldr	r2, [pc, #204]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 8004686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800468a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd fbde 	bl	8001e4c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004692:	e00e      	b.n	80046b2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd fbda 	bl	8001e4c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d907      	bls.n	80046b2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e04c      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b2:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ea      	bne.n	8004694 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046be:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	4924      	ldr	r1, [pc, #144]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_RCC_OscConfig+0x9a8>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	60cb      	str	r3, [r1, #12]
 80046ca:	e03e      	b.n	800474a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e039      	b.n	800474c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCC_OscConfig+0x9a0>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0203 	and.w	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d12c      	bne.n	8004746 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	3b01      	subs	r3, #1
 80046f8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d123      	bne.n	8004746 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d11b      	bne.n	8004746 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d113      	bne.n	8004746 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	3b01      	subs	r3, #1
 800472c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d109      	bne.n	8004746 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000
 8004758:	019f800c 	.word	0x019f800c
 800475c:	feeefffc 	.word	0xfeeefffc

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e11c      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004778:	4b90      	ldr	r3, [pc, #576]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d910      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b8d      	ldr	r3, [pc, #564]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 020f 	bic.w	r2, r3, #15
 800478e:	498b      	ldr	r1, [pc, #556]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b89      	ldr	r3, [pc, #548]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e104      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	4b81      	ldr	r3, [pc, #516]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d908      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b7e      	ldr	r3, [pc, #504]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	497b      	ldr	r1, [pc, #492]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8085 	beq.w	80048ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d11f      	bne.n	800482c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ec:	4b74      	ldr	r3, [pc, #464]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0da      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047fc:	f000 fa26 	bl	8004c4c <RCC_GetSysClockFreqFromPLLSource>
 8004800:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4a6f      	ldr	r2, [pc, #444]	; (80049c4 <HAL_RCC_ClockConfig+0x264>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d947      	bls.n	800489a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800480a:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d141      	bne.n	800489a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004816:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481e:	4a68      	ldr	r2, [pc, #416]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e036      	b.n	800489a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d107      	bne.n	8004844 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d115      	bne.n	800486c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0b6      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800484c:	4b5c      	ldr	r3, [pc, #368]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0aa      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485c:	4b58      	ldr	r3, [pc, #352]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0a2      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800486c:	f000 f8b0 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8004870:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4a53      	ldr	r2, [pc, #332]	; (80049c4 <HAL_RCC_ClockConfig+0x264>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d90f      	bls.n	800489a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004886:	4b4e      	ldr	r3, [pc, #312]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488e:	4a4c      	ldr	r2, [pc, #304]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004894:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4946      	ldr	r1, [pc, #280]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ac:	f7fd face 	bl	8001e4c <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e013      	b.n	80048dc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fd faca 	bl	8001e4c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d90a      	bls.n	80048dc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	4b3e      	ldr	r3, [pc, #248]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 020c 	and.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e06a      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048dc:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 020c 	and.w	r2, r3, #12
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d1e2      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d105      	bne.n	8004900 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048f4:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a31      	ldr	r2, [pc, #196]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 80048fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fe:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d010      	beq.n	800492e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004918:	429a      	cmp	r2, r3
 800491a:	d208      	bcs.n	800492e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4925      	ldr	r1, [pc, #148]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d210      	bcs.n	800495e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 020f 	bic.w	r2, r3, #15
 8004944:	491d      	ldr	r1, [pc, #116]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_ClockConfig+0x25c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e029      	b.n	80049b2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4912      	ldr	r1, [pc, #72]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	490a      	ldr	r1, [pc, #40]	; (80049c0 <HAL_RCC_ClockConfig+0x260>)
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800499c:	f000 f8b6 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 80049a0:	4603      	mov	r3, r0
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <HAL_RCC_ClockConfig+0x268>)
 80049a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049a6:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_RCC_ClockConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd f9fe 	bl	8001dac <HAL_InitTick>
 80049b0:	4603      	mov	r3, r0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40022000 	.word	0x40022000
 80049c0:	40021000 	.word	0x40021000
 80049c4:	04c4b400 	.word	0x04c4b400
 80049c8:	20000000 	.word	0x20000000
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e8:	4b44      	ldr	r3, [pc, #272]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x34>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d121      	bne.n	8004a42 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d11e      	bne.n	8004a42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a04:	4b3d      	ldr	r3, [pc, #244]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a10:	4b3a      	ldr	r3, [pc, #232]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e005      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004a2c:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d102      	bne.n	8004a4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a48:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e004      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a54:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d146      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a5e:	4b27      	ldr	r3, [pc, #156]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a68:	4b24      	ldr	r3, [pc, #144]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3301      	adds	r3, #1
 8004a74:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d003      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0xb4>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d00d      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0xce>
 8004a82:	e019      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a84:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a8e:	68d2      	ldr	r2, [r2, #12]
 8004a90:	0a12      	lsrs	r2, r2, #8
 8004a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	617b      	str	r3, [r7, #20]
        break;
 8004a9c:	e019      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x138>)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	4a15      	ldr	r2, [pc, #84]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004aa8:	68d2      	ldr	r2, [r2, #12]
 8004aaa:	0a12      	lsrs	r2, r2, #8
 8004aac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
        break;
 8004ab6:	e00c      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ac2:	68d2      	ldr	r2, [r2, #12]
 8004ac4:	0a12      	lsrs	r2, r2, #8
 8004ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	617b      	str	r3, [r7, #20]
        break;
 8004ad0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	0e5b      	lsrs	r3, r3, #25
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	3301      	adds	r3, #1
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004aec:	69bb      	ldr	r3, [r7, #24]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	08007bec 	.word	0x08007bec
 8004b04:	00f42400 	.word	0x00f42400
 8004b08:	007a1200 	.word	0x007a1200

08004b0c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004b10:	f7ff ff5e 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetHCLKFreq+0x20>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	4903      	ldr	r1, [pc, #12]	; (8004b30 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b22:	5ccb      	ldrb	r3, [r1, r3]
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	08007bd4 	.word	0x08007bd4

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b38:	f7ff ffe8 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	08007be4 	.word	0x08007be4

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b60:	f7ff ffd4 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	08007be4 	.word	0x08007be4

08004b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b90:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b9c:	f7ff f86c 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 8004ba0:	6138      	str	r0, [r7, #16]
 8004ba2:	e014      	b.n	8004bce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba8:	4a26      	ldr	r2, [pc, #152]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bbc:	f7ff f85c 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 8004bc0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bda:	d10b      	bne.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b80      	cmp	r3, #128	; 0x80
 8004be0:	d919      	bls.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2ba0      	cmp	r3, #160	; 0xa0
 8004be6:	d902      	bls.n	8004bee <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004be8:	2302      	movs	r3, #2
 8004bea:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004bec:	e013      	b.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bee:	2301      	movs	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004bf2:	e010      	b.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d902      	bls.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e00a      	b.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d102      	bne.n	8004c0c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c06:	2302      	movs	r3, #2
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e004      	b.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b70      	cmp	r3, #112	; 0x70
 8004c10:	d101      	bne.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c12:	2301      	movs	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 020f 	bic.w	r2, r3, #15
 8004c1e:	490a      	ldr	r1, [pc, #40]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40022000 	.word	0x40022000

08004c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c52:	4b31      	ldr	r3, [pc, #196]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3301      	adds	r3, #1
 8004c68:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d015      	beq.n	8004c9c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d839      	bhi.n	8004cea <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d01c      	beq.n	8004cb6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d133      	bne.n	8004cea <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c82:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	0a12      	lsrs	r2, r2, #8
 8004c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	613b      	str	r3, [r7, #16]
      break;
 8004c9a:	e029      	b.n	8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c9c:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004ca6:	68d2      	ldr	r2, [r2, #12]
 8004ca8:	0a12      	lsrs	r2, r2, #8
 8004caa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	613b      	str	r3, [r7, #16]
      break;
 8004cb4:	e01c      	b.n	8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cb6:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc8:	0a1b      	lsrs	r3, r3, #8
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e005      	b.n	8004cde <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004cde:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce6:	613b      	str	r3, [r7, #16]
        break;
 8004ce8:	e002      	b.n	8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
      break;
 8004cee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	0e5b      	lsrs	r3, r3, #25
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d0a:	683b      	ldr	r3, [r7, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200
 8004d24:	08007bec 	.word	0x08007bec

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d30:	2300      	movs	r3, #0
 8004d32:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d34:	2300      	movs	r3, #0
 8004d36:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d040      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d02a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d4c:	2b80      	cmp	r3, #128	; 0x80
 8004d4e:	d825      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d50:	2b60      	cmp	r3, #96	; 0x60
 8004d52:	d026      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d54:	2b60      	cmp	r3, #96	; 0x60
 8004d56:	d821      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d006      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d81d      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d010      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d68:	e018      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d6a:	4b8f      	ldr	r3, [pc, #572]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	4a8e      	ldr	r2, [pc, #568]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d74:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d76:	e015      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fb56 	bl	8005430 <RCCEx_PLLSAI1_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d88:	e00c      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3320      	adds	r3, #32
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fc33 	bl	80055fc <RCCEx_PLLSAI2_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d9a:	e003      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77fb      	strb	r3, [r7, #31]
        break;
 8004da0:	e000      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da4:	7ffb      	ldrb	r3, [r7, #31]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004daa:	4b7f      	ldr	r3, [pc, #508]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db8:	497b      	ldr	r1, [pc, #492]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004dc0:	e001      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d047      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d030      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d82a      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de6:	d02a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dec:	d824      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df2:	d008      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df8:	d81e      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e02:	d010      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e04:	e018      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e06:	4b68      	ldr	r3, [pc, #416]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4a67      	ldr	r2, [pc, #412]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e10:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e12:	e015      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fb08 	bl	8005430 <RCCEx_PLLSAI1_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e24:	e00c      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3320      	adds	r3, #32
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fbe5 	bl	80055fc <RCCEx_PLLSAI2_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77fb      	strb	r3, [r7, #31]
        break;
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e40:	7ffb      	ldrb	r3, [r7, #31]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e46:	4b58      	ldr	r3, [pc, #352]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4954      	ldr	r1, [pc, #336]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e5c:	e001      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	7ffb      	ldrb	r3, [r7, #31]
 8004e60:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80ab 	beq.w	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e74:	4b4c      	ldr	r3, [pc, #304]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b49      	ldr	r3, [pc, #292]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	4a48      	ldr	r2, [pc, #288]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8c:	4b46      	ldr	r3, [pc, #280]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b43      	ldr	r3, [pc, #268]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a42      	ldr	r2, [pc, #264]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea8:	f7fc ffd0 	bl	8001e4c <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eae:	e00f      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fc ffcc 	bl	8001e4c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d908      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ebe:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004ece:	e006      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed0:	4b36      	ldr	r3, [pc, #216]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0e9      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004edc:	e000      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004ede:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004ee0:	7ffb      	ldrb	r3, [r7, #31]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d164      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01f      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d019      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f04:	4b28      	ldr	r3, [pc, #160]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	4a24      	ldr	r2, [pc, #144]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	4a20      	ldr	r2, [pc, #128]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01f      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7fc ff83 	bl	8001e4c <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f48:	e012      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4a:	f7fc ff7f 	bl	8001e4c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d909      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004f6e:	e007      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f70:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0e5      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004f7e:	e000      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004f80:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004f82:	7ffb      	ldrb	r3, [r7, #31]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10c      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f88:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	4903      	ldr	r1, [pc, #12]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa2:	7ffb      	ldrb	r3, [r7, #31]
 8004fa4:	77bb      	strb	r3, [r7, #30]
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7ffb      	ldrb	r3, [r7, #31]
 8004fb2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b9c      	ldr	r3, [pc, #624]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4a9b      	ldr	r2, [pc, #620]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd2:	4b96      	ldr	r3, [pc, #600]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f023 0203 	bic.w	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	4992      	ldr	r1, [pc, #584]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff4:	4b8d      	ldr	r3, [pc, #564]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 020c 	bic.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	498a      	ldr	r1, [pc, #552]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005016:	4b85      	ldr	r3, [pc, #532]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	4981      	ldr	r1, [pc, #516]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005038:	4b7c      	ldr	r3, [pc, #496]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	4979      	ldr	r1, [pc, #484]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800505a:	4b74      	ldr	r3, [pc, #464]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	4970      	ldr	r1, [pc, #448]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507c:	4b6b      	ldr	r3, [pc, #428]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508a:	4968      	ldr	r1, [pc, #416]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800509e:	4b63      	ldr	r3, [pc, #396]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	495f      	ldr	r1, [pc, #380]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050c0:	4b5a      	ldr	r3, [pc, #360]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ce:	4957      	ldr	r1, [pc, #348]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80050e2:	4b52      	ldr	r3, [pc, #328]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f0:	494e      	ldr	r1, [pc, #312]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d031      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800510c:	d00e      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800510e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005112:	d814      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800511c:	d10f      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800511e:	4b43      	ldr	r3, [pc, #268]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4a42      	ldr	r2, [pc, #264]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005128:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800512a:	e00c      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f97c 	bl	8005430 <RCCEx_PLLSAI1_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	77fb      	strb	r3, [r7, #31]
        break;
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005146:	7ffb      	ldrb	r3, [r7, #31]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800514c:	4b37      	ldr	r3, [pc, #220]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515a:	4934      	ldr	r1, [pc, #208]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005162:	e001      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	7ffb      	ldrb	r3, [r7, #31]
 8005166:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005174:	4b2d      	ldr	r3, [pc, #180]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005182:	492a      	ldr	r1, [pc, #168]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005196:	4b25      	ldr	r3, [pc, #148]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	4921      	ldr	r1, [pc, #132]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051b8:	4b1c      	ldr	r3, [pc, #112]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	4919      	ldr	r1, [pc, #100]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e0:	f023 0203 	bic.w	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e8:	4910      	ldr	r1, [pc, #64]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02b      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520a:	4908      	ldr	r1, [pc, #32]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521a:	d109      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a02      	ldr	r2, [pc, #8]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005226:	60d3      	str	r3, [r2, #12]
 8005228:	e014      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005238:	d10c      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	2101      	movs	r1, #1
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f8f5 	bl	8005430 <RCCEx_PLLSAI1_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800524a:	7ffb      	ldrb	r3, [r7, #31]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005250:	7ffb      	ldrb	r3, [r7, #31]
 8005252:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d04a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005268:	d108      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800526a:	4b70      	ldr	r3, [pc, #448]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800526c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005270:	4a6e      	ldr	r2, [pc, #440]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005276:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800527a:	e012      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800527c:	4b6b      	ldr	r3, [pc, #428]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528a:	4968      	ldr	r1, [pc, #416]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005292:	4b66      	ldr	r3, [pc, #408]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005298:	4a64      	ldr	r2, [pc, #400]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800529a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052aa:	d10d      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	2101      	movs	r1, #1
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f8bc 	bl	8005430 <RCCEx_PLLSAI1_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052bc:	7ffb      	ldrb	r3, [r7, #31]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d019      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80052c2:	7ffb      	ldrb	r3, [r7, #31]
 80052c4:	77bb      	strb	r3, [r7, #30]
 80052c6:	e016      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d2:	4b56      	ldr	r3, [pc, #344]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4a55      	ldr	r2, [pc, #340]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052dc:	60d3      	str	r3, [r2, #12]
 80052de:	e00a      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e8:	d105      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052ea:	4b50      	ldr	r3, [pc, #320]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	4a4f      	ldr	r2, [pc, #316]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d028      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005302:	4b4a      	ldr	r3, [pc, #296]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005310:	4946      	ldr	r1, [pc, #280]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800531c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005320:	d106      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4a41      	ldr	r2, [pc, #260]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532c:	60d3      	str	r3, [r2, #12]
 800532e:	e011      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005338:	d10c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f000 f875 	bl	8005430 <RCCEx_PLLSAI1_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800534a:	7ffb      	ldrb	r3, [r7, #31]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005350:	7ffb      	ldrb	r3, [r7, #31]
 8005352:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01e      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005360:	4b32      	ldr	r3, [pc, #200]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005370:	492e      	ldr	r1, [pc, #184]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005382:	d10c      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f850 	bl	8005430 <RCCEx_PLLSAI1_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800539a:	7ffb      	ldrb	r3, [r7, #31]
 800539c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b0:	f023 0204 	bic.w	r2, r3, #4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ba:	491c      	ldr	r1, [pc, #112]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053ce:	4b17      	ldr	r3, [pc, #92]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d4:	f023 0218 	bic.w	r2, r3, #24
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	4913      	ldr	r1, [pc, #76]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d017      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005402:	490a      	ldr	r1, [pc, #40]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005414:	d105      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	4a04      	ldr	r2, [pc, #16]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800541c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005420:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005422:	7fbb      	ldrb	r3, [r7, #30]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000

08005430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d018      	beq.n	8005478 <RCCEx_PLLSAI1_Config+0x48>
 8005446:	2b03      	cmp	r3, #3
 8005448:	d81f      	bhi.n	800548a <RCCEx_PLLSAI1_Config+0x5a>
 800544a:	2b01      	cmp	r3, #1
 800544c:	d002      	beq.n	8005454 <RCCEx_PLLSAI1_Config+0x24>
 800544e:	2b02      	cmp	r3, #2
 8005450:	d009      	beq.n	8005466 <RCCEx_PLLSAI1_Config+0x36>
 8005452:	e01a      	b.n	800548a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005454:	4b65      	ldr	r3, [pc, #404]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d117      	bne.n	8005490 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005464:	e014      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005466:	4b61      	ldr	r3, [pc, #388]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546e:	2b00      	cmp	r3, #0
 8005470:	d110      	bne.n	8005494 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005476:	e00d      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005478:	4b5c      	ldr	r3, [pc, #368]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d109      	bne.n	8005498 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005488:	e006      	b.n	8005498 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	73fb      	strb	r3, [r7, #15]
      break;
 800548e:	e004      	b.n	800549a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005490:	bf00      	nop
 8005492:	e002      	b.n	800549a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005498:	bf00      	nop
  }

  if (status == HAL_OK)
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f040 809f 	bne.w	80055e0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054a2:	4b52      	ldr	r3, [pc, #328]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a51      	ldr	r2, [pc, #324]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80054a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ae:	f7fc fccd 	bl	8001e4c <HAL_GetTick>
 80054b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054b4:	e00f      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054b6:	f7fc fcc9 	bl	8001e4c <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d908      	bls.n	80054d6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054c4:	4b49      	ldr	r3, [pc, #292]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054d4:	e006      	b.n	80054e4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054d6:	4b45      	ldr	r3, [pc, #276]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e9      	bne.n	80054b6 <RCCEx_PLLSAI1_Config+0x86>
 80054e2:	e000      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80054e4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d179      	bne.n	80055e0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d116      	bne.n	8005520 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054f2:	4b3e      	ldr	r3, [pc, #248]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <RCCEx_PLLSAI1_Config+0x1c0>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6892      	ldr	r2, [r2, #8]
 80054fe:	0211      	lsls	r1, r2, #8
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68d2      	ldr	r2, [r2, #12]
 8005504:	06d2      	lsls	r2, r2, #27
 8005506:	4311      	orrs	r1, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6852      	ldr	r2, [r2, #4]
 800550c:	3a01      	subs	r2, #1
 800550e:	0112      	lsls	r2, r2, #4
 8005510:	4311      	orrs	r1, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	4934      	ldr	r1, [pc, #208]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
 800551e:	e033      	b.n	8005588 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d118      	bne.n	8005558 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1c4>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6892      	ldr	r2, [r2, #8]
 8005532:	0211      	lsls	r1, r2, #8
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6912      	ldr	r2, [r2, #16]
 8005538:	0852      	lsrs	r2, r2, #1
 800553a:	3a01      	subs	r2, #1
 800553c:	0552      	lsls	r2, r2, #21
 800553e:	4311      	orrs	r1, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6852      	ldr	r2, [r2, #4]
 8005544:	3a01      	subs	r2, #1
 8005546:	0112      	lsls	r2, r2, #4
 8005548:	4311      	orrs	r1, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	4926      	ldr	r1, [pc, #152]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8005552:	4313      	orrs	r3, r2
 8005554:	610b      	str	r3, [r1, #16]
 8005556:	e017      	b.n	8005588 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005558:	4b24      	ldr	r3, [pc, #144]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <RCCEx_PLLSAI1_Config+0x1c8>)
 800555e:	4013      	ands	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6892      	ldr	r2, [r2, #8]
 8005564:	0211      	lsls	r1, r2, #8
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6952      	ldr	r2, [r2, #20]
 800556a:	0852      	lsrs	r2, r2, #1
 800556c:	3a01      	subs	r2, #1
 800556e:	0652      	lsls	r2, r2, #25
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6852      	ldr	r2, [r2, #4]
 8005576:	3a01      	subs	r2, #1
 8005578:	0112      	lsls	r2, r2, #4
 800557a:	4311      	orrs	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	491a      	ldr	r1, [pc, #104]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8005584:	4313      	orrs	r3, r2
 8005586:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a17      	ldr	r2, [pc, #92]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800558e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fc fc5a 	bl	8001e4c <HAL_GetTick>
 8005598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800559a:	e00f      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800559c:	f7fc fc56 	bl	8001e4c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d908      	bls.n	80055bc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055aa:	4b10      	ldr	r3, [pc, #64]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80055ba:	e006      	b.n	80055ca <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0e9      	beq.n	800559c <RCCEx_PLLSAI1_Config+0x16c>
 80055c8:	e000      	b.n	80055cc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80055ca:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	4904      	ldr	r1, [pc, #16]	; (80055ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
 80055f0:	07ff800c 	.word	0x07ff800c
 80055f4:	ff9f800c 	.word	0xff9f800c
 80055f8:	f9ff800c 	.word	0xf9ff800c

080055fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d018      	beq.n	8005644 <RCCEx_PLLSAI2_Config+0x48>
 8005612:	2b03      	cmp	r3, #3
 8005614:	d81f      	bhi.n	8005656 <RCCEx_PLLSAI2_Config+0x5a>
 8005616:	2b01      	cmp	r3, #1
 8005618:	d002      	beq.n	8005620 <RCCEx_PLLSAI2_Config+0x24>
 800561a:	2b02      	cmp	r3, #2
 800561c:	d009      	beq.n	8005632 <RCCEx_PLLSAI2_Config+0x36>
 800561e:	e01a      	b.n	8005656 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005620:	4b4a      	ldr	r3, [pc, #296]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d117      	bne.n	800565c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005630:	e014      	b.n	800565c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005632:	4b46      	ldr	r3, [pc, #280]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563a:	2b00      	cmp	r3, #0
 800563c:	d110      	bne.n	8005660 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005642:	e00d      	b.n	8005660 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005644:	4b41      	ldr	r3, [pc, #260]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005654:	e006      	b.n	8005664 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
      break;
 800565a:	e004      	b.n	8005666 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800565c:	bf00      	nop
 800565e:	e002      	b.n	8005666 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005664:	bf00      	nop
  }

  if (status == HAL_OK)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d169      	bne.n	8005740 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800566c:	4b37      	ldr	r3, [pc, #220]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a36      	ldr	r2, [pc, #216]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 8005672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005678:	f7fc fbe8 	bl	8001e4c <HAL_GetTick>
 800567c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800567e:	e00f      	b.n	80056a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005680:	f7fc fbe4 	bl	8001e4c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d908      	bls.n	80056a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800568e:	4b2f      	ldr	r3, [pc, #188]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800569e:	e006      	b.n	80056ae <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056a0:	4b2a      	ldr	r3, [pc, #168]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e9      	bne.n	8005680 <RCCEx_PLLSAI2_Config+0x84>
 80056ac:	e000      	b.n	80056b0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80056ae:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d144      	bne.n	8005740 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d115      	bne.n	80056e8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056bc:	4b23      	ldr	r3, [pc, #140]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	4b23      	ldr	r3, [pc, #140]	; (8005750 <RCCEx_PLLSAI2_Config+0x154>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	0211      	lsls	r1, r2, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68d2      	ldr	r2, [r2, #12]
 80056ce:	06d2      	lsls	r2, r2, #27
 80056d0:	4311      	orrs	r1, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6852      	ldr	r2, [r2, #4]
 80056d6:	3a01      	subs	r2, #1
 80056d8:	0112      	lsls	r2, r2, #4
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	491a      	ldr	r1, [pc, #104]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056e8:	4b18      	ldr	r3, [pc, #96]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a17      	ldr	r2, [pc, #92]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f4:	f7fc fbaa 	bl	8001e4c <HAL_GetTick>
 80056f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056fa:	e00f      	b.n	800571c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056fc:	f7fc fba6 	bl	8001e4c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d908      	bls.n	800571c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800570a:	4b10      	ldr	r3, [pc, #64]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800571a:	e006      	b.n	800572a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0e9      	beq.n	80056fc <RCCEx_PLLSAI2_Config+0x100>
 8005728:	e000      	b.n	800572c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800572a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	4904      	ldr	r1, [pc, #16]	; (800574c <RCCEx_PLLSAI2_Config+0x150>)
 800573c:	4313      	orrs	r3, r2
 800573e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
 8005750:	07ff800c 	.word	0x07ff800c

08005754 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d066      	beq.n	8005834 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb fe60 	bl	8001440 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b10      	cmp	r3, #16
 8005794:	d045      	beq.n	8005822 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005796:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <HAL_RTC_Init+0xec>)
 8005798:	22ca      	movs	r2, #202	; 0xca
 800579a:	625a      	str	r2, [r3, #36]	; 0x24
 800579c:	4b28      	ldr	r3, [pc, #160]	; (8005840 <HAL_RTC_Init+0xec>)
 800579e:	2253      	movs	r2, #83	; 0x53
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f872 	bl	800588c <RTC_EnterInitMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d121      	bne.n	80057f6 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80057b2:	4b23      	ldr	r3, [pc, #140]	; (8005840 <HAL_RTC_Init+0xec>)
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	4a22      	ldr	r2, [pc, #136]	; (8005840 <HAL_RTC_Init+0xec>)
 80057b8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80057c2:	4b1f      	ldr	r3, [pc, #124]	; (8005840 <HAL_RTC_Init+0xec>)
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6859      	ldr	r1, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	4319      	orrs	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	430b      	orrs	r3, r1
 80057d6:	491a      	ldr	r1, [pc, #104]	; (8005840 <HAL_RTC_Init+0xec>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	4916      	ldr	r1, [pc, #88]	; (8005840 <HAL_RTC_Init+0xec>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f881 	bl	80058f4 <RTC_ExitInitMode>
 80057f2:	4603      	mov	r3, r0
 80057f4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10e      	bne.n	800581a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80057fc:	4b10      	ldr	r3, [pc, #64]	; (8005840 <HAL_RTC_Init+0xec>)
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a19      	ldr	r1, [r3, #32]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4319      	orrs	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	430b      	orrs	r3, r1
 8005814:	490a      	ldr	r1, [pc, #40]	; (8005840 <HAL_RTC_Init+0xec>)
 8005816:	4313      	orrs	r3, r2
 8005818:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_RTC_Init+0xec>)
 800581c:	22ff      	movs	r2, #255	; 0xff
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
 8005820:	e001      	b.n	8005826 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d103      	bne.n	8005834 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40002800 	.word	0x40002800

08005844 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800584c:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_RTC_WaitForSynchro+0x40>)
 800584e:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <HAL_RTC_WaitForSynchro+0x44>)
 8005850:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005852:	f7fc fafb 	bl	8001e4c <HAL_GetTick>
 8005856:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005858:	e009      	b.n	800586e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800585a:	f7fc faf7 	bl	8001e4c <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005868:	d901      	bls.n	800586e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e006      	b.n	800587c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_RTC_WaitForSynchro+0x40>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ef      	beq.n	800585a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40002800 	.word	0x40002800
 8005888:	0001005c 	.word	0x0001005c

0800588c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005898:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <RTC_EnterInitMode+0x64>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d120      	bne.n	80058e6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80058a4:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <RTC_EnterInitMode+0x64>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <RTC_EnterInitMode+0x64>)
 80058aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ae:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80058b0:	f7fc facc 	bl	8001e4c <HAL_GetTick>
 80058b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058b6:	e00d      	b.n	80058d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058b8:	f7fc fac8 	bl	8001e4c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058c6:	d905      	bls.n	80058d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2203      	movs	r2, #3
 80058d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <RTC_EnterInitMode+0x64>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <RTC_EnterInitMode+0x5a>
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d1e8      	bne.n	80058b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40002800 	.word	0x40002800

080058f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <RTC_ExitInitMode+0x78>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4a19      	ldr	r2, [pc, #100]	; (800596c <RTC_ExitInitMode+0x78>)
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800590c:	4b17      	ldr	r3, [pc, #92]	; (800596c <RTC_ExitInitMode+0x78>)
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10c      	bne.n	8005932 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ff93 	bl	8005844 <HAL_RTC_WaitForSynchro>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01e      	beq.n	8005962 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	73fb      	strb	r3, [r7, #15]
 8005930:	e017      	b.n	8005962 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005932:	4b0e      	ldr	r3, [pc, #56]	; (800596c <RTC_ExitInitMode+0x78>)
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	4a0d      	ldr	r2, [pc, #52]	; (800596c <RTC_ExitInitMode+0x78>)
 8005938:	f023 0320 	bic.w	r3, r3, #32
 800593c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff80 	bl	8005844 <HAL_RTC_WaitForSynchro>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2203      	movs	r2, #3
 800594e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <RTC_ExitInitMode+0x78>)
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	4a04      	ldr	r2, [pc, #16]	; (800596c <RTC_ExitInitMode+0x78>)
 800595c:	f043 0320 	orr.w	r3, r3, #32
 8005960:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40002800 	.word	0x40002800

08005970 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	490f      	ldr	r1, [pc, #60]	; (80059c0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005984:	4313      	orrs	r3, r2
 8005986:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	490c      	ldr	r1, [pc, #48]	; (80059c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005992:	4313      	orrs	r3, r2
 8005994:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6919      	ldr	r1, [r3, #16]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	430b      	orrs	r3, r1
 80059aa:	4906      	ldr	r1, [pc, #24]	; (80059c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40002800 	.word	0x40002800
 80059c4:	40003400 	.word	0x40003400

080059c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e042      	b.n	8005a60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7fb fff5 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2224      	movs	r2, #36	; 0x24
 80059f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fcde 	bl	80063cc <UART_SetConfig>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e022      	b.n	8005a60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 ffd2 	bl	80069cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 f859 	bl	8006b10 <UART_CheckIdleState>
 8005a5e:	4603      	mov	r3, r0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d17b      	bne.n	8005b7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_Transmit+0x26>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e074      	b.n	8005b7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2221      	movs	r2, #33	; 0x21
 8005a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aa2:	f7fc f9d3 	bl	8001e4c <HAL_GetTick>
 8005aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d108      	bne.n	8005ad4 <HAL_UART_Transmit+0x6c>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e003      	b.n	8005adc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005adc:	e030      	b.n	8005b40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f001 f8bb 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e03d      	b.n	8005b7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3302      	adds	r3, #2
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	e007      	b.n	8005b2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1c8      	bne.n	8005ade <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2140      	movs	r1, #64	; 0x40
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f001 f884 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	; 0x28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d167      	bne.n	8005c6c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_UART_Transmit_DMA+0x24>
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e060      	b.n	8005c6e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2221      	movs	r2, #33	; 0x21
 8005bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d028      	beq.n	8005c2c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bde:	4a26      	ldr	r2, [pc, #152]	; (8005c78 <HAL_UART_Transmit_DMA+0xf4>)
 8005be0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be6:	4a25      	ldr	r2, [pc, #148]	; (8005c7c <HAL_UART_Transmit_DMA+0xf8>)
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bee:	4a24      	ldr	r2, [pc, #144]	; (8005c80 <HAL_UART_Transmit_DMA+0xfc>)
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c02:	4619      	mov	r1, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3328      	adds	r3, #40	; 0x28
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f7fd fa81 	bl	8003114 <HAL_DMA_Start_IT>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e020      	b.n	8005c6e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2240      	movs	r2, #64	; 0x40
 8005c32:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3308      	adds	r3, #8
 8005c3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	613b      	str	r3, [r7, #16]
   return(result);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c54:	623a      	str	r2, [r7, #32]
 8005c56:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	69f9      	ldr	r1, [r7, #28]
 8005c5a:	6a3a      	ldr	r2, [r7, #32]
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e5      	bne.n	8005c34 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3728      	adds	r7, #40	; 0x28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	08006fcf 	.word	0x08006fcf
 8005c7c:	08007069 	.word	0x08007069
 8005c80:	080071ef 	.word	0x080071ef

08005c84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d137      	bne.n	8005d0c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_UART_Receive_DMA+0x24>
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e030      	b.n	8005d0e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_UART_Receive_DMA+0x94>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01f      	beq.n	8005cfc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	623b      	str	r3, [r7, #32]
 8005cea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f001 f816 	bl	8006d34 <UART_Start_Receive_DMA>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	; 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40008000 	.word	0x40008000

08005d1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b0ba      	sub	sp, #232	; 0xe8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d46:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11b      	bne.n	8005d90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d015      	beq.n	8005d90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 82e3 	beq.w	800634c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
      }
      return;
 8005d8e:	e2dd      	b.n	800634c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8123 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d9e:	4b8d      	ldr	r3, [pc, #564]	; (8005fd4 <HAL_UART_IRQHandler+0x2b8>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005da6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005daa:	4b8b      	ldr	r3, [pc, #556]	; (8005fd8 <HAL_UART_IRQHandler+0x2bc>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 8116 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d011      	beq.n	8005de4 <HAL_UART_IRQHandler+0xc8>
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00b      	beq.n	8005de4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d011      	beq.n	8005e14 <HAL_UART_IRQHandler+0xf8>
 8005df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2202      	movs	r2, #2
 8005e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f043 0204 	orr.w	r2, r3, #4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d011      	beq.n	8005e44 <HAL_UART_IRQHandler+0x128>
 8005e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2204      	movs	r2, #4
 8005e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f043 0202 	orr.w	r2, r3, #2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d017      	beq.n	8005e80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e60:	4b5c      	ldr	r3, [pc, #368]	; (8005fd4 <HAL_UART_IRQHandler+0x2b8>)
 8005e62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	f043 0208 	orr.w	r2, r3, #8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d012      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x196>
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00c      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8249 	beq.w	8006350 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d013      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d105      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d054      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fff3 	bl	8006f02 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d146      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1d9      	bne.n	8005f2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f86:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <HAL_UART_IRQHandler+0x2c0>)
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fd f996 	bl	80032c2 <HAL_DMA_Abort_IT>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d019      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005faa:	4610      	mov	r0, r2
 8005fac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fae:	e00f      	b.n	8005fd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9f5 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb6:	e00b      	b.n	8005fd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f9f1 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbe:	e007      	b.n	8005fd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9ed 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005fce:	e1bf      	b.n	8006350 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	bf00      	nop
    return;
 8005fd2:	e1bd      	b.n	8006350 <HAL_UART_IRQHandler+0x634>
 8005fd4:	10000001 	.word	0x10000001
 8005fd8:	04000120 	.word	0x04000120
 8005fdc:	0800726f 	.word	0x0800726f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f040 8153 	bne.w	8006290 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 814c 	beq.w	8006290 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8145 	beq.w	8006290 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2210      	movs	r2, #16
 800600c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	f040 80bb 	bne.w	8006194 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800602c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 818f 	beq.w	8006354 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800603c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006040:	429a      	cmp	r2, r3
 8006042:	f080 8187 	bcs.w	8006354 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800604c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 8087 	bne.w	8006172 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800607c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800608e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006092:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800609a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1da      	bne.n	8006064 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3308      	adds	r3, #8
 80060b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e1      	bne.n	80060ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800610e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800611c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e3      	bne.n	80060ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800613e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006140:	f023 0310 	bic.w	r3, r3, #16
 8006144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006152:	65bb      	str	r3, [r7, #88]	; 0x58
 8006154:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e4      	bne.n	8006130 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd f84c 	bl	800320a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006184:	b29b      	uxth	r3, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	b29b      	uxth	r3, r3
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f911 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006192:	e0df      	b.n	8006354 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80d1 	beq.w	8006358 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80061b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80cc 	beq.w	8006358 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061e2:	647b      	str	r3, [r7, #68]	; 0x44
 80061e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e4      	bne.n	80061c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3308      	adds	r3, #8
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	623b      	str	r3, [r7, #32]
   return(result);
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800621e:	633a      	str	r2, [r7, #48]	; 0x30
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e1      	bne.n	80061f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	60fb      	str	r3, [r7, #12]
   return(result);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0310 	bic.w	r3, r3, #16
 800625a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	69b9      	ldr	r1, [r7, #24]
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	617b      	str	r3, [r7, #20]
   return(result);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e4      	bne.n	8006246 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f893 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800628e:	e063      	b.n	8006358 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <HAL_UART_IRQHandler+0x59e>
 800629c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f81c 	bl	80072f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062b8:	e051      	b.n	800635e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d014      	beq.n	80062f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80062c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d03a      	beq.n	800635c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
    }
    return;
 80062ee:	e035      	b.n	800635c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <HAL_UART_IRQHandler+0x5f4>
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 ffc6 	bl	800729a <UART_EndTransmit_IT>
    return;
 800630e:	e026      	b.n	800635e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <HAL_UART_IRQHandler+0x614>
 800631c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fff5 	bl	8007318 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800632e:	e016      	b.n	800635e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d010      	beq.n	800635e <HAL_UART_IRQHandler+0x642>
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006340:	2b00      	cmp	r3, #0
 8006342:	da0c      	bge.n	800635e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 ffdd 	bl	8007304 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800634a:	e008      	b.n	800635e <HAL_UART_IRQHandler+0x642>
      return;
 800634c:	bf00      	nop
 800634e:	e006      	b.n	800635e <HAL_UART_IRQHandler+0x642>
    return;
 8006350:	bf00      	nop
 8006352:	e004      	b.n	800635e <HAL_UART_IRQHandler+0x642>
      return;
 8006354:	bf00      	nop
 8006356:	e002      	b.n	800635e <HAL_UART_IRQHandler+0x642>
      return;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <HAL_UART_IRQHandler+0x642>
    return;
 800635c:	bf00      	nop
  }
}
 800635e:	37e8      	adds	r7, #232	; 0xe8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d0:	b08c      	sub	sp, #48	; 0x30
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4baa      	ldr	r3, [pc, #680]	; (80066a4 <UART_SetConfig+0x2d8>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006404:	430b      	orrs	r3, r1
 8006406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a9f      	ldr	r2, [pc, #636]	; (80066a8 <UART_SetConfig+0x2dc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006434:	4313      	orrs	r3, r2
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006442:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800644c:	430b      	orrs	r3, r1
 800644e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	f023 010f 	bic.w	r1, r3, #15
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a90      	ldr	r2, [pc, #576]	; (80066ac <UART_SetConfig+0x2e0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d125      	bne.n	80064bc <UART_SetConfig+0xf0>
 8006470:	4b8f      	ldr	r3, [pc, #572]	; (80066b0 <UART_SetConfig+0x2e4>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	2b03      	cmp	r3, #3
 800647c:	d81a      	bhi.n	80064b4 <UART_SetConfig+0xe8>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0xb8>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	08006495 	.word	0x08006495
 8006488:	080064a5 	.word	0x080064a5
 800648c:	0800649d 	.word	0x0800649d
 8006490:	080064ad 	.word	0x080064ad
 8006494:	2301      	movs	r3, #1
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649a:	e116      	b.n	80066ca <UART_SetConfig+0x2fe>
 800649c:	2302      	movs	r3, #2
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a2:	e112      	b.n	80066ca <UART_SetConfig+0x2fe>
 80064a4:	2304      	movs	r3, #4
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064aa:	e10e      	b.n	80066ca <UART_SetConfig+0x2fe>
 80064ac:	2308      	movs	r3, #8
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b2:	e10a      	b.n	80066ca <UART_SetConfig+0x2fe>
 80064b4:	2310      	movs	r3, #16
 80064b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ba:	e106      	b.n	80066ca <UART_SetConfig+0x2fe>
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a7c      	ldr	r2, [pc, #496]	; (80066b4 <UART_SetConfig+0x2e8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d138      	bne.n	8006538 <UART_SetConfig+0x16c>
 80064c6:	4b7a      	ldr	r3, [pc, #488]	; (80066b0 <UART_SetConfig+0x2e4>)
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064cc:	f003 030c 	and.w	r3, r3, #12
 80064d0:	2b0c      	cmp	r3, #12
 80064d2:	d82d      	bhi.n	8006530 <UART_SetConfig+0x164>
 80064d4:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0x110>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	08006511 	.word	0x08006511
 80064e0:	08006531 	.word	0x08006531
 80064e4:	08006531 	.word	0x08006531
 80064e8:	08006531 	.word	0x08006531
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006531 	.word	0x08006531
 80064f4:	08006531 	.word	0x08006531
 80064f8:	08006531 	.word	0x08006531
 80064fc:	08006519 	.word	0x08006519
 8006500:	08006531 	.word	0x08006531
 8006504:	08006531 	.word	0x08006531
 8006508:	08006531 	.word	0x08006531
 800650c:	08006529 	.word	0x08006529
 8006510:	2300      	movs	r3, #0
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006516:	e0d8      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006518:	2302      	movs	r3, #2
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651e:	e0d4      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006520:	2304      	movs	r3, #4
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e0d0      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006528:	2308      	movs	r3, #8
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e0cc      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006530:	2310      	movs	r3, #16
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e0c8      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a5e      	ldr	r2, [pc, #376]	; (80066b8 <UART_SetConfig+0x2ec>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d125      	bne.n	800658e <UART_SetConfig+0x1c2>
 8006542:	4b5b      	ldr	r3, [pc, #364]	; (80066b0 <UART_SetConfig+0x2e4>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800654c:	2b30      	cmp	r3, #48	; 0x30
 800654e:	d016      	beq.n	800657e <UART_SetConfig+0x1b2>
 8006550:	2b30      	cmp	r3, #48	; 0x30
 8006552:	d818      	bhi.n	8006586 <UART_SetConfig+0x1ba>
 8006554:	2b20      	cmp	r3, #32
 8006556:	d00a      	beq.n	800656e <UART_SetConfig+0x1a2>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d814      	bhi.n	8006586 <UART_SetConfig+0x1ba>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <UART_SetConfig+0x19a>
 8006560:	2b10      	cmp	r3, #16
 8006562:	d008      	beq.n	8006576 <UART_SetConfig+0x1aa>
 8006564:	e00f      	b.n	8006586 <UART_SetConfig+0x1ba>
 8006566:	2300      	movs	r3, #0
 8006568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656c:	e0ad      	b.n	80066ca <UART_SetConfig+0x2fe>
 800656e:	2302      	movs	r3, #2
 8006570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006574:	e0a9      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006576:	2304      	movs	r3, #4
 8006578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657c:	e0a5      	b.n	80066ca <UART_SetConfig+0x2fe>
 800657e:	2308      	movs	r3, #8
 8006580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006584:	e0a1      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006586:	2310      	movs	r3, #16
 8006588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658c:	e09d      	b.n	80066ca <UART_SetConfig+0x2fe>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a4a      	ldr	r2, [pc, #296]	; (80066bc <UART_SetConfig+0x2f0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d125      	bne.n	80065e4 <UART_SetConfig+0x218>
 8006598:	4b45      	ldr	r3, [pc, #276]	; (80066b0 <UART_SetConfig+0x2e4>)
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065a2:	2bc0      	cmp	r3, #192	; 0xc0
 80065a4:	d016      	beq.n	80065d4 <UART_SetConfig+0x208>
 80065a6:	2bc0      	cmp	r3, #192	; 0xc0
 80065a8:	d818      	bhi.n	80065dc <UART_SetConfig+0x210>
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d00a      	beq.n	80065c4 <UART_SetConfig+0x1f8>
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d814      	bhi.n	80065dc <UART_SetConfig+0x210>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <UART_SetConfig+0x1f0>
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	d008      	beq.n	80065cc <UART_SetConfig+0x200>
 80065ba:	e00f      	b.n	80065dc <UART_SetConfig+0x210>
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e082      	b.n	80066ca <UART_SetConfig+0x2fe>
 80065c4:	2302      	movs	r3, #2
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e07e      	b.n	80066ca <UART_SetConfig+0x2fe>
 80065cc:	2304      	movs	r3, #4
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e07a      	b.n	80066ca <UART_SetConfig+0x2fe>
 80065d4:	2308      	movs	r3, #8
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065da:	e076      	b.n	80066ca <UART_SetConfig+0x2fe>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e2:	e072      	b.n	80066ca <UART_SetConfig+0x2fe>
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a35      	ldr	r2, [pc, #212]	; (80066c0 <UART_SetConfig+0x2f4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d12a      	bne.n	8006644 <UART_SetConfig+0x278>
 80065ee:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <UART_SetConfig+0x2e4>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065fc:	d01a      	beq.n	8006634 <UART_SetConfig+0x268>
 80065fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006602:	d81b      	bhi.n	800663c <UART_SetConfig+0x270>
 8006604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006608:	d00c      	beq.n	8006624 <UART_SetConfig+0x258>
 800660a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800660e:	d815      	bhi.n	800663c <UART_SetConfig+0x270>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <UART_SetConfig+0x250>
 8006614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006618:	d008      	beq.n	800662c <UART_SetConfig+0x260>
 800661a:	e00f      	b.n	800663c <UART_SetConfig+0x270>
 800661c:	2300      	movs	r3, #0
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006622:	e052      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006624:	2302      	movs	r3, #2
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662a:	e04e      	b.n	80066ca <UART_SetConfig+0x2fe>
 800662c:	2304      	movs	r3, #4
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006632:	e04a      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006634:	2308      	movs	r3, #8
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663a:	e046      	b.n	80066ca <UART_SetConfig+0x2fe>
 800663c:	2310      	movs	r3, #16
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006642:	e042      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <UART_SetConfig+0x2dc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d13a      	bne.n	80066c4 <UART_SetConfig+0x2f8>
 800664e:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <UART_SetConfig+0x2e4>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006654:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800665c:	d01a      	beq.n	8006694 <UART_SetConfig+0x2c8>
 800665e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006662:	d81b      	bhi.n	800669c <UART_SetConfig+0x2d0>
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	d00c      	beq.n	8006684 <UART_SetConfig+0x2b8>
 800666a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666e:	d815      	bhi.n	800669c <UART_SetConfig+0x2d0>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <UART_SetConfig+0x2b0>
 8006674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006678:	d008      	beq.n	800668c <UART_SetConfig+0x2c0>
 800667a:	e00f      	b.n	800669c <UART_SetConfig+0x2d0>
 800667c:	2300      	movs	r3, #0
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006682:	e022      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668a:	e01e      	b.n	80066ca <UART_SetConfig+0x2fe>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006692:	e01a      	b.n	80066ca <UART_SetConfig+0x2fe>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669a:	e016      	b.n	80066ca <UART_SetConfig+0x2fe>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a2:	e012      	b.n	80066ca <UART_SetConfig+0x2fe>
 80066a4:	cfff69f3 	.word	0xcfff69f3
 80066a8:	40008000 	.word	0x40008000
 80066ac:	40013800 	.word	0x40013800
 80066b0:	40021000 	.word	0x40021000
 80066b4:	40004400 	.word	0x40004400
 80066b8:	40004800 	.word	0x40004800
 80066bc:	40004c00 	.word	0x40004c00
 80066c0:	40005000 	.word	0x40005000
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4ab0      	ldr	r2, [pc, #704]	; (8006990 <UART_SetConfig+0x5c4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	f040 809b 	bne.w	800680c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d827      	bhi.n	800672e <UART_SetConfig+0x362>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0x318>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	08006709 	.word	0x08006709
 80066e8:	08006711 	.word	0x08006711
 80066ec:	08006719 	.word	0x08006719
 80066f0:	0800672f 	.word	0x0800672f
 80066f4:	0800671f 	.word	0x0800671f
 80066f8:	0800672f 	.word	0x0800672f
 80066fc:	0800672f 	.word	0x0800672f
 8006700:	0800672f 	.word	0x0800672f
 8006704:	08006727 	.word	0x08006727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006708:	f7fe fa14 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 800670c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800670e:	e014      	b.n	800673a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006710:	f7fe fa24 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006716:	e010      	b.n	800673a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006718:	4b9e      	ldr	r3, [pc, #632]	; (8006994 <UART_SetConfig+0x5c8>)
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800671c:	e00d      	b.n	800673a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671e:	f7fe f957 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8006722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006724:	e009      	b.n	800673a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800672c:	e005      	b.n	800673a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 8130 	beq.w	80069a2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	4a94      	ldr	r2, [pc, #592]	; (8006998 <UART_SetConfig+0x5cc>)
 8006748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674c:	461a      	mov	r2, r3
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	fbb3 f3f2 	udiv	r3, r3, r2
 8006754:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	4413      	add	r3, r2
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	429a      	cmp	r2, r3
 8006764:	d305      	bcc.n	8006772 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	429a      	cmp	r2, r3
 8006770:	d903      	bls.n	800677a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006778:	e113      	b.n	80069a2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	2200      	movs	r2, #0
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	60fa      	str	r2, [r7, #12]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	4a84      	ldr	r2, [pc, #528]	; (8006998 <UART_SetConfig+0x5cc>)
 8006788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678c:	b29b      	uxth	r3, r3
 800678e:	2200      	movs	r2, #0
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006798:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800679c:	f7f9 fd4a 	bl	8000234 <__aeabi_uldivmod>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4610      	mov	r0, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	020b      	lsls	r3, r1, #8
 80067b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067b6:	0202      	lsls	r2, r0, #8
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	6849      	ldr	r1, [r1, #4]
 80067bc:	0849      	lsrs	r1, r1, #1
 80067be:	2000      	movs	r0, #0
 80067c0:	460c      	mov	r4, r1
 80067c2:	4605      	mov	r5, r0
 80067c4:	eb12 0804 	adds.w	r8, r2, r4
 80067c8:	eb43 0905 	adc.w	r9, r3, r5
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	469a      	mov	sl, r3
 80067d4:	4693      	mov	fp, r2
 80067d6:	4652      	mov	r2, sl
 80067d8:	465b      	mov	r3, fp
 80067da:	4640      	mov	r0, r8
 80067dc:	4649      	mov	r1, r9
 80067de:	f7f9 fd29 	bl	8000234 <__aeabi_uldivmod>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4613      	mov	r3, r2
 80067e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f0:	d308      	bcc.n	8006804 <UART_SetConfig+0x438>
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f8:	d204      	bcs.n	8006804 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	e0ce      	b.n	80069a2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800680a:	e0ca      	b.n	80069a2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006814:	d166      	bne.n	80068e4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8006816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800681a:	2b08      	cmp	r3, #8
 800681c:	d827      	bhi.n	800686e <UART_SetConfig+0x4a2>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0x458>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fe f974 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 800684c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800684e:	e014      	b.n	800687a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fe f984 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006856:	e010      	b.n	800687a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b4e      	ldr	r3, [pc, #312]	; (8006994 <UART_SetConfig+0x5c8>)
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800685c:	e00d      	b.n	800687a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fe f8b7 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006864:	e009      	b.n	800687a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800686c:	e005      	b.n	800687a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8090 	beq.w	80069a2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	4a44      	ldr	r2, [pc, #272]	; (8006998 <UART_SetConfig+0x5cc>)
 8006888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688c:	461a      	mov	r2, r3
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	fbb3 f3f2 	udiv	r3, r3, r2
 8006894:	005a      	lsls	r2, r3, #1
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	441a      	add	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b0f      	cmp	r3, #15
 80068ac:	d916      	bls.n	80068dc <UART_SetConfig+0x510>
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b4:	d212      	bcs.n	80068dc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f023 030f 	bic.w	r3, r3, #15
 80068be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	8bfb      	ldrh	r3, [r7, #30]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	8bfa      	ldrh	r2, [r7, #30]
 80068d8:	60da      	str	r2, [r3, #12]
 80068da:	e062      	b.n	80069a2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068e2:	e05e      	b.n	80069a2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d828      	bhi.n	800693e <UART_SetConfig+0x572>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x528>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006921 	.word	0x08006921
 80068fc:	08006929 	.word	0x08006929
 8006900:	0800693f 	.word	0x0800693f
 8006904:	0800692f 	.word	0x0800692f
 8006908:	0800693f 	.word	0x0800693f
 800690c:	0800693f 	.word	0x0800693f
 8006910:	0800693f 	.word	0x0800693f
 8006914:	08006937 	.word	0x08006937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fe f90c 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800691e:	e014      	b.n	800694a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006920:	f7fe f91c 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006926:	e010      	b.n	800694a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006928:	4b1a      	ldr	r3, [pc, #104]	; (8006994 <UART_SetConfig+0x5c8>)
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800692c:	e00d      	b.n	800694a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692e:	f7fe f84f 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8006932:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006934:	e009      	b.n	800694a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800693c:	e005      	b.n	800694a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006948:	bf00      	nop
    }

    if (pclk != 0U)
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d028      	beq.n	80069a2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	4a10      	ldr	r2, [pc, #64]	; (8006998 <UART_SetConfig+0x5cc>)
 8006956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800695a:	461a      	mov	r2, r3
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	085b      	lsrs	r3, r3, #1
 8006968:	441a      	add	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	2b0f      	cmp	r3, #15
 8006978:	d910      	bls.n	800699c <UART_SetConfig+0x5d0>
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006980:	d20c      	bcs.n	800699c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	b29a      	uxth	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e009      	b.n	80069a2 <UART_SetConfig+0x5d6>
 800698e:	bf00      	nop
 8006990:	40008000 	.word	0x40008000
 8006994:	00f42400 	.word	0x00f42400
 8006998:	08007c2c 	.word	0x08007c2c
      }
      else
      {
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2200      	movs	r2, #0
 80069bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80069be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080069cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01a      	beq.n	8006ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aca:	d10a      	bne.n	8006ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	605a      	str	r2, [r3, #4]
  }
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b098      	sub	sp, #96	; 0x60
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b20:	f7fb f994 	bl	8001e4c <HAL_GetTick>
 8006b24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d12f      	bne.n	8006b94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f88e 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d022      	beq.n	8006b94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b62:	653b      	str	r3, [r7, #80]	; 0x50
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e6      	bne.n	8006b4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e063      	b.n	8006c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d149      	bne.n	8006c36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006baa:	2200      	movs	r2, #0
 8006bac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f857 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d03c      	beq.n	8006c36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30
 8006bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c0e:	61fa      	str	r2, [r7, #28]
 8006c10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	69b9      	ldr	r1, [r7, #24]
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e012      	b.n	8006c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3758      	adds	r7, #88	; 0x58
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c74:	e049      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d045      	beq.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fb f8e5 	bl	8001e4c <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e048      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d031      	beq.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d110      	bne.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2208      	movs	r2, #8
 8006cba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f920 	bl	8006f02 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e029      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce4:	d111      	bne.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f906 	bl	8006f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e00f      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4013      	ands	r3, r2
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d0a6      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b096      	sub	sp, #88	; 0x58
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2222      	movs	r2, #34	; 0x22
 8006d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d02d      	beq.n	8006dc6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d70:	4a40      	ldr	r2, [pc, #256]	; (8006e74 <UART_Start_Receive_DMA+0x140>)
 8006d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d7a:	4a3f      	ldr	r2, [pc, #252]	; (8006e78 <UART_Start_Receive_DMA+0x144>)
 8006d7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d84:	4a3d      	ldr	r2, [pc, #244]	; (8006e7c <UART_Start_Receive_DMA+0x148>)
 8006d86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d8e:	2200      	movs	r2, #0
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3324      	adds	r3, #36	; 0x24
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	461a      	mov	r2, r3
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	f7fc f9b4 	bl	8003114 <HAL_DMA_Start_IT>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2210      	movs	r2, #16
 8006db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e051      	b.n	8006e6a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d018      	beq.n	8006e00 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de2:	657b      	str	r3, [r7, #84]	; 0x54
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dee:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	653b      	str	r3, [r7, #80]	; 0x50
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e20:	637a      	str	r2, [r7, #52]	; 0x34
 8006e22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	613b      	str	r3, [r7, #16]
   return(result);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e54:	623a      	str	r2, [r7, #32]
 8006e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	69f9      	ldr	r1, [r7, #28]
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3758      	adds	r7, #88	; 0x58
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	08007085 	.word	0x08007085
 8006e78:	080071b1 	.word	0x080071b1
 8006e7c:	080071ef 	.word	0x080071ef

08006e80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b08f      	sub	sp, #60	; 0x3c
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e6      	bne.n	8006e88 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eda:	61ba      	str	r2, [r7, #24]
 8006edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6979      	ldr	r1, [r7, #20]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e5      	bne.n	8006eba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006ef6:	bf00      	nop
 8006ef8:	373c      	adds	r7, #60	; 0x3c
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b095      	sub	sp, #84	; 0x54
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	643b      	str	r3, [r7, #64]	; 0x40
 8006f2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e6      	bne.n	8006f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f52:	f023 0301 	bic.w	r3, r3, #1
 8006f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e3      	bne.n	8006f3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d118      	bne.n	8006fae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f023 0310 	bic.w	r3, r3, #16
 8006f90:	647b      	str	r3, [r7, #68]	; 0x44
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fc2:	bf00      	nop
 8006fc4:	3754      	adds	r7, #84	; 0x54
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b090      	sub	sp, #64	; 0x40
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d137      	bne.n	800705a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	623b      	str	r3, [r7, #32]
   return(result);
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007008:	63bb      	str	r3, [r7, #56]	; 0x38
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007012:	633a      	str	r2, [r7, #48]	; 0x30
 8007014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e5      	bne.n	8006ff2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	60fb      	str	r3, [r7, #12]
   return(result);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	617b      	str	r3, [r7, #20]
   return(result);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007058:	e002      	b.n	8007060 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800705a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800705c:	f7ff f982 	bl	8006364 <HAL_UART_TxCpltCallback>
}
 8007060:	bf00      	nop
 8007062:	3740      	adds	r7, #64	; 0x40
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff f97e 	bl	8006378 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b09c      	sub	sp, #112	; 0x70
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d171      	bne.n	8007184 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80070be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e6      	bne.n	80070a8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	667b      	str	r3, [r7, #100]	; 0x64
 80070f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070fa:	647a      	str	r2, [r7, #68]	; 0x44
 80070fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	623b      	str	r3, [r7, #32]
   return(result);
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007124:	663b      	str	r3, [r7, #96]	; 0x60
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800712e:	633a      	str	r2, [r7, #48]	; 0x30
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e5      	bne.n	800710e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d118      	bne.n	8007184 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	69b9      	ldr	r1, [r7, #24]
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	617b      	str	r3, [r7, #20]
   return(result);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007186:	2200      	movs	r2, #0
 8007188:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800718e:	2b01      	cmp	r3, #1
 8007190:	d107      	bne.n	80071a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007198:	4619      	mov	r1, r3
 800719a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800719c:	f7ff f90a 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071a0:	e002      	b.n	80071a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80071a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071a4:	f7f9 fc72 	bl	8000a8c <HAL_UART_RxCpltCallback>
}
 80071a8:	bf00      	nop
 80071aa:	3770      	adds	r7, #112	; 0x70
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2201      	movs	r2, #1
 80071c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d109      	bne.n	80071e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff f8eb 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071de:	e002      	b.n	80071e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff f8d3 	bl	800638c <HAL_UART_RxHalfCpltCallback>
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800720a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d109      	bne.n	800722e <UART_DMAError+0x40>
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b21      	cmp	r3, #33	; 0x21
 800721e:	d106      	bne.n	800722e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2200      	movs	r2, #0
 8007224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007228:	6978      	ldr	r0, [r7, #20]
 800722a:	f7ff fe29 	bl	8006e80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d109      	bne.n	8007250 <UART_DMAError+0x62>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b22      	cmp	r3, #34	; 0x22
 8007240:	d106      	bne.n	8007250 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800724a:	6978      	ldr	r0, [r7, #20]
 800724c:	f7ff fe59 	bl	8006f02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007256:	f043 0210 	orr.w	r2, r3, #16
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007260:	6978      	ldr	r0, [r7, #20]
 8007262:	f7ff f89d 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007266:	bf00      	nop
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff f887 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b088      	sub	sp, #32
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	613b      	str	r3, [r7, #16]
   return(result);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e6      	bne.n	80072a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff f83e 	bl	8006364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e8:	bf00      	nop
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_UARTEx_DisableFifoMode+0x16>
 800733e:	2302      	movs	r3, #2
 8007340:	e027      	b.n	8007392 <HAL_UARTEx_DisableFifoMode+0x66>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2224      	movs	r2, #36	; 0x24
 800734e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e02d      	b.n	8007412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2224      	movs	r2, #36	; 0x24
 80073c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0201 	bic.w	r2, r2, #1
 80073dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f850 	bl	8007498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800742e:	2302      	movs	r3, #2
 8007430:	e02d      	b.n	800748e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2224      	movs	r2, #36	; 0x24
 800743e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f812 	bl	8007498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d108      	bne.n	80074ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074b8:	e031      	b.n	800751e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074ba:	2308      	movs	r3, #8
 80074bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074be:	2308      	movs	r3, #8
 80074c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	0e5b      	lsrs	r3, r3, #25
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	0f5b      	lsrs	r3, r3, #29
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	7b3a      	ldrb	r2, [r7, #12]
 80074e6:	4911      	ldr	r1, [pc, #68]	; (800752c <UARTEx_SetNbDataToProcess+0x94>)
 80074e8:	5c8a      	ldrb	r2, [r1, r2]
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074ee:	7b3a      	ldrb	r2, [r7, #12]
 80074f0:	490f      	ldr	r1, [pc, #60]	; (8007530 <UARTEx_SetNbDataToProcess+0x98>)
 80074f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	7b7a      	ldrb	r2, [r7, #13]
 8007504:	4909      	ldr	r1, [pc, #36]	; (800752c <UARTEx_SetNbDataToProcess+0x94>)
 8007506:	5c8a      	ldrb	r2, [r1, r2]
 8007508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800750c:	7b7a      	ldrb	r2, [r7, #13]
 800750e:	4908      	ldr	r1, [pc, #32]	; (8007530 <UARTEx_SetNbDataToProcess+0x98>)
 8007510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007512:	fb93 f3f2 	sdiv	r3, r3, r2
 8007516:	b29a      	uxth	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	08007c44 	.word	0x08007c44
 8007530:	08007c4c 	.word	0x08007c4c

08007534 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007534:	b480      	push	{r7}
 8007536:	b08b      	sub	sp, #44	; 0x2c
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	fa93 f3a3 	rbit	r3, r3
 800754e:	613b      	str	r3, [r7, #16]
  return result;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800755a:	2320      	movs	r3, #32
 800755c:	e003      	b.n	8007566 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	fab3 f383 	clz	r3, r3
 8007564:	b2db      	uxtb	r3, r3
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	2103      	movs	r1, #3
 800756a:	fa01 f303 	lsl.w	r3, r1, r3
 800756e:	43db      	mvns	r3, r3
 8007570:	401a      	ands	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	fa93 f3a3 	rbit	r3, r3
 800757c:	61fb      	str	r3, [r7, #28]
  return result;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007588:	2320      	movs	r3, #32
 800758a:	e003      	b.n	8007594 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	fab3 f383 	clz	r3, r3
 8007592:	b2db      	uxtb	r3, r3
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	431a      	orrs	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	372c      	adds	r7, #44	; 0x2c
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	43db      	mvns	r3, r3
 80075c2:	401a      	ands	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	605a      	str	r2, [r3, #4]
}
 80075d2:	bf00      	nop
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80075de:	b480      	push	{r7}
 80075e0:	b08b      	sub	sp, #44	; 0x2c
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	fa93 f3a3 	rbit	r3, r3
 80075f8:	613b      	str	r3, [r7, #16]
  return result;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007604:	2320      	movs	r3, #32
 8007606:	e003      	b.n	8007610 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	fab3 f383 	clz	r3, r3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	2103      	movs	r1, #3
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	43db      	mvns	r3, r3
 800761a:	401a      	ands	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	fa93 f3a3 	rbit	r3, r3
 8007626:	61fb      	str	r3, [r7, #28]
  return result;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007632:	2320      	movs	r3, #32
 8007634:	e003      	b.n	800763e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	fab3 f383 	clz	r3, r3
 800763c:	b2db      	uxtb	r3, r3
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	431a      	orrs	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800764c:	bf00      	nop
 800764e:	372c      	adds	r7, #44	; 0x2c
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007658:	b480      	push	{r7}
 800765a:	b08b      	sub	sp, #44	; 0x2c
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	fa93 f3a3 	rbit	r3, r3
 8007672:	613b      	str	r3, [r7, #16]
  return result;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800767e:	2320      	movs	r3, #32
 8007680:	e003      	b.n	800768a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	fab3 f383 	clz	r3, r3
 8007688:	b2db      	uxtb	r3, r3
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	2103      	movs	r1, #3
 800768e:	fa01 f303 	lsl.w	r3, r1, r3
 8007692:	43db      	mvns	r3, r3
 8007694:	401a      	ands	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	fa93 f3a3 	rbit	r3, r3
 80076a0:	61fb      	str	r3, [r7, #28]
  return result;
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80076ac:	2320      	movs	r3, #32
 80076ae:	e003      	b.n	80076b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	fab3 f383 	clz	r3, r3
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	fa01 f303 	lsl.w	r3, r1, r3
 80076c0:	431a      	orrs	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	60da      	str	r2, [r3, #12]
}
 80076c6:	bf00      	nop
 80076c8:	372c      	adds	r7, #44	; 0x2c
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b08b      	sub	sp, #44	; 0x2c
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a1a      	ldr	r2, [r3, #32]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	fa93 f3a3 	rbit	r3, r3
 80076ec:	613b      	str	r3, [r7, #16]
  return result;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80076f8:	2320      	movs	r3, #32
 80076fa:	e003      	b.n	8007704 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	fab3 f383 	clz	r3, r3
 8007702:	b2db      	uxtb	r3, r3
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	210f      	movs	r1, #15
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	43db      	mvns	r3, r3
 800770e:	401a      	ands	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	fa93 f3a3 	rbit	r3, r3
 800771a:	61fb      	str	r3, [r7, #28]
  return result;
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007726:	2320      	movs	r3, #32
 8007728:	e003      	b.n	8007732 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	fab3 f383 	clz	r3, r3
 8007730:	b2db      	uxtb	r3, r3
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	fa01 f303 	lsl.w	r3, r1, r3
 800773a:	431a      	orrs	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007740:	bf00      	nop
 8007742:	372c      	adds	r7, #44	; 0x2c
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800774c:	b480      	push	{r7}
 800774e:	b08b      	sub	sp, #44	; 0x2c
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	0a1b      	lsrs	r3, r3, #8
 8007760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	fa93 f3a3 	rbit	r3, r3
 8007768:	613b      	str	r3, [r7, #16]
  return result;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007774:	2320      	movs	r3, #32
 8007776:	e003      	b.n	8007780 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	fab3 f383 	clz	r3, r3
 800777e:	b2db      	uxtb	r3, r3
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	210f      	movs	r1, #15
 8007784:	fa01 f303 	lsl.w	r3, r1, r3
 8007788:	43db      	mvns	r3, r3
 800778a:	401a      	ands	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	fa93 f3a3 	rbit	r3, r3
 8007798:	61fb      	str	r3, [r7, #28]
  return result;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80077a4:	2320      	movs	r3, #32
 80077a6:	e003      	b.n	80077b0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	fab3 f383 	clz	r3, r3
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	fa01 f303 	lsl.w	r3, r1, r3
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80077be:	bf00      	nop
 80077c0:	372c      	adds	r7, #44	; 0x2c
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b088      	sub	sp, #32
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	fa93 f3a3 	rbit	r3, r3
 80077e0:	60fb      	str	r3, [r7, #12]
  return result;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <LL_GPIO_Init+0x26>
    return 32U;
 80077ec:	2320      	movs	r3, #32
 80077ee:	e003      	b.n	80077f8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	fab3 f383 	clz	r3, r3
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80077fa:	e047      	b.n	800788c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	2101      	movs	r1, #1
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	fa01 f303 	lsl.w	r3, r1, r3
 8007808:	4013      	ands	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d039      	beq.n	8007886 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d003      	beq.n	8007822 <LL_GPIO_Init+0x58>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d10d      	bne.n	800783e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	461a      	mov	r2, r3
 8007828:	69b9      	ldr	r1, [r7, #24]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff fed7 	bl	80075de <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	461a      	mov	r2, r3
 8007836:	69b9      	ldr	r1, [r7, #24]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff feb8 	bl	80075ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	461a      	mov	r2, r3
 8007844:	69b9      	ldr	r1, [r7, #24]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff ff06 	bl	8007658 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d111      	bne.n	8007878 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2bff      	cmp	r3, #255	; 0xff
 8007858:	d807      	bhi.n	800786a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	461a      	mov	r2, r3
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff ff35 	bl	80076d2 <LL_GPIO_SetAFPin_0_7>
 8007868:	e006      	b.n	8007878 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	461a      	mov	r2, r3
 8007870:	69b9      	ldr	r1, [r7, #24]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff ff6a 	bl	800774c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	461a      	mov	r2, r3
 800787e:	69b9      	ldr	r1, [r7, #24]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fe57 	bl	8007534 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	3301      	adds	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	fa22 f303 	lsr.w	r3, r2, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1b0      	bne.n	80077fc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80078ac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80078b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	43db      	mvns	r3, r3
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	4013      	ands	r3, r2
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078da:	b084      	sub	sp, #16
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	f107 0014 	add.w	r0, r7, #20
 80078e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	b004      	add	sp, #16
 800791a:	4770      	bx	lr

0800791c <_Znwj>:
 800791c:	2801      	cmp	r0, #1
 800791e:	bf38      	it	cc
 8007920:	2001      	movcc	r0, #1
 8007922:	b510      	push	{r4, lr}
 8007924:	4604      	mov	r4, r0
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f842 	bl	80079b0 <malloc>
 800792c:	b930      	cbnz	r0, 800793c <_Znwj+0x20>
 800792e:	f000 f807 	bl	8007940 <_ZSt15get_new_handlerv>
 8007932:	b908      	cbnz	r0, 8007938 <_Znwj+0x1c>
 8007934:	f000 f80a 	bl	800794c <abort>
 8007938:	4780      	blx	r0
 800793a:	e7f4      	b.n	8007926 <_Znwj+0xa>
 800793c:	bd10      	pop	{r4, pc}
	...

08007940 <_ZSt15get_new_handlerv>:
 8007940:	4b01      	ldr	r3, [pc, #4]	; (8007948 <_ZSt15get_new_handlerv+0x8>)
 8007942:	e8d3 0faf 	lda	r0, [r3]
 8007946:	4770      	bx	lr
 8007948:	20000618 	.word	0x20000618

0800794c <abort>:
 800794c:	2006      	movs	r0, #6
 800794e:	b508      	push	{r3, lr}
 8007950:	f000 f90a 	bl	8007b68 <raise>
 8007954:	2001      	movs	r0, #1
 8007956:	f7f9 fe35 	bl	80015c4 <_exit>
	...

0800795c <__errno>:
 800795c:	4b01      	ldr	r3, [pc, #4]	; (8007964 <__errno+0x8>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	2000000c 	.word	0x2000000c

08007968 <__libc_init_array>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4d0d      	ldr	r5, [pc, #52]	; (80079a0 <__libc_init_array+0x38>)
 800796c:	2600      	movs	r6, #0
 800796e:	4c0d      	ldr	r4, [pc, #52]	; (80079a4 <__libc_init_array+0x3c>)
 8007970:	1b64      	subs	r4, r4, r5
 8007972:	10a4      	asrs	r4, r4, #2
 8007974:	42a6      	cmp	r6, r4
 8007976:	d109      	bne.n	800798c <__libc_init_array+0x24>
 8007978:	4d0b      	ldr	r5, [pc, #44]	; (80079a8 <__libc_init_array+0x40>)
 800797a:	2600      	movs	r6, #0
 800797c:	4c0b      	ldr	r4, [pc, #44]	; (80079ac <__libc_init_array+0x44>)
 800797e:	f000 f91d 	bl	8007bbc <_init>
 8007982:	1b64      	subs	r4, r4, r5
 8007984:	10a4      	asrs	r4, r4, #2
 8007986:	42a6      	cmp	r6, r4
 8007988:	d105      	bne.n	8007996 <__libc_init_array+0x2e>
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007990:	3601      	adds	r6, #1
 8007992:	4798      	blx	r3
 8007994:	e7ee      	b.n	8007974 <__libc_init_array+0xc>
 8007996:	f855 3b04 	ldr.w	r3, [r5], #4
 800799a:	3601      	adds	r6, #1
 800799c:	4798      	blx	r3
 800799e:	e7f2      	b.n	8007986 <__libc_init_array+0x1e>
 80079a0:	08007c5c 	.word	0x08007c5c
 80079a4:	08007c5c 	.word	0x08007c5c
 80079a8:	08007c5c 	.word	0x08007c5c
 80079ac:	08007c60 	.word	0x08007c60

080079b0 <malloc>:
 80079b0:	4b02      	ldr	r3, [pc, #8]	; (80079bc <malloc+0xc>)
 80079b2:	4601      	mov	r1, r0
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	f000 b82b 	b.w	8007a10 <_malloc_r>
 80079ba:	bf00      	nop
 80079bc:	2000000c 	.word	0x2000000c

080079c0 <memset>:
 80079c0:	4402      	add	r2, r0
 80079c2:	4603      	mov	r3, r0
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d100      	bne.n	80079ca <memset+0xa>
 80079c8:	4770      	bx	lr
 80079ca:	f803 1b01 	strb.w	r1, [r3], #1
 80079ce:	e7f9      	b.n	80079c4 <memset+0x4>

080079d0 <sbrk_aligned>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4e0e      	ldr	r6, [pc, #56]	; (8007a0c <sbrk_aligned+0x3c>)
 80079d4:	460c      	mov	r4, r1
 80079d6:	4605      	mov	r5, r0
 80079d8:	6831      	ldr	r1, [r6, #0]
 80079da:	b911      	cbnz	r1, 80079e2 <sbrk_aligned+0x12>
 80079dc:	f000 f88c 	bl	8007af8 <_sbrk_r>
 80079e0:	6030      	str	r0, [r6, #0]
 80079e2:	4621      	mov	r1, r4
 80079e4:	4628      	mov	r0, r5
 80079e6:	f000 f887 	bl	8007af8 <_sbrk_r>
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	d00a      	beq.n	8007a04 <sbrk_aligned+0x34>
 80079ee:	1cc4      	adds	r4, r0, #3
 80079f0:	f024 0403 	bic.w	r4, r4, #3
 80079f4:	42a0      	cmp	r0, r4
 80079f6:	d007      	beq.n	8007a08 <sbrk_aligned+0x38>
 80079f8:	1a21      	subs	r1, r4, r0
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f87c 	bl	8007af8 <_sbrk_r>
 8007a00:	3001      	adds	r0, #1
 8007a02:	d101      	bne.n	8007a08 <sbrk_aligned+0x38>
 8007a04:	f04f 34ff 	mov.w	r4, #4294967295
 8007a08:	4620      	mov	r0, r4
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	20000620 	.word	0x20000620

08007a10 <_malloc_r>:
 8007a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a14:	1ccd      	adds	r5, r1, #3
 8007a16:	4607      	mov	r7, r0
 8007a18:	f025 0503 	bic.w	r5, r5, #3
 8007a1c:	3508      	adds	r5, #8
 8007a1e:	2d0c      	cmp	r5, #12
 8007a20:	bf38      	it	cc
 8007a22:	250c      	movcc	r5, #12
 8007a24:	2d00      	cmp	r5, #0
 8007a26:	db01      	blt.n	8007a2c <_malloc_r+0x1c>
 8007a28:	42a9      	cmp	r1, r5
 8007a2a:	d905      	bls.n	8007a38 <_malloc_r+0x28>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	2600      	movs	r6, #0
 8007a30:	603b      	str	r3, [r7, #0]
 8007a32:	4630      	mov	r0, r6
 8007a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a38:	4e2e      	ldr	r6, [pc, #184]	; (8007af4 <_malloc_r+0xe4>)
 8007a3a:	f000 f8b1 	bl	8007ba0 <__malloc_lock>
 8007a3e:	6833      	ldr	r3, [r6, #0]
 8007a40:	461c      	mov	r4, r3
 8007a42:	bb34      	cbnz	r4, 8007a92 <_malloc_r+0x82>
 8007a44:	4629      	mov	r1, r5
 8007a46:	4638      	mov	r0, r7
 8007a48:	f7ff ffc2 	bl	80079d0 <sbrk_aligned>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	4604      	mov	r4, r0
 8007a50:	d14d      	bne.n	8007aee <_malloc_r+0xde>
 8007a52:	6834      	ldr	r4, [r6, #0]
 8007a54:	4626      	mov	r6, r4
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	d140      	bne.n	8007adc <_malloc_r+0xcc>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4638      	mov	r0, r7
 8007a60:	eb04 0803 	add.w	r8, r4, r3
 8007a64:	f000 f848 	bl	8007af8 <_sbrk_r>
 8007a68:	4580      	cmp	r8, r0
 8007a6a:	d13a      	bne.n	8007ae2 <_malloc_r+0xd2>
 8007a6c:	6821      	ldr	r1, [r4, #0]
 8007a6e:	3503      	adds	r5, #3
 8007a70:	4638      	mov	r0, r7
 8007a72:	1a6d      	subs	r5, r5, r1
 8007a74:	f025 0503 	bic.w	r5, r5, #3
 8007a78:	3508      	adds	r5, #8
 8007a7a:	2d0c      	cmp	r5, #12
 8007a7c:	bf38      	it	cc
 8007a7e:	250c      	movcc	r5, #12
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7ff ffa5 	bl	80079d0 <sbrk_aligned>
 8007a86:	3001      	adds	r0, #1
 8007a88:	d02b      	beq.n	8007ae2 <_malloc_r+0xd2>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	442b      	add	r3, r5
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	e00e      	b.n	8007ab0 <_malloc_r+0xa0>
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	1b52      	subs	r2, r2, r5
 8007a96:	d41e      	bmi.n	8007ad6 <_malloc_r+0xc6>
 8007a98:	2a0b      	cmp	r2, #11
 8007a9a:	d916      	bls.n	8007aca <_malloc_r+0xba>
 8007a9c:	1961      	adds	r1, r4, r5
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	6025      	str	r5, [r4, #0]
 8007aa2:	bf18      	it	ne
 8007aa4:	6059      	strne	r1, [r3, #4]
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	bf08      	it	eq
 8007aaa:	6031      	streq	r1, [r6, #0]
 8007aac:	5162      	str	r2, [r4, r5]
 8007aae:	604b      	str	r3, [r1, #4]
 8007ab0:	f104 060b 	add.w	r6, r4, #11
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f000 f879 	bl	8007bac <__malloc_unlock>
 8007aba:	1d23      	adds	r3, r4, #4
 8007abc:	f026 0607 	bic.w	r6, r6, #7
 8007ac0:	1af2      	subs	r2, r6, r3
 8007ac2:	d0b6      	beq.n	8007a32 <_malloc_r+0x22>
 8007ac4:	1b9b      	subs	r3, r3, r6
 8007ac6:	50a3      	str	r3, [r4, r2]
 8007ac8:	e7b3      	b.n	8007a32 <_malloc_r+0x22>
 8007aca:	6862      	ldr	r2, [r4, #4]
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	bf0c      	ite	eq
 8007ad0:	6032      	streq	r2, [r6, #0]
 8007ad2:	605a      	strne	r2, [r3, #4]
 8007ad4:	e7ec      	b.n	8007ab0 <_malloc_r+0xa0>
 8007ad6:	4623      	mov	r3, r4
 8007ad8:	6864      	ldr	r4, [r4, #4]
 8007ada:	e7b2      	b.n	8007a42 <_malloc_r+0x32>
 8007adc:	4634      	mov	r4, r6
 8007ade:	6876      	ldr	r6, [r6, #4]
 8007ae0:	e7b9      	b.n	8007a56 <_malloc_r+0x46>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	f000 f860 	bl	8007bac <__malloc_unlock>
 8007aec:	e7a1      	b.n	8007a32 <_malloc_r+0x22>
 8007aee:	6025      	str	r5, [r4, #0]
 8007af0:	e7de      	b.n	8007ab0 <_malloc_r+0xa0>
 8007af2:	bf00      	nop
 8007af4:	2000061c 	.word	0x2000061c

08007af8 <_sbrk_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	2300      	movs	r3, #0
 8007afc:	4d05      	ldr	r5, [pc, #20]	; (8007b14 <_sbrk_r+0x1c>)
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7f9 fd68 	bl	80015d8 <_sbrk>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_sbrk_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_sbrk_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20000624 	.word	0x20000624

08007b18 <_raise_r>:
 8007b18:	291f      	cmp	r1, #31
 8007b1a:	b538      	push	{r3, r4, r5, lr}
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	460d      	mov	r5, r1
 8007b20:	d904      	bls.n	8007b2c <_raise_r+0x14>
 8007b22:	2316      	movs	r3, #22
 8007b24:	6003      	str	r3, [r0, #0]
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b2e:	b112      	cbz	r2, 8007b36 <_raise_r+0x1e>
 8007b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b34:	b94b      	cbnz	r3, 8007b4a <_raise_r+0x32>
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 f830 	bl	8007b9c <_getpid_r>
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4601      	mov	r1, r0
 8007b40:	4620      	mov	r0, r4
 8007b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b46:	f000 b817 	b.w	8007b78 <_kill_r>
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d00a      	beq.n	8007b64 <_raise_r+0x4c>
 8007b4e:	1c59      	adds	r1, r3, #1
 8007b50:	d103      	bne.n	8007b5a <_raise_r+0x42>
 8007b52:	2316      	movs	r3, #22
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	2001      	movs	r0, #1
 8007b58:	e7e7      	b.n	8007b2a <_raise_r+0x12>
 8007b5a:	2400      	movs	r4, #0
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b62:	4798      	blx	r3
 8007b64:	2000      	movs	r0, #0
 8007b66:	e7e0      	b.n	8007b2a <_raise_r+0x12>

08007b68 <raise>:
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <raise+0xc>)
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	f7ff bfd3 	b.w	8007b18 <_raise_r>
 8007b72:	bf00      	nop
 8007b74:	2000000c 	.word	0x2000000c

08007b78 <_kill_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_kill_r+0x20>)
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	4611      	mov	r1, r2
 8007b84:	602b      	str	r3, [r5, #0]
 8007b86:	f7f9 fd0d 	bl	80015a4 <_kill>
 8007b8a:	1c43      	adds	r3, r0, #1
 8007b8c:	d102      	bne.n	8007b94 <_kill_r+0x1c>
 8007b8e:	682b      	ldr	r3, [r5, #0]
 8007b90:	b103      	cbz	r3, 8007b94 <_kill_r+0x1c>
 8007b92:	6023      	str	r3, [r4, #0]
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
 8007b96:	bf00      	nop
 8007b98:	20000624 	.word	0x20000624

08007b9c <_getpid_r>:
 8007b9c:	f7f9 bcfa 	b.w	8001594 <_getpid>

08007ba0 <__malloc_lock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	; (8007ba8 <__malloc_lock+0x8>)
 8007ba2:	f000 b809 	b.w	8007bb8 <__retarget_lock_acquire_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20000628 	.word	0x20000628

08007bac <__malloc_unlock>:
 8007bac:	4801      	ldr	r0, [pc, #4]	; (8007bb4 <__malloc_unlock+0x8>)
 8007bae:	f000 b804 	b.w	8007bba <__retarget_lock_release_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	20000628 	.word	0x20000628

08007bb8 <__retarget_lock_acquire_recursive>:
 8007bb8:	4770      	bx	lr

08007bba <__retarget_lock_release_recursive>:
 8007bba:	4770      	bx	lr

08007bbc <_init>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr

08007bc8 <_fini>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	bf00      	nop
 8007bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bce:	bc08      	pop	{r3}
 8007bd0:	469e      	mov	lr, r3
 8007bd2:	4770      	bx	lr
