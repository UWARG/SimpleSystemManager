
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a30c  0800a30c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a30c  0800a30c  0001a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a314  0800a314  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a314  0800a314  0001a314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000124c  20000074  0800a398  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012c0  0800a398  000212c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fbad  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d01  00000000  00000000  0004fc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00055958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001740  00000000  00000000  000572a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cd60  00000000  00000000  000589e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f148  00000000  00000000  00095748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018ca82  00000000  00000000  000c4890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00251312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca8  00000000  00000000  00251364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000074 	.word	0x20000074
 8000210:	00000000 	.word	0x00000000
 8000214:	08009394 	.word	0x08009394

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000078 	.word	0x20000078
 8000230:	08009394 	.word	0x08009394

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN14CircularBufferC1EPhi>:
    return 1;

}


CircularBuffer::CircularBuffer(uint8_t* buf, int size) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
    this->buf = buf;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	601a      	str	r2, [r3, #0]
    this->size = size;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
}
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <mavlink_get_channel_status+0x24>)
 800059e:	4413      	add	r3, r2
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	20000090 	.word	0x20000090

080005b0 <mavlink_reset_channel_status>:

/**
 * @brief Reset the status of a channel.
 */
MAVLINK_HELPER void mavlink_reset_channel_status(uint8_t chan)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffe3 	bl	8000588 <mavlink_get_channel_status>
 80005c2:	60f8      	str	r0, [r7, #12]
	status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2201      	movs	r2, #1
 80005c8:	70da      	strb	r2, [r3, #3]
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <HAL_UARTEx_RxEventCallback>:
#include "../../SSM_MAVLink_Driver/Inc/SSM_D_MAVLink.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSReceiver.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSSender.hpp"
#include "../Inc/driver_config.hpp"

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]


    */ 

    
    if(huart == pixhawk_mavlink_uart){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a1a      	ldr	r2, [pc, #104]	; (800064c <HAL_UARTEx_RxEventCallback+0x78>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d12d      	bne.n	8000644 <HAL_UARTEx_RxEventCallback+0x70>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_SET); //turn on green light
 80005e8:	2201      	movs	r2, #1
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <HAL_UARTEx_RxEventCallback+0x7c>)
 80005ee:	f004 fcb9 	bl	8004f64 <HAL_GPIO_WritePin>

        // //parse the data from buffer
        pixhawk_mavlink->readMessage();
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UARTEx_RxEventCallback+0x80>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fddf 	bl	80021ba <_ZN7MAVLink11readMessageEv>

        // //reset the status of parsing state machine
        mavlink_reset_channel_status(MAVLINK_COMM_1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff ffd7 	bl	80005b0 <mavlink_reset_channel_status>
        // for (uint16_t i = 0; i < size; i++)
        // {
        //     MAVLink::getInstance(huart)->rx_circular_buffer_->write(MAVLink::getInstance(huart)->raw_rx_msg_[i]);
        // }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_UARTEx_RxEventCallback+0x80>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800060a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800060e:	4619      	mov	r1, r3
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f008 fa62 	bl	8008ada <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 0204 	bic.w	r2, r2, #4
 800062c:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET); //turn off green light
 800062e:	2200      	movs	r2, #0
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000634:	f004 fc96 	bl	8004f64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <HAL_UARTEx_RxEventCallback+0x84>)
 8000640:	f004 fc90 	bl	8004f64 <HAL_GPIO_WritePin>
    }


}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000de8 	.word	0x20000de8
 8000650:	42020800 	.word	0x42020800
 8000654:	20000000 	.word	0x20000000
 8000658:	42020000 	.word	0x42020000

0800065c <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <HAL_UART_RxCpltCallback+0x98>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d130      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x72>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000672:	4821      	ldr	r0, [pc, #132]	; (80006f8 <HAL_UART_RxCpltCallback+0x9c>)
 8000674:	f004 fc76 	bl	8004f64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 8000678:	2201      	movs	r2, #1
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	481f      	ldr	r0, [pc, #124]	; (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 800067e:	f004 fc71 	bl	8004f64 <HAL_GPIO_WritePin>
        SBUSReceiver::getInstance(huart)->parse();
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f8fa 	bl	800087c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000688:	4603      	mov	r3, r0
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f94f 	bl	800092e <_ZN12SBUSReceiver5parseEv>
        HAL_UART_Receive_DMA (huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f8f3 	bl	800087c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000696:	4603      	mov	r3, r0
 8000698:	2219      	movs	r2, #25
 800069a:	4619      	mov	r1, r3
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f006 fd93 	bl	80071c8 <HAL_UART_Receive_DMA>
        SBUSSender::getInstance(huart)->assemble_packet();
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 fab6 	bl	8000c14 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fb06 	bl	8000cbc <_ZN10SBUSSender15assemble_packetEv>
        HAL_UART_Transmit(huart, SBUSSender::getInstance(huart)->send_buf_, SBUS_FRAME_SIZE, 10);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 faaf 	bl	8000c14 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	230a      	movs	r3, #10
 80006bc:	2219      	movs	r2, #25
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f006 fc74 	bl	8006fac <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 80006c4:	2200      	movs	r2, #0
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006ca:	f004 fc4b 	bl	8004f64 <HAL_GPIO_WritePin>
    }

    if(huart == pixhawk_mavlink_uart){
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_UART_RxCpltCallback+0xa4>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d109      	bne.n	80006ea <HAL_UART_RxCpltCallback+0x8e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 80006d6:	2201      	movs	r2, #1
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006dc:	f004 fc42 	bl	8004f64 <HAL_GPIO_WritePin>
        /*
            should never enter this callback
        */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 80006e0:	2200      	movs	r2, #0
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006e6:	f004 fc3d 	bl	8004f64 <HAL_GPIO_WritePin>
    }

 }
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000d54 	.word	0x20000d54
 80006f8:	42020000 	.word	0x42020000
 80006fc:	42020400 	.word	0x42020400
 8000700:	20000de8 	.word	0x20000de8

08000704 <HAL_UART_ErrorCallback>:

 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <HAL_UART_ErrorCallback+0x6c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d111      	bne.n	8000738 <HAL_UART_ErrorCallback+0x34>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071a:	4816      	ldr	r0, [pc, #88]	; (8000774 <HAL_UART_ErrorCallback+0x70>)
 800071c:	f004 fc22 	bl	8004f64 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f006 fd9d 	bl	8007260 <HAL_UART_DMAStop>
        HAL_UART_Receive_DMA(huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8a8 	bl	800087c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 800072c:	4603      	mov	r3, r0
 800072e:	2219      	movs	r2, #25
 8000730:	4619      	mov	r1, r3
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f006 fd48 	bl	80071c8 <HAL_UART_Receive_DMA>
    }
    if(huart == pixhawk_mavlink_uart){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <HAL_UART_ErrorCallback+0x74>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d112      	bne.n	8000766 <HAL_UART_ErrorCallback+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <HAL_UART_ErrorCallback+0x70>)
 8000748:	f004 fc0c 	bl	8004f64 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f006 fd87 	bl	8007260 <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart3, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_UART_ErrorCallback+0x78>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800075a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <HAL_UART_ErrorCallback+0x74>)
 8000762:	f008 f9ba 	bl	8008ada <HAL_UARTEx_ReceiveToIdle_DMA>
    }


 }
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000d54 	.word	0x20000d54
 8000774:	42020000 	.word	0x42020000
 8000778:	20000de8 	.word	0x20000de8
 800077c:	20000000 	.word	0x20000000

08000780 <_Z41__static_initialization_and_destruction_0ii>:
/*
    creating mavlink instance
*/

MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d108      	bne.n	80007a2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000796:	4293      	cmp	r3, r2
 8000798:	d103      	bne.n	80007a2 <_Z41__static_initialization_and_destruction_0ii+0x22>
MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 800079a:	4909      	ldr	r1, [pc, #36]	; (80007c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800079e:	f001 fc9d 	bl	80020dc <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d107      	bne.n	80007b8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d102      	bne.n	80007b8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007b4:	f001 fccd 	bl	8002152 <_ZN7MAVLinkD1Ev>
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000de8 	.word	0x20000de8
 80007c4:	200000f0 	.word	0x200000f0

080007c8 <_GLOBAL__sub_I_pixhawk_mavlink_instance>:
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ffd5 	bl	8000780 <_Z41__static_initialization_and_destruction_0ii>
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_GLOBAL__sub_D_pixhawk_mavlink_instance>:
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
 80007dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ffcd 	bl	8000780 <_Z41__static_initialization_and_destruction_0ii>
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_ZN9RCControlC1Ev>:
    };

    float &operator[] (int i) { return ControlSignals[i]; }

    /*  initial values*/
    RCControl()
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
    {
        ControlSignals[0] = 50.0f;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a21      	ldr	r2, [pc, #132]	; (8000878 <_ZN9RCControlC1Ev+0x90>)
 80007f4:	601a      	str	r2, [r3, #0]
        ControlSignals[1] = 50.0f;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <_ZN9RCControlC1Ev+0x90>)
 80007fa:	605a      	str	r2, [r3, #4]
        ControlSignals[2] = 0.0f;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
        ControlSignals[3] = 50.0f;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <_ZN9RCControlC1Ev+0x90>)
 8000808:	60da      	str	r2, [r3, #12]
        ControlSignals[4] = 0.0f;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f04f 0200 	mov.w	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
        ControlSignals[5] = 0.0f;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f04f 0200 	mov.w	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
        ControlSignals[6] = 0.0f;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f04f 0200 	mov.w	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
        ControlSignals[7] = 0.0f;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f04f 0200 	mov.w	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
        ControlSignals[8] = 0.0f;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
        ControlSignals[9] = 0.0f;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f04f 0200 	mov.w	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
        ControlSignals[10] = 0.0f;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
        ControlSignals[11] = 0.0f;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f04f 0200 	mov.w	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
        ControlSignals[12] = 0.0f;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	631a      	str	r2, [r3, #48]	; 0x30
        ControlSignals[13] = 0.0f;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
        ControlSignals[14] = 0.0f;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f04f 0200 	mov.w	r2, #0
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
        ControlSignals[15] = 0.0f;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	42480000 	.word	0x42480000

0800087c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSReceiver* SBUSReceiver::singleton_ = NULL;

SBUSReceiver* SBUSReceiver::getInstance(UART_HandleTypeDef* uart){
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    if (singleton_ == NULL)
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d10a      	bne.n	80008a2 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x26>
    	singleton_ = new SBUSReceiver(uart);
 800088c:	2088      	movs	r0, #136	; 0x88
 800088e:	f008 fbbd 	bl	800900c <_Znwj>
 8000892:	4603      	mov	r3, r0
 8000894:	461c      	mov	r4, r3
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	4620      	mov	r0, r4
 800089a:	f000 f80b 	bl	80008b4 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80008a0:	601c      	str	r4, [r3, #0]

    // returning the instance pointer
    return singleton_;
 80008a2:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80008a4:	681b      	ldr	r3, [r3, #0]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd90      	pop	{r4, r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000738 	.word	0x20000738

080008b4 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	61da      	str	r2, [r3, #28]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3348      	adds	r3, #72	; 0x48
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff8d 	bl	80007e8 <_ZN9RCControlC1Ev>
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	dc0a      	bgt.n	80008ee <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x3a>
    {
        received_sbus_.ch[i] = 1000;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	3210      	adds	r2, #16
 80008de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e7f1      	b.n	80008d2 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x1e>
    }
    received_sbus_.ch17 = false;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    HAL_UART_Receive_DMA (uart_, raw_sbus_, SBUS_FRAME_SIZE);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	2219      	movs	r2, #25
 800091e:	4618      	mov	r0, r3
 8000920:	f006 fc52 	bl	80071c8 <HAL_UART_Receive_DMA>
}
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZN12SBUSReceiver5parseEv>:
    cast_rccontrol();
    return received_rccontrol_;
}

void SBUSReceiver::parse()
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
    if ((raw_sbus_[0] == HEADER_) && (raw_sbus_[24] == FOOTER_)) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b0f      	cmp	r3, #15
 800093c:	f040 815e 	bne.w	8000bfc <_ZN12SBUSReceiver5parseEv+0x2ce>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7e1b      	ldrb	r3, [r3, #24]
 8000944:	2b00      	cmp	r3, #0
 8000946:	f040 8159 	bne.w	8000bfc <_ZN12SBUSReceiver5parseEv+0x2ce>

        //exactal parsing
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[2] << 8) & 0x07FF));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b21b      	sxth	r3, r3
 8000958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800095c:	b21b      	sxth	r3, r3
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	b29a      	uxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	841a      	strh	r2, [r3, #32]
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[3] << 5) & 0x07FF));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	78db      	ldrb	r3, [r3, #3]
 8000976:	015b      	lsls	r3, r3, #5
 8000978:	b21b      	sxth	r3, r3
 800097a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800097e:	b21b      	sxth	r3, r3
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000980:	4313      	orrs	r3, r2
 8000982:	b21b      	sxth	r3, r3
 8000984:	b29a      	uxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	845a      	strh	r2, [r3, #34]	; 0x22
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	78db      	ldrb	r3, [r3, #3]
 800098e:	099b      	lsrs	r3, r3, #6
 8000990:	b2db      	uxtb	r3, r3
 8000992:	b21a      	sxth	r2, r3
                                            (raw_sbus_[4] << 2) |
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[5] << 10) & 0x07FF));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	795b      	ldrb	r3, [r3, #5]
 80009a4:	029b      	lsls	r3, r3, #10
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009ac:	b21b      	sxth	r3, r3
                                            (raw_sbus_[4] << 2) |
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21b      	sxth	r3, r3
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	849a      	strh	r2, [r3, #36]	; 0x24
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[6] << 7) & 0x07FF));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	799b      	ldrb	r3, [r3, #6]
 80009c6:	01db      	lsls	r3, r3, #7
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009ce:	b21b      	sxth	r3, r3
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	84da      	strh	r2, [r3, #38]	; 0x26
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	799b      	ldrb	r3, [r3, #6]
 80009de:	091b      	lsrs	r3, r3, #4
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[7] << 4) & 0x07FF));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	79db      	ldrb	r3, [r3, #7]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009f0:	b21b      	sxth	r3, r3
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	851a      	strh	r2, [r3, #40]	; 0x28
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	79db      	ldrb	r3, [r3, #7]
 8000a00:	09db      	lsrs	r3, r3, #7
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	b21a      	sxth	r2, r3
                                            (raw_sbus_[8] << 1) |
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7a1b      	ldrb	r3, [r3, #8]
 8000a0a:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[9] << 9) & 0x07FF));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7a5b      	ldrb	r3, [r3, #9]
 8000a16:	025b      	lsls	r3, r3, #9
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a1e:	b21b      	sxth	r3, r3
                                            (raw_sbus_[8] << 1) |
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21b      	sxth	r3, r3
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	855a      	strh	r2, [r3, #42]	; 0x2a
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7a5b      	ldrb	r3, [r3, #9]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[10] << 6) & 0x07FF));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7a9b      	ldrb	r3, [r3, #10]
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a40:	b21b      	sxth	r3, r3
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000a42:	4313      	orrs	r3, r2
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	859a      	strh	r2, [r3, #44]	; 0x2c
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7a9b      	ldrb	r3, [r3, #10]
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[11] << 3) & 0x07FF));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7adb      	ldrb	r3, [r3, #11]
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a62:	b21b      	sxth	r3, r3
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	85da      	strh	r2, [r3, #46]	; 0x2e
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7b1b      	ldrb	r3, [r3, #12]
 8000a72:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[13] << 8) & 0x07FF));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7b5b      	ldrb	r3, [r3, #13]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a80:	b21b      	sxth	r3, r3
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	861a      	strh	r2, [r3, #48]	; 0x30
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7b5b      	ldrb	r3, [r3, #13]
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[14] << 5) & 0x07FF));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7b9b      	ldrb	r3, [r3, #14]
 8000a9a:	015b      	lsls	r3, r3, #5
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000aa2:	b21b      	sxth	r3, r3
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	865a      	strh	r2, [r3, #50]	; 0x32
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7b9b      	ldrb	r3, [r3, #14]
 8000ab2:	099b      	lsrs	r3, r3, #6
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	b21a      	sxth	r2, r3
                                            (raw_sbus_[15] << 2) |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7bdb      	ldrb	r3, [r3, #15]
 8000abc:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[16] << 10) & 0x07FF));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7c1b      	ldrb	r3, [r3, #16]
 8000ac8:	029b      	lsls	r3, r3, #10
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ad0:	b21b      	sxth	r3, r3
                                            (raw_sbus_[15] << 2) |
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	b21b      	sxth	r3, r3
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	869a      	strh	r2, [r3, #52]	; 0x34
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7c1b      	ldrb	r3, [r3, #16]
 8000ae0:	085b      	lsrs	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[17] << 7) & 0x07FF));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7c5b      	ldrb	r3, [r3, #17]
 8000aea:	01db      	lsls	r3, r3, #7
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000af2:	b21b      	sxth	r3, r3
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	86da      	strh	r2, [r3, #54]	; 0x36
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7c5b      	ldrb	r3, [r3, #17]
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[18] << 4) & 0x07FF));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7c9b      	ldrb	r3, [r3, #18]
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b14:	b21b      	sxth	r3, r3
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000b16:	4313      	orrs	r3, r2
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	871a      	strh	r2, [r3, #56]	; 0x38
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7c9b      	ldrb	r3, [r3, #18]
 8000b24:	09db      	lsrs	r3, r3, #7
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	b21a      	sxth	r2, r3
                                            (raw_sbus_[19] << 1) |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7cdb      	ldrb	r3, [r3, #19]
 8000b2e:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[20] << 9) & 0x07FF));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7d1b      	ldrb	r3, [r3, #20]
 8000b3a:	025b      	lsls	r3, r3, #9
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b42:	b21b      	sxth	r3, r3
                                            (raw_sbus_[19] << 1) |
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b21b      	sxth	r3, r3
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	875a      	strh	r2, [r3, #58]	; 0x3a
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7d1b      	ldrb	r3, [r3, #20]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[21] << 6) & 0x07FF));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7d5b      	ldrb	r3, [r3, #21]
 8000b5c:	019b      	lsls	r3, r3, #6
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b64:	b21b      	sxth	r3, r3
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7d5b      	ldrb	r3, [r3, #21]
 8000b74:	095b      	lsrs	r3, r3, #5
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[22] << 3) & 0x07FF));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7d9b      	ldrb	r3, [r3, #22]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b86:	b21b      	sxth	r3, r3
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* CH 17 */
        received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7ddb      	ldrb	r3, [r3, #23]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        /* CH 18 */
        received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7ddb      	ldrb	r3, [r3, #23]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        /* Grab the lost frame */
        received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7ddb      	ldrb	r3, [r3, #23]
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        /* Grab the failsafe */
        received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7ddb      	ldrb	r3, [r3, #23]
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf14      	ite	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	2300      	moveq	r3, #0
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        received_sbus_.new_data = true;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bfa:	e004      	b.n	8000c06 <_ZN12SBUSReceiver5parseEv+0x2d8>

    }else{
    	received_sbus_.new_data = false;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender* SBUSSender::singleton_ = NULL;

SBUSSender* SBUSSender::getInstance(UART_HandleTypeDef* uart){
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    if (singleton_ == nullptr)
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10a      	bne.n	8000c3a <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x26>
      singleton_ = new SBUSSender(uart);
 8000c24:	2048      	movs	r0, #72	; 0x48
 8000c26:	f008 f9f1 	bl	800900c <_Znwj>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461c      	mov	r4, r3
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	4620      	mov	r0, r4
 8000c32:	f000 f80b 	bl	8000c4c <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000c38:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000073c 	.word	0x2000073c

08000c4c <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	dc0a      	bgt.n	8000c7c <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x30>
	{
		send_sbus_.ch[i] = 1000;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	3210      	adds	r2, #16
 8000c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e7f1      	b.n	8000c60 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x14>
	}
	send_sbus_.ch17 = false;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	send_sbus_.ch18 = false;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	send_sbus_.failsafe = false;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	send_sbus_.lost_frame = false;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	send_sbus_.new_data = false;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit_DMA(uart_, send_buf_, SBUS_FRAME_SIZE);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	2219      	movs	r2, #25
 8000cac:	4618      	mov	r0, r3
 8000cae:	f006 fa0b 	bl	80070c8 <HAL_UART_Transmit_DMA>
}
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_ZN10SBUSSender15assemble_packetEv>:
      send_sbus_.ch[i] = rccontrol_to_sbus(values.ControlSignals[i]);
    }
}

void SBUSSender::assemble_packet()
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	701a      	strb	r2, [r3, #0]
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	8c1b      	ldrh	r3, [r3, #32]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	705a      	strb	r2, [r3, #1]
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	8c1b      	ldrh	r3, [r3, #32]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	f023 0307 	bic.w	r3, r3, #7
 8000cf0:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	709a      	strb	r2, [r3, #2]
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000d00:	095b      	lsrs	r3, r3, #5
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d0a:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d18:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	70da      	strb	r2, [r3, #3]
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	711a      	strb	r2, [r3, #4]
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d36:	0a9b      	lsrs	r3, r3, #10
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	f023 0301 	bic.w	r3, r3, #1
 8000d4e:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	715a      	strb	r2, [r3, #5]
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d5e:	09db      	lsrs	r3, r3, #7
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	f023 030f 	bic.w	r3, r3, #15
 8000d76:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	719a      	strb	r2, [r3, #6]
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d90:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d96:	01db      	lsls	r3, r3, #7
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d9e:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	71da      	strb	r2, [r3, #7]
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	721a      	strb	r2, [r3, #8]
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dbc:	0a5b      	lsrs	r3, r3, #9
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	f023 0303 	bic.w	r3, r3, #3
 8000dd4:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	725a      	strb	r2, [r3, #9]
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000de4:	099b      	lsrs	r3, r3, #6
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000df4:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	729a      	strb	r2, [r3, #10]
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	72da      	strb	r2, [r3, #11]
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	731a      	strb	r2, [r3, #12]
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	f023 0307 	bic.w	r3, r3, #7
 8000e36:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	735a      	strb	r2, [r3, #13]
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e50:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000e56:	019b      	lsls	r3, r3, #6
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e5e:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	739a      	strb	r2, [r3, #14]
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	73da      	strb	r2, [r3, #15]
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000e7c:	0a9b      	lsrs	r3, r3, #10
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	741a      	strb	r2, [r3, #16]
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000ea4:	09db      	lsrs	r3, r3, #7
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	f023 030f 	bic.w	r3, r3, #15
 8000ebc:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	745a      	strb	r2, [r3, #17]
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ed6:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000edc:	01db      	lsls	r3, r3, #7
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ee4:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	749a      	strb	r2, [r3, #18]
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	74da      	strb	r2, [r3, #19]
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	751a      	strb	r2, [r3, #20]
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000f2a:	099b      	lsrs	r3, r3, #6
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000f3a:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	755a      	strb	r2, [r3, #21]
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	759a      	strb	r2, [r3, #22]
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f5c:	b25a      	sxtb	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	75da      	strb	r2, [r3, #23]
  send_buf_[24] = FOOTER_;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	761a      	strb	r2, [r3, #24]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	6039      	str	r1, [r7, #0]
 8000fb0:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4053      	eors	r3, r2
 8000fbc:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	b25a      	sxtb	r2, r3
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4053      	eors	r3, r2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4053      	eors	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4053      	eors	r3, r2
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4053      	eors	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	801a      	strh	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001018:	801a      	strh	r2, [r3, #0]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <mavlink_sha256_init+0x50>)
 8001040:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <mavlink_sha256_init+0x54>)
 8001046:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <mavlink_sha256_init+0x58>)
 800104c:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <mavlink_sha256_init+0x5c>)
 8001052:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <mavlink_sha256_init+0x60>)
 8001058:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <mavlink_sha256_init+0x64>)
 800105e:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <mavlink_sha256_init+0x68>)
 8001064:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <mavlink_sha256_init+0x6c>)
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	6a09e667 	.word	0x6a09e667
 800107c:	bb67ae85 	.word	0xbb67ae85
 8001080:	3c6ef372 	.word	0x3c6ef372
 8001084:	a54ff53a 	.word	0xa54ff53a
 8001088:	510e527f 	.word	0x510e527f
 800108c:	9b05688c 	.word	0x9b05688c
 8001090:	1f83d9ab 	.word	0x1f83d9ab
 8001094:	5be0cd19 	.word	0x5be0cd19

08001098 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8001098:	b480      	push	{r7}
 800109a:	b0cf      	sub	sp, #316	; 0x13c
 800109c:	af00      	add	r7, sp, #0
 800109e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010a6:	6018      	str	r0, [r3, #0]
 80010a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010ac:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80010b0:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80010b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80010c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80010d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80010e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 80010f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8001102:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001106:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8001112:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001116:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8001122:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001126:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800113c:	2b0f      	cmp	r3, #15
 800113e:	dc17      	bgt.n	8001170 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 8001140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800114a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	4413      	add	r3, r2
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800115c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8001164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001168:	3301      	adds	r3, #1
 800116a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800116e:	e7e3      	b.n	8001138 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8001170:	2310      	movs	r3, #16
 8001172:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800117a:	2b3f      	cmp	r3, #63	; 0x3f
 800117c:	dc6a      	bgt.n	8001254 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800117e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001182:	1e9a      	subs	r2, r3, #2
 8001184:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	ea4f 4273 	mov.w	r2, r3, ror #17
 8001194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001198:	1e99      	subs	r1, r3, #2
 800119a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800119e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011a6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80011aa:	405a      	eors	r2, r3
 80011ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011b0:	1e99      	subs	r1, r3, #2
 80011b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011be:	0a9b      	lsrs	r3, r3, #10
 80011c0:	405a      	eors	r2, r3
 80011c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011c6:	1fd9      	subs	r1, r3, #7
 80011c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011d4:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80011d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011da:	f1a3 010f 	sub.w	r1, r3, #15
 80011de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011ea:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80011ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011f2:	f1a3 000f 	sub.w	r0, r3, #15
 80011f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001202:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001206:	4059      	eors	r1, r3
 8001208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800120c:	f1a3 000f 	sub.w	r0, r3, #15
 8001210:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001218:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001220:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001226:	f1a3 0110 	sub.w	r1, r3, #16
 800122a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800122e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001236:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001238:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800123c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001240:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800124c:	3301      	adds	r3, #1
 800124e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001252:	e790      	b.n	8001176 <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800125a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800125e:	2b3f      	cmp	r3, #63	; 0x3f
 8001260:	dc79      	bgt.n	8001356 <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001262:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001266:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800126a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800126e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001272:	405a      	eors	r2, r3
 8001274:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001278:	ea4f 6373 	mov.w	r3, r3, ror #25
 800127c:	405a      	eors	r2, r3
 800127e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001282:	441a      	add	r2, r3
 8001284:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800128c:	4019      	ands	r1, r3
 800128e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001292:	43d8      	mvns	r0, r3
 8001294:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001298:	4003      	ands	r3, r0
 800129a:	404b      	eors	r3, r1
 800129c:	441a      	add	r2, r3
 800129e:	496d      	ldr	r1, [pc, #436]	; (8001454 <mavlink_sha256_calc+0x3bc>)
 80012a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012a8:	441a      	add	r2, r3
 80012aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012b2:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80012b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012ba:	4413      	add	r3, r2
 80012bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80012c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012c4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80012c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012cc:	ea4f 3373 	mov.w	r3, r3, ror #13
 80012d0:	405a      	eors	r2, r3
 80012d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012d6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80012da:	405a      	eors	r2, r3
 80012dc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80012e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012e4:	4059      	eors	r1, r3
 80012e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012ea:	4019      	ands	r1, r3
 80012ec:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80012f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012f4:	4003      	ands	r3, r0
 80012f6:	404b      	eors	r3, r1
 80012f8:	4413      	add	r3, r2
 80012fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 80012fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001302:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8001306:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800130a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 800130e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001312:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8001316:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800131a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800131e:	4413      	add	r3, r2
 8001320:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8001324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001328:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 800132c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001330:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8001334:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001338:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 800133c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800134a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800134e:	3301      	adds	r3, #1
 8001350:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001354:	e781      	b.n	800125a <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8001356:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800135a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001366:	441a      	add	r2, r3
 8001368:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800136c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8001374:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001378:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001384:	441a      	add	r2, r3
 8001386:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800138a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8001392:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001396:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013a2:	441a      	add	r2, r3
 80013a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 80013b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013c0:	441a      	add	r2, r3
 80013c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80013ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013de:	441a      	add	r2, r3
 80013e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 80013ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013fc:	441a      	add	r2, r3
 80013fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001402:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 800140a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800140e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800141a:	441a      	add	r2, r3
 800141c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001420:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8001428:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800142c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001434:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001438:	441a      	add	r2, r3
 800143a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800143e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001446:	bf00      	nop
 8001448:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	080093ac 	.word	0x080093ac

08001458 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b09c      	sub	sp, #112	; 0x70
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	441a      	add	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001482:	429a      	cmp	r2, r3
 8001484:	d904      	bls.n	8001490 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001498:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d058      	beq.n	8001552 <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 80014a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80014a6:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d201      	bcs.n	80014b4 <mavlink_sha256_update+0x5c>
            l = len;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80014ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014bc:	4413      	add	r3, r2
 80014be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 fe0e 	bl	80090e4 <memcpy>
	offset += l;
 80014c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014cc:	4413      	add	r3, r2
 80014ce:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 80014d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014d4:	4413      	add	r3, r2
 80014d6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80014e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014e2:	2b40      	cmp	r3, #64	; 0x40
 80014e4:	d1d9      	bne.n	800149a <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3328      	adds	r3, #40	; 0x28
 80014ea:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80014ec:	2300      	movs	r3, #0
 80014ee:	663b      	str	r3, [r7, #96]	; 0x60
 80014f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	dc24      	bgt.n	8001540 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80014f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014fc:	4413      	add	r3, r2
 80014fe:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 800150c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150e:	3303      	adds	r3, #3
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001514:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001518:	1c9a      	adds	r2, r3, #2
 800151a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800151c:	3301      	adds	r3, #1
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001528:	3302      	adds	r3, #2
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800152e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001530:	3303      	adds	r3, #3
 8001532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800153a:	3301      	adds	r3, #1
 800153c:	663b      	str	r3, [r7, #96]	; 0x60
 800153e:	e7d7      	b.n	80014f0 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff fda6 	bl	8001098 <mavlink_sha256_calc>
	    offset = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001550:	e7a3      	b.n	800149a <mavlink_sha256_update+0x42>
	}
    }
}
 8001552:	bf00      	nop
 8001554:	3770      	adds	r7, #112	; 0x70
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b098      	sub	sp, #96	; 0x60
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800156e:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001572:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800157a:	3301      	adds	r3, #1
 800157c:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3308      	adds	r3, #8
 8001582:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	3301      	adds	r3, #1
 800158e:	2247      	movs	r2, #71	; 0x47
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f007 fdb3 	bl	80090fe <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800159e:	3307      	adds	r3, #7
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	3360      	adds	r3, #96	; 0x60
 80015a4:	443b      	add	r3, r7
 80015a6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0a1a      	lsrs	r2, r3, #8
 80015b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b2:	3306      	adds	r3, #6
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	3360      	adds	r3, #96	; 0x60
 80015b8:	443b      	add	r3, r7
 80015ba:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0c1a      	lsrs	r2, r3, #16
 80015c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c6:	3305      	adds	r3, #5
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	3360      	adds	r3, #96	; 0x60
 80015cc:	443b      	add	r3, r7
 80015ce:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0e1a      	lsrs	r2, r3, #24
 80015d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015da:	3304      	adds	r3, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	3360      	adds	r3, #96	; 0x60
 80015e0:	443b      	add	r3, r7
 80015e2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ec:	3303      	adds	r3, #3
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	3360      	adds	r3, #96	; 0x60
 80015f2:	443b      	add	r3, r7
 80015f4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0a1a      	lsrs	r2, r3, #8
 80015fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001600:	3302      	adds	r3, #2
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	3360      	adds	r3, #96	; 0x60
 8001606:	443b      	add	r3, r7
 8001608:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	0c1a      	lsrs	r2, r3, #16
 8001612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001614:	3301      	adds	r3, #1
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	3360      	adds	r3, #96	; 0x60
 800161a:	443b      	add	r3, r7
 800161c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	0e1b      	lsrs	r3, r3, #24
 8001626:	b2d9      	uxtb	r1, r3
 8001628:	f107 020c 	add.w	r2, r7, #12
 800162c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162e:	4413      	add	r3, r2
 8001630:	460a      	mov	r2, r1
 8001632:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001636:	f103 0208 	add.w	r2, r3, #8
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff09 	bl	8001458 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001648:	78da      	ldrb	r2, [r3, #3]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001654:	7892      	ldrb	r2, [r2, #2]
 8001656:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3302      	adds	r3, #2
 800165c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800165e:	7852      	ldrb	r2, [r2, #1]
 8001660:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3303      	adds	r3, #3
 8001666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3304      	adds	r3, #4
 8001670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001672:	79d2      	ldrb	r2, [r2, #7]
 8001674:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3305      	adds	r3, #5
 800167a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800167c:	7992      	ldrb	r2, [r2, #6]
 800167e:	701a      	strb	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	3760      	adds	r7, #96	; 0x60
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <mavlink_get_channel_status+0x24>)
 800169e:	4413      	add	r3, r2
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20000740 	.word	0x20000740

080016b0 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f240 1223 	movw	r2, #291	; 0x123
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <mavlink_get_channel_buffer+0x24>)
 80016c6:	4413      	add	r3, r2
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	200007a0 	.word	0x200007a0

080016d8 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b0aa      	sub	sp, #168	; 0xa8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <mavlink_signature_check+0x16>
		return true;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e125      	b.n	800193a <mavlink_signature_check+0x262>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3302      	adds	r3, #2
 80016f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80016fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001704:	3307      	adds	r3, #7
 8001706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 800170a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc8a 	bl	8001028 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f103 0110 	add.w	r1, r3, #16
 800171a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171e:	2220      	movs	r2, #32
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe99 	bl	8001458 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172a:	220a      	movs	r2, #10
 800172c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe91 	bl	8001458 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f103 010c 	add.w	r1, r3, #12
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	78db      	ldrb	r3, [r3, #3]
 8001740:	461a      	mov	r2, r3
 8001742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fe86 	bl	8001458 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001756:	2202      	movs	r2, #2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fe7d 	bl	8001458 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	2207      	movs	r2, #7
 8001764:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fe75 	bl	8001458 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 800176e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff feee 	bl	800155a <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	2206      	movs	r2, #6
 8001784:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fc9b 	bl	80090c4 <memcmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <mavlink_signature_check+0xc0>
		return false;
 8001794:	2300      	movs	r3, #0
 8001796:	e0d0      	b.n	800193a <mavlink_signature_check+0x262>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 80017ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	2206      	movs	r2, #6
 80017ba:	4618      	mov	r0, r3
 80017bc:	f007 fc92 	bl	80090e4 <memcpy>

	if (signing_streams == NULL) {
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <mavlink_signature_check+0xf2>
		return false;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e0b7      	b.n	800193a <mavlink_signature_check+0x262>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80017d8:	429a      	cmp	r2, r3
 80017da:	d22d      	bcs.n	8001838 <mavlink_signature_check+0x160>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	79d9      	ldrb	r1, [r3, #7]
 80017e0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80017e4:	68b8      	ldr	r0, [r7, #8]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	4403      	add	r3, r0
 80017ee:	3303      	adds	r3, #3
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d119      	bne.n	800182a <mavlink_signature_check+0x152>
		    msg->compid == signing_streams->stream[i].compid &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7a19      	ldrb	r1, [r3, #8]
 80017fa:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80017fe:	68b8      	ldr	r0, [r7, #8]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4413      	add	r3, r2
 8001806:	4403      	add	r3, r0
 8001808:	3304      	adds	r3, #4
 800180a:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800180c:	4299      	cmp	r1, r3
 800180e:	d10c      	bne.n	800182a <mavlink_signature_check+0x152>
		    link_id == signing_streams->stream[i].link_id) {
 8001810:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	440b      	add	r3, r1
 800181e:	3302      	adds	r3, #2
 8001820:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001822:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001826:	429a      	cmp	r2, r3
 8001828:	d005      	beq.n	8001836 <mavlink_signature_check+0x15e>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800182a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800182e:	3301      	adds	r3, #1
 8001830:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001834:	e7cc      	b.n	80017d0 <mavlink_signature_check+0xf8>
			break;
 8001836:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001840:	429a      	cmp	r2, r3
 8001842:	d13e      	bne.n	80018c2 <mavlink_signature_check+0x1ea>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d901      	bls.n	8001850 <mavlink_signature_check+0x178>
			// over max number of streams
			return false;
 800184c:	2300      	movs	r3, #0
 800184e:	e074      	b.n	800193a <mavlink_signature_check+0x262>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001854:	493b      	ldr	r1, [pc, #236]	; (8001944 <mavlink_signature_check+0x26c>)
 8001856:	1854      	adds	r4, r2, r1
 8001858:	f143 0500 	adc.w	r5, r3, #0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001862:	4294      	cmp	r4, r2
 8001864:	eb75 0303 	sbcs.w	r3, r5, r3
 8001868:	d201      	bcs.n	800186e <mavlink_signature_check+0x196>
			return false;
 800186a:	2300      	movs	r3, #0
 800186c:	e065      	b.n	800193a <mavlink_signature_check+0x262>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 800186e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	79d8      	ldrb	r0, [r3, #7]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	440b      	add	r3, r1
 8001880:	3303      	adds	r3, #3
 8001882:	4602      	mov	r2, r0
 8001884:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001886:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7a18      	ldrb	r0, [r3, #8]
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	440b      	add	r3, r1
 8001898:	3304      	adds	r3, #4
 800189a:	4602      	mov	r2, r0
 800189c:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 800189e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	3302      	adds	r3, #2
 80018ae:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80018b2:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	801a      	strh	r2, [r3, #0]
 80018c0:	e01d      	b.n	80018fe <mavlink_signature_check+0x226>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 80018ce:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	1d59      	adds	r1, r3, #5
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	2206      	movs	r2, #6
 80018e4:	4618      	mov	r0, r3
 80018e6:	f007 fbfd 	bl	80090e4 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 80018ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018f2:	4290      	cmp	r0, r2
 80018f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80018f8:	d301      	bcc.n	80018fe <mavlink_signature_check+0x226>
			// repeating old timestamp
			return false;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e01d      	b.n	800193a <mavlink_signature_check+0x262>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80018fe:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	4413      	add	r3, r2
 800190c:	1d58      	adds	r0, r3, #5
 800190e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001912:	3301      	adds	r3, #1
 8001914:	2206      	movs	r2, #6
 8001916:	4619      	mov	r1, r3
 8001918:	f007 fbe4 	bl	80090e4 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	68f9      	ldr	r1, [r7, #12]
 8001922:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001926:	4290      	cmp	r0, r2
 8001928:	eb71 0303 	sbcs.w	r3, r1, r3
 800192c:	d204      	bcs.n	8001938 <mavlink_signature_check+0x260>
		signing->timestamp = tstamp.t64;
 800192e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	return true;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	37a8      	adds	r7, #168	; 0xa8
 800193e:	46bd      	mov	sp, r7
 8001940:	bdb0      	pop	{r4, r5, r7, pc}
 8001942:	bf00      	nop
 8001944:	005b8d80 	.word	0x005b8d80

08001948 <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	789b      	ldrb	r3, [r3, #2]
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	709a      	strb	r2, [r3, #2]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001974:	f107 030e 	add.w	r3, r7, #14
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fb46 	bl	800100a <crc_init>
	msg->checksum = crcTmp;
 800197e:	89fa      	ldrh	r2, [r7, #14]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	801a      	strh	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 80019a0:	f107 020e 	add.w	r2, r7, #14
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fafc 	bl	8000fa6 <crc_accumulate>
	msg->checksum = checksum;
 80019ae:	89fa      	ldrh	r2, [r7, #14]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	801a      	strh	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	f240 1327 	movw	r3, #295	; 0x127
 80019cc:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d226      	bcs.n	8001a24 <mavlink_get_msg_entry+0x68>
            uint32_t mid = (low+1+high)/2;
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	3301      	adds	r3, #1
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80019e2:	491d      	ldr	r1, [pc, #116]	; (8001a58 <mavlink_get_msg_entry+0x9c>)
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d203      	bcs.n	8001a00 <mavlink_get_msg_entry+0x44>
                high = mid-1;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	613b      	str	r3, [r7, #16]
                continue;
 80019fe:	e010      	b.n	8001a22 <mavlink_get_msg_entry+0x66>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001a00:	4915      	ldr	r1, [pc, #84]	; (8001a58 <mavlink_get_msg_entry+0x9c>)
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d902      	bls.n	8001a1c <mavlink_get_msg_entry+0x60>
                low = mid;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	617b      	str	r3, [r7, #20]
                continue;
 8001a1a:	e002      	b.n	8001a22 <mavlink_get_msg_entry+0x66>
            }
            low = mid;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	617b      	str	r3, [r7, #20]
            break;
 8001a20:	e000      	b.n	8001a24 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8001a22:	e7d4      	b.n	80019ce <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001a24:	490c      	ldr	r1, [pc, #48]	; (8001a58 <mavlink_get_msg_entry+0x9c>)
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e006      	b.n	8001a4c <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <mavlink_get_msg_entry+0x9c>)
 8001a4a:	4413      	add	r3, r2
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	080094ac 	.word	0x080094ac

08001a5c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	78db      	ldrb	r3, [r3, #3]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	f200 8277 	bhi.w	8001f6e <mavlink_frame_char_buffer+0x512>
 8001a80:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <mavlink_frame_char_buffer+0x2c>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001ac9 	.word	0x08001ac9
 8001a8c:	08001ac9 	.word	0x08001ac9
 8001a90:	08001b27 	.word	0x08001b27
 8001a94:	08001b8d 	.word	0x08001b8d
 8001a98:	08001bc5 	.word	0x08001bc5
 8001a9c:	08001bdd 	.word	0x08001bdd
 8001aa0:	08001bf5 	.word	0x08001bf5
 8001aa4:	08001c0d 	.word	0x08001c0d
 8001aa8:	08001c25 	.word	0x08001c25
 8001aac:	08001c7f 	.word	0x08001c7f
 8001ab0:	08001ccb 	.word	0x08001ccb
 8001ab4:	08001d27 	.word	0x08001d27
 8001ab8:	08001d5f 	.word	0x08001d5f
 8001abc:	08001deb 	.word	0x08001deb
 8001ac0:	08001deb 	.word	0x08001deb
 8001ac4:	08001eaf 	.word	0x08001eaf
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2bfd      	cmp	r3, #253	; 0xfd
 8001acc:	d113      	bne.n	8001af6 <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	7b1b      	ldrb	r3, [r3, #12]
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff ff3a 	bl	8001968 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001af4:	e232      	b.n	8001f5c <mavlink_frame_char_buffer+0x500>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2bfe      	cmp	r3, #254	; 0xfe
 8001afa:	f040 822f 	bne.w	8001f5c <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2202      	movs	r2, #2
 8001b02:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	79fa      	ldrb	r2, [r7, #7]
 8001b0e:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff ff22 	bl	8001968 <mavlink_start_checksum>
		break;
 8001b24:	e21a      	b.n	8001f5c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00f      	beq.n	8001b4e <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	3301      	adds	r3, #1
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001b3a:	68b8      	ldr	r0, [r7, #8]
 8001b3c:	f7ff ff04 	bl	8001948 <_mav_parse_error>
			status->msg_received = 0;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001b4c:	e20f      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
			rxmsg->len = c;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	79fa      	ldrb	r2, [r7, #7]
 8001b52:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2200      	movs	r2, #0
 8001b58:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff ff14 	bl	800198c <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	7b1b      	ldrb	r3, [r3, #12]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2205      	movs	r2, #5
 8001b80:	70da      	strb	r2, [r3, #3]
		break;
 8001b82:	e1f4      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2203      	movs	r2, #3
 8001b88:	70da      	strb	r2, [r3, #3]
		break;
 8001b8a:	e1f0      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	791b      	ldrb	r3, [r3, #4]
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	f7ff fed2 	bl	8001948 <_mav_parse_error>
			status->msg_received = 0;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2201      	movs	r2, #1
 8001bae:	70da      	strb	r2, [r3, #3]
			break;
 8001bb0:	e1dd      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
		}
		mavlink_update_checksum(rxmsg, c);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fee8 	bl	800198c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	70da      	strb	r2, [r3, #3]
		break;
 8001bc2:	e1d4      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff fedc 	bl	800198c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	70da      	strb	r2, [r3, #3]
		break;
 8001bda:	e1c8      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	79fa      	ldrb	r2, [r7, #7]
 8001be0:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4619      	mov	r1, r3
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff fed0 	bl	800198c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2206      	movs	r2, #6
 8001bf0:	70da      	strb	r2, [r3, #3]
		break;
 8001bf2:	e1bc      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff fec4 	bl	800198c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2207      	movs	r2, #7
 8001c08:	70da      	strb	r2, [r3, #3]
		break;
 8001c0a:	e1b0      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4619      	mov	r1, r3
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff feb8 	bl	800198c <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	70da      	strb	r2, [r3, #3]
		break;
 8001c22:	e1a4      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	b2d9      	uxtb	r1, r3
 8001c2e:	2000      	movs	r0, #0
 8001c30:	4301      	orrs	r1, r0
 8001c32:	7251      	strb	r1, [r2, #9]
 8001c34:	0a19      	lsrs	r1, r3, #8
 8001c36:	b2c9      	uxtb	r1, r1
 8001c38:	2000      	movs	r0, #0
 8001c3a:	4301      	orrs	r1, r0
 8001c3c:	7291      	strb	r1, [r2, #10]
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	430b      	orrs	r3, r1
 8001c46:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fe9d 	bl	800198c <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	7b1b      	ldrb	r3, [r3, #12]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	78db      	ldrb	r3, [r3, #3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	220b      	movs	r2, #11
 8001c6a:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001c6c:	e17f      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	220c      	movs	r2, #12
 8001c72:	70da      	strb	r2, [r3, #3]
		break;
 8001c74:	e17b      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2209      	movs	r2, #9
 8001c7a:	70da      	strb	r2, [r3, #3]
		break;
 8001c7c:	e177      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	7a5a      	ldrb	r2, [r3, #9]
 8001c82:	7a99      	ldrb	r1, [r3, #10]
 8001c84:	0209      	lsls	r1, r1, #8
 8001c86:	430a      	orrs	r2, r1
 8001c88:	7adb      	ldrb	r3, [r3, #11]
 8001c8a:	041b      	lsls	r3, r3, #16
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	b2d1      	uxtb	r1, r2
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	4301      	orrs	r1, r0
 8001ca2:	7259      	strb	r1, [r3, #9]
 8001ca4:	0a11      	lsrs	r1, r2, #8
 8001ca6:	b2c9      	uxtb	r1, r1
 8001ca8:	2000      	movs	r0, #0
 8001caa:	4301      	orrs	r1, r0
 8001cac:	7299      	strb	r1, [r3, #10]
 8001cae:	0c12      	lsrs	r2, r2, #16
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f7ff fe65 	bl	800198c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	220a      	movs	r2, #10
 8001cc6:	70da      	strb	r2, [r3, #3]
		break;
 8001cc8:	e151      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	7a5a      	ldrb	r2, [r3, #9]
 8001cce:	7a99      	ldrb	r1, [r3, #10]
 8001cd0:	0209      	lsls	r1, r1, #8
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	7adb      	ldrb	r3, [r3, #11]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	b2d1      	uxtb	r1, r2
 8001cea:	2000      	movs	r0, #0
 8001cec:	4301      	orrs	r1, r0
 8001cee:	7259      	strb	r1, [r3, #9]
 8001cf0:	0a11      	lsrs	r1, r2, #8
 8001cf2:	b2c9      	uxtb	r1, r1
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	4301      	orrs	r1, r0
 8001cf8:	7299      	strb	r1, [r3, #10]
 8001cfa:	0c12      	lsrs	r2, r2, #16
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	2100      	movs	r1, #0
 8001d00:	430a      	orrs	r2, r1
 8001d02:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4619      	mov	r1, r3
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff fe3f 	bl	800198c <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	78db      	ldrb	r3, [r3, #3]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	220b      	movs	r2, #11
 8001d1a:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001d1c:	e127      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	220c      	movs	r2, #12
 8001d22:	70da      	strb	r2, [r3, #3]
		break;
 8001d24:	e123      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f103 020c 	add.w	r2, r3, #12
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	b2c8      	uxtb	r0, r1
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	7108      	strb	r0, [r1, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4619      	mov	r1, r3
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fe22 	bl	800198c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	791a      	ldrb	r2, [r3, #4]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	78db      	ldrb	r3, [r3, #3]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8105 	bne.w	8001f60 <mavlink_frame_char_buffer+0x504>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	220c      	movs	r2, #12
 8001d5a:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001d5c:	e100      	b.n	8001f60 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	7a5a      	ldrb	r2, [r3, #9]
 8001d62:	7a99      	ldrb	r1, [r3, #10]
 8001d64:	0209      	lsls	r1, r1, #8
 8001d66:	430a      	orrs	r2, r1
 8001d68:	7adb      	ldrb	r3, [r3, #11]
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe24 	bl	80019bc <mavlink_get_msg_entry>
 8001d74:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <mavlink_frame_char_buffer+0x326>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	791b      	ldrb	r3, [r3, #4]
 8001d80:	e000      	b.n	8001d84 <mavlink_frame_char_buffer+0x328>
 8001d82:	2300      	movs	r3, #0
 8001d84:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 8001d86:	7cfb      	ldrb	r3, [r7, #19]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fdfe 	bl	800198c <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8001d90:	79fa      	ldrb	r2, [r7, #7]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d003      	beq.n	8001da6 <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	220e      	movs	r2, #14
 8001da2:	70da      	strb	r2, [r3, #3]
 8001da4:	e002      	b.n	8001dac <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	220d      	movs	r2, #13
 8001daa:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80d4 	beq.w	8001f64 <mavlink_frame_char_buffer+0x508>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	791a      	ldrb	r2, [r3, #4]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	799b      	ldrb	r3, [r3, #6]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f080 80cd 	bcs.w	8001f64 <mavlink_frame_char_buffer+0x508>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	7912      	ldrb	r2, [r2, #4]
 8001dd2:	1898      	adds	r0, r3, r2
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	799b      	ldrb	r3, [r3, #6]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	2100      	movs	r1, #0
 8001de4:	f007 f98b 	bl	80090fe <memset>
		}
		break;
 8001de8:	e0bc      	b.n	8001f64 <mavlink_frame_char_buffer+0x508>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	78db      	ldrb	r3, [r3, #3]
 8001dee:	2b0e      	cmp	r3, #14
 8001df0:	d007      	beq.n	8001e02 <mavlink_frame_char_buffer+0x3a6>
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	0a12      	lsrs	r2, r2, #8
 8001dfc:	b292      	uxth	r2, r2
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <mavlink_frame_char_buffer+0x3ae>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e002      	b.n	8001e10 <mavlink_frame_char_buffer+0x3b4>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	791b      	ldrb	r3, [r3, #4]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00e      	beq.n	8001e42 <mavlink_frame_char_buffer+0x3e6>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	220f      	movs	r2, #15
 8001e28:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	220d      	movs	r2, #13
 8001e2e:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	f000 8097 	beq.w	8001f68 <mavlink_frame_char_buffer+0x50c>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001e40:	e092      	b.n	8001f68 <mavlink_frame_char_buffer+0x50c>
			if (status->signing &&
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01a      	beq.n	8001e80 <mavlink_frame_char_buffer+0x424>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <mavlink_frame_char_buffer+0x420>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	7a59      	ldrb	r1, [r3, #9]
 8001e5e:	7a98      	ldrb	r0, [r3, #10]
 8001e60:	0200      	lsls	r0, r0, #8
 8001e62:	4301      	orrs	r1, r0
 8001e64:	7adb      	ldrb	r3, [r3, #11]
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	68b8      	ldr	r0, [r7, #8]
 8001e6e:	4790      	blx	r2
 8001e70:	4603      	mov	r3, r0
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <mavlink_frame_char_buffer+0x424>
			if (status->signing &&
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <mavlink_frame_char_buffer+0x426>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <mavlink_frame_char_buffer+0x438>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d002      	beq.n	8001e94 <mavlink_frame_char_buffer+0x438>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2203      	movs	r2, #3
 8001e92:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2201      	movs	r2, #1
 8001e98:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d063      	beq.n	8001f68 <mavlink_frame_char_buffer+0x50c>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001ea0:	f240 1223 	movw	r2, #291	; 0x123
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	6838      	ldr	r0, [r7, #0]
 8001ea8:	f007 f91c 	bl	80090e4 <memcpy>
		break;
 8001eac:	e05c      	b.n	8001f68 <mavlink_frame_char_buffer+0x50c>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	7b5b      	ldrb	r3, [r3, #13]
 8001eb2:	f1c3 030d 	rsb	r3, r3, #13
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	79fa      	ldrb	r2, [r7, #7]
 8001ebc:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	7b5b      	ldrb	r3, [r3, #13]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	7b5b      	ldrb	r3, [r3, #13]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d14b      	bne.n	8001f6c <mavlink_frame_char_buffer+0x510>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6918      	ldr	r0, [r3, #16]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7ff fbfa 	bl	80016d8 <mavlink_signature_check>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001ee8:	7ffb      	ldrb	r3, [r7, #31]
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <mavlink_frame_char_buffer+0x4c8>
			   	(status->signing->accept_unsigned_callback &&
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d012      	beq.n	8001f24 <mavlink_frame_char_buffer+0x4c8>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	7a59      	ldrb	r1, [r3, #9]
 8001f08:	7a98      	ldrb	r0, [r3, #10]
 8001f0a:	0200      	lsls	r0, r0, #8
 8001f0c:	4301      	orrs	r1, r0
 8001f0e:	7adb      	ldrb	r3, [r3, #11]
 8001f10:	041b      	lsls	r3, r3, #16
 8001f12:	430b      	orrs	r3, r1
 8001f14:	4619      	mov	r1, r3
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	4790      	blx	r2
 8001f1a:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <mavlink_frame_char_buffer+0x4c8>
			if (!sig_ok &&
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <mavlink_frame_char_buffer+0x4ca>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <mavlink_frame_char_buffer+0x4d2>
				// accepted via application level override
				sig_ok = true;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001f2e:	7ffb      	ldrb	r3, [r7, #31]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <mavlink_frame_char_buffer+0x4e0>
				status->msg_received = MAVLINK_FRAMING_OK;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e002      	b.n	8001f42 <mavlink_frame_char_buffer+0x4e6>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2201      	movs	r2, #1
 8001f46:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00e      	beq.n	8001f6c <mavlink_frame_char_buffer+0x510>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001f4e:	f240 1223 	movw	r2, #291	; 0x123
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	6838      	ldr	r0, [r7, #0]
 8001f56:	f007 f8c5 	bl	80090e4 <memcpy>
			}
		}
		break;
 8001f5a:	e007      	b.n	8001f6c <mavlink_frame_char_buffer+0x510>
		break;
 8001f5c:	bf00      	nop
 8001f5e:	e006      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
		break;
 8001f60:	bf00      	nop
 8001f62:	e004      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
		break;
 8001f64:	bf00      	nop
 8001f66:	e002      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
		break;
 8001f68:	bf00      	nop
 8001f6a:	e000      	b.n	8001f6e <mavlink_frame_char_buffer+0x512>
		break;
 8001f6c:	bf00      	nop
	}

	bufferIndex++;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d110      	bne.n	8001f9e <mavlink_frame_char_buffer+0x542>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	799a      	ldrb	r2, [r3, #6]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	891b      	ldrh	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <mavlink_frame_char_buffer+0x536>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	891b      	ldrh	r3, [r3, #8]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <mavlink_frame_char_buffer+0x550>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	78da      	ldrb	r2, [r3, #3]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01a      	beq.n	8001fe8 <mavlink_frame_char_buffer+0x58c>
           r_mavlink_status->parse_state = status->parse_state;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	78da      	ldrb	r2, [r3, #3]
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	791a      	ldrb	r2, [r3, #4]
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	795b      	ldrb	r3, [r3, #5]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	891a      	ldrh	r2, [r3, #8]
 8001fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd4:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	789b      	ldrb	r3, [r3, #2]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	7b1a      	ldrb	r2, [r3, #12]
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d110      	bne.n	8002018 <mavlink_frame_char_buffer+0x5bc>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <mavlink_frame_char_buffer+0x5bc>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002002:	b21a      	sxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b087      	sub	sp, #28
 8002028:	af02      	add	r7, sp, #8
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	460b      	mov	r3, r1
 8002034:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fb39 	bl	80016b0 <mavlink_get_channel_buffer>
 800203e:	4604      	mov	r4, r0
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fb20 	bl	8001688 <mavlink_get_channel_status>
 8002048:	4601      	mov	r1, r0
 800204a:	7bba      	ldrb	r2, [r7, #14]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff fd02 	bl	8001a5c <mavlink_frame_char_buffer>
 8002058:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}

08002062 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b088      	sub	sp, #32
 8002066:	af00      	add	r7, sp, #0
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	460b      	mov	r3, r1
 8002072:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002074:	7bb9      	ldrb	r1, [r7, #14]
 8002076:	7bf8      	ldrb	r0, [r7, #15]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f7ff ffd2 	bl	8002024 <mavlink_frame_char>
 8002080:	4603      	mov	r3, r0
 8002082:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d002      	beq.n	8002090 <mavlink_parse_char+0x2e>
 800208a:	7ffb      	ldrb	r3, [r7, #31]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d120      	bne.n	80020d2 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb0c 	bl	80016b0 <mavlink_get_channel_buffer>
 8002098:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff faf3 	bl	8001688 <mavlink_get_channel_status>
 80020a2:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 80020a4:	6978      	ldr	r0, [r7, #20]
 80020a6:	f7ff fc4f 	bl	8001948 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2201      	movs	r2, #1
 80020b4:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	2bfd      	cmp	r3, #253	; 0xfd
 80020ba:	d108      	bne.n	80020ce <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2202      	movs	r2, #2
 80020c0:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2200      	movs	r2, #0
 80020c6:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80020c8:	69b8      	ldr	r0, [r7, #24]
 80020ca:	f7ff fc4d 	bl	8001968 <mavlink_start_checksum>
	    }
	    return 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <mavlink_parse_char+0x72>
    }
    return msg_received;
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>:
#include "../Inc/SSM_D_MAVLink.hpp"
/*
    many struct types used here are referenced from mavlink_types.h
*/

MAVLink::MAVLink(UART_HandleTypeDef* uart_handle) : uart_(uart_handle)
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
{
    rx_circular_buffer_ = new CircularBuffer(rx_circular_buffer_ptr_, 1000);
 800210e:	2010      	movs	r0, #16
 8002110:	f006 ff7c 	bl	800900c <_Znwj>
 8002114:	4603      	mov	r3, r0
 8002116:	461c      	mov	r4, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800211e:	4619      	mov	r1, r3
 8002120:	4620      	mov	r0, r4
 8002122:	f7fe fa17 	bl	8000554 <_ZN14CircularBufferC1EPhi>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8c3 43e8 	str.w	r4, [r3, #1000]	; 0x3e8

    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002136:	da07      	bge.n	8002148 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x6c>
        raw_rx_msg_[MAVLINK_MAX_PACKET_LEN] = 0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e7f3      	b.n	8002130 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x54>
    }
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bd90      	pop	{r4, r7, pc}

08002152 <_ZN7MAVLinkD1Ev>:

MAVLink::~MAVLink(){
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
    delete rx_circular_buffer_;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <_ZN7MAVLinkD1Ev+0x1a>
 8002164:	2110      	movs	r1, #16
 8002166:	4618      	mov	r0, r3
 8002168:	f006 ff4e 	bl	8009008 <_ZdlPvj>
}
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZN7MAVLink15get_mavlink_msgEv>:

mavlink_message_t* MAVLink::get_mavlink_msg(){
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
    //if Data Reception process is not ongoing, then activate it
    if(uart_->RxState != HAL_UART_STATE_BUSY_RX){
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8002184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002188:	2b22      	cmp	r3, #34	; 0x22
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <_ZN7MAVLink15get_mavlink_msgEv+0x36>
        HAL_UARTEx_ReceiveToIdle_DMA(uart_, raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8d3 0628 	ldr.w	r0, [r3, #1576]	; 0x628
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80021a2:	f44f 728c 	mov.w	r2, #280	; 0x118
 80021a6:	4619      	mov	r1, r3
 80021a8:	f006 fc97 	bl	8008ada <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    return &rx_msg_;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f203 5304 	addw	r3, r3, #1284	; 0x504
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_ZN7MAVLink11readMessageEv>:

bool MAVLink::readMessage()
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b0d4      	sub	sp, #336	; 0x150
 80021be:	af00      	add	r7, sp, #0
 80021c0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80021c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021c8:	6018      	str	r0, [r3, #0]
    const uint8_t STX = 0xFD;
 80021ca:	23fd      	movs	r3, #253	; 0xfd
 80021cc:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
    uint8_t payload_length = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
    uint8_t byte = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
	mavlink_status_t status = {};
 80021dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
 80021ec:	615a      	str	r2, [r3, #20]
    mavlink_message_t rx_msg;

    //part 1 - a quick check to  see if the data is okay
    if(raw_rx_msg_[0] == STX){
 80021ee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80021f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 80021fc:	2bfd      	cmp	r3, #253	; 0xfd
 80021fe:	d13e      	bne.n	800227e <_ZN7MAVLink11readMessageEv+0xc4>

        //part 2 - parse the message
        payload_length = raw_rx_msg_[1];
 8002200:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002204:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 800220e:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a

        uint8_t parse_ret;
        for(uint16_t i = 0; i < (payload_length  + MAVLINK_NUM_HEADER_BYTES + MAVLINK_NUM_CHECKSUM_BYTES); i++)
 8002212:	2300      	movs	r3, #0
 8002214:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
 8002218:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 800221c:	f103 020b 	add.w	r2, r3, #11
 8002220:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 8002224:	429a      	cmp	r2, r3
 8002226:	db11      	blt.n	800224c <_ZN7MAVLink11readMessageEv+0x92>
        {
            parse_ret = mavlink_parse_char(MAVLINK_COMM_1, byte, &(rx_msg), &status);
 8002228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800222c:	f107 020c 	add.w	r2, r7, #12
 8002230:	f897 1149 	ldrb.w	r1, [r7, #329]	; 0x149
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff ff14 	bl	8002062 <mavlink_parse_char>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
        for(uint16_t i = 0; i < (payload_length  + MAVLINK_NUM_HEADER_BYTES + MAVLINK_NUM_CHECKSUM_BYTES); i++)
 8002240:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 8002244:	3301      	adds	r3, #1
 8002246:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
 800224a:	e7e5      	b.n	8002218 <_ZN7MAVLink11readMessageEv+0x5e>
        }

        //part3 - check validity again
        if(parse_ret){
 800224c:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002250:	2b00      	cmp	r3, #0
 8002252:	d012      	beq.n	800227a <_ZN7MAVLink11readMessageEv+0xc0>
            rx_msg_ = rx_msg;
 8002254:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002258:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002262:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002266:	f203 5304 	addw	r3, r3, #1284	; 0x504
 800226a:	4611      	mov	r1, r2
 800226c:	f240 1223 	movw	r2, #291	; 0x123
 8002270:	4618      	mov	r0, r3
 8002272:	f006 ff37 	bl	80090e4 <memcpy>
            return true;
 8002276:	2301      	movs	r3, #1
 8002278:	e002      	b.n	8002280 <_ZN7MAVLink11readMessageEv+0xc6>
        }
        else {
            return false;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <_ZN7MAVLink11readMessageEv+0xc6>
        }
            
    } else {
        return false;
 800227e:	2300      	movs	r3, #0
    }
}
 8002280:	4618      	mov	r0, r3
 8002282:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <MX_ADC1_Init+0xe0>)
 80022b0:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <MX_ADC1_Init+0xe4>)
 80022b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <MX_ADC1_Init+0xe0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <MX_ADC1_Init+0xe0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <MX_ADC1_Init+0xe0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <MX_ADC1_Init+0xe0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <MX_ADC1_Init+0xe0>)
 80022ce:	2204      	movs	r2, #4
 80022d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <MX_ADC1_Init+0xe0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <MX_ADC1_Init+0xe0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <MX_ADC1_Init+0xe0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <MX_ADC1_Init+0xe0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_ADC1_Init+0xe0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <MX_ADC1_Init+0xe0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_ADC1_Init+0xe0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_ADC1_Init+0xe0>)
 8002302:	2200      	movs	r2, #0
 8002304:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_ADC1_Init+0xe0>)
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800230e:	4817      	ldr	r0, [pc, #92]	; (800236c <MX_ADC1_Init+0xe0>)
 8002310:	f001 f9de 	bl	80036d0 <HAL_ADC_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800231a:	f000 f9f1 	bl	8002700 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	4810      	ldr	r0, [pc, #64]	; (800236c <MX_ADC1_Init+0xe0>)
 800232a:	f001 ff2d 	bl	8004188 <HAL_ADCEx_MultiModeConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002334:	f000 f9e4 	bl	8002700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_ADC1_Init+0xe8>)
 800233a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800233c:	2306      	movs	r3, #6
 800233e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002344:	237f      	movs	r3, #127	; 0x7f
 8002346:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002348:	2304      	movs	r3, #4
 800234a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_ADC1_Init+0xe0>)
 8002356:	f001 fb07 	bl	8003968 <HAL_ADC_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002360:	f000 f9ce 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000c2c 	.word	0x20000c2c
 8002370:	42028000 	.word	0x42028000
 8002374:	0c900008 	.word	0x0c900008

08002378 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0ae      	sub	sp, #184	; 0xb8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	2294      	movs	r2, #148	; 0x94
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f006 feb0 	bl	80090fe <memset>
  if(adcHandle->Instance==ADC1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_ADC_MspInit+0xa8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d137      	bne.n	8002418 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80023ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80023b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 ff56 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80023c6:	f000 f99b 	bl	8002700 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_ADC_MspInit+0xac>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_ADC_MspInit+0xac>)
 80023d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_ADC_MspInit+0xac>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_ADC_MspInit+0xac>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <HAL_ADC_MspInit+0xac>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_ADC_MspInit+0xac>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80023fa:	2304      	movs	r3, #4
 80023fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002400:	2303      	movs	r3, #3
 8002402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_ADC_MspInit+0xb0>)
 8002414:	f002 fc26 	bl	8004c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002418:	bf00      	nop
 800241a:	37b8      	adds	r7, #184	; 0xb8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	42028000 	.word	0x42028000
 8002424:	40021000 	.word	0x40021000
 8002428:	42020800 	.word	0x42020800

0800242c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_DMA_Init+0x70>)
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	4a19      	ldr	r2, [pc, #100]	; (800249c <MX_DMA_Init+0x70>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6493      	str	r3, [r2, #72]	; 0x48
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <MX_DMA_Init+0x70>)
 8002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_DMA_Init+0x70>)
 800244c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244e:	4a13      	ldr	r2, [pc, #76]	; (800249c <MX_DMA_Init+0x70>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6493      	str	r3, [r2, #72]	; 0x48
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_DMA_Init+0x70>)
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	201d      	movs	r0, #29
 8002468:	f002 f80d 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800246c:	201d      	movs	r0, #29
 800246e:	f002 f824 	bl	80044ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	201e      	movs	r0, #30
 8002478:	f002 f805 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800247c:	201e      	movs	r0, #30
 800247e:	f002 f81c 	bl	80044ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	201f      	movs	r0, #31
 8002488:	f001 fffd 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800248c:	201f      	movs	r0, #31
 800248e:	f002 f814 	bl	80044ba <HAL_NVIC_EnableIRQ>

}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b6:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a32      	ldr	r2, [pc, #200]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <MX_GPIO_Init+0x114>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <MX_GPIO_Init+0x114>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <MX_GPIO_Init+0x114>)
 8002504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <MX_GPIO_Init+0x114>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002516:	f002 febb 	bl	8005290 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	4826      	ldr	r0, [pc, #152]	; (80025b8 <MX_GPIO_Init+0x118>)
 8002520:	f002 fd20 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002524:	2200      	movs	r2, #0
 8002526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800252a:	4824      	ldr	r0, [pc, #144]	; (80025bc <MX_GPIO_Init+0x11c>)
 800252c:	f002 fd1a 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	21a0      	movs	r1, #160	; 0xa0
 8002534:	4822      	ldr	r0, [pc, #136]	; (80025c0 <MX_GPIO_Init+0x120>)
 8002536:	f002 fd15 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800253a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800253e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002540:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	481b      	ldr	r0, [pc, #108]	; (80025c0 <MX_GPIO_Init+0x120>)
 8002552:	f002 fb87 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4812      	ldr	r0, [pc, #72]	; (80025b8 <MX_GPIO_Init+0x118>)
 800256e:	f002 fb79 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8002572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	2301      	movs	r3, #1
 800257a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	480c      	ldr	r0, [pc, #48]	; (80025bc <MX_GPIO_Init+0x11c>)
 800258c:	f002 fb6a 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8002590:	23a0      	movs	r3, #160	; 0xa0
 8002592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	2301      	movs	r3, #1
 8002596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4619      	mov	r1, r3
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <MX_GPIO_Init+0x120>)
 80025a8:	f002 fb5c 	bl	8004c64 <HAL_GPIO_Init>

}
 80025ac:	bf00      	nop
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	42020800 	.word	0x42020800
 80025bc:	42020000 	.word	0x42020000
 80025c0:	42020400 	.word	0x42020400

080025c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0ca      	sub	sp, #296	; 0x128
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ca:	f000 fe6a 	bl	80032a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ce:	f000 f827 	bl	8002620 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d2:	f7ff ff65 	bl	80024a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80025d6:	f7ff ff29 	bl	800242c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80025da:	f000 fb1d 	bl	8002c18 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80025de:	f000 f895 	bl	800270c <MX_RTC_Init>
  MX_UCPD1_Init();
 80025e2:	f000 fae3 	bl	8002bac <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80025e6:	f000 fdab 	bl	8003140 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80025ea:	f7ff fe4f 	bl	800228c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80025ee:	f000 fb61 	bl	8002cb4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025f2:	f000 fbb7 	bl	8002d64 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */
    
    /* USER CODE BEGIN 3 */
//     SSM::getInstance()->execute_manual_mode();
      mav_msg = *(pixhawk_mavlink->get_mavlink_msg());
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <main+0x58>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fdbb 	bl	8002176 <_ZN7MAVLink15get_mavlink_msgEv>
 8002600:	4602      	mov	r2, r0
 8002602:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002606:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800260a:	4618      	mov	r0, r3
 800260c:	4611      	mov	r1, r2
 800260e:	f240 1323 	movw	r3, #291	; 0x123
 8002612:	461a      	mov	r2, r3
 8002614:	f006 fd66 	bl	80090e4 <memcpy>
 8002618:	e7ed      	b.n	80025f6 <main+0x32>
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000

08002620 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b098      	sub	sp, #96	; 0x60
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	f107 0318 	add.w	r3, r7, #24
 800262a:	2248      	movs	r2, #72	; 0x48
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fd65 	bl	80090fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002642:	2000      	movs	r0, #0
 8002644:	f002 fdc8 	bl	80051d8 <HAL_PWREx_ControlVoltageScaling>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002658:	f000 f852 	bl	8002700 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800265c:	f002 fd9e 	bl	800519c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002660:	4b26      	ldr	r3, [pc, #152]	; (80026fc <_Z18SystemClock_Configv+0xdc>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <_Z18SystemClock_Configv+0xdc>)
 8002668:	f023 0318 	bic.w	r3, r3, #24
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8002670:	2334      	movs	r3, #52	; 0x34
 8002672:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002674:	2381      	movs	r3, #129	; 0x81
 8002676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002678:	2301      	movs	r3, #1
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800267c:	2301      	movs	r3, #1
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002680:	2300      	movs	r3, #0
 8002682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002684:	2360      	movs	r3, #96	; 0x60
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002688:	2302      	movs	r3, #2
 800268a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800268c:	2301      	movs	r3, #1
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002690:	2301      	movs	r3, #1
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8002694:	2337      	movs	r3, #55	; 0x37
 8002696:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002698:	2307      	movs	r3, #7
 800269a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800269c:	2302      	movs	r3, #2
 800269e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026a0:	2302      	movs	r3, #2
 80026a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a4:	f107 0318 	add.w	r3, r7, #24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fe25 	bl	80052f8 <HAL_RCC_OscConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80026be:	f000 f81f 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	230f      	movs	r3, #15
 80026c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c6:	2303      	movs	r3, #3
 80026c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2105      	movs	r1, #5
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fae2 	bl	8005ca4 <HAL_RCC_ClockConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80026f0:	f000 f806 	bl	8002700 <Error_Handler>
  }
}
 80026f4:	bf00      	nop
 80026f6:	3760      	adds	r7, #96	; 0x60
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002708:	e7fe      	b.n	8002708 <Error_Handler+0x8>
	...

0800270c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
 8002720:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <MX_RTC_Init+0x8c>)
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <MX_RTC_Init+0x90>)
 8002726:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <MX_RTC_Init+0x8c>)
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_RTC_Init+0x8c>)
 8002730:	227f      	movs	r2, #127	; 0x7f
 8002732:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <MX_RTC_Init+0x8c>)
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <MX_RTC_Init+0x8c>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_RTC_Init+0x8c>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <MX_RTC_Init+0x8c>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <MX_RTC_Init+0x8c>)
 800274e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002752:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_RTC_Init+0x8c>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800275a:	480f      	ldr	r0, [pc, #60]	; (8002798 <MX_RTC_Init+0x8c>)
 800275c:	f004 fa9c 	bl	8006c98 <HAL_RTC_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002766:	f7ff ffcb 	bl	8002700 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800277a:	463b      	mov	r3, r7
 800277c:	4619      	mov	r1, r3
 800277e:	4806      	ldr	r0, [pc, #24]	; (8002798 <MX_RTC_Init+0x8c>)
 8002780:	f004 fb98 	bl	8006eb4 <HAL_RTCEx_PrivilegeModeSet>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800278a:	f7ff ffb9 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000c94 	.word	0x20000c94
 800279c:	40002800 	.word	0x40002800

080027a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0a8      	sub	sp, #160	; 0xa0
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	2294      	movs	r2, #148	; 0x94
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f006 fca4 	bl	80090fe <memset>
  if(rtcHandle->Instance==RTC)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_RTC_MspInit+0x74>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d124      	bne.n	800280a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fd4a 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80027de:	f7ff ff8f 	bl	8002700 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_RTC_MspInit+0x78>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <HAL_RTC_MspInit+0x78>)
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RTC_MspInit+0x78>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <HAL_RTC_MspInit+0x78>)
 80027f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RTC_MspInit+0x78>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800280a:	bf00      	nop
 800280c:	37a0      	adds	r7, #160	; 0xa0
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40002800 	.word	0x40002800
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_MspInit+0x44>)
 8002824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_MspInit+0x44>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6613      	str	r3, [r2, #96]	; 0x60
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_MspInit+0x44>)
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_MspInit+0x44>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_MspInit+0x44>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_MspInit+0x44>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <NMI_Handler+0x4>

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f000 fd4e 	bl	8003350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <DMA1_Channel1_IRQHandler+0x10>)
 80028be:	f001 fff5 	bl	80048ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000e7c 	.word	0x20000e7c

080028cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <DMA1_Channel2_IRQHandler+0x10>)
 80028d2:	f001 ffeb 	bl	80048ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000ee4 	.word	0x20000ee4

080028e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <DMA1_Channel3_IRQHandler+0x10>)
 80028e6:	f001 ffe1 	bl	80048ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000f4c 	.word	0x20000f4c

080028f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <USART2_IRQHandler+0x10>)
 80028fa:	f004 fd47 	bl	800738c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000d54 	.word	0x20000d54

08002908 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <USART3_IRQHandler+0x10>)
 800290e:	f004 fd3d 	bl	800738c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000de8 	.word	0x20000de8

0800291c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return 1;
 8002920:	2301      	movs	r3, #1
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <_kill>:

int _kill(int pid, int sig)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002936:	f006 fb8b 	bl	8009050 <__errno>
 800293a:	4603      	mov	r3, r0
 800293c:	2216      	movs	r2, #22
 800293e:	601a      	str	r2, [r3, #0]
  return -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_exit>:

void _exit (int status)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ffe7 	bl	800292c <_kill>
  while (1) {}    /* Make sure we hang here */
 800295e:	e7fe      	b.n	800295e <_exit+0x12>

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f006 fb5e 	bl	8009050 <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20030000 	.word	0x20030000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000cbc 	.word	0x20000cbc
 80029c8:	200012c0 	.word	0x200012c0

080029cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <SystemInit+0x20>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <SystemInit+0x20>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80029f6:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e005      	b.n	8002a1e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002a12:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002a1e:	4a46      	ldr	r2, [pc, #280]	; (8002b38 <SystemCoreClockUpdate+0x148>)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a28:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	d866      	bhi.n	8002b02 <SystemCoreClockUpdate+0x112>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <SystemCoreClockUpdate+0x4c>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a71 	.word	0x08002a71
 8002a40:	08002b03 	.word	0x08002b03
 8002a44:	08002b03 	.word	0x08002b03
 8002a48:	08002b03 	.word	0x08002b03
 8002a4c:	08002a79 	.word	0x08002a79
 8002a50:	08002b03 	.word	0x08002b03
 8002a54:	08002b03 	.word	0x08002b03
 8002a58:	08002b03 	.word	0x08002b03
 8002a5c:	08002a81 	.word	0x08002a81
 8002a60:	08002b03 	.word	0x08002b03
 8002a64:	08002b03 	.word	0x08002b03
 8002a68:	08002b03 	.word	0x08002b03
 8002a6c:	08002a89 	.word	0x08002a89
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002a70:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <SystemCoreClockUpdate+0x14c>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	6013      	str	r3, [r2, #0]
      break;
 8002a76:	e048      	b.n	8002b0a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <SystemCoreClockUpdate+0x14c>)
 8002a7a:	4a31      	ldr	r2, [pc, #196]	; (8002b40 <SystemCoreClockUpdate+0x150>)
 8002a7c:	601a      	str	r2, [r3, #0]
      break;
 8002a7e:	e044      	b.n	8002b0a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002a80:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <SystemCoreClockUpdate+0x14c>)
 8002a82:	4a30      	ldr	r2, [pc, #192]	; (8002b44 <SystemCoreClockUpdate+0x154>)
 8002a84:	601a      	str	r2, [r3, #0]
      break;
 8002a86:	e040      	b.n	8002b0a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d003      	beq.n	8002aae <SystemCoreClockUpdate+0xbe>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d006      	beq.n	8002aba <SystemCoreClockUpdate+0xca>
 8002aac:	e00b      	b.n	8002ac6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002aae:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <SystemCoreClockUpdate+0x150>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	613b      	str	r3, [r7, #16]
          break;
 8002ab8:	e00b      	b.n	8002ad2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002aba:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <SystemCoreClockUpdate+0x154>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	613b      	str	r3, [r7, #16]
          break;
 8002ac4:	e005      	b.n	8002ad2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	613b      	str	r3, [r7, #16]
          break;
 8002ad0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0e5b      	lsrs	r3, r3, #25
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	3301      	adds	r3, #1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	4a0f      	ldr	r2, [pc, #60]	; (8002b3c <SystemCoreClockUpdate+0x14c>)
 8002afe:	6013      	str	r3, [r2, #0]
      break;
 8002b00:	e003      	b.n	8002b0a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <SystemCoreClockUpdate+0x14c>)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6013      	str	r3, [r2, #0]
      break;
 8002b08:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <SystemCoreClockUpdate+0x144>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <SystemCoreClockUpdate+0x158>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <SystemCoreClockUpdate+0x14c>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <SystemCoreClockUpdate+0x14c>)
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40021000 	.word	0x40021000
 8002b38:	0800a2a4 	.word	0x0800a2a4
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	007a1200 	.word	0x007a1200
 8002b48:	0800a28c 	.word	0x0800a28c

08002b4c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4013      	ands	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40021000 	.word	0x40021000

08002b7c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002b92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40021000 	.word	0x40021000

08002bac <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
 8002bc0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8002bc2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002bc6:	f7ff ffd9 	bl	8002b7c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ffbe 	bl	8002b4c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7ff ffbb 	bl	8002b4c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bda:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	463b      	mov	r3, r7
 8002be6:	4619      	mov	r1, r3
 8002be8:	4809      	ldr	r0, [pc, #36]	; (8002c10 <MX_UCPD1_Init+0x64>)
 8002bea:	f006 f964 	bl	8008eb6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4804      	ldr	r0, [pc, #16]	; (8002c14 <MX_UCPD1_Init+0x68>)
 8002c02:	f006 f958 	bl	8008eb6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	42020400 	.word	0x42020400
 8002c14:	42020000 	.word	0x42020000

08002c18 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c1e:	4a23      	ldr	r2, [pc, #140]	; (8002cac <MX_LPUART1_UART_Init+0x94>)
 8002c20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002c22:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c24:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <MX_LPUART1_UART_Init+0x98>)
 8002c26:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c28:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c3c:	220c      	movs	r2, #12
 8002c3e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002c5e:	4812      	ldr	r0, [pc, #72]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c60:	f004 f954 	bl	8006f0c <HAL_UART_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002c6a:	f7ff fd49 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c6e:	2100      	movs	r1, #0
 8002c70:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c72:	f005 feb6 	bl	80089e2 <HAL_UARTEx_SetTxFifoThreshold>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002c7c:	f7ff fd40 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c80:	2100      	movs	r1, #0
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c84:	f005 feeb 	bl	8008a5e <HAL_UARTEx_SetRxFifoThreshold>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002c8e:	f7ff fd37 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_LPUART1_UART_Init+0x90>)
 8002c94:	f005 fe6c 	bl	8008970 <HAL_UARTEx_DisableFifoMode>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002c9e:	f7ff fd2f 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000cc0 	.word	0x20000cc0
 8002cac:	40008000 	.word	0x40008000
 8002cb0:	00033324 	.word	0x00033324

08002cb4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cba:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <MX_USART2_UART_Init+0xa8>)
 8002cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <MX_USART2_UART_Init+0xac>)
 8002cc2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8002ccc:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8002cfa:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002d02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002d0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d10:	4811      	ldr	r0, [pc, #68]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002d12:	f004 f8fb 	bl	8006f0c <HAL_UART_Init>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002d1c:	f7ff fcf0 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d20:	2100      	movs	r1, #0
 8002d22:	480d      	ldr	r0, [pc, #52]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002d24:	f005 fe5d 	bl	80089e2 <HAL_UARTEx_SetTxFifoThreshold>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002d2e:	f7ff fce7 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d32:	2100      	movs	r1, #0
 8002d34:	4808      	ldr	r0, [pc, #32]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002d36:	f005 fe92 	bl	8008a5e <HAL_UARTEx_SetRxFifoThreshold>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002d40:	f7ff fcde 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d44:	4804      	ldr	r0, [pc, #16]	; (8002d58 <MX_USART2_UART_Init+0xa4>)
 8002d46:	f005 fe13 	bl	8008970 <HAL_UARTEx_DisableFifoMode>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8002d50:	f7ff fcd6 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000d54 	.word	0x20000d54
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	000186a0 	.word	0x000186a0

08002d64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d6a:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <MX_USART3_UART_Init+0x94>)
 8002d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002dac:	4811      	ldr	r0, [pc, #68]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002dae:	f004 f8ad 	bl	8006f0c <HAL_UART_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002db8:	f7ff fca2 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	480d      	ldr	r0, [pc, #52]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002dc0:	f005 fe0f 	bl	80089e2 <HAL_UARTEx_SetTxFifoThreshold>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002dca:	f7ff fc99 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4808      	ldr	r0, [pc, #32]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002dd2:	f005 fe44 	bl	8008a5e <HAL_UARTEx_SetRxFifoThreshold>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ddc:	f7ff fc90 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002de0:	4804      	ldr	r0, [pc, #16]	; (8002df4 <MX_USART3_UART_Init+0x90>)
 8002de2:	f005 fdc5 	bl	8008970 <HAL_UARTEx_DisableFifoMode>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002dec:	f7ff fc88 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000de8 	.word	0x20000de8
 8002df8:	40004800 	.word	0x40004800

08002dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b0b2      	sub	sp, #200	; 0xc8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e14:	f107 0320 	add.w	r3, r7, #32
 8002e18:	2294      	movs	r2, #148	; 0x94
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f006 f96e 	bl	80090fe <memset>
  if(uartHandle->Instance==LPUART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a78      	ldr	r2, [pc, #480]	; (8003008 <HAL_UART_MspInit+0x20c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d13e      	bne.n	8002eaa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e30:	2300      	movs	r3, #0
 8002e32:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e34:	f107 0320 	add.w	r3, r7, #32
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fa17 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e44:	f7ff fc5c 	bl	8002700 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e48:	4b70      	ldr	r3, [pc, #448]	; (800300c <HAL_UART_MspInit+0x210>)
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	4a6f      	ldr	r2, [pc, #444]	; (800300c <HAL_UART_MspInit+0x210>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_UART_MspInit+0x210>)
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_UART_MspInit+0x210>)
 8002e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e64:	4a69      	ldr	r2, [pc, #420]	; (800300c <HAL_UART_MspInit+0x210>)
 8002e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6c:	4b67      	ldr	r3, [pc, #412]	; (800300c <HAL_UART_MspInit+0x210>)
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002e78:	f002 fa0a 	bl	8005290 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8002e7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e96:	2308      	movs	r3, #8
 8002e98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	485b      	ldr	r0, [pc, #364]	; (8003010 <HAL_UART_MspInit+0x214>)
 8002ea4:	f001 fede 	bl	8004c64 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ea8:	e13c      	b.n	8003124 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a59      	ldr	r2, [pc, #356]	; (8003014 <HAL_UART_MspInit+0x218>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	f040 80bb 	bne.w	800302c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ebe:	f107 0320 	add.w	r3, r7, #32
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 f9d2 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002ece:	f7ff fc17 	bl	8002700 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ed2:	4b4e      	ldr	r3, [pc, #312]	; (800300c <HAL_UART_MspInit+0x210>)
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	4a4d      	ldr	r2, [pc, #308]	; (800300c <HAL_UART_MspInit+0x210>)
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ede:	4b4b      	ldr	r3, [pc, #300]	; (800300c <HAL_UART_MspInit+0x210>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	4b48      	ldr	r3, [pc, #288]	; (800300c <HAL_UART_MspInit+0x210>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	4a47      	ldr	r2, [pc, #284]	; (800300c <HAL_UART_MspInit+0x210>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef6:	4b45      	ldr	r3, [pc, #276]	; (800300c <HAL_UART_MspInit+0x210>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f02:	230c      	movs	r3, #12
 8002f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f24:	4619      	mov	r1, r3
 8002f26:	483c      	ldr	r0, [pc, #240]	; (8003018 <HAL_UART_MspInit+0x21c>)
 8002f28:	f001 fe9c 	bl	8004c64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002f2c:	4b3b      	ldr	r3, [pc, #236]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <HAL_UART_MspInit+0x224>)
 8002f30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f32:	4b3a      	ldr	r3, [pc, #232]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f34:	221b      	movs	r2, #27
 8002f36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f38:	4b38      	ldr	r3, [pc, #224]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3e:	4b37      	ldr	r3, [pc, #220]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f58:	2220      	movs	r2, #32
 8002f5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f62:	482e      	ldr	r0, [pc, #184]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f64:	f001 fac4 	bl	80044f0 <HAL_DMA_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8002f6e:	f7ff fbc7 	bl	8002700 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f72:	2110      	movs	r1, #16
 8002f74:	4829      	ldr	r0, [pc, #164]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f76:	f001 fda5 	bl	8004ac4 <HAL_DMA_ConfigChannelAttributes>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8002f80:	f7ff fbbe 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_UART_MspInit+0x220>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002f94:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_UART_MspInit+0x22c>)
 8002f96:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002f9a:	221c      	movs	r2, #28
 8002f9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f9e:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fc2:	4b18      	ldr	r3, [pc, #96]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002fc8:	4816      	ldr	r0, [pc, #88]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fca:	f001 fa91 	bl	80044f0 <HAL_DMA_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8002fd4:	f7ff fb94 	bl	8002700 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002fd8:	2110      	movs	r1, #16
 8002fda:	4812      	ldr	r0, [pc, #72]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fdc:	f001 fd72 	bl	8004ac4 <HAL_DMA_ConfigChannelAttributes>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8002fe6:	f7ff fb8b 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002fee:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ff0:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <HAL_UART_MspInit+0x228>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	203e      	movs	r0, #62	; 0x3e
 8002ffc:	f001 fa43 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003000:	203e      	movs	r0, #62	; 0x3e
 8003002:	f001 fa5a 	bl	80044ba <HAL_NVIC_EnableIRQ>
}
 8003006:	e08d      	b.n	8003124 <HAL_UART_MspInit+0x328>
 8003008:	40008000 	.word	0x40008000
 800300c:	40021000 	.word	0x40021000
 8003010:	42021800 	.word	0x42021800
 8003014:	40004400 	.word	0x40004400
 8003018:	42020000 	.word	0x42020000
 800301c:	20000e7c 	.word	0x20000e7c
 8003020:	40020008 	.word	0x40020008
 8003024:	20000ee4 	.word	0x20000ee4
 8003028:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART3)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3e      	ldr	r2, [pc, #248]	; (800312c <HAL_UART_MspInit+0x330>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d176      	bne.n	8003124 <HAL_UART_MspInit+0x328>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003036:	2304      	movs	r3, #4
 8003038:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800303a:	2300      	movs	r3, #0
 800303c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800303e:	f107 0320 	add.w	r3, r7, #32
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f912 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_UART_MspInit+0x256>
      Error_Handler();
 800304e:	f7ff fb57 	bl	8002700 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003052:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_UART_MspInit+0x334>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	4a36      	ldr	r2, [pc, #216]	; (8003130 <HAL_UART_MspInit+0x334>)
 8003058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800305c:	6593      	str	r3, [r2, #88]	; 0x58
 800305e:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_UART_MspInit+0x334>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306a:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_UART_MspInit+0x334>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	4a30      	ldr	r2, [pc, #192]	; (8003130 <HAL_UART_MspInit+0x334>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003076:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <HAL_UART_MspInit+0x334>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003082:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308a:	2302      	movs	r3, #2
 800308c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800309c:	2307      	movs	r3, #7
 800309e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030a6:	4619      	mov	r1, r3
 80030a8:	4822      	ldr	r0, [pc, #136]	; (8003134 <HAL_UART_MspInit+0x338>)
 80030aa:	f001 fddb 	bl	8004c64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <HAL_UART_MspInit+0x340>)
 80030b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030b6:	221d      	movs	r2, #29
 80030b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ba:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030e4:	4814      	ldr	r0, [pc, #80]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030e6:	f001 fa03 	bl	80044f0 <HAL_DMA_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_MspInit+0x2f8>
      Error_Handler();
 80030f0:	f7ff fb06 	bl	8002700 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80030f4:	2110      	movs	r1, #16
 80030f6:	4810      	ldr	r0, [pc, #64]	; (8003138 <HAL_UART_MspInit+0x33c>)
 80030f8:	f001 fce4 	bl	8004ac4 <HAL_DMA_ConfigChannelAttributes>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_UART_MspInit+0x30a>
      Error_Handler();
 8003102:	f7ff fafd 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_UART_MspInit+0x33c>)
 800310a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_UART_MspInit+0x33c>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	203f      	movs	r0, #63	; 0x3f
 800311a:	f001 f9b4 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800311e:	203f      	movs	r0, #63	; 0x3f
 8003120:	f001 f9cb 	bl	80044ba <HAL_NVIC_EnableIRQ>
}
 8003124:	bf00      	nop
 8003126:	37c8      	adds	r7, #200	; 0xc8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40004800 	.word	0x40004800
 8003130:	40021000 	.word	0x40021000
 8003134:	42020400 	.word	0x42020400
 8003138:	20000f4c 	.word	0x20000f4c
 800313c:	40020030 	.word	0x40020030

08003140 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <MX_USB_PCD_Init+0x48>)
 8003146:	4a11      	ldr	r2, [pc, #68]	; (800318c <MX_USB_PCD_Init+0x4c>)
 8003148:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <MX_USB_PCD_Init+0x48>)
 800314c:	2208      	movs	r2, #8
 800314e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <MX_USB_PCD_Init+0x48>)
 8003152:	2202      	movs	r2, #2
 8003154:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <MX_USB_PCD_Init+0x48>)
 8003158:	2202      	movs	r2, #2
 800315a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <MX_USB_PCD_Init+0x48>)
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <MX_USB_PCD_Init+0x48>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <MX_USB_PCD_Init+0x48>)
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <MX_USB_PCD_Init+0x48>)
 8003170:	2200      	movs	r2, #0
 8003172:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <MX_USB_PCD_Init+0x48>)
 8003176:	f001 ff0d 	bl	8004f94 <HAL_PCD_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003180:	f7ff fabe 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000fb4 	.word	0x20000fb4
 800318c:	4000d400 	.word	0x4000d400

08003190 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b0ae      	sub	sp, #184	; 0xb8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	2294      	movs	r2, #148	; 0x94
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 ffa4 	bl	80090fe <memset>
  if(pcdHandle->Instance==USB)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a22      	ldr	r2, [pc, #136]	; (8003244 <HAL_PCD_MspInit+0xb4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d13d      	bne.n	800323c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80031c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 f84b 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80031dc:	f7ff fa90 	bl	8002700 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_PCD_MspInit+0xb8>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_PCD_MspInit+0xb8>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_PCD_MspInit+0xb8>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003212:	230a      	movs	r3, #10
 8003214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800321c:	4619      	mov	r1, r3
 800321e:	480b      	ldr	r0, [pc, #44]	; (800324c <HAL_PCD_MspInit+0xbc>)
 8003220:	f001 fd20 	bl	8004c64 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_PCD_MspInit+0xb8>)
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_PCD_MspInit+0xb8>)
 800322a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800322e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_PCD_MspInit+0xb8>)
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800323c:	bf00      	nop
 800323e:	37b8      	adds	r7, #184	; 0xb8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	4000d400 	.word	0x4000d400
 8003248:	40021000 	.word	0x40021000
 800324c:	42020000 	.word	0x42020000

08003250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003288 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003254:	f7ff fbba 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003258:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800325a:	e003      	b.n	8003264 <LoopCopyDataInit>

0800325c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800325e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003260:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003262:	3104      	adds	r1, #4

08003264 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003264:	480a      	ldr	r0, [pc, #40]	; (8003290 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003268:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800326a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800326c:	d3f6      	bcc.n	800325c <CopyDataInit>
	ldr	r2, =_sbss
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003270:	e002      	b.n	8003278 <LoopFillZerobss>

08003272 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003272:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003274:	f842 3b04 	str.w	r3, [r2], #4

08003278 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <LoopForever+0x16>)
	cmp	r2, r3
 800327a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800327c:	d3f9      	bcc.n	8003272 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800327e:	f005 feed 	bl	800905c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003282:	f7ff f99f 	bl	80025c4 <main>

08003286 <LoopForever>:

LoopForever:
    b LoopForever
 8003286:	e7fe      	b.n	8003286 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003288:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800328c:	0800a324 	.word	0x0800a324
	ldr	r0, =_sdata
 8003290:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003294:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003298:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800329c:	200012c0 	.word	0x200012c0

080032a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032a0:	e7fe      	b.n	80032a0 <ADC1_2_IRQHandler>

080032a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80032ac:	2004      	movs	r0, #4
 80032ae:	f001 f8df 	bl	8004470 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80032b2:	f7ff fb9d 	bl	80029f0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 f80e 	bl	80032d8 <HAL_InitTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	71fb      	strb	r3, [r7, #7]
 80032c6:	e001      	b.n	80032cc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032c8:	f7ff faa8 	bl	800281c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032cc:	79fb      	ldrb	r3, [r7, #7]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032e4:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_InitTick+0x6c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d023      	beq.n	8003334 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_InitTick+0x70>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_InitTick+0x6c>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f8e7 	bl	80044d6 <HAL_SYSTICK_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b07      	cmp	r3, #7
 8003312:	d809      	bhi.n	8003328 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f001 f8b3 	bl	8004486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_InitTick+0x74>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e007      	b.n	8003338 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e004      	b.n	8003338 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e001      	b.n	8003338 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	2000000c 	.word	0x2000000c
 8003348:	20000004 	.word	0x20000004
 800334c:	20000008 	.word	0x20000008

08003350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_IncTick+0x20>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_IncTick+0x24>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_IncTick+0x24>)
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c
 8003374:	200012a8 	.word	0x200012a8

08003378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return uwTick;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_GetTick+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	200012a8 	.word	0x200012a8

08003390 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3360      	adds	r3, #96	; 0x60
 800340a:	461a      	mov	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <LL_ADC_SetOffset+0x44>)
 800341a:	4013      	ands	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	4313      	orrs	r3, r2
 8003428:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	03fff000 	.word	0x03fff000

08003440 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3360      	adds	r3, #96	; 0x60
 800344e:	461a      	mov	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3360      	adds	r3, #96	; 0x60
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	431a      	orrs	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	615a      	str	r2, [r3, #20]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3330      	adds	r3, #48	; 0x30
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	4413      	add	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	211f      	movs	r1, #31
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0e9b      	lsrs	r3, r3, #26
 8003500:	f003 011f 	and.w	r1, r3, #31
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	431a      	orrs	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3314      	adds	r3, #20
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0e5b      	lsrs	r3, r3, #25
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	4413      	add	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	0d1b      	lsrs	r3, r3, #20
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2107      	movs	r1, #7
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	401a      	ands	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0d1b      	lsrs	r3, r3, #20
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	431a      	orrs	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003590:	43db      	mvns	r3, r3
 8003592:	401a      	ands	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f003 0318 	and.w	r3, r3, #24
 800359a:	4908      	ldr	r1, [pc, #32]	; (80035bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800359c:	40d9      	lsrs	r1, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	400b      	ands	r3, r1
 80035a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	0007ffff 	.word	0x0007ffff

080035c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80035d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6093      	str	r3, [r2, #8]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f8:	d101      	bne.n	80035fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800361c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003648:	d101      	bne.n	800364e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <LL_ADC_IsEnabled+0x18>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <LL_ADC_IsEnabled+0x1a>
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d101      	bne.n	800369a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d101      	bne.n	80036c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e12e      	b.n	8003948 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fe fe3d 	bl	8002378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff67 	bl	80035e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff4d 	bl	80035c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff82 	bl	8003634 <LL_ADC_IsInternalRegulatorEnabled>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d115      	bne.n	8003762 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ff66 	bl	800360c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003740:	4b83      	ldr	r3, [pc, #524]	; (8003950 <HAL_ADC_Init+0x280>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	099b      	lsrs	r3, r3, #6
 8003746:	4a83      	ldr	r2, [pc, #524]	; (8003954 <HAL_ADC_Init+0x284>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003754:	e002      	b.n	800375c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f9      	bne.n	8003756 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff64 	bl	8003634 <LL_ADC_IsInternalRegulatorEnabled>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f043 0210 	orr.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff75 	bl	8003682 <LL_ADC_REG_IsConversionOngoing>
 8003798:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80c7 	bne.w	8003936 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 80c3 	bne.w	8003936 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037b8:	f043 0202 	orr.w	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff49 	bl	800365c <LL_ADC_IsEnabled>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d110      	bne.n	80037f2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037d0:	4861      	ldr	r0, [pc, #388]	; (8003958 <HAL_ADC_Init+0x288>)
 80037d2:	f7ff ff43 	bl	800365c <LL_ADC_IsEnabled>
 80037d6:	4604      	mov	r4, r0
 80037d8:	4860      	ldr	r0, [pc, #384]	; (800395c <HAL_ADC_Init+0x28c>)
 80037da:	f7ff ff3f 	bl	800365c <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	4323      	orrs	r3, r4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4619      	mov	r1, r3
 80037ec:	485c      	ldr	r0, [pc, #368]	; (8003960 <HAL_ADC_Init+0x290>)
 80037ee:	f7ff fdcf 	bl	8003390 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7e5b      	ldrb	r3, [r3, #25]
 80037f6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003802:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003808:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003810:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	3b01      	subs	r3, #1
 8003826:	045b      	lsls	r3, r3, #17
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_ADC_Init+0x294>)
 8003852:	4013      	ands	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	69b9      	ldr	r1, [r7, #24]
 800385a:	430b      	orrs	r3, r1
 800385c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff20 	bl	80036a8 <LL_ADC_INJ_IsConversionOngoing>
 8003868:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d140      	bne.n	80038f2 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d13d      	bne.n	80038f2 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7e1b      	ldrb	r3, [r3, #24]
 800387e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003880:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003888:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003898:	f023 0306 	bic.w	r3, r3, #6
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	430b      	orrs	r3, r1
 80038a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d118      	bne.n	80038e2 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038cc:	4311      	orrs	r1, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038d2:	430a      	orrs	r2, r1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	611a      	str	r2, [r3, #16]
 80038e0:	e007      	b.n	80038f2 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d10c      	bne.n	8003914 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f023 010f 	bic.w	r1, r3, #15
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
 8003912:	e007      	b.n	8003924 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020f 	bic.w	r2, r2, #15
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	f023 0303 	bic.w	r3, r3, #3
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	659a      	str	r2, [r3, #88]	; 0x58
 8003934:	e007      	b.n	8003946 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003946:	7ffb      	ldrb	r3, [r7, #31]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3724      	adds	r7, #36	; 0x24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	20000004 	.word	0x20000004
 8003954:	053e2d63 	.word	0x053e2d63
 8003958:	42028000 	.word	0x42028000
 800395c:	42028100 	.word	0x42028100
 8003960:	42028300 	.word	0x42028300
 8003964:	fff0c007 	.word	0xfff0c007

08003968 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b0b7      	sub	sp, #220	; 0xdc
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x22>
 8003986:	2302      	movs	r3, #2
 8003988:	e3c1      	b.n	800410e <HAL_ADC_ConfigChannel+0x7a6>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fe73 	bl	8003682 <LL_ADC_REG_IsConversionOngoing>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 83a6 	bne.w	80040f0 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f7ff fd89 	bl	80034c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fe61 	bl	8003682 <LL_ADC_REG_IsConversionOngoing>
 80039c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fe6d 	bl	80036a8 <LL_ADC_INJ_IsConversionOngoing>
 80039ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 81c1 	bne.w	8003d5e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 81bc 	bne.w	8003d5e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ee:	d10f      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	4619      	mov	r1, r3
 80039fc:	f7ff fd90 	bl	8003520 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fd4a 	bl	80034a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003a0e:	e00e      	b.n	8003a2e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f7ff fd7f 	bl	8003520 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fd3a 	bl	80034a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	08db      	lsrs	r3, r3, #3
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d00a      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6919      	ldr	r1, [r3, #16]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a60:	f7ff fcca 	bl	80033f8 <LL_ADC_SetOffset>
 8003a64:	e17b      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fce7 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x12a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fcdc 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	e01e      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x168>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fcd1 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	e004      	b.n	8003ace <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8003ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x180>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	e018      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x1b2>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	e004      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d106      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fca0 	bl	800346c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fc84 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10a      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x1f0>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fc79 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	f003 021f 	and.w	r2, r3, #31
 8003b56:	e01e      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x22e>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fc6e 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8003b86:	2320      	movs	r3, #32
 8003b88:	e004      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8003b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x246>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	0e9b      	lsrs	r3, r3, #26
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	e018      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x278>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003bc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003bca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	e004      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8003bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d106      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fc3d 	bl	800346c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fc21 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x2b6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fc16 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	0e9b      	lsrs	r3, r3, #26
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	e01e      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x2f4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fc0b 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	e004      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x30c>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0e9b      	lsrs	r3, r3, #26
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	e016      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x33a>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	e004      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8003c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d106      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2102      	movs	r1, #2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fbdc 	bl	800346c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2103      	movs	r1, #3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fbc0 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x378>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2103      	movs	r1, #3
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fbb5 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	f003 021f 	and.w	r2, r3, #31
 8003cde:	e017      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x3a8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2103      	movs	r1, #3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fbaa 	bl	8003440 <LL_ADC_GetOffsetChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cfa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003d02:	2320      	movs	r3, #32
 8003d04:	e003      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d08:	fab3 f383 	clz	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x3c0>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0e9b      	lsrs	r3, r3, #26
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	e011      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x3e4>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d106      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2103      	movs	r1, #3
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fb87 	bl	800346c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fc7a 	bl	800365c <LL_ADC_IsEnabled>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 81c9 	bne.w	8004102 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f7ff fbfb 	bl	8003578 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a8f      	ldr	r2, [pc, #572]	; (8003fc4 <HAL_ADC_ConfigChannel+0x65c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	f040 8131 	bne.w	8003ff0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x44e>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0e9b      	lsrs	r3, r3, #26
 8003da4:	3301      	adds	r3, #1
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	bf94      	ite	ls
 8003dae:	2301      	movls	r3, #1
 8003db0:	2300      	movhi	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e019      	b.n	8003dea <HAL_ADC_ConfigChannel+0x482>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	e003      	b.n	8003dda <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	bf94      	ite	ls
 8003de4:	2301      	movls	r3, #1
 8003de6:	2300      	movhi	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d079      	beq.n	8003ee2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x4a2>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	0e9b      	lsrs	r3, r3, #26
 8003e00:	3301      	adds	r3, #1
 8003e02:	069b      	lsls	r3, r3, #26
 8003e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e08:	e015      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x4ce>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e003      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	069b      	lsls	r3, r3, #26
 8003e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x4ee>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	0e9b      	lsrs	r3, r3, #26
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	e017      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x51e>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	e003      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	ea42 0103 	orr.w	r1, r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x544>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f003 021f 	and.w	r2, r3, #31
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	051b      	lsls	r3, r3, #20
 8003eaa:	e018      	b.n	8003ede <HAL_ADC_ConfigChannel+0x576>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e003      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f003 021f 	and.w	r2, r3, #31
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	e081      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x596>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0e9b      	lsrs	r3, r3, #26
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	069b      	lsls	r3, r3, #26
 8003ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003efc:	e015      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x5c2>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e003      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	069b      	lsls	r3, r3, #26
 8003f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x5e2>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	0e9b      	lsrs	r3, r3, #26
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	e017      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x612>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	61fb      	str	r3, [r7, #28]
  return result;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e003      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	ea42 0103 	orr.w	r1, r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x63e>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	0e9b      	lsrs	r3, r3, #26
 8003f90:	3301      	adds	r3, #1
 8003f92:	f003 021f 	and.w	r2, r3, #31
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3b1e      	subs	r3, #30
 8003f9e:	051b      	lsls	r3, r3, #20
 8003fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	e01e      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x67c>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	fa93 f3a3 	rbit	r3, r3
 8003fb2:	613b      	str	r3, [r7, #16]
  return result;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	e006      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x668>
 8003fc2:	bf00      	nop
 8003fc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f003 021f 	and.w	r2, r3, #31
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	3b1e      	subs	r3, #30
 8003fde:	051b      	lsls	r3, r3, #20
 8003fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	6892      	ldr	r2, [r2, #8]
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7ff fa98 	bl	8003520 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b48      	ldr	r3, [pc, #288]	; (8004118 <HAL_ADC_ConfigChannel+0x7b0>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8082 	beq.w	8004102 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ffe:	4847      	ldr	r0, [pc, #284]	; (800411c <HAL_ADC_ConfigChannel+0x7b4>)
 8004000:	f7ff f9ec 	bl	80033dc <LL_ADC_GetCommonPathInternalCh>
 8004004:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004008:	4845      	ldr	r0, [pc, #276]	; (8004120 <HAL_ADC_ConfigChannel+0x7b8>)
 800400a:	f7ff fb27 	bl	800365c <LL_ADC_IsEnabled>
 800400e:	4604      	mov	r4, r0
 8004010:	4844      	ldr	r0, [pc, #272]	; (8004124 <HAL_ADC_ConfigChannel+0x7bc>)
 8004012:	f7ff fb23 	bl	800365c <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	4323      	orrs	r3, r4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d15e      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a41      	ldr	r2, [pc, #260]	; (8004128 <HAL_ADC_ConfigChannel+0x7c0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d127      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800402c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d121      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a39      	ldr	r2, [pc, #228]	; (8004120 <HAL_ADC_ConfigChannel+0x7b8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d161      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800403e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004046:	4619      	mov	r1, r3
 8004048:	4834      	ldr	r0, [pc, #208]	; (800411c <HAL_ADC_ConfigChannel+0x7b4>)
 800404a:	f7ff f9b4 	bl	80033b6 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_ADC_ConfigChannel+0x7c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	4a36      	ldr	r2, [pc, #216]	; (8004130 <HAL_ADC_ConfigChannel+0x7c8>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004066:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004068:	e002      	b.n	8004070 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b01      	subs	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f9      	bne.n	800406a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004076:	e044      	b.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2d      	ldr	r2, [pc, #180]	; (8004134 <HAL_ADC_ConfigChannel+0x7cc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d113      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a23      	ldr	r2, [pc, #140]	; (8004120 <HAL_ADC_ConfigChannel+0x7b8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d134      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800409c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a0:	4619      	mov	r1, r3
 80040a2:	481e      	ldr	r0, [pc, #120]	; (800411c <HAL_ADC_ConfigChannel+0x7b4>)
 80040a4:	f7ff f987 	bl	80033b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040a8:	e02b      	b.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a22      	ldr	r2, [pc, #136]	; (8004138 <HAL_ADC_ConfigChannel+0x7d0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d126      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d120      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_ADC_ConfigChannel+0x7b8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d11b      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040d2:	4619      	mov	r1, r3
 80040d4:	4811      	ldr	r0, [pc, #68]	; (800411c <HAL_ADC_ConfigChannel+0x7b4>)
 80040d6:	f7ff f96e 	bl	80033b6 <LL_ADC_SetCommonPathInternalCh>
 80040da:	e012      	b.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80040ee:	e008      	b.n	8004102 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800410a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800410e:	4618      	mov	r0, r3
 8004110:	37dc      	adds	r7, #220	; 0xdc
 8004112:	46bd      	mov	sp, r7
 8004114:	bd90      	pop	{r4, r7, pc}
 8004116:	bf00      	nop
 8004118:	80080000 	.word	0x80080000
 800411c:	42028300 	.word	0x42028300
 8004120:	42028000 	.word	0x42028000
 8004124:	42028100 	.word	0x42028100
 8004128:	c7520000 	.word	0xc7520000
 800412c:	20000004 	.word	0x20000004
 8004130:	053e2d63 	.word	0x053e2d63
 8004134:	cb840000 	.word	0xcb840000
 8004138:	80000001 	.word	0x80000001

0800413c <LL_ADC_IsEnabled>:
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <LL_ADC_IsEnabled+0x18>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <LL_ADC_IsEnabled+0x1a>
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_ADC_REG_IsConversionOngoing>:
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d101      	bne.n	800417a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b0a1      	sub	sp, #132	; 0x84
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e089      	b.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80041ae:	2300      	movs	r3, #0
 80041b0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80041b2:	2300      	movs	r3, #0
 80041b4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a42      	ldr	r2, [pc, #264]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d102      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041c0:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e001      	b.n	80041ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e068      	b.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ffb9 	bl	8004162 <LL_ADC_REG_IsConversionOngoing>
 80041f0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ffb3 	bl	8004162 <LL_ADC_REG_IsConversionOngoing>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d14a      	bne.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	2b00      	cmp	r3, #0
 8004206:	d147      	bne.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800420a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d027      	beq.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004226:	035b      	lsls	r3, r3, #13
 8004228:	430b      	orrs	r3, r1
 800422a:	431a      	orrs	r2, r3
 800422c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004230:	4824      	ldr	r0, [pc, #144]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004232:	f7ff ff83 	bl	800413c <LL_ADC_IsEnabled>
 8004236:	4604      	mov	r4, r0
 8004238:	4823      	ldr	r0, [pc, #140]	; (80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800423a:	f7ff ff7f 	bl	800413c <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	4323      	orrs	r3, r4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d132      	bne.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800424e:	f023 030f 	bic.w	r3, r3, #15
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	6811      	ldr	r1, [r2, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	430a      	orrs	r2, r1
 800425c:	431a      	orrs	r2, r3
 800425e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004260:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004262:	e023      	b.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800426c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004270:	4814      	ldr	r0, [pc, #80]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004272:	f7ff ff63 	bl	800413c <LL_ADC_IsEnabled>
 8004276:	4604      	mov	r4, r0
 8004278:	4813      	ldr	r0, [pc, #76]	; (80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800427a:	f7ff ff5f 	bl	800413c <LL_ADC_IsEnabled>
 800427e:	4603      	mov	r3, r0
 8004280:	4323      	orrs	r3, r4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d112      	bne.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800428e:	f023 030f 	bic.w	r3, r3, #15
 8004292:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004294:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004296:	e009      	b.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042aa:	e000      	b.n	80042ae <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80042b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3784      	adds	r7, #132	; 0x84
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}
 80042c2:	bf00      	nop
 80042c4:	42028000 	.word	0x42028000
 80042c8:	42028100 	.word	0x42028100
 80042cc:	42028300 	.word	0x42028300

080042d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042ec:	4013      	ands	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004302:	4a04      	ldr	r2, [pc, #16]	; (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	60d3      	str	r3, [r2, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <__NVIC_GetPriorityGrouping+0x18>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	f003 0307 	and.w	r3, r3, #7
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db0b      	blt.n	800435e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4907      	ldr	r1, [pc, #28]	; (800436c <__NVIC_EnableIRQ+0x38>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db0a      	blt.n	800439a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	490c      	ldr	r1, [pc, #48]	; (80043bc <__NVIC_SetPriority+0x4c>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	0152      	lsls	r2, r2, #5
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	440b      	add	r3, r1
 8004394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004398:	e00a      	b.n	80043b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4908      	ldr	r1, [pc, #32]	; (80043c0 <__NVIC_SetPriority+0x50>)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3b04      	subs	r3, #4
 80043a8:	0152      	lsls	r2, r2, #5
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	440b      	add	r3, r1
 80043ae:	761a      	strb	r2, [r3, #24]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000e100 	.word	0xe000e100
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f1c3 0307 	rsb	r3, r3, #7
 80043de:	2b03      	cmp	r3, #3
 80043e0:	bf28      	it	cs
 80043e2:	2303      	movcs	r3, #3
 80043e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3303      	adds	r3, #3
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d902      	bls.n	80043f4 <NVIC_EncodePriority+0x30>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b04      	subs	r3, #4
 80043f2:	e000      	b.n	80043f6 <NVIC_EncodePriority+0x32>
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	401a      	ands	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800440c:	f04f 31ff 	mov.w	r1, #4294967295
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43d9      	mvns	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	4313      	orrs	r3, r2
         );
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	; 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800443c:	d301      	bcc.n	8004442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800443e:	2301      	movs	r3, #1
 8004440:	e00f      	b.n	8004462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <SysTick_Config+0x40>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800444a:	2107      	movs	r1, #7
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	f7ff ff8e 	bl	8004370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <SysTick_Config+0x40>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <SysTick_Config+0x40>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	e000e010 	.word	0xe000e010

08004470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff29 	bl	80042d0 <__NVIC_SetPriorityGrouping>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004494:	f7ff ff40 	bl	8004318 <__NVIC_GetPriorityGrouping>
 8004498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	6978      	ldr	r0, [r7, #20]
 80044a0:	f7ff ff90 	bl	80043c4 <NVIC_EncodePriority>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff5f 	bl	8004370 <__NVIC_SetPriority>
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff33 	bl	8004334 <__NVIC_EnableIRQ>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ffa4 	bl	800442c <SysTick_Config>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e08d      	b.n	800461e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	4b47      	ldr	r3, [pc, #284]	; (8004628 <HAL_DMA_Init+0x138>)
 800450a:	429a      	cmp	r2, r3
 800450c:	d80f      	bhi.n	800452e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	4b45      	ldr	r3, [pc, #276]	; (800462c <HAL_DMA_Init+0x13c>)
 8004516:	4413      	add	r3, r2
 8004518:	4a45      	ldr	r2, [pc, #276]	; (8004630 <HAL_DMA_Init+0x140>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	009a      	lsls	r2, r3, #2
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a42      	ldr	r2, [pc, #264]	; (8004634 <HAL_DMA_Init+0x144>)
 800452a:	649a      	str	r2, [r3, #72]	; 0x48
 800452c:	e00e      	b.n	800454c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	4b40      	ldr	r3, [pc, #256]	; (8004638 <HAL_DMA_Init+0x148>)
 8004536:	4413      	add	r3, r2
 8004538:	4a3d      	ldr	r2, [pc, #244]	; (8004630 <HAL_DMA_Init+0x140>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	009a      	lsls	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a3c      	ldr	r2, [pc, #240]	; (800463c <HAL_DMA_Init+0x14c>)
 800454a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8004562:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8004566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fafe 	bl	8004ba0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ac:	d102      	bne.n	80045b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045c8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_DMA_Init+0x104>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d80c      	bhi.n	80045f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fb1e 	bl	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	e008      	b.n	8004606 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40020407 	.word	0x40020407
 800462c:	bffdfff8 	.word	0xbffdfff8
 8004630:	cccccccd 	.word	0xcccccccd
 8004634:	40020000 	.word	0x40020000
 8004638:	bffdfbf8 	.word	0xbffdfbf8
 800463c:	40020400 	.word	0x40020400

08004640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_DMA_Start_IT+0x20>
 800465c:	2302      	movs	r3, #2
 800465e:	e066      	b.n	800472e <HAL_DMA_Start_IT+0xee>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d155      	bne.n	8004720 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fa43 	bl	8004b24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 020e 	orr.w	r2, r2, #14
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e00f      	b.n	80046d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 020a 	orr.w	r2, r2, #10
 80046d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e005      	b.n	800472c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d008      	beq.n	8004760 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2204      	movs	r2, #4
 8004752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e040      	b.n	80047e2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 020e 	bic.w	r2, r2, #14
 800476e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800477e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004794:	f003 021c 	and.w	r2, r3, #28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	2101      	movs	r1, #1
 800479e:	fa01 f202 	lsl.w	r2, r1, r2
 80047a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80047ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00c      	beq.n	80047d0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80047ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d005      	beq.n	8004812 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e047      	b.n	80048a2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 020e 	bic.w	r2, r2, #14
 8004820:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004846:	f003 021c 	and.w	r2, r3, #28
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484e:	2101      	movs	r1, #1
 8004850:	fa01 f202 	lsl.w	r2, r1, r2
 8004854:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800485e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004876:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004880:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
    }
  }
  return status;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c8:	f003 031c 	and.w	r3, r3, #28
 80048cc:	2204      	movs	r2, #4
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d053      	beq.n	8004980 <HAL_DMA_IRQHandler+0xd4>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04e      	beq.n	8004980 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d024      	beq.n	800493a <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	f003 021c 	and.w	r2, r3, #28
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	2104      	movs	r1, #4
 80048fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004902:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80c0 	beq.w	8004a9c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004924:	e0ba      	b.n	8004a9c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80b6 	beq.w	8004a9c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004938:	e0b0      	b.n	8004a9c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0204 	bic.w	r2, r2, #4
 8004956:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	f003 021c 	and.w	r2, r3, #28
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004964:	2104      	movs	r1, #4
 8004966:	fa01 f202 	lsl.w	r2, r1, r2
 800496a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8093 	beq.w	8004a9c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800497e:	e08d      	b.n	8004a9c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	f003 031c 	and.w	r3, r3, #28
 8004988:	2202      	movs	r2, #2
 800498a:	409a      	lsls	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d04e      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x186>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d049      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d018      	beq.n	80049de <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d108      	bne.n	80049cc <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d06e      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80049ca:	e069      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d065      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80049dc:	e060      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 020a 	bic.w	r2, r2, #10
 80049fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a08:	f003 021c 	and.w	r2, r3, #28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a10:	2102      	movs	r1, #2
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d03b      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004a30:	e036      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a36:	f003 031c 	and.w	r3, r3, #28
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02e      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x1f8>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d029      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 020e 	bic.w	r2, r2, #14
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	f003 021c 	and.w	r2, r3, #28
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a9a:	e002      	b.n	8004aa2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004a9c:	bf00      	nop
 8004a9e:	e000      	b.n	8004aa2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004aa0:	bf00      	nop
  return;
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
}
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	72fb      	strb	r3, [r7, #11]
    return status;
 8004adc:	7afb      	ldrb	r3, [r7, #11]
 8004ade:	e01b      	b.n	8004b18 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e003      	b.n	8004b0e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]

  return status;
 8004b16:	7afb      	ldrb	r3, [r7, #11]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b3a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	f003 021c 	and.w	r2, r3, #28
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d108      	bne.n	8004b84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8004b82:	e007      	b.n	8004b94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d80a      	bhi.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bc0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6513      	str	r3, [r2, #80]	; 0x50
 8004bc8:	e007      	b.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	009a      	lsls	r2, r3, #2
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004bd4:	4413      	add	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	3b08      	subs	r3, #8
 8004be2:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40020407 	.word	0x40020407
 8004c10:	40020820 	.word	0x40020820
 8004c14:	cccccccd 	.word	0xcccccccd
 8004c18:	40020880 	.word	0x40020880

08004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2201      	movs	r2, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	1000823f 	.word	0x1000823f
 8004c60:	40020940 	.word	0x40020940

08004c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c72:	e158      	b.n	8004f26 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	2101      	movs	r1, #1
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 814a 	beq.w	8004f20 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d005      	beq.n	8004ca4 <HAL_GPIO_Init+0x40>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d130      	bne.n	8004d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	2203      	movs	r2, #3
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cda:	2201      	movs	r2, #1
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0201 	and.w	r2, r3, #1
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d017      	beq.n	8004d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d123      	bne.n	8004d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	08da      	lsrs	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3208      	adds	r2, #8
 8004d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	220f      	movs	r2, #15
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	08da      	lsrs	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3208      	adds	r2, #8
 8004d90:	6939      	ldr	r1, [r7, #16]
 8004d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	2203      	movs	r2, #3
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0203 	and.w	r2, r3, #3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80a4 	beq.w	8004f20 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004dd8:	4a5a      	ldr	r2, [pc, #360]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	3318      	adds	r3, #24
 8004de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	220f      	movs	r2, #15
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <HAL_GPIO_Init+0x2e4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d025      	beq.n	8004e50 <HAL_GPIO_Init+0x1ec>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a51      	ldr	r2, [pc, #324]	; (8004f4c <HAL_GPIO_Init+0x2e8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d01f      	beq.n	8004e4c <HAL_GPIO_Init+0x1e8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a50      	ldr	r2, [pc, #320]	; (8004f50 <HAL_GPIO_Init+0x2ec>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d019      	beq.n	8004e48 <HAL_GPIO_Init+0x1e4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a4f      	ldr	r2, [pc, #316]	; (8004f54 <HAL_GPIO_Init+0x2f0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <HAL_GPIO_Init+0x1e0>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	; (8004f58 <HAL_GPIO_Init+0x2f4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00d      	beq.n	8004e40 <HAL_GPIO_Init+0x1dc>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a4d      	ldr	r2, [pc, #308]	; (8004f5c <HAL_GPIO_Init+0x2f8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <HAL_GPIO_Init+0x1d8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a4c      	ldr	r2, [pc, #304]	; (8004f60 <HAL_GPIO_Init+0x2fc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d101      	bne.n	8004e38 <HAL_GPIO_Init+0x1d4>
 8004e34:	2306      	movs	r3, #6
 8004e36:	e00c      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e38:	2307      	movs	r3, #7
 8004e3a:	e00a      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e3c:	2305      	movs	r3, #5
 8004e3e:	e008      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e40:	2304      	movs	r3, #4
 8004e42:	e006      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e44:	2303      	movs	r3, #3
 8004e46:	e004      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e002      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e50:	2300      	movs	r3, #0
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	f002 0203 	and.w	r2, r2, #3
 8004e58:	00d2      	lsls	r2, r2, #3
 8004e5a:	4093      	lsls	r3, r2
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004e62:	4938      	ldr	r1, [pc, #224]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3318      	adds	r3, #24
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e70:	4b34      	ldr	r3, [pc, #208]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e94:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ebe:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ec4:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4013      	ands	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f18:	4a0a      	ldr	r2, [pc, #40]	; (8004f44 <HAL_GPIO_Init+0x2e0>)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	3301      	adds	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f47f ae9f 	bne.w	8004c74 <HAL_GPIO_Init+0x10>
  }
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	4002f400 	.word	0x4002f400
 8004f48:	42020000 	.word	0x42020000
 8004f4c:	42020400 	.word	0x42020400
 8004f50:	42020800 	.word	0x42020800
 8004f54:	42020c00 	.word	0x42020c00
 8004f58:	42021000 	.word	0x42021000
 8004f5c:	42021400 	.word	0x42021400
 8004f60:	42021800 	.word	0x42021800

08004f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
 8004f70:	4613      	mov	r3, r2
 8004f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f74:	787b      	ldrb	r3, [r7, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f80:	e002      	b.n	8004f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f82:	887a      	ldrh	r2, [r7, #2]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f96:	b08b      	sub	sp, #44	; 0x2c
 8004f98:	af06      	add	r7, sp, #24
 8004f9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e0cb      	b.n	800513e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fe f8e8 	bl	8003190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f003 ffdf 	bl	8008f90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	e040      	b.n	800505a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3301      	adds	r3, #1
 8004fea:	2201      	movs	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	440b      	add	r3, r1
 8005012:	3303      	adds	r3, #3
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	440b      	add	r3, r1
 8005026:	3338      	adds	r3, #56	; 0x38
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	440b      	add	r3, r1
 800503a:	333c      	adds	r3, #60	; 0x3c
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	440b      	add	r3, r1
 800504e:	3340      	adds	r3, #64	; 0x40
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	3301      	adds	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
 800505a:	7bfa      	ldrb	r2, [r7, #15]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d3b9      	bcc.n	8004fd8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	e044      	b.n	80050f4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	440b      	add	r3, r1
 8005078:	f203 1369 	addw	r3, r3, #361	; 0x169
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	440b      	add	r3, r1
 800508e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	440b      	add	r3, r1
 80050a4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050ac:	7bfa      	ldrb	r2, [r7, #15]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	440b      	add	r3, r1
 80050ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	440b      	add	r3, r1
 80050d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050d8:	7bfa      	ldrb	r2, [r7, #15]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	440b      	add	r3, r1
 80050e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3301      	adds	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3b5      	bcc.n	800506a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	687e      	ldr	r6, [r7, #4]
 8005106:	466d      	mov	r5, sp
 8005108:	f106 0410 	add.w	r4, r6, #16
 800510c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800510e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	1d33      	adds	r3, r6, #4
 8005116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005118:	6838      	ldr	r0, [r7, #0]
 800511a:	f003 ff54 	bl	8008fc6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d102      	bne.n	800513c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f805 	bl	8005146 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005146 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800516a:	b29b      	uxth	r3, r3
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800517e:	b29b      	uxth	r3, r3
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051aa:	6013      	str	r3, [r2, #0]
}
 80051ac:	bf00      	nop
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40007000 	.word	0x40007000

080051bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40007000 	.word	0x40007000

080051d8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051e8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80051ea:	f000 f861 	bl	80052b0 <HAL_PWREx_SMPS_GetEffectiveMode>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f4:	d101      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e03e      	b.n	8005278 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80051fa:	4b21      	ldr	r3, [pc, #132]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005206:	d101      	bne.n	800520c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e035      	b.n	8005278 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d101      	bne.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e02f      	b.n	8005278 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005218:	4b19      	ldr	r3, [pc, #100]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005220:	4917      	ldr	r1, [pc, #92]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8005228:	4b16      	ldr	r3, [pc, #88]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	4a16      	ldr	r2, [pc, #88]	; (8005288 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	09db      	lsrs	r3, r3, #7
 8005236:	2232      	movs	r2, #50	; 0x32
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	4a13      	ldr	r2, [pc, #76]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	08db      	lsrs	r3, r3, #3
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005248:	e002      	b.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3b01      	subs	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525c:	d102      	bne.n	8005264 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f2      	bne.n	800524a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005270:	d101      	bne.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e000      	b.n	8005278 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40007000 	.word	0x40007000
 8005284:	20000004 	.word	0x20000004
 8005288:	0a7c5ac5 	.word	0x0a7c5ac5
 800528c:	cccccccd 	.word	0xcccccccd

08005290 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a04      	ldr	r2, [pc, #16]	; (80052ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800529a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800529e:	6053      	str	r3, [r2, #4]
}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40007000 	.word	0x40007000

080052b0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80052c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	e00a      	b.n	80052e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80052d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	e001      	b.n	80052e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80052e0:	2300      	movs	r3, #0
 80052e2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80052e4:	687b      	ldr	r3, [r7, #4]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40007000 	.word	0x40007000

080052f8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f000 bcc2 	b.w	8005c90 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800530c:	4b99      	ldr	r3, [pc, #612]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005316:	4b97      	ldr	r3, [pc, #604]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80e9 	beq.w	8005500 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <HAL_RCC_OscConfig+0x4a>
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	f040 8083 	bne.w	8005442 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d17f      	bne.n	8005442 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005342:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <HAL_RCC_OscConfig+0x64>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d102      	bne.n	800535c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f000 bc9a 	b.w	8005c90 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005360:	4b84      	ldr	r3, [pc, #528]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_RCC_OscConfig+0x7e>
 800536c:	4b81      	ldr	r3, [pc, #516]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005374:	e005      	b.n	8005382 <HAL_RCC_OscConfig+0x8a>
 8005376:	4b7f      	ldr	r3, [pc, #508]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800537c:	091b      	lsrs	r3, r3, #4
 800537e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005382:	4293      	cmp	r3, r2
 8005384:	d224      	bcs.n	80053d0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fe9c 	bl	80060c8 <RCC_SetFlashLatencyFromMSIRange>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f000 bc7a 	b.w	8005c90 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800539c:	4b75      	ldr	r3, [pc, #468]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a74      	ldr	r2, [pc, #464]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053a2:	f043 0308 	orr.w	r3, r3, #8
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b72      	ldr	r3, [pc, #456]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	496f      	ldr	r1, [pc, #444]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ba:	4b6e      	ldr	r3, [pc, #440]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	496a      	ldr	r1, [pc, #424]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	604b      	str	r3, [r1, #4]
 80053ce:	e026      	b.n	800541e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053d0:	4b68      	ldr	r3, [pc, #416]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a67      	ldr	r2, [pc, #412]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	f043 0308 	orr.w	r3, r3, #8
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	4b65      	ldr	r3, [pc, #404]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	4962      	ldr	r1, [pc, #392]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ee:	4b61      	ldr	r3, [pc, #388]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	495d      	ldr	r1, [pc, #372]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fe5b 	bl	80060c8 <RCC_SetFlashLatencyFromMSIRange>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f000 bc39 	b.w	8005c90 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800541e:	f000 fe17 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 8005422:	4603      	mov	r3, r0
 8005424:	4a54      	ldr	r2, [pc, #336]	; (8005578 <HAL_RCC_OscConfig+0x280>)
 8005426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005428:	4b54      	ldr	r3, [pc, #336]	; (800557c <HAL_RCC_OscConfig+0x284>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fd ff53 	bl	80032d8 <HAL_InitTick>
 8005432:	4603      	mov	r3, r0
 8005434:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d060      	beq.n	80054fe <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	f000 bc27 	b.w	8005c90 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d039      	beq.n	80054be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800544a:	4b4a      	ldr	r3, [pc, #296]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a49      	ldr	r2, [pc, #292]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005456:	f7fd ff8f 	bl	8003378 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800545c:	e00f      	b.n	800547e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800545e:	f7fd ff8b 	bl	8003378 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d908      	bls.n	800547e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800546c:	4b41      	ldr	r3, [pc, #260]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	f000 bc09 	b.w	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800547e:	4b3d      	ldr	r3, [pc, #244]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0e9      	beq.n	800545e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800548a:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a39      	ldr	r2, [pc, #228]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005490:	f043 0308 	orr.w	r3, r3, #8
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b37      	ldr	r3, [pc, #220]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	4934      	ldr	r1, [pc, #208]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a8:	4b32      	ldr	r3, [pc, #200]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	492f      	ldr	r1, [pc, #188]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]
 80054bc:	e020      	b.n	8005500 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054be:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054ca:	f7fd ff55 	bl	8003378 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054d0:	e00e      	b.n	80054f0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054d2:	f7fd ff51 	bl	8003378 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d907      	bls.n	80054f0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054e0:	4b24      	ldr	r3, [pc, #144]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e3cf      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054f0:	4b20      	ldr	r3, [pc, #128]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ea      	bne.n	80054d2 <HAL_RCC_OscConfig+0x1da>
 80054fc:	e000      	b.n	8005500 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d07e      	beq.n	800560a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b08      	cmp	r3, #8
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x226>
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	d10e      	bne.n	8005536 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b03      	cmp	r3, #3
 800551c:	d10b      	bne.n	8005536 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d06e      	beq.n	8005608 <HAL_RCC_OscConfig+0x310>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d16a      	bne.n	8005608 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e3ac      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553e:	d106      	bne.n	800554e <HAL_RCC_OscConfig+0x256>
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a0b      	ldr	r2, [pc, #44]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e024      	b.n	8005598 <HAL_RCC_OscConfig+0x2a0>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005556:	d113      	bne.n	8005580 <HAL_RCC_OscConfig+0x288>
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a05      	ldr	r2, [pc, #20]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800555e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b03      	ldr	r3, [pc, #12]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a02      	ldr	r2, [pc, #8]	; (8005574 <HAL_RCC_OscConfig+0x27c>)
 800556a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e012      	b.n	8005598 <HAL_RCC_OscConfig+0x2a0>
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	20000004 	.word	0x20000004
 800557c:	20000008 	.word	0x20000008
 8005580:	4b8b      	ldr	r3, [pc, #556]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a8a      	ldr	r2, [pc, #552]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	4b88      	ldr	r3, [pc, #544]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a87      	ldr	r2, [pc, #540]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d019      	beq.n	80055d4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd feea 	bl	8003378 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055a6:	e00e      	b.n	80055c6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fd fee6 	bl	8003378 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d907      	bls.n	80055c6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b6:	4b7e      	ldr	r3, [pc, #504]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e364      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c6:	4b7a      	ldr	r3, [pc, #488]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0ea      	beq.n	80055a8 <HAL_RCC_OscConfig+0x2b0>
 80055d2:	e01a      	b.n	800560a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fd fed0 	bl	8003378 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055da:	e00e      	b.n	80055fa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fd fecc 	bl	8003378 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	; 0x64
 80055e8:	d907      	bls.n	80055fa <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ea:	4b71      	ldr	r3, [pc, #452]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e34a      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055fa:	4b6d      	ldr	r3, [pc, #436]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ea      	bne.n	80055dc <HAL_RCC_OscConfig+0x2e4>
 8005606:	e000      	b.n	800560a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06c      	beq.n	80056f0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b04      	cmp	r3, #4
 800561a:	d005      	beq.n	8005628 <HAL_RCC_OscConfig+0x330>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b0c      	cmp	r3, #12
 8005620:	d119      	bne.n	8005656 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d116      	bne.n	8005656 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005628:	4b61      	ldr	r3, [pc, #388]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_RCC_OscConfig+0x348>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e327      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005640:	4b5b      	ldr	r3, [pc, #364]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	4958      	ldr	r1, [pc, #352]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005650:	4313      	orrs	r3, r2
 8005652:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005654:	e04c      	b.n	80056f0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d029      	beq.n	80056b2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800565e:	4b54      	ldr	r3, [pc, #336]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a53      	ldr	r2, [pc, #332]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fd fe85 	bl	8003378 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005670:	e00e      	b.n	8005690 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005672:	f7fd fe81 	bl	8003378 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d907      	bls.n	8005690 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005680:	4b4b      	ldr	r3, [pc, #300]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e2ff      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ea      	beq.n	8005672 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569c:	4b44      	ldr	r3, [pc, #272]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	061b      	lsls	r3, r3, #24
 80056aa:	4941      	ldr	r1, [pc, #260]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
 80056b0:	e01e      	b.n	80056f0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b2:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a3e      	ldr	r2, [pc, #248]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd fe5b 	bl	8003378 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c4:	e00e      	b.n	80056e4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c6:	f7fd fe57 	bl	8003378 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d907      	bls.n	80056e4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d4:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e2d5      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056e4:	4b32      	ldr	r3, [pc, #200]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1ea      	bne.n	80056c6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d062      	beq.n	80057c2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d038      	beq.n	8005776 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800570c:	4b28      	ldr	r3, [pc, #160]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 800570e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005712:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005714:	f023 0310 	bic.w	r3, r3, #16
 8005718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800571c:	e007      	b.n	800572e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005724:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005726:	f043 0310 	orr.w	r3, r3, #16
 800572a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005734:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573e:	f7fd fe1b 	bl	8003378 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005744:	e00f      	b.n	8005766 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005746:	f7fd fe17 	bl	8003378 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b07      	cmp	r3, #7
 8005752:	d908      	bls.n	8005766 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005754:	4b16      	ldr	r3, [pc, #88]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e294      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0e8      	beq.n	8005746 <HAL_RCC_OscConfig+0x44e>
 8005774:	e025      	b.n	80057c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 8005778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800577c:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005786:	f7fd fdf7 	bl	8003378 <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800578c:	e012      	b.n	80057b4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578e:	f7fd fdf3 	bl	8003378 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b07      	cmp	r3, #7
 800579a:	d90b      	bls.n	80057b4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <HAL_RCC_OscConfig+0x4b8>)
 800579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e270      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b4:	4ba8      	ldr	r3, [pc, #672]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80057b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 812d 	beq.w	8005a2a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d0:	2300      	movs	r3, #0
 80057d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057d4:	4ba0      	ldr	r3, [pc, #640]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10d      	bne.n	80057fc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e0:	4b9d      	ldr	r3, [pc, #628]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	4a9c      	ldr	r2, [pc, #624]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80057e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ea:	6593      	str	r3, [r2, #88]	; 0x58
 80057ec:	4b9a      	ldr	r3, [pc, #616]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f8:	2301      	movs	r3, #1
 80057fa:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fc:	4b97      	ldr	r3, [pc, #604]	; (8005a5c <HAL_RCC_OscConfig+0x764>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11e      	bne.n	8005846 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005808:	4b94      	ldr	r3, [pc, #592]	; (8005a5c <HAL_RCC_OscConfig+0x764>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a93      	ldr	r2, [pc, #588]	; (8005a5c <HAL_RCC_OscConfig+0x764>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005814:	f7fd fdb0 	bl	8003378 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581a:	e00e      	b.n	800583a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581c:	f7fd fdac 	bl	8003378 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d907      	bls.n	800583a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582a:	4b8c      	ldr	r3, [pc, #560]	; (8005a5c <HAL_RCC_OscConfig+0x764>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e22a      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800583a:	4b88      	ldr	r3, [pc, #544]	; (8005a5c <HAL_RCC_OscConfig+0x764>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0ea      	beq.n	800581c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01f      	beq.n	8005892 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d010      	beq.n	8005880 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800585e:	4b7e      	ldr	r3, [pc, #504]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005864:	4a7c      	ldr	r2, [pc, #496]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005866:	f043 0304 	orr.w	r3, r3, #4
 800586a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800586e:	4b7a      	ldr	r3, [pc, #488]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005874:	4a78      	ldr	r2, [pc, #480]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800587e:	e018      	b.n	80058b2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005880:	4b75      	ldr	r3, [pc, #468]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	4a74      	ldr	r2, [pc, #464]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005890:	e00f      	b.n	80058b2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005892:	4b71      	ldr	r3, [pc, #452]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	4a6f      	ldr	r2, [pc, #444]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058a2:	4b6d      	ldr	r3, [pc, #436]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a8:	4a6b      	ldr	r2, [pc, #428]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80058aa:	f023 0304 	bic.w	r3, r3, #4
 80058ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d068      	beq.n	800598c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fd fd5d 	bl	8003378 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c0:	e011      	b.n	80058e6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fd fd59 	bl	8003378 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d908      	bls.n	80058e6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d4:	4b60      	ldr	r3, [pc, #384]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e1d4      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e6:	4b5c      	ldr	r3, [pc, #368]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0e6      	beq.n	80058c2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d022      	beq.n	8005946 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005900:	4b55      	ldr	r3, [pc, #340]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	4a54      	ldr	r2, [pc, #336]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005910:	e011      	b.n	8005936 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f7fd fd31 	bl	8003378 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005920:	4293      	cmp	r3, r2
 8005922:	d908      	bls.n	8005936 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005924:	4b4c      	ldr	r3, [pc, #304]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e1ac      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005936:	4b48      	ldr	r3, [pc, #288]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0e6      	beq.n	8005912 <HAL_RCC_OscConfig+0x61a>
 8005944:	e068      	b.n	8005a18 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005946:	4b44      	ldr	r3, [pc, #272]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	4a42      	ldr	r2, [pc, #264]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 800594e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005956:	e011      	b.n	800597c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005958:	f7fd fd0e 	bl	8003378 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d908      	bls.n	800597c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800596a:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e189      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800597c:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <HAL_RCC_OscConfig+0x660>
 800598a:	e045      	b.n	8005a18 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fd fcf4 	bl	8003378 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005992:	e011      	b.n	80059b8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7fd fcf0 	bl	8003378 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d908      	bls.n	80059b8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059a6:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e16b      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059b8:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e6      	bne.n	8005994 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d021      	beq.n	8005a18 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80059d4:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059e4:	e011      	b.n	8005a0a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e6:	f7fd fcc7 	bl	8003378 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d908      	bls.n	8005a0a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059f8:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e142      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a0a:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e6      	bne.n	80059e6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a18:	7ffb      	ldrb	r3, [r7, #31]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	4a0d      	ldr	r2, [pc, #52]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d04f      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d028      	beq.n	8005a90 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a44:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <HAL_RCC_OscConfig+0x760>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4e:	f7fd fc93 	bl	8003378 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a54:	e014      	b.n	8005a80 <HAL_RCC_OscConfig+0x788>
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a60:	f7fd fc8a 	bl	8003378 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d908      	bls.n	8005a80 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a6e:	4b8a      	ldr	r3, [pc, #552]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e107      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a80:	4b85      	ldr	r3, [pc, #532]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0e8      	beq.n	8005a60 <HAL_RCC_OscConfig+0x768>
 8005a8e:	e022      	b.n	8005ad6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a90:	4b81      	ldr	r3, [pc, #516]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a96:	4a80      	ldr	r2, [pc, #512]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fd fc6a 	bl	8003378 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005aa6:	e00f      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aa8:	f7fd fc66 	bl	8003378 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d908      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ab6:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0e3      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ac8:	4b73      	ldr	r3, [pc, #460]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e8      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80d7 	beq.w	8005c8e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ae0:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 030c 	and.w	r3, r3, #12
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	f000 8091 	beq.w	8005c10 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d166      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b68      	ldr	r3, [pc, #416]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a67      	ldr	r2, [pc, #412]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fd fc39 	bl	8003378 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b08:	e00e      	b.n	8005b28 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0a:	f7fd fc35 	bl	8003378 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d907      	bls.n	8005b28 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b18:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0b3      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b28:	4b5b      	ldr	r3, [pc, #364]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ea      	bne.n	8005b0a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b34:	4b58      	ldr	r3, [pc, #352]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	4b58      	ldr	r3, [pc, #352]	; (8005c9c <HAL_RCC_OscConfig+0x9a4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b44:	3a01      	subs	r2, #1
 8005b46:	0112      	lsls	r2, r2, #4
 8005b48:	4311      	orrs	r1, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b4e:	0212      	lsls	r2, r2, #8
 8005b50:	4311      	orrs	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b56:	0852      	lsrs	r2, r2, #1
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	0552      	lsls	r2, r2, #21
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b62:	0852      	lsrs	r2, r2, #1
 8005b64:	3a01      	subs	r2, #1
 8005b66:	0652      	lsls	r2, r2, #25
 8005b68:	4311      	orrs	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b6e:	06d2      	lsls	r2, r2, #27
 8005b70:	430a      	orrs	r2, r1
 8005b72:	4949      	ldr	r1, [pc, #292]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b78:	4b47      	ldr	r3, [pc, #284]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a46      	ldr	r2, [pc, #280]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b84:	4b44      	ldr	r3, [pc, #272]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a43      	ldr	r2, [pc, #268]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fd fbf2 	bl	8003378 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b96:	e00e      	b.n	8005bb6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fd fbee 	bl	8003378 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d907      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ba6:	4b3c      	ldr	r3, [pc, #240]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e06c      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb6:	4b38      	ldr	r3, [pc, #224]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0ea      	beq.n	8005b98 <HAL_RCC_OscConfig+0x8a0>
 8005bc2:	e064      	b.n	8005c8e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	4b34      	ldr	r3, [pc, #208]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a33      	ldr	r2, [pc, #204]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fd fbd2 	bl	8003378 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd6:	e00e      	b.n	8005bf6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fd fbce 	bl	8003378 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d907      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be6:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e04c      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf6:	4b28      	ldr	r3, [pc, #160]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1ea      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c02:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	4924      	ldr	r1, [pc, #144]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005c08:	4b25      	ldr	r3, [pc, #148]	; (8005ca0 <HAL_RCC_OscConfig+0x9a8>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	60cb      	str	r3, [r1, #12]
 8005c0e:	e03e      	b.n	8005c8e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e039      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <HAL_RCC_OscConfig+0x9a0>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 0203 	and.w	r2, r3, #3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d12c      	bne.n	8005c8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d123      	bne.n	8005c8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d11b      	bne.n	8005c8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d113      	bne.n	8005c8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d109      	bne.n	8005c8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	3b01      	subs	r3, #1
 8005c84:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d001      	beq.n	8005c8e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3720      	adds	r7, #32
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	019f800c 	.word	0x019f800c
 8005ca0:	feeefffc 	.word	0xfeeefffc

08005ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e11c      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cbc:	4b90      	ldr	r3, [pc, #576]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d910      	bls.n	8005cec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cca:	4b8d      	ldr	r3, [pc, #564]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 020f 	bic.w	r2, r3, #15
 8005cd2:	498b      	ldr	r1, [pc, #556]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b89      	ldr	r3, [pc, #548]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e104      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	4b81      	ldr	r3, [pc, #516]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d908      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b7e      	ldr	r3, [pc, #504]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	497b      	ldr	r1, [pc, #492]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8085 	beq.w	8005e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d11f      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d30:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0da      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d40:	f000 fa26 	bl	8006190 <RCC_GetSysClockFreqFromPLLSource>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4a6f      	ldr	r2, [pc, #444]	; (8005f08 <HAL_RCC_ClockConfig+0x264>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d947      	bls.n	8005dde <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d4e:	4b6d      	ldr	r3, [pc, #436]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d141      	bne.n	8005dde <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d5a:	4b6a      	ldr	r3, [pc, #424]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d62:	4a68      	ldr	r2, [pc, #416]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e036      	b.n	8005dde <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d107      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d78:	4b62      	ldr	r3, [pc, #392]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d115      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0b6      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d107      	bne.n	8005da0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d90:	4b5c      	ldr	r3, [pc, #368]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0aa      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005da0:	4b58      	ldr	r3, [pc, #352]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0a2      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005db0:	f000 f8b0 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4a53      	ldr	r2, [pc, #332]	; (8005f08 <HAL_RCC_ClockConfig+0x264>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d90f      	bls.n	8005dde <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005dbe:	4b51      	ldr	r3, [pc, #324]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dca:	4b4e      	ldr	r3, [pc, #312]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dd2:	4a4c      	ldr	r2, [pc, #304]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dde:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f023 0203 	bic.w	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	4946      	ldr	r1, [pc, #280]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df0:	f7fd fac2 	bl	8003378 <HAL_GetTick>
 8005df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df6:	e013      	b.n	8005e20 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df8:	f7fd fabe 	bl	8003378 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d90a      	bls.n	8005e20 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0a:	4b3e      	ldr	r3, [pc, #248]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 020c 	and.w	r2, r3, #12
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e06a      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e20:	4b38      	ldr	r3, [pc, #224]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 020c 	and.w	r2, r3, #12
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d1e2      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b80      	cmp	r3, #128	; 0x80
 8005e36:	d105      	bne.n	8005e44 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4a31      	ldr	r2, [pc, #196]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e42:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d010      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d208      	bcs.n	8005e72 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e60:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	4925      	ldr	r1, [pc, #148]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e72:	4b23      	ldr	r3, [pc, #140]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d210      	bcs.n	8005ea2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e80:	4b1f      	ldr	r3, [pc, #124]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f023 020f 	bic.w	r2, r3, #15
 8005e88:	491d      	ldr	r1, [pc, #116]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <HAL_RCC_ClockConfig+0x25c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d001      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e029      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	4912      	ldr	r1, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d009      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	490a      	ldr	r1, [pc, #40]	; (8005f04 <HAL_RCC_ClockConfig+0x260>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ee0:	f000 f8b6 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x268>)
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_ClockConfig+0x26c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd f9f2 	bl	80032d8 <HAL_InitTick>
 8005ef4:	4603      	mov	r3, r0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40022000 	.word	0x40022000
 8005f04:	40021000 	.word	0x40021000
 8005f08:	04c4b400 	.word	0x04c4b400
 8005f0c:	20000004 	.word	0x20000004
 8005f10:	20000008 	.word	0x20000008

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b089      	sub	sp, #36	; 0x24
 8005f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f22:	4b47      	ldr	r3, [pc, #284]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f2c:	4b44      	ldr	r3, [pc, #272]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x34>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b0c      	cmp	r3, #12
 8005f40:	d121      	bne.n	8005f86 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d11e      	bne.n	8005f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f48:	4b3d      	ldr	r3, [pc, #244]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d107      	bne.n	8005f64 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f54:	4b3a      	ldr	r3, [pc, #232]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	e005      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005f70:	4a34      	ldr	r2, [pc, #208]	; (8006044 <HAL_RCC_GetSysClockFreq+0x130>)
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f78:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10d      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d102      	bne.n	8005f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	e004      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f98:	4b2c      	ldr	r3, [pc, #176]	; (800604c <HAL_RCC_GetSysClockFreq+0x138>)
 8005f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d146      	bne.n	8006030 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005fa2:	4b27      	ldr	r3, [pc, #156]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fac:	4b24      	ldr	r3, [pc, #144]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d003      	beq.n	8005fc8 <HAL_RCC_GetSysClockFreq+0xb4>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d00d      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0xce>
 8005fc6:	e019      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <HAL_RCC_GetSysClockFreq+0x134>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005fd2:	68d2      	ldr	r2, [r2, #12]
 8005fd4:	0a12      	lsrs	r2, r2, #8
 8005fd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
 8005fde:	617b      	str	r3, [r7, #20]
        break;
 8005fe0:	e019      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_RCC_GetSysClockFreq+0x138>)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fea:	4a15      	ldr	r2, [pc, #84]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005fec:	68d2      	ldr	r2, [r2, #12]
 8005fee:	0a12      	lsrs	r2, r2, #8
 8005ff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ff4:	fb02 f303 	mul.w	r3, r2, r3
 8005ff8:	617b      	str	r3, [r7, #20]
        break;
 8005ffa:	e00c      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006006:	68d2      	ldr	r2, [r2, #12]
 8006008:	0a12      	lsrs	r2, r2, #8
 800600a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	617b      	str	r3, [r7, #20]
        break;
 8006014:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	0e5b      	lsrs	r3, r3, #25
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	3301      	adds	r3, #1
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	fbb2 f3f3 	udiv	r3, r2, r3
 800602e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006030:	69bb      	ldr	r3, [r7, #24]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	; 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000
 8006044:	0800a2a4 	.word	0x0800a2a4
 8006048:	00f42400 	.word	0x00f42400
 800604c:	007a1200 	.word	0x007a1200

08006050 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8006054:	f7ff ff5e 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8006058:	4602      	mov	r2, r0
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_RCC_GetHCLKFreq+0x20>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	4903      	ldr	r1, [pc, #12]	; (8006074 <HAL_RCC_GetHCLKFreq+0x24>)
 8006066:	5ccb      	ldrb	r3, [r1, r3]
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40021000 	.word	0x40021000
 8006074:	0800a28c 	.word	0x0800a28c

08006078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800607c:	f7ff ffe8 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4903      	ldr	r1, [pc, #12]	; (800609c <HAL_RCC_GetPCLK1Freq+0x24>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40021000 	.word	0x40021000
 800609c:	0800a29c 	.word	0x0800a29c

080060a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060a4:	f7ff ffd4 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0adb      	lsrs	r3, r3, #11
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	0800a29c 	.word	0x0800a29c

080060c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060d4:	4b2c      	ldr	r3, [pc, #176]	; (8006188 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060e0:	f7ff f86c 	bl	80051bc <HAL_PWREx_GetVoltageRange>
 80060e4:	6138      	str	r0, [r7, #16]
 80060e6:	e014      	b.n	8006112 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e8:	4b27      	ldr	r3, [pc, #156]	; (8006188 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	4a26      	ldr	r2, [pc, #152]	; (8006188 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6593      	str	r3, [r2, #88]	; 0x58
 80060f4:	4b24      	ldr	r3, [pc, #144]	; (8006188 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006100:	f7ff f85c 	bl	80051bc <HAL_PWREx_GetVoltageRange>
 8006104:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006106:	4b20      	ldr	r3, [pc, #128]	; (8006188 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800610c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006110:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611e:	d10b      	bne.n	8006138 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d919      	bls.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2ba0      	cmp	r3, #160	; 0xa0
 800612a:	d902      	bls.n	8006132 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800612c:	2302      	movs	r3, #2
 800612e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006130:	e013      	b.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006132:	2301      	movs	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006136:	e010      	b.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b80      	cmp	r3, #128	; 0x80
 800613c:	d902      	bls.n	8006144 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800613e:	2303      	movs	r3, #3
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	e00a      	b.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d102      	bne.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800614a:	2302      	movs	r3, #2
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	e004      	b.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b70      	cmp	r3, #112	; 0x70
 8006154:	d101      	bne.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006156:	2301      	movs	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 020f 	bic.w	r2, r3, #15
 8006162:	490a      	ldr	r1, [pc, #40]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800616a:	4b08      	ldr	r3, [pc, #32]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40021000 	.word	0x40021000
 800618c:	40022000 	.word	0x40022000

08006190 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006196:	4b31      	ldr	r3, [pc, #196]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061a0:	4b2e      	ldr	r3, [pc, #184]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	3301      	adds	r3, #1
 80061ac:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d015      	beq.n	80061e0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d839      	bhi.n	800622e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d01c      	beq.n	80061fa <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d133      	bne.n	800622e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c6:	4a26      	ldr	r2, [pc, #152]	; (8006260 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	4a23      	ldr	r2, [pc, #140]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061d0:	68d2      	ldr	r2, [r2, #12]
 80061d2:	0a12      	lsrs	r2, r2, #8
 80061d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	613b      	str	r3, [r7, #16]
      break;
 80061de:	e029      	b.n	8006234 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e0:	4a20      	ldr	r2, [pc, #128]	; (8006264 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	4a1c      	ldr	r2, [pc, #112]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061ea:	68d2      	ldr	r2, [r2, #12]
 80061ec:	0a12      	lsrs	r2, r2, #8
 80061ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	613b      	str	r3, [r7, #16]
      break;
 80061f8:	e01c      	b.n	8006234 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d107      	bne.n	8006216 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006206:	4b15      	ldr	r3, [pc, #84]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	e005      	b.n	8006222 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	091b      	lsrs	r3, r3, #4
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8006222:	4a11      	ldr	r2, [pc, #68]	; (8006268 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622a:	613b      	str	r3, [r7, #16]
        break;
 800622c:	e002      	b.n	8006234 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
      break;
 8006232:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	0e5b      	lsrs	r3, r3, #25
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	3301      	adds	r3, #1
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	fbb2 f3f3 	udiv	r3, r2, r3
 800624c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800624e:	683b      	ldr	r3, [r7, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	40021000 	.word	0x40021000
 8006260:	00f42400 	.word	0x00f42400
 8006264:	007a1200 	.word	0x007a1200
 8006268:	0800a2a4 	.word	0x0800a2a4

0800626c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006274:	2300      	movs	r3, #0
 8006276:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006278:	2300      	movs	r3, #0
 800627a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	2b00      	cmp	r3, #0
 8006286:	d040      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628c:	2b80      	cmp	r3, #128	; 0x80
 800628e:	d02a      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006290:	2b80      	cmp	r3, #128	; 0x80
 8006292:	d825      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006294:	2b60      	cmp	r3, #96	; 0x60
 8006296:	d026      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006298:	2b60      	cmp	r3, #96	; 0x60
 800629a:	d821      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d006      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d81d      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d010      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 80062ac:	e018      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062ae:	4b8f      	ldr	r3, [pc, #572]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4a8e      	ldr	r2, [pc, #568]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062ba:	e015      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fb56 	bl	8006974 <RCCEx_PLLSAI1_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062cc:	e00c      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3320      	adds	r3, #32
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fc33 	bl	8006b40 <RCCEx_PLLSAI2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062de:	e003      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	77fb      	strb	r3, [r7, #31]
        break;
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80062e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e8:	7ffb      	ldrb	r3, [r7, #31]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062ee:	4b7f      	ldr	r3, [pc, #508]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062f4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fc:	497b      	ldr	r1, [pc, #492]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006304:	e001      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	7ffb      	ldrb	r3, [r7, #31]
 8006308:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d047      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631e:	d030      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006324:	d82a      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800632a:	d02a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800632c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006330:	d824      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006336:	d008      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633c:	d81e      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006346:	d010      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006348:	e018      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800634a:	4b68      	ldr	r3, [pc, #416]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	4a67      	ldr	r2, [pc, #412]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006354:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006356:	e015      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fb08 	bl	8006974 <RCCEx_PLLSAI1_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006368:	e00c      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3320      	adds	r3, #32
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fbe5 	bl	8006b40 <RCCEx_PLLSAI2_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800637a:	e003      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	77fb      	strb	r3, [r7, #31]
        break;
 8006380:	e000      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8006382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006384:	7ffb      	ldrb	r3, [r7, #31]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800638a:	4b58      	ldr	r3, [pc, #352]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800638c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006398:	4954      	ldr	r1, [pc, #336]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80063a0:	e001      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	7ffb      	ldrb	r3, [r7, #31]
 80063a4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80ab 	beq.w	800650a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063b4:	2300      	movs	r3, #0
 80063b6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063b8:	4b4c      	ldr	r3, [pc, #304]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10d      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063c4:	4b49      	ldr	r3, [pc, #292]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c8:	4a48      	ldr	r2, [pc, #288]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ce:	6593      	str	r3, [r2, #88]	; 0x58
 80063d0:	4b46      	ldr	r3, [pc, #280]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063e0:	4b43      	ldr	r3, [pc, #268]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a42      	ldr	r2, [pc, #264]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ec:	f7fc ffc4 	bl	8003378 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063f2:	e00f      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f4:	f7fc ffc0 	bl	8003378 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d908      	bls.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006402:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8006412:	e006      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006414:	4b36      	ldr	r3, [pc, #216]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0e9      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006420:	e000      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8006422:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006424:	7ffb      	ldrb	r3, [r7, #31]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d164      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800642a:	4b30      	ldr	r3, [pc, #192]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006434:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01f      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	d019      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006452:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006454:	4b25      	ldr	r3, [pc, #148]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	4a24      	ldr	r2, [pc, #144]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800645c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006464:	4b21      	ldr	r3, [pc, #132]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	4a20      	ldr	r2, [pc, #128]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800646c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006474:	4a1d      	ldr	r2, [pc, #116]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01f      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fc ff77 	bl	8003378 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800648c:	e012      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648e:	f7fc ff73 	bl	8003378 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	f241 3288 	movw	r2, #5000	; 0x1388
 800649c:	4293      	cmp	r3, r2
 800649e:	d909      	bls.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80064b2:	e007      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0e5      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80064c4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80064c6:	7ffb      	ldrb	r3, [r7, #31]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064dc:	4903      	ldr	r1, [pc, #12]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064e4:	e008      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
 80064e8:	77bb      	strb	r3, [r7, #30]
 80064ea:	e005      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d105      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064fe:	4b9c      	ldr	r3, [pc, #624]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006502:	4a9b      	ldr	r2, [pc, #620]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006508:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006516:	4b96      	ldr	r3, [pc, #600]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651c:	f023 0203 	bic.w	r2, r3, #3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	4992      	ldr	r1, [pc, #584]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006538:	4b8d      	ldr	r3, [pc, #564]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653e:	f023 020c 	bic.w	r2, r3, #12
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	498a      	ldr	r1, [pc, #552]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800655a:	4b85      	ldr	r3, [pc, #532]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006568:	4981      	ldr	r1, [pc, #516]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800657c:	4b7c      	ldr	r3, [pc, #496]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	4979      	ldr	r1, [pc, #484]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800659e:	4b74      	ldr	r3, [pc, #464]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	4970      	ldr	r1, [pc, #448]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065c0:	4b6b      	ldr	r3, [pc, #428]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	4968      	ldr	r1, [pc, #416]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065e2:	4b63      	ldr	r3, [pc, #396]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f0:	495f      	ldr	r1, [pc, #380]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006604:	4b5a      	ldr	r3, [pc, #360]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006612:	4957      	ldr	r1, [pc, #348]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006626:	4b52      	ldr	r3, [pc, #328]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006634:	494e      	ldr	r1, [pc, #312]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d031      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800664c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006650:	d00e      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006656:	d814      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d015      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800665c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006660:	d10f      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006662:	4b43      	ldr	r3, [pc, #268]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	4a42      	ldr	r2, [pc, #264]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800666c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800666e:	e00c      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3304      	adds	r3, #4
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f97c 	bl	8006974 <RCCEx_PLLSAI1_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	77fb      	strb	r3, [r7, #31]
        break;
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8006688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668a:	7ffb      	ldrb	r3, [r7, #31]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006690:	4b37      	ldr	r3, [pc, #220]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800669e:	4934      	ldr	r1, [pc, #208]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066a6:	e001      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	7ffb      	ldrb	r3, [r7, #31]
 80066aa:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066b8:	4b2d      	ldr	r3, [pc, #180]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c6:	492a      	ldr	r1, [pc, #168]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066da:	4b25      	ldr	r3, [pc, #148]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	4921      	ldr	r1, [pc, #132]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006702:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670a:	4919      	ldr	r1, [pc, #100]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800670c:	4313      	orrs	r3, r2
 800670e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006724:	f023 0203 	bic.w	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	4910      	ldr	r1, [pc, #64]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d02b      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674e:	4908      	ldr	r1, [pc, #32]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800675e:	d109      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006760:	4b03      	ldr	r3, [pc, #12]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4a02      	ldr	r2, [pc, #8]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800676a:	60d3      	str	r3, [r2, #12]
 800676c:	e014      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800677c:	d10c      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	2101      	movs	r1, #1
 8006784:	4618      	mov	r0, r3
 8006786:	f000 f8f5 	bl	8006974 <RCCEx_PLLSAI1_Config>
 800678a:	4603      	mov	r3, r0
 800678c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800678e:	7ffb      	ldrb	r3, [r7, #31]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8006794:	7ffb      	ldrb	r3, [r7, #31]
 8006796:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d04a      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ac:	d108      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80067ae:	4b70      	ldr	r3, [pc, #448]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067b4:	4a6e      	ldr	r2, [pc, #440]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80067be:	e012      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80067c0:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ce:	4968      	ldr	r1, [pc, #416]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80067d6:	4b66      	ldr	r3, [pc, #408]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067dc:	4a64      	ldr	r2, [pc, #400]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067ee:	d10d      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3304      	adds	r3, #4
 80067f4:	2101      	movs	r1, #1
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f8bc 	bl	8006974 <RCCEx_PLLSAI1_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006800:	7ffb      	ldrb	r3, [r7, #31]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d019      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8006806:	7ffb      	ldrb	r3, [r7, #31]
 8006808:	77bb      	strb	r3, [r7, #30]
 800680a:	e016      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006814:	d106      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006816:	4b56      	ldr	r3, [pc, #344]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	4a55      	ldr	r2, [pc, #340]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800681c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006820:	60d3      	str	r3, [r2, #12]
 8006822:	e00a      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800682c:	d105      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800682e:	4b50      	ldr	r3, [pc, #320]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	4a4f      	ldr	r2, [pc, #316]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006838:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d028      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006846:	4b4a      	ldr	r3, [pc, #296]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006854:	4946      	ldr	r1, [pc, #280]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006856:	4313      	orrs	r3, r2
 8006858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006864:	d106      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006866:	4b42      	ldr	r3, [pc, #264]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	4a41      	ldr	r2, [pc, #260]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800686c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006870:	60d3      	str	r3, [r2, #12]
 8006872:	e011      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800687c:	d10c      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	2101      	movs	r1, #1
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f875 	bl	8006974 <RCCEx_PLLSAI1_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800688e:	7ffb      	ldrb	r3, [r7, #31]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8006894:	7ffb      	ldrb	r3, [r7, #31]
 8006896:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01e      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068a4:	4b32      	ldr	r3, [pc, #200]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b4:	492e      	ldr	r1, [pc, #184]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068c6:	d10c      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	2102      	movs	r1, #2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f850 	bl	8006974 <RCCEx_PLLSAI1_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80068d8:	7ffb      	ldrb	r3, [r7, #31]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80068de:	7ffb      	ldrb	r3, [r7, #31]
 80068e0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00b      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068ee:	4b20      	ldr	r3, [pc, #128]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068f4:	f023 0204 	bic.w	r2, r3, #4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fe:	491c      	ldr	r1, [pc, #112]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006900:	4313      	orrs	r3, r2
 8006902:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006912:	4b17      	ldr	r3, [pc, #92]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006918:	f023 0218 	bic.w	r2, r3, #24
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	4913      	ldr	r1, [pc, #76]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006924:	4313      	orrs	r3, r2
 8006926:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d017      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800693c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006946:	490a      	ldr	r1, [pc, #40]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006958:	d105      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	4a04      	ldr	r2, [pc, #16]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006964:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006966:	7fbb      	ldrb	r3, [r7, #30]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40021000 	.word	0x40021000

08006974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d018      	beq.n	80069bc <RCCEx_PLLSAI1_Config+0x48>
 800698a:	2b03      	cmp	r3, #3
 800698c:	d81f      	bhi.n	80069ce <RCCEx_PLLSAI1_Config+0x5a>
 800698e:	2b01      	cmp	r3, #1
 8006990:	d002      	beq.n	8006998 <RCCEx_PLLSAI1_Config+0x24>
 8006992:	2b02      	cmp	r3, #2
 8006994:	d009      	beq.n	80069aa <RCCEx_PLLSAI1_Config+0x36>
 8006996:	e01a      	b.n	80069ce <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006998:	4b65      	ldr	r3, [pc, #404]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d117      	bne.n	80069d4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069a8:	e014      	b.n	80069d4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069aa:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d110      	bne.n	80069d8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ba:	e00d      	b.n	80069d8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80069bc:	4b5c      	ldr	r3, [pc, #368]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069cc:	e006      	b.n	80069dc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
      break;
 80069d2:	e004      	b.n	80069de <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80069d4:	bf00      	nop
 80069d6:	e002      	b.n	80069de <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80069d8:	bf00      	nop
 80069da:	e000      	b.n	80069de <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80069dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 809f 	bne.w	8006b24 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069e6:	4b52      	ldr	r3, [pc, #328]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a51      	ldr	r2, [pc, #324]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 80069ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f2:	f7fc fcc1 	bl	8003378 <HAL_GetTick>
 80069f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069f8:	e00f      	b.n	8006a1a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069fa:	f7fc fcbd 	bl	8003378 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d908      	bls.n	8006a1a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a08:	4b49      	ldr	r3, [pc, #292]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a18:	e006      	b.n	8006a28 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a1a:	4b45      	ldr	r3, [pc, #276]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e9      	bne.n	80069fa <RCCEx_PLLSAI1_Config+0x86>
 8006a26:	e000      	b.n	8006a2a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006a28:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d179      	bne.n	8006b24 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d116      	bne.n	8006a64 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	4b3e      	ldr	r3, [pc, #248]	; (8006b34 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6892      	ldr	r2, [r2, #8]
 8006a42:	0211      	lsls	r1, r2, #8
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68d2      	ldr	r2, [r2, #12]
 8006a48:	06d2      	lsls	r2, r2, #27
 8006a4a:	4311      	orrs	r1, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6852      	ldr	r2, [r2, #4]
 8006a50:	3a01      	subs	r2, #1
 8006a52:	0112      	lsls	r2, r2, #4
 8006a54:	4311      	orrs	r1, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	4934      	ldr	r1, [pc, #208]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	610b      	str	r3, [r1, #16]
 8006a62:	e033      	b.n	8006acc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d118      	bne.n	8006a9c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a6a:	4b31      	ldr	r3, [pc, #196]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	4b32      	ldr	r3, [pc, #200]	; (8006b38 <RCCEx_PLLSAI1_Config+0x1c4>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6892      	ldr	r2, [r2, #8]
 8006a76:	0211      	lsls	r1, r2, #8
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6912      	ldr	r2, [r2, #16]
 8006a7c:	0852      	lsrs	r2, r2, #1
 8006a7e:	3a01      	subs	r2, #1
 8006a80:	0552      	lsls	r2, r2, #21
 8006a82:	4311      	orrs	r1, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6852      	ldr	r2, [r2, #4]
 8006a88:	3a01      	subs	r2, #1
 8006a8a:	0112      	lsls	r2, r2, #4
 8006a8c:	4311      	orrs	r1, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	4926      	ldr	r1, [pc, #152]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	610b      	str	r3, [r1, #16]
 8006a9a:	e017      	b.n	8006acc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a9c:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <RCCEx_PLLSAI1_Config+0x1c8>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6892      	ldr	r2, [r2, #8]
 8006aa8:	0211      	lsls	r1, r2, #8
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6952      	ldr	r2, [r2, #20]
 8006aae:	0852      	lsrs	r2, r2, #1
 8006ab0:	3a01      	subs	r2, #1
 8006ab2:	0652      	lsls	r2, r2, #25
 8006ab4:	4311      	orrs	r1, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6852      	ldr	r2, [r2, #4]
 8006aba:	3a01      	subs	r2, #1
 8006abc:	0112      	lsls	r2, r2, #4
 8006abe:	4311      	orrs	r1, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	491a      	ldr	r1, [pc, #104]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006acc:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a17      	ldr	r2, [pc, #92]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fc fc4e 	bl	8003378 <HAL_GetTick>
 8006adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ade:	e00f      	b.n	8006b00 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ae0:	f7fc fc4a 	bl	8003378 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d908      	bls.n	8006b00 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006afe:	e006      	b.n	8006b0e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0e9      	beq.n	8006ae0 <RCCEx_PLLSAI1_Config+0x16c>
 8006b0c:	e000      	b.n	8006b10 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006b0e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	4904      	ldr	r1, [pc, #16]	; (8006b30 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40021000 	.word	0x40021000
 8006b34:	07ff800c 	.word	0x07ff800c
 8006b38:	ff9f800c 	.word	0xff9f800c
 8006b3c:	f9ff800c 	.word	0xf9ff800c

08006b40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d018      	beq.n	8006b88 <RCCEx_PLLSAI2_Config+0x48>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d81f      	bhi.n	8006b9a <RCCEx_PLLSAI2_Config+0x5a>
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d002      	beq.n	8006b64 <RCCEx_PLLSAI2_Config+0x24>
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d009      	beq.n	8006b76 <RCCEx_PLLSAI2_Config+0x36>
 8006b62:	e01a      	b.n	8006b9a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b64:	4b4a      	ldr	r3, [pc, #296]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d117      	bne.n	8006ba0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b74:	e014      	b.n	8006ba0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b76:	4b46      	ldr	r3, [pc, #280]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d110      	bne.n	8006ba4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b86:	e00d      	b.n	8006ba4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006b88:	4b41      	ldr	r3, [pc, #260]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b98:	e006      	b.n	8006ba8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9e:	e004      	b.n	8006baa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e002      	b.n	8006baa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006ba4:	bf00      	nop
 8006ba6:	e000      	b.n	8006baa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006ba8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d169      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bb0:	4b37      	ldr	r3, [pc, #220]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a36      	ldr	r2, [pc, #216]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bbc:	f7fc fbdc 	bl	8003378 <HAL_GetTick>
 8006bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bc2:	e00f      	b.n	8006be4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bc4:	f7fc fbd8 	bl	8003378 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d908      	bls.n	8006be4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bd2:	4b2f      	ldr	r3, [pc, #188]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006be2:	e006      	b.n	8006bf2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006be4:	4b2a      	ldr	r3, [pc, #168]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e9      	bne.n	8006bc4 <RCCEx_PLLSAI2_Config+0x84>
 8006bf0:	e000      	b.n	8006bf4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006bf2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d144      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d115      	bne.n	8006c2c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c00:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c02:	695a      	ldr	r2, [r3, #20]
 8006c04:	4b23      	ldr	r3, [pc, #140]	; (8006c94 <RCCEx_PLLSAI2_Config+0x154>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6892      	ldr	r2, [r2, #8]
 8006c0c:	0211      	lsls	r1, r2, #8
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68d2      	ldr	r2, [r2, #12]
 8006c12:	06d2      	lsls	r2, r2, #27
 8006c14:	4311      	orrs	r1, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6852      	ldr	r2, [r2, #4]
 8006c1a:	3a01      	subs	r2, #1
 8006c1c:	0112      	lsls	r2, r2, #4
 8006c1e:	4311      	orrs	r1, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6812      	ldr	r2, [r2, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	491a      	ldr	r1, [pc, #104]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c2c:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c38:	f7fc fb9e 	bl	8003378 <HAL_GetTick>
 8006c3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c3e:	e00f      	b.n	8006c60 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c40:	f7fc fb9a 	bl	8003378 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d908      	bls.n	8006c60 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006c5e:	e006      	b.n	8006c6e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0e9      	beq.n	8006c40 <RCCEx_PLLSAI2_Config+0x100>
 8006c6c:	e000      	b.n	8006c70 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8006c6e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	4904      	ldr	r1, [pc, #16]	; (8006c90 <RCCEx_PLLSAI2_Config+0x150>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000
 8006c94:	07ff800c 	.word	0x07ff800c

08006c98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d066      	beq.n	8006d78 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fb fd6e 	bl	80027a0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 0310 	and.w	r3, r3, #16
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d045      	beq.n	8006d66 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cda:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006cdc:	22ca      	movs	r2, #202	; 0xca
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24
 8006ce0:	4b28      	ldr	r3, [pc, #160]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006ce2:	2253      	movs	r2, #83	; 0x53
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f872 	bl	8006dd0 <RTC_EnterInitMode>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d121      	bne.n	8006d3a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006cf6:	4b23      	ldr	r3, [pc, #140]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	4a22      	ldr	r2, [pc, #136]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006cfc:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d04:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006d06:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6859      	ldr	r1, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	4319      	orrs	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	491a      	ldr	r1, [pc, #104]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	4916      	ldr	r1, [pc, #88]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f881 	bl	8006e38 <RTC_ExitInitMode>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10e      	bne.n	8006d5e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8006d40:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a19      	ldr	r1, [r3, #32]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	4319      	orrs	r1, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	430b      	orrs	r3, r1
 8006d58:	490a      	ldr	r1, [pc, #40]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RTC_Init+0xec>)
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
 8006d64:	e001      	b.n	8006d6a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40002800 	.word	0x40002800

08006d88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006d90:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <HAL_RTC_WaitForSynchro+0x40>)
 8006d92:	4a0e      	ldr	r2, [pc, #56]	; (8006dcc <HAL_RTC_WaitForSynchro+0x44>)
 8006d94:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006d96:	f7fc faef 	bl	8003378 <HAL_GetTick>
 8006d9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006d9c:	e009      	b.n	8006db2 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d9e:	f7fc faeb 	bl	8003378 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dac:	d901      	bls.n	8006db2 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e006      	b.n	8006dc0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <HAL_RTC_WaitForSynchro+0x40>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0ef      	beq.n	8006d9e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40002800 	.word	0x40002800
 8006dcc:	0001005c 	.word	0x0001005c

08006dd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ddc:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <RTC_EnterInitMode+0x64>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d120      	bne.n	8006e2a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006de8:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <RTC_EnterInitMode+0x64>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4a11      	ldr	r2, [pc, #68]	; (8006e34 <RTC_EnterInitMode+0x64>)
 8006dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006df4:	f7fc fac0 	bl	8003378 <HAL_GetTick>
 8006df8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006dfa:	e00d      	b.n	8006e18 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006dfc:	f7fc fabc 	bl	8003378 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e0a:	d905      	bls.n	8006e18 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2203      	movs	r2, #3
 8006e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <RTC_EnterInitMode+0x64>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <RTC_EnterInitMode+0x5a>
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d1e8      	bne.n	8006dfc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40002800 	.word	0x40002800

08006e38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e44:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <RTC_ExitInitMode+0x78>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	4a19      	ldr	r2, [pc, #100]	; (8006eb0 <RTC_ExitInitMode+0x78>)
 8006e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e50:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <RTC_ExitInitMode+0x78>)
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10c      	bne.n	8006e76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ff93 	bl	8006d88 <HAL_RTC_WaitForSynchro>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01e      	beq.n	8006ea6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e017      	b.n	8006ea6 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <RTC_ExitInitMode+0x78>)
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <RTC_ExitInitMode+0x78>)
 8006e7c:	f023 0320 	bic.w	r3, r3, #32
 8006e80:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff ff80 	bl	8006d88 <HAL_RTC_WaitForSynchro>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2203      	movs	r2, #3
 8006e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <RTC_ExitInitMode+0x78>)
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <RTC_ExitInitMode+0x78>)
 8006ea0:	f043 0320 	orr.w	r3, r3, #32
 8006ea4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40002800 	.word	0x40002800

08006eb4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	490f      	ldr	r1, [pc, #60]	; (8006f04 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	490c      	ldr	r1, [pc, #48]	; (8006f08 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6919      	ldr	r1, [r3, #16]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	430b      	orrs	r3, r1
 8006eee:	4906      	ldr	r1, [pc, #24]	; (8006f08 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40002800 	.word	0x40002800
 8006f08:	40003400 	.word	0x40003400

08006f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e042      	b.n	8006fa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7fb ff63 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2224      	movs	r2, #36	; 0x24
 8006f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0201 	bic.w	r2, r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fd5e 	bl	8007a10 <UART_SetConfig>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e022      	b.n	8006fa4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f852 	bl	8008010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 f8d9 	bl	8008154 <UART_CheckIdleState>
 8006fa2:	4603      	mov	r3, r0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d17b      	bne.n	80070be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_UART_Transmit+0x26>
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e074      	b.n	80070c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2221      	movs	r2, #33	; 0x21
 8006fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fe6:	f7fc f9c7 	bl	8003378 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007004:	d108      	bne.n	8007018 <HAL_UART_Transmit+0x6c>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e003      	b.n	8007020 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007020:	e030      	b.n	8007084 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f001 f93b 	bl	80082a8 <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e03d      	b.n	80070c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10b      	bne.n	8007062 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	3302      	adds	r3, #2
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e007      	b.n	8007072 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	3301      	adds	r3, #1
 8007070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1c8      	bne.n	8007022 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2200      	movs	r2, #0
 8007098:	2140      	movs	r1, #64	; 0x40
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f001 f904 	bl	80082a8 <UART_WaitOnFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e006      	b.n	80070c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e000      	b.n	80070c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070be:	2302      	movs	r3, #2
  }
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d167      	bne.n	80071b0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_UART_Transmit_DMA+0x24>
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e060      	b.n	80071b2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	88fa      	ldrh	r2, [r7, #6]
 8007102:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2221      	movs	r2, #33	; 0x21
 8007112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d028      	beq.n	8007170 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007122:	4a26      	ldr	r2, [pc, #152]	; (80071bc <HAL_UART_Transmit_DMA+0xf4>)
 8007124:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712a:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <HAL_UART_Transmit_DMA+0xf8>)
 800712c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007132:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <HAL_UART_Transmit_DMA+0xfc>)
 8007134:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713a:	2200      	movs	r2, #0
 800713c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007146:	4619      	mov	r1, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3328      	adds	r3, #40	; 0x28
 800714e:	461a      	mov	r2, r3
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	f7fd fa75 	bl	8004640 <HAL_DMA_Start_IT>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2210      	movs	r2, #16
 8007160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2220      	movs	r2, #32
 8007168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e020      	b.n	80071b2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2240      	movs	r2, #64	; 0x40
 8007176:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	613b      	str	r3, [r7, #16]
   return(result);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	623a      	str	r2, [r7, #32]
 800719a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	69f9      	ldr	r1, [r7, #28]
 800719e:	6a3a      	ldr	r2, [r7, #32]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3728      	adds	r7, #40	; 0x28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	08008613 	.word	0x08008613
 80071c0:	080086ad 	.word	0x080086ad
 80071c4:	08008833 	.word	0x08008833

080071c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d137      	bne.n	8007250 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <HAL_UART_Receive_DMA+0x24>
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e030      	b.n	8007252 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a18      	ldr	r2, [pc, #96]	; (800725c <HAL_UART_Receive_DMA+0x94>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d01f      	beq.n	8007240 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d018      	beq.n	8007240 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	613b      	str	r3, [r7, #16]
   return(result);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	623b      	str	r3, [r7, #32]
 800722e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	69f9      	ldr	r1, [r7, #28]
 8007232:	6a3a      	ldr	r2, [r7, #32]
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	61bb      	str	r3, [r7, #24]
   return(result);
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e6      	bne.n	800720e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	461a      	mov	r2, r3
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f001 f896 	bl	8008378 <UART_Start_Receive_DMA>
 800724c:	4603      	mov	r3, r0
 800724e:	e000      	b.n	8007252 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007250:	2302      	movs	r3, #2
  }
}
 8007252:	4618      	mov	r0, r3
 8007254:	3728      	adds	r7, #40	; 0x28
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40008000 	.word	0x40008000

08007260 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b090      	sub	sp, #64	; 0x40
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d139      	bne.n	80072fa <HAL_UART_DMAStop+0x9a>
 8007286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007288:	2b21      	cmp	r3, #33	; 0x21
 800728a:	d136      	bne.n	80072fa <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	61fb      	str	r3, [r7, #28]
   return(result);
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3308      	adds	r3, #8
 80072aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e5      	bne.n	800728c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d015      	beq.n	80072f4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fd fa32 	bl	8004736 <HAL_DMA_Abort>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fd fbe5 	bl	8004aac <HAL_DMA_GetError>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d105      	bne.n	80072f4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2210      	movs	r2, #16
 80072ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e047      	b.n	8007384 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f8e5 	bl	80084c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d13c      	bne.n	8007382 <HAL_UART_DMAStop+0x122>
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	2b22      	cmp	r3, #34	; 0x22
 800730c:	d139      	bne.n	8007382 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	60bb      	str	r3, [r7, #8]
   return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007324:	633b      	str	r3, [r7, #48]	; 0x30
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732e:	61ba      	str	r2, [r7, #24]
 8007330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6979      	ldr	r1, [r7, #20]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	613b      	str	r3, [r7, #16]
   return(result);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007348:	2b00      	cmp	r3, #0
 800734a:	d017      	beq.n	800737c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd f9ef 	bl	8004736 <HAL_DMA_Abort>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007364:	4618      	mov	r0, r3
 8007366:	f7fd fba1 	bl	8004aac <HAL_DMA_GetError>
 800736a:	4603      	mov	r3, r0
 800736c:	2b20      	cmp	r3, #32
 800736e:	d105      	bne.n	800737c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2210      	movs	r2, #16
 8007374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e003      	b.n	8007384 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f8e2 	bl	8008546 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3740      	adds	r7, #64	; 0x40
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b0ba      	sub	sp, #232	; 0xe8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80073ba:	4013      	ands	r3, r2
 80073bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d11b      	bne.n	8007400 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d015      	beq.n	8007400 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 82e3 	beq.w	80079bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
      }
      return;
 80073fe:	e2dd      	b.n	80079bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8123 	beq.w	8007650 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800740a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800740e:	4b8d      	ldr	r3, [pc, #564]	; (8007644 <HAL_UART_IRQHandler+0x2b8>)
 8007410:	4013      	ands	r3, r2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007416:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800741a:	4b8b      	ldr	r3, [pc, #556]	; (8007648 <HAL_UART_IRQHandler+0x2bc>)
 800741c:	4013      	ands	r3, r2
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 8116 	beq.w	8007650 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d011      	beq.n	8007454 <HAL_UART_IRQHandler+0xc8>
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2201      	movs	r2, #1
 8007442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	f043 0201 	orr.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d011      	beq.n	8007484 <HAL_UART_IRQHandler+0xf8>
 8007460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2202      	movs	r2, #2
 8007472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747a:	f043 0204 	orr.w	r2, r3, #4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <HAL_UART_IRQHandler+0x128>
 8007490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00b      	beq.n	80074b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2204      	movs	r2, #4
 80074a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	f043 0202 	orr.w	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074d0:	4b5c      	ldr	r3, [pc, #368]	; (8007644 <HAL_UART_IRQHandler+0x2b8>)
 80074d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2208      	movs	r2, #8
 80074de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f043 0208 	orr.w	r2, r3, #8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <HAL_UART_IRQHandler+0x196>
 80074fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00c      	beq.n	8007522 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007518:	f043 0220 	orr.w	r2, r3, #32
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8249 	beq.w	80079c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d013      	beq.n	8007562 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	d005      	beq.n	8007586 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800757a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800757e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007582:	2b00      	cmp	r3, #0
 8007584:	d054      	beq.n	8007630 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 ffdd 	bl	8008546 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d146      	bne.n	8007628 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d9      	bne.n	800759a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d017      	beq.n	8007620 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f6:	4a15      	ldr	r2, [pc, #84]	; (800764c <HAL_UART_IRQHandler+0x2c0>)
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd f8f4 	bl	80047ee <HAL_DMA_Abort_IT>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d019      	beq.n	8007640 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800761a:	4610      	mov	r0, r2
 800761c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761e:	e00f      	b.n	8007640 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7f9 f86f 	bl	8000704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007626:	e00b      	b.n	8007640 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7f9 f86b 	bl	8000704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762e:	e007      	b.n	8007640 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7f9 f867 	bl	8000704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800763e:	e1bf      	b.n	80079c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	bf00      	nop
    return;
 8007642:	e1bd      	b.n	80079c0 <HAL_UART_IRQHandler+0x634>
 8007644:	10000001 	.word	0x10000001
 8007648:	04000120 	.word	0x04000120
 800764c:	080088b3 	.word	0x080088b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007654:	2b01      	cmp	r3, #1
 8007656:	f040 8153 	bne.w	8007900 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800765a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765e:	f003 0310 	and.w	r3, r3, #16
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 814c 	beq.w	8007900 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8145 	beq.w	8007900 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2210      	movs	r2, #16
 800767c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	f040 80bb 	bne.w	8007804 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800769c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 818f 	beq.w	80079c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076b0:	429a      	cmp	r2, r3
 80076b2:	f080 8187 	bcs.w	80079c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 8087 	bne.w	80077e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007702:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800770a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1da      	bne.n	80076d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800772e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007730:	f023 0301 	bic.w	r3, r3, #1
 8007734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3308      	adds	r3, #8
 800773e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007742:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007746:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800774a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e1      	bne.n	800771e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800776a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800776c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800777e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007780:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800778c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e3      	bne.n	800775a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b0:	f023 0310 	bic.w	r3, r3, #16
 80077b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80077c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e4      	bne.n	80077a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fc ffaa 	bl	8004736 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2202      	movs	r2, #2
 80077e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7f8 fee9 	bl	80005d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007802:	e0df      	b.n	80079c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007810:	b29b      	uxth	r3, r3
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80d1 	beq.w	80079c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 80cc 	beq.w	80079c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007852:	647b      	str	r3, [r7, #68]	; 0x44
 8007854:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e4      	bne.n	8007830 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	623b      	str	r3, [r7, #32]
   return(result);
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800788e:	633a      	str	r2, [r7, #48]	; 0x30
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e1      	bne.n	8007866 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0310 	bic.w	r3, r3, #16
 80078ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	69b9      	ldr	r1, [r7, #24]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	617b      	str	r3, [r7, #20]
   return(result);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e4      	bne.n	80078b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7f8 fe6b 	bl	80005d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078fe:	e063      	b.n	80079c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00e      	beq.n	800792a <HAL_UART_IRQHandler+0x59e>
 800790c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 f806 	bl	8008934 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007928:	e051      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800792a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007932:	2b00      	cmp	r3, #0
 8007934:	d014      	beq.n	8007960 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007952:	2b00      	cmp	r3, #0
 8007954:	d03a      	beq.n	80079cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
    }
    return;
 800795e:	e035      	b.n	80079cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <HAL_UART_IRQHandler+0x5f4>
 800796c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 ffb0 	bl	80088de <UART_EndTransmit_IT>
    return;
 800797e:	e026      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <HAL_UART_IRQHandler+0x614>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 ffdf 	bl	800895c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800799e:	e016      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d010      	beq.n	80079ce <HAL_UART_IRQHandler+0x642>
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	da0c      	bge.n	80079ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 ffc7 	bl	8008948 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ba:	e008      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
      return;
 80079bc:	bf00      	nop
 80079be:	e006      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
    return;
 80079c0:	bf00      	nop
 80079c2:	e004      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
      return;
 80079c4:	bf00      	nop
 80079c6:	e002      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
      return;
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <HAL_UART_IRQHandler+0x642>
    return;
 80079cc:	bf00      	nop
  }
}
 80079ce:	37e8      	adds	r7, #232	; 0xe8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a14:	b08c      	sub	sp, #48	; 0x30
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4baa      	ldr	r3, [pc, #680]	; (8007ce8 <UART_SetConfig+0x2d8>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a9f      	ldr	r2, [pc, #636]	; (8007cec <UART_SetConfig+0x2dc>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d004      	beq.n	8007a7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	f023 010f 	bic.w	r1, r3, #15
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a90      	ldr	r2, [pc, #576]	; (8007cf0 <UART_SetConfig+0x2e0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d125      	bne.n	8007b00 <UART_SetConfig+0xf0>
 8007ab4:	4b8f      	ldr	r3, [pc, #572]	; (8007cf4 <UART_SetConfig+0x2e4>)
 8007ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aba:	f003 0303 	and.w	r3, r3, #3
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d81a      	bhi.n	8007af8 <UART_SetConfig+0xe8>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <UART_SetConfig+0xb8>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007af1 	.word	0x08007af1
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ade:	e116      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae6:	e112      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aee:	e10e      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007af0:	2308      	movs	r3, #8
 8007af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af6:	e10a      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afe:	e106      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a7c      	ldr	r2, [pc, #496]	; (8007cf8 <UART_SetConfig+0x2e8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d138      	bne.n	8007b7c <UART_SetConfig+0x16c>
 8007b0a:	4b7a      	ldr	r3, [pc, #488]	; (8007cf4 <UART_SetConfig+0x2e4>)
 8007b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b10:	f003 030c 	and.w	r3, r3, #12
 8007b14:	2b0c      	cmp	r3, #12
 8007b16:	d82d      	bhi.n	8007b74 <UART_SetConfig+0x164>
 8007b18:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <UART_SetConfig+0x110>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b55 	.word	0x08007b55
 8007b24:	08007b75 	.word	0x08007b75
 8007b28:	08007b75 	.word	0x08007b75
 8007b2c:	08007b75 	.word	0x08007b75
 8007b30:	08007b65 	.word	0x08007b65
 8007b34:	08007b75 	.word	0x08007b75
 8007b38:	08007b75 	.word	0x08007b75
 8007b3c:	08007b75 	.word	0x08007b75
 8007b40:	08007b5d 	.word	0x08007b5d
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	08007b75 	.word	0x08007b75
 8007b50:	08007b6d 	.word	0x08007b6d
 8007b54:	2300      	movs	r3, #0
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5a:	e0d8      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b62:	e0d4      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007b64:	2304      	movs	r3, #4
 8007b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6a:	e0d0      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007b6c:	2308      	movs	r3, #8
 8007b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b72:	e0cc      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007b74:	2310      	movs	r3, #16
 8007b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7a:	e0c8      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5e      	ldr	r2, [pc, #376]	; (8007cfc <UART_SetConfig+0x2ec>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d125      	bne.n	8007bd2 <UART_SetConfig+0x1c2>
 8007b86:	4b5b      	ldr	r3, [pc, #364]	; (8007cf4 <UART_SetConfig+0x2e4>)
 8007b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b90:	2b30      	cmp	r3, #48	; 0x30
 8007b92:	d016      	beq.n	8007bc2 <UART_SetConfig+0x1b2>
 8007b94:	2b30      	cmp	r3, #48	; 0x30
 8007b96:	d818      	bhi.n	8007bca <UART_SetConfig+0x1ba>
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d00a      	beq.n	8007bb2 <UART_SetConfig+0x1a2>
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d814      	bhi.n	8007bca <UART_SetConfig+0x1ba>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <UART_SetConfig+0x19a>
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d008      	beq.n	8007bba <UART_SetConfig+0x1aa>
 8007ba8:	e00f      	b.n	8007bca <UART_SetConfig+0x1ba>
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb0:	e0ad      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb8:	e0a9      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007bba:	2304      	movs	r3, #4
 8007bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc0:	e0a5      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007bc2:	2308      	movs	r3, #8
 8007bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc8:	e0a1      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007bca:	2310      	movs	r3, #16
 8007bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd0:	e09d      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a4a      	ldr	r2, [pc, #296]	; (8007d00 <UART_SetConfig+0x2f0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d125      	bne.n	8007c28 <UART_SetConfig+0x218>
 8007bdc:	4b45      	ldr	r3, [pc, #276]	; (8007cf4 <UART_SetConfig+0x2e4>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007be6:	2bc0      	cmp	r3, #192	; 0xc0
 8007be8:	d016      	beq.n	8007c18 <UART_SetConfig+0x208>
 8007bea:	2bc0      	cmp	r3, #192	; 0xc0
 8007bec:	d818      	bhi.n	8007c20 <UART_SetConfig+0x210>
 8007bee:	2b80      	cmp	r3, #128	; 0x80
 8007bf0:	d00a      	beq.n	8007c08 <UART_SetConfig+0x1f8>
 8007bf2:	2b80      	cmp	r3, #128	; 0x80
 8007bf4:	d814      	bhi.n	8007c20 <UART_SetConfig+0x210>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <UART_SetConfig+0x1f0>
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	d008      	beq.n	8007c10 <UART_SetConfig+0x200>
 8007bfe:	e00f      	b.n	8007c20 <UART_SetConfig+0x210>
 8007c00:	2300      	movs	r3, #0
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c06:	e082      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0e:	e07e      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c16:	e07a      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1e:	e076      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c26:	e072      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a35      	ldr	r2, [pc, #212]	; (8007d04 <UART_SetConfig+0x2f4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d12a      	bne.n	8007c88 <UART_SetConfig+0x278>
 8007c32:	4b30      	ldr	r3, [pc, #192]	; (8007cf4 <UART_SetConfig+0x2e4>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c40:	d01a      	beq.n	8007c78 <UART_SetConfig+0x268>
 8007c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c46:	d81b      	bhi.n	8007c80 <UART_SetConfig+0x270>
 8007c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c4c:	d00c      	beq.n	8007c68 <UART_SetConfig+0x258>
 8007c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c52:	d815      	bhi.n	8007c80 <UART_SetConfig+0x270>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <UART_SetConfig+0x250>
 8007c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5c:	d008      	beq.n	8007c70 <UART_SetConfig+0x260>
 8007c5e:	e00f      	b.n	8007c80 <UART_SetConfig+0x270>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c66:	e052      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6e:	e04e      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c76:	e04a      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7e:	e046      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c86:	e042      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a17      	ldr	r2, [pc, #92]	; (8007cec <UART_SetConfig+0x2dc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d13a      	bne.n	8007d08 <UART_SetConfig+0x2f8>
 8007c92:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <UART_SetConfig+0x2e4>)
 8007c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ca0:	d01a      	beq.n	8007cd8 <UART_SetConfig+0x2c8>
 8007ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ca6:	d81b      	bhi.n	8007ce0 <UART_SetConfig+0x2d0>
 8007ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cac:	d00c      	beq.n	8007cc8 <UART_SetConfig+0x2b8>
 8007cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb2:	d815      	bhi.n	8007ce0 <UART_SetConfig+0x2d0>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <UART_SetConfig+0x2b0>
 8007cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbc:	d008      	beq.n	8007cd0 <UART_SetConfig+0x2c0>
 8007cbe:	e00f      	b.n	8007ce0 <UART_SetConfig+0x2d0>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cc6:	e022      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cce:	e01e      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cd6:	e01a      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e016      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	e012      	b.n	8007d0e <UART_SetConfig+0x2fe>
 8007ce8:	cfff69f3 	.word	0xcfff69f3
 8007cec:	40008000 	.word	0x40008000
 8007cf0:	40013800 	.word	0x40013800
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	40004400 	.word	0x40004400
 8007cfc:	40004800 	.word	0x40004800
 8007d00:	40004c00 	.word	0x40004c00
 8007d04:	40005000 	.word	0x40005000
 8007d08:	2310      	movs	r3, #16
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4ab0      	ldr	r2, [pc, #704]	; (8007fd4 <UART_SetConfig+0x5c4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	f040 809b 	bne.w	8007e50 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	d827      	bhi.n	8007d72 <UART_SetConfig+0x362>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x318>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d55 	.word	0x08007d55
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	08007d73 	.word	0x08007d73
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d73 	.word	0x08007d73
 8007d40:	08007d73 	.word	0x08007d73
 8007d44:	08007d73 	.word	0x08007d73
 8007d48:	08007d6b 	.word	0x08007d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d4c:	f7fe f994 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 8007d50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d52:	e014      	b.n	8007d7e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7fe f9a4 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 8007d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d5a:	e010      	b.n	8007d7e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d5c:	4b9e      	ldr	r3, [pc, #632]	; (8007fd8 <UART_SetConfig+0x5c8>)
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d60:	e00d      	b.n	8007d7e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d62:	f7fe f8d7 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d68:	e009      	b.n	8007d7e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d70:	e005      	b.n	8007d7e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8130 	beq.w	8007fe6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	4a94      	ldr	r2, [pc, #592]	; (8007fdc <UART_SetConfig+0x5cc>)
 8007d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	4413      	add	r3, r2
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d305      	bcc.n	8007db6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d903      	bls.n	8007dbe <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dbc:	e113      	b.n	8007fe6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	60bb      	str	r3, [r7, #8]
 8007dc4:	60fa      	str	r2, [r7, #12]
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	4a84      	ldr	r2, [pc, #528]	; (8007fdc <UART_SetConfig+0x5cc>)
 8007dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	603b      	str	r3, [r7, #0]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ddc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007de0:	f7f8 fa28 	bl	8000234 <__aeabi_uldivmod>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4610      	mov	r0, r2
 8007dea:	4619      	mov	r1, r3
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	020b      	lsls	r3, r1, #8
 8007df6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dfa:	0202      	lsls	r2, r0, #8
 8007dfc:	6979      	ldr	r1, [r7, #20]
 8007dfe:	6849      	ldr	r1, [r1, #4]
 8007e00:	0849      	lsrs	r1, r1, #1
 8007e02:	2000      	movs	r0, #0
 8007e04:	460c      	mov	r4, r1
 8007e06:	4605      	mov	r5, r0
 8007e08:	eb12 0804 	adds.w	r8, r2, r4
 8007e0c:	eb43 0905 	adc.w	r9, r3, r5
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	469a      	mov	sl, r3
 8007e18:	4693      	mov	fp, r2
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4649      	mov	r1, r9
 8007e22:	f7f8 fa07 	bl	8000234 <__aeabi_uldivmod>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e34:	d308      	bcc.n	8007e48 <UART_SetConfig+0x438>
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3c:	d204      	bcs.n	8007e48 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a3a      	ldr	r2, [r7, #32]
 8007e44:	60da      	str	r2, [r3, #12]
 8007e46:	e0ce      	b.n	8007fe6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e4e:	e0ca      	b.n	8007fe6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e58:	d166      	bne.n	8007f28 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d827      	bhi.n	8007eb2 <UART_SetConfig+0x4a2>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x458>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007e9d 	.word	0x08007e9d
 8007e74:	08007eb3 	.word	0x08007eb3
 8007e78:	08007ea3 	.word	0x08007ea3
 8007e7c:	08007eb3 	.word	0x08007eb3
 8007e80:	08007eb3 	.word	0x08007eb3
 8007e84:	08007eb3 	.word	0x08007eb3
 8007e88:	08007eab 	.word	0x08007eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e8c:	f7fe f8f4 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 8007e90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e92:	e014      	b.n	8007ebe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e94:	f7fe f904 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 8007e98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e9a:	e010      	b.n	8007ebe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e9c:	4b4e      	ldr	r3, [pc, #312]	; (8007fd8 <UART_SetConfig+0x5c8>)
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ea0:	e00d      	b.n	8007ebe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ea2:	f7fe f837 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ea8:	e009      	b.n	8007ebe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eb0:	e005      	b.n	8007ebe <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8090 	beq.w	8007fe6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	4a44      	ldr	r2, [pc, #272]	; (8007fdc <UART_SetConfig+0x5cc>)
 8007ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed8:	005a      	lsls	r2, r3, #1
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	441a      	add	r2, r3
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	2b0f      	cmp	r3, #15
 8007ef0:	d916      	bls.n	8007f20 <UART_SetConfig+0x510>
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef8:	d212      	bcs.n	8007f20 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f023 030f 	bic.w	r3, r3, #15
 8007f02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	085b      	lsrs	r3, r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	8bfb      	ldrh	r3, [r7, #30]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	8bfa      	ldrh	r2, [r7, #30]
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	e062      	b.n	8007fe6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f26:	e05e      	b.n	8007fe6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d828      	bhi.n	8007f82 <UART_SetConfig+0x572>
 8007f30:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <UART_SetConfig+0x528>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f5d 	.word	0x08007f5d
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f83 	.word	0x08007f83
 8007f48:	08007f73 	.word	0x08007f73
 8007f4c:	08007f83 	.word	0x08007f83
 8007f50:	08007f83 	.word	0x08007f83
 8007f54:	08007f83 	.word	0x08007f83
 8007f58:	08007f7b 	.word	0x08007f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f5c:	f7fe f88c 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 8007f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f62:	e014      	b.n	8007f8e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f64:	f7fe f89c 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 8007f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f6a:	e010      	b.n	8007f8e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f6c:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <UART_SetConfig+0x5c8>)
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f70:	e00d      	b.n	8007f8e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f72:	f7fd ffcf 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f78:	e009      	b.n	8007f8e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f80:	e005      	b.n	8007f8e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d028      	beq.n	8007fe6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <UART_SetConfig+0x5cc>)
 8007f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	085b      	lsrs	r3, r3, #1
 8007fac:	441a      	add	r2, r3
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	d910      	bls.n	8007fe0 <UART_SetConfig+0x5d0>
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc4:	d20c      	bcs.n	8007fe0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60da      	str	r2, [r3, #12]
 8007fd0:	e009      	b.n	8007fe6 <UART_SetConfig+0x5d6>
 8007fd2:	bf00      	nop
 8007fd4:	40008000 	.word	0x40008000
 8007fd8:	00f42400 	.word	0x00f42400
 8007fdc:	0800a2e4 	.word	0x0800a2e4
      }
      else
      {
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2200      	movs	r2, #0
 8008000:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008002:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008006:	4618      	mov	r0, r3
 8008008:	3730      	adds	r7, #48	; 0x30
 800800a:	46bd      	mov	sp, r7
 800800c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01a      	beq.n	8008126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800810e:	d10a      	bne.n	8008126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]
  }
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b098      	sub	sp, #96	; 0x60
 8008158:	af02      	add	r7, sp, #8
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008164:	f7fb f908 	bl	8003378 <HAL_GetTick>
 8008168:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b08      	cmp	r3, #8
 8008176:	d12f      	bne.n	80081d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008180:	2200      	movs	r2, #0
 8008182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f88e 	bl	80082a8 <UART_WaitOnFlagUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d022      	beq.n	80081d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a6:	653b      	str	r3, [r7, #80]	; 0x50
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b0:	647b      	str	r3, [r7, #68]	; 0x44
 80081b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e6      	bne.n	8008192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e063      	b.n	80082a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d149      	bne.n	800827a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ee:	2200      	movs	r2, #0
 80081f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f857 	bl	80082a8 <UART_WaitOnFlagUntilTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d03c      	beq.n	800827a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	623b      	str	r3, [r7, #32]
   return(result);
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821e:	633b      	str	r3, [r7, #48]	; 0x30
 8008220:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e6      	bne.n	8008200 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	60fb      	str	r3, [r7, #12]
   return(result);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f023 0301 	bic.w	r3, r3, #1
 8008248:	64bb      	str	r3, [r7, #72]	; 0x48
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3308      	adds	r3, #8
 8008250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008252:	61fa      	str	r2, [r7, #28]
 8008254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	69b9      	ldr	r1, [r7, #24]
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	617b      	str	r3, [r7, #20]
   return(result);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e5      	bne.n	8008232 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e012      	b.n	80082a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3758      	adds	r7, #88	; 0x58
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	4613      	mov	r3, r2
 80082b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b8:	e049      	b.n	800834e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d045      	beq.n	800834e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c2:	f7fb f859 	bl	8003378 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d302      	bcc.n	80082d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e048      	b.n	800836e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d031      	beq.n	800834e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d110      	bne.n	800831a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2208      	movs	r2, #8
 80082fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f920 	bl	8008546 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2208      	movs	r2, #8
 800830a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e029      	b.n	800836e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008328:	d111      	bne.n	800834e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f906 	bl	8008546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e00f      	b.n	800836e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4013      	ands	r3, r2
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	429a      	cmp	r2, r3
 800835c:	bf0c      	ite	eq
 800835e:	2301      	moveq	r3, #1
 8008360:	2300      	movne	r3, #0
 8008362:	b2db      	uxtb	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	429a      	cmp	r2, r3
 800836a:	d0a6      	beq.n	80082ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b096      	sub	sp, #88	; 0x58
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4613      	mov	r3, r2
 8008384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	88fa      	ldrh	r2, [r7, #6]
 8008390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2222      	movs	r2, #34	; 0x22
 80083a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d02d      	beq.n	800840a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b4:	4a40      	ldr	r2, [pc, #256]	; (80084b8 <UART_Start_Receive_DMA+0x140>)
 80083b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083be:	4a3f      	ldr	r2, [pc, #252]	; (80084bc <UART_Start_Receive_DMA+0x144>)
 80083c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083c8:	4a3d      	ldr	r2, [pc, #244]	; (80084c0 <UART_Start_Receive_DMA+0x148>)
 80083ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083d2:	2200      	movs	r2, #0
 80083d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3324      	adds	r3, #36	; 0x24
 80083e2:	4619      	mov	r1, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e8:	461a      	mov	r2, r3
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	f7fc f928 	bl	8004640 <HAL_DMA_Start_IT>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2210      	movs	r2, #16
 80083fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e051      	b.n	80084ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d018      	beq.n	8008444 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008426:	657b      	str	r3, [r7, #84]	; 0x54
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008430:	64bb      	str	r3, [r7, #72]	; 0x48
 8008432:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800843e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	653b      	str	r3, [r7, #80]	; 0x50
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3308      	adds	r3, #8
 8008462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008464:	637a      	str	r2, [r7, #52]	; 0x34
 8008466:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800846a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e5      	bne.n	8008444 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3308      	adds	r3, #8
 800847e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	613b      	str	r3, [r7, #16]
   return(result);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3308      	adds	r3, #8
 8008496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008498:	623a      	str	r2, [r7, #32]
 800849a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	69f9      	ldr	r1, [r7, #28]
 800849e:	6a3a      	ldr	r2, [r7, #32]
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e5      	bne.n	8008478 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3758      	adds	r7, #88	; 0x58
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	080086c9 	.word	0x080086c9
 80084bc:	080087f5 	.word	0x080087f5
 80084c0:	08008833 	.word	0x08008833

080084c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b08f      	sub	sp, #60	; 0x3c
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e6      	bne.n	80084cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	60bb      	str	r3, [r7, #8]
   return(result);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008514:	633b      	str	r3, [r7, #48]	; 0x30
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800851e:	61ba      	str	r2, [r7, #24]
 8008520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	613b      	str	r3, [r7, #16]
   return(result);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e5      	bne.n	80084fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800853a:	bf00      	nop
 800853c:	373c      	adds	r7, #60	; 0x3c
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008546:	b480      	push	{r7}
 8008548:	b095      	sub	sp, #84	; 0x54
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856c:	643b      	str	r3, [r7, #64]	; 0x40
 800856e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e6      	bne.n	800854e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3308      	adds	r3, #8
 8008586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	64bb      	str	r3, [r7, #72]	; 0x48
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e3      	bne.n	8008580 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d118      	bne.n	80085f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f023 0310 	bic.w	r3, r3, #16
 80085d4:	647b      	str	r3, [r7, #68]	; 0x44
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085de:	61bb      	str	r3, [r7, #24]
 80085e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6979      	ldr	r1, [r7, #20]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	613b      	str	r3, [r7, #16]
   return(result);
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e6      	bne.n	80085c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008606:	bf00      	nop
 8008608:	3754      	adds	r7, #84	; 0x54
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b090      	sub	sp, #64	; 0x40
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d137      	bne.n	800869e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	2200      	movs	r2, #0
 8008632:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3308      	adds	r3, #8
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	623b      	str	r3, [r7, #32]
   return(result);
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800864c:	63bb      	str	r3, [r7, #56]	; 0x38
 800864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008656:	633a      	str	r2, [r7, #48]	; 0x30
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800865c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e5      	bne.n	8008636 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800866a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	60fb      	str	r3, [r7, #12]
   return(result);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800867e:	637b      	str	r3, [r7, #52]	; 0x34
 8008680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	61fb      	str	r3, [r7, #28]
 800868a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	69b9      	ldr	r1, [r7, #24]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	617b      	str	r3, [r7, #20]
   return(result);
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e6      	bne.n	800866a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800869c:	e002      	b.n	80086a4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800869e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086a0:	f7ff f998 	bl	80079d4 <HAL_UART_TxCpltCallback>
}
 80086a4:	bf00      	nop
 80086a6:	3740      	adds	r7, #64	; 0x40
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff f994 	bl	80079e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b09c      	sub	sp, #112	; 0x70
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0320 	and.w	r3, r3, #32
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d171      	bne.n	80087c8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80086e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008700:	66bb      	str	r3, [r7, #104]	; 0x68
 8008702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800870a:	65bb      	str	r3, [r7, #88]	; 0x58
 800870c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e6      	bne.n	80086ec <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008730:	f023 0301 	bic.w	r3, r3, #1
 8008734:	667b      	str	r3, [r7, #100]	; 0x64
 8008736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800873e:	647a      	str	r2, [r7, #68]	; 0x44
 8008740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800874c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e5      	bne.n	800871e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	623b      	str	r3, [r7, #32]
   return(result);
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008768:	663b      	str	r3, [r7, #96]	; 0x60
 800876a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3308      	adds	r3, #8
 8008770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008772:	633a      	str	r2, [r7, #48]	; 0x30
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e5      	bne.n	8008752 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008792:	2b01      	cmp	r3, #1
 8008794:	d118      	bne.n	80087c8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0310 	bic.w	r3, r3, #16
 80087aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b4:	61fb      	str	r3, [r7, #28]
 80087b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	69b9      	ldr	r1, [r7, #24]
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	617b      	str	r3, [r7, #20]
   return(result);
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e6      	bne.n	8008796 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	2200      	movs	r2, #0
 80087cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d107      	bne.n	80087e6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087dc:	4619      	mov	r1, r3
 80087de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087e0:	f7f7 fef8 	bl	80005d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087e4:	e002      	b.n	80087ec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80087e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087e8:	f7f7 ff38 	bl	800065c <HAL_UART_RxCpltCallback>
}
 80087ec:	bf00      	nop
 80087ee:	3770      	adds	r7, #112	; 0x70
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d109      	bne.n	8008824 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008816:	085b      	lsrs	r3, r3, #1
 8008818:	b29b      	uxth	r3, r3
 800881a:	4619      	mov	r1, r3
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7f7 fed9 	bl	80005d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008822:	e002      	b.n	800882a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff f8e9 	bl	80079fc <HAL_UART_RxHalfCpltCallback>
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008846:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800884e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d109      	bne.n	8008872 <UART_DMAError+0x40>
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b21      	cmp	r3, #33	; 0x21
 8008862:	d106      	bne.n	8008872 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2200      	movs	r2, #0
 8008868:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800886c:	6978      	ldr	r0, [r7, #20]
 800886e:	f7ff fe29 	bl	80084c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b40      	cmp	r3, #64	; 0x40
 800887e:	d109      	bne.n	8008894 <UART_DMAError+0x62>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b22      	cmp	r3, #34	; 0x22
 8008884:	d106      	bne.n	8008894 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2200      	movs	r2, #0
 800888a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800888e:	6978      	ldr	r0, [r7, #20]
 8008890:	f7ff fe59 	bl	8008546 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889a:	f043 0210 	orr.w	r2, r3, #16
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a4:	6978      	ldr	r0, [r7, #20]
 80088a6:	f7f7 ff2d 	bl	8000704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088aa:	bf00      	nop
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7f7 ff17 	bl	8000704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6979      	ldr	r1, [r7, #20]
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	613b      	str	r3, [r7, #16]
   return(result);
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff f854 	bl	80079d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800892c:	bf00      	nop
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800897e:	2b01      	cmp	r3, #1
 8008980:	d101      	bne.n	8008986 <HAL_UARTEx_DisableFifoMode+0x16>
 8008982:	2302      	movs	r3, #2
 8008984:	e027      	b.n	80089d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2224      	movs	r2, #36	; 0x24
 8008992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0201 	bic.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e02d      	b.n	8008a56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	; 0x24
 8008a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8a4 	bl	8008b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a72:	2302      	movs	r3, #2
 8008a74:	e02d      	b.n	8008ad2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2224      	movs	r2, #36	; 0x24
 8008a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0201 	bic.w	r2, r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f866 	bl	8008b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b08c      	sub	sp, #48	; 0x30
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	d142      	bne.n	8008b78 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e03b      	b.n	8008b7a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	461a      	mov	r2, r3
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff fc2f 	bl	8008378 <UART_Start_Receive_DMA>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d124      	bne.n	8008b72 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d11d      	bne.n	8008b6c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2210      	movs	r2, #16
 8008b36:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	617b      	str	r3, [r7, #20]
   return(result);
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f043 0310 	orr.w	r3, r3, #16
 8008b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
 8008b58:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6a39      	ldr	r1, [r7, #32]
 8008b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e6      	bne.n	8008b38 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008b6a:	e002      	b.n	8008b72 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b76:	e000      	b.n	8008b7a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008b78:	2302      	movs	r3, #2
  }
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d108      	bne.n	8008ba6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ba4:	e031      	b.n	8008c0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008baa:	2308      	movs	r3, #8
 8008bac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	0e5b      	lsrs	r3, r3, #25
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	0f5b      	lsrs	r3, r3, #29
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	7b3a      	ldrb	r2, [r7, #12]
 8008bd2:	4911      	ldr	r1, [pc, #68]	; (8008c18 <UARTEx_SetNbDataToProcess+0x94>)
 8008bd4:	5c8a      	ldrb	r2, [r1, r2]
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bda:	7b3a      	ldrb	r2, [r7, #12]
 8008bdc:	490f      	ldr	r1, [pc, #60]	; (8008c1c <UARTEx_SetNbDataToProcess+0x98>)
 8008bde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008be0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	7b7a      	ldrb	r2, [r7, #13]
 8008bf0:	4909      	ldr	r1, [pc, #36]	; (8008c18 <UARTEx_SetNbDataToProcess+0x94>)
 8008bf2:	5c8a      	ldrb	r2, [r1, r2]
 8008bf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bf8:	7b7a      	ldrb	r2, [r7, #13]
 8008bfa:	4908      	ldr	r1, [pc, #32]	; (8008c1c <UARTEx_SetNbDataToProcess+0x98>)
 8008bfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	0800a2fc 	.word	0x0800a2fc
 8008c1c:	0800a304 	.word	0x0800a304

08008c20 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b08b      	sub	sp, #44	; 0x2c
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	fa93 f3a3 	rbit	r3, r3
 8008c3a:	613b      	str	r3, [r7, #16]
  return result;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008c46:	2320      	movs	r3, #32
 8008c48:	e003      	b.n	8008c52 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	fab3 f383 	clz	r3, r3
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	2103      	movs	r1, #3
 8008c56:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	401a      	ands	r2, r3
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	fa93 f3a3 	rbit	r3, r3
 8008c68:	61fb      	str	r3, [r7, #28]
  return result;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008c74:	2320      	movs	r3, #32
 8008c76:	e003      	b.n	8008c80 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	fab3 f383 	clz	r3, r3
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	6879      	ldr	r1, [r7, #4]
 8008c84:	fa01 f303 	lsl.w	r3, r1, r3
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]
}
 8008c8e:	bf00      	nop
 8008c90:	372c      	adds	r7, #44	; 0x2c
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	401a      	ands	r2, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	fb01 f303 	mul.w	r3, r1, r3
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	605a      	str	r2, [r3, #4]
}
 8008cbe:	bf00      	nop
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b08b      	sub	sp, #44	; 0x2c
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689a      	ldr	r2, [r3, #8]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	fa93 f3a3 	rbit	r3, r3
 8008ce4:	613b      	str	r3, [r7, #16]
  return result;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	e003      	b.n	8008cfc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	fab3 f383 	clz	r3, r3
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	2103      	movs	r1, #3
 8008d00:	fa01 f303 	lsl.w	r3, r1, r3
 8008d04:	43db      	mvns	r3, r3
 8008d06:	401a      	ands	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	fa93 f3a3 	rbit	r3, r3
 8008d12:	61fb      	str	r3, [r7, #28]
  return result;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008d1e:	2320      	movs	r3, #32
 8008d20:	e003      	b.n	8008d2a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	fab3 f383 	clz	r3, r3
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d32:	431a      	orrs	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008d38:	bf00      	nop
 8008d3a:	372c      	adds	r7, #44	; 0x2c
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b08b      	sub	sp, #44	; 0x2c
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	fa93 f3a3 	rbit	r3, r3
 8008d5e:	613b      	str	r3, [r7, #16]
  return result;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008d6a:	2320      	movs	r3, #32
 8008d6c:	e003      	b.n	8008d76 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	fab3 f383 	clz	r3, r3
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	2103      	movs	r1, #3
 8008d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7e:	43db      	mvns	r3, r3
 8008d80:	401a      	ands	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	fa93 f3a3 	rbit	r3, r3
 8008d8c:	61fb      	str	r3, [r7, #28]
  return result;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008d98:	2320      	movs	r3, #32
 8008d9a:	e003      	b.n	8008da4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	fab3 f383 	clz	r3, r3
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dac:	431a      	orrs	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	60da      	str	r2, [r3, #12]
}
 8008db2:	bf00      	nop
 8008db4:	372c      	adds	r7, #44	; 0x2c
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b08b      	sub	sp, #44	; 0x2c
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1a      	ldr	r2, [r3, #32]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	fa93 f3a3 	rbit	r3, r3
 8008dd8:	613b      	str	r3, [r7, #16]
  return result;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008de4:	2320      	movs	r3, #32
 8008de6:	e003      	b.n	8008df0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	fab3 f383 	clz	r3, r3
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	210f      	movs	r1, #15
 8008df4:	fa01 f303 	lsl.w	r3, r1, r3
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	401a      	ands	r2, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	fa93 f3a3 	rbit	r3, r3
 8008e06:	61fb      	str	r3, [r7, #28]
  return result;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008e12:	2320      	movs	r3, #32
 8008e14:	e003      	b.n	8008e1e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	fab3 f383 	clz	r3, r3
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	fa01 f303 	lsl.w	r3, r1, r3
 8008e26:	431a      	orrs	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008e2c:	bf00      	nop
 8008e2e:	372c      	adds	r7, #44	; 0x2c
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b08b      	sub	sp, #44	; 0x2c
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	fa93 f3a3 	rbit	r3, r3
 8008e54:	613b      	str	r3, [r7, #16]
  return result;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008e60:	2320      	movs	r3, #32
 8008e62:	e003      	b.n	8008e6c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	fab3 f383 	clz	r3, r3
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	210f      	movs	r1, #15
 8008e70:	fa01 f303 	lsl.w	r3, r1, r3
 8008e74:	43db      	mvns	r3, r3
 8008e76:	401a      	ands	r2, r3
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	fa93 f3a3 	rbit	r3, r3
 8008e84:	61fb      	str	r3, [r7, #28]
  return result;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008e90:	2320      	movs	r3, #32
 8008e92:	e003      	b.n	8008e9c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	fab3 f383 	clz	r3, r3
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008eaa:	bf00      	nop
 8008eac:	372c      	adds	r7, #44	; 0x2c
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b088      	sub	sp, #32
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	fa93 f3a3 	rbit	r3, r3
 8008ecc:	60fb      	str	r3, [r7, #12]
  return result;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <LL_GPIO_Init+0x26>
    return 32U;
 8008ed8:	2320      	movs	r3, #32
 8008eda:	e003      	b.n	8008ee4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	fab3 f383 	clz	r3, r3
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008ee6:	e047      	b.n	8008f78 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	2101      	movs	r1, #1
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d039      	beq.n	8008f72 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d003      	beq.n	8008f0e <LL_GPIO_Init+0x58>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d10d      	bne.n	8008f2a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	461a      	mov	r2, r3
 8008f14:	69b9      	ldr	r1, [r7, #24]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff fed7 	bl	8008cca <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	461a      	mov	r2, r3
 8008f22:	69b9      	ldr	r1, [r7, #24]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff feb8 	bl	8008c9a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	69b9      	ldr	r1, [r7, #24]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff ff06 	bl	8008d44 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d111      	bne.n	8008f64 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2bff      	cmp	r3, #255	; 0xff
 8008f44:	d807      	bhi.n	8008f56 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	69b9      	ldr	r1, [r7, #24]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff ff35 	bl	8008dbe <LL_GPIO_SetAFPin_0_7>
 8008f54:	e006      	b.n	8008f64 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	69b9      	ldr	r1, [r7, #24]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7ff ff6a 	bl	8008e38 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	69b9      	ldr	r1, [r7, #24]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff fe57 	bl	8008c20 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1b0      	bne.n	8008ee8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3720      	adds	r7, #32
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f98:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	43db      	mvns	r3, r3
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	4013      	ands	r3, r2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	f107 0014 	add.w	r0, r7, #20
 8008fd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	b004      	add	sp, #16
 8009006:	4770      	bx	lr

08009008 <_ZdlPvj>:
 8009008:	f000 b811 	b.w	800902e <_ZdlPv>

0800900c <_Znwj>:
 800900c:	2801      	cmp	r0, #1
 800900e:	bf38      	it	cc
 8009010:	2001      	movcc	r0, #1
 8009012:	b510      	push	{r4, lr}
 8009014:	4604      	mov	r4, r0
 8009016:	4620      	mov	r0, r4
 8009018:	f000 f844 	bl	80090a4 <malloc>
 800901c:	b930      	cbnz	r0, 800902c <_Znwj+0x20>
 800901e:	f000 f809 	bl	8009034 <_ZSt15get_new_handlerv>
 8009022:	b908      	cbnz	r0, 8009028 <_Znwj+0x1c>
 8009024:	f000 f80c 	bl	8009040 <abort>
 8009028:	4780      	blx	r0
 800902a:	e7f4      	b.n	8009016 <_Znwj+0xa>
 800902c:	bd10      	pop	{r4, pc}

0800902e <_ZdlPv>:
 800902e:	f000 b841 	b.w	80090b4 <free>
	...

08009034 <_ZSt15get_new_handlerv>:
 8009034:	4b01      	ldr	r3, [pc, #4]	; (800903c <_ZSt15get_new_handlerv+0x8>)
 8009036:	e8d3 0faf 	lda	r0, [r3]
 800903a:	4770      	bx	lr
 800903c:	200012ac 	.word	0x200012ac

08009040 <abort>:
 8009040:	2006      	movs	r0, #6
 8009042:	b508      	push	{r3, lr}
 8009044:	f000 f97c 	bl	8009340 <raise>
 8009048:	2001      	movs	r0, #1
 800904a:	f7f9 fc7f 	bl	800294c <_exit>
	...

08009050 <__errno>:
 8009050:	4b01      	ldr	r3, [pc, #4]	; (8009058 <__errno+0x8>)
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	20000010 	.word	0x20000010

0800905c <__libc_init_array>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4d0d      	ldr	r5, [pc, #52]	; (8009094 <__libc_init_array+0x38>)
 8009060:	2600      	movs	r6, #0
 8009062:	4c0d      	ldr	r4, [pc, #52]	; (8009098 <__libc_init_array+0x3c>)
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	42a6      	cmp	r6, r4
 800906a:	d109      	bne.n	8009080 <__libc_init_array+0x24>
 800906c:	4d0b      	ldr	r5, [pc, #44]	; (800909c <__libc_init_array+0x40>)
 800906e:	2600      	movs	r6, #0
 8009070:	4c0b      	ldr	r4, [pc, #44]	; (80090a0 <__libc_init_array+0x44>)
 8009072:	f000 f98f 	bl	8009394 <_init>
 8009076:	1b64      	subs	r4, r4, r5
 8009078:	10a4      	asrs	r4, r4, #2
 800907a:	42a6      	cmp	r6, r4
 800907c:	d105      	bne.n	800908a <__libc_init_array+0x2e>
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	f855 3b04 	ldr.w	r3, [r5], #4
 8009084:	3601      	adds	r6, #1
 8009086:	4798      	blx	r3
 8009088:	e7ee      	b.n	8009068 <__libc_init_array+0xc>
 800908a:	f855 3b04 	ldr.w	r3, [r5], #4
 800908e:	3601      	adds	r6, #1
 8009090:	4798      	blx	r3
 8009092:	e7f2      	b.n	800907a <__libc_init_array+0x1e>
 8009094:	0800a314 	.word	0x0800a314
 8009098:	0800a314 	.word	0x0800a314
 800909c:	0800a314 	.word	0x0800a314
 80090a0:	0800a31c 	.word	0x0800a31c

080090a4 <malloc>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <malloc+0xc>)
 80090a6:	4601      	mov	r1, r0
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f000 b89d 	b.w	80091e8 <_malloc_r>
 80090ae:	bf00      	nop
 80090b0:	20000010 	.word	0x20000010

080090b4 <free>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <free+0xc>)
 80090b6:	4601      	mov	r1, r0
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	f000 b829 	b.w	8009110 <_free_r>
 80090be:	bf00      	nop
 80090c0:	20000010 	.word	0x20000010

080090c4 <memcmp>:
 80090c4:	3901      	subs	r1, #1
 80090c6:	4402      	add	r2, r0
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4290      	cmp	r0, r2
 80090cc:	d101      	bne.n	80090d2 <memcmp+0xe>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e005      	b.n	80090de <memcmp+0x1a>
 80090d2:	7803      	ldrb	r3, [r0, #0]
 80090d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d001      	beq.n	80090e0 <memcmp+0x1c>
 80090dc:	1b18      	subs	r0, r3, r4
 80090de:	bd10      	pop	{r4, pc}
 80090e0:	3001      	adds	r0, #1
 80090e2:	e7f2      	b.n	80090ca <memcmp+0x6>

080090e4 <memcpy>:
 80090e4:	440a      	add	r2, r1
 80090e6:	1e43      	subs	r3, r0, #1
 80090e8:	4291      	cmp	r1, r2
 80090ea:	d100      	bne.n	80090ee <memcpy+0xa>
 80090ec:	4770      	bx	lr
 80090ee:	b510      	push	{r4, lr}
 80090f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f4:	4291      	cmp	r1, r2
 80090f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090fa:	d1f9      	bne.n	80090f0 <memcpy+0xc>
 80090fc:	bd10      	pop	{r4, pc}

080090fe <memset>:
 80090fe:	4402      	add	r2, r0
 8009100:	4603      	mov	r3, r0
 8009102:	4293      	cmp	r3, r2
 8009104:	d100      	bne.n	8009108 <memset+0xa>
 8009106:	4770      	bx	lr
 8009108:	f803 1b01 	strb.w	r1, [r3], #1
 800910c:	e7f9      	b.n	8009102 <memset+0x4>
	...

08009110 <_free_r>:
 8009110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009112:	2900      	cmp	r1, #0
 8009114:	d043      	beq.n	800919e <_free_r+0x8e>
 8009116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911a:	1f0c      	subs	r4, r1, #4
 800911c:	9001      	str	r0, [sp, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfb8      	it	lt
 8009122:	18e4      	addlt	r4, r4, r3
 8009124:	f000 f928 	bl	8009378 <__malloc_lock>
 8009128:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <_free_r+0x94>)
 800912a:	9801      	ldr	r0, [sp, #4]
 800912c:	6813      	ldr	r3, [r2, #0]
 800912e:	b933      	cbnz	r3, 800913e <_free_r+0x2e>
 8009130:	6063      	str	r3, [r4, #4]
 8009132:	6014      	str	r4, [r2, #0]
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800913a:	f000 b923 	b.w	8009384 <__malloc_unlock>
 800913e:	42a3      	cmp	r3, r4
 8009140:	d908      	bls.n	8009154 <_free_r+0x44>
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	1961      	adds	r1, r4, r5
 8009146:	428b      	cmp	r3, r1
 8009148:	bf01      	itttt	eq
 800914a:	6819      	ldreq	r1, [r3, #0]
 800914c:	685b      	ldreq	r3, [r3, #4]
 800914e:	1949      	addeq	r1, r1, r5
 8009150:	6021      	streq	r1, [r4, #0]
 8009152:	e7ed      	b.n	8009130 <_free_r+0x20>
 8009154:	461a      	mov	r2, r3
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	b10b      	cbz	r3, 800915e <_free_r+0x4e>
 800915a:	42a3      	cmp	r3, r4
 800915c:	d9fa      	bls.n	8009154 <_free_r+0x44>
 800915e:	6811      	ldr	r1, [r2, #0]
 8009160:	1855      	adds	r5, r2, r1
 8009162:	42a5      	cmp	r5, r4
 8009164:	d10b      	bne.n	800917e <_free_r+0x6e>
 8009166:	6824      	ldr	r4, [r4, #0]
 8009168:	4421      	add	r1, r4
 800916a:	1854      	adds	r4, r2, r1
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	42a3      	cmp	r3, r4
 8009170:	d1e0      	bne.n	8009134 <_free_r+0x24>
 8009172:	681c      	ldr	r4, [r3, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	4421      	add	r1, r4
 8009178:	6053      	str	r3, [r2, #4]
 800917a:	6011      	str	r1, [r2, #0]
 800917c:	e7da      	b.n	8009134 <_free_r+0x24>
 800917e:	d902      	bls.n	8009186 <_free_r+0x76>
 8009180:	230c      	movs	r3, #12
 8009182:	6003      	str	r3, [r0, #0]
 8009184:	e7d6      	b.n	8009134 <_free_r+0x24>
 8009186:	6825      	ldr	r5, [r4, #0]
 8009188:	1961      	adds	r1, r4, r5
 800918a:	428b      	cmp	r3, r1
 800918c:	bf02      	ittt	eq
 800918e:	6819      	ldreq	r1, [r3, #0]
 8009190:	685b      	ldreq	r3, [r3, #4]
 8009192:	1949      	addeq	r1, r1, r5
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	bf08      	it	eq
 8009198:	6021      	streq	r1, [r4, #0]
 800919a:	6054      	str	r4, [r2, #4]
 800919c:	e7ca      	b.n	8009134 <_free_r+0x24>
 800919e:	b003      	add	sp, #12
 80091a0:	bd30      	pop	{r4, r5, pc}
 80091a2:	bf00      	nop
 80091a4:	200012b0 	.word	0x200012b0

080091a8 <sbrk_aligned>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	4e0e      	ldr	r6, [pc, #56]	; (80091e4 <sbrk_aligned+0x3c>)
 80091ac:	460c      	mov	r4, r1
 80091ae:	4605      	mov	r5, r0
 80091b0:	6831      	ldr	r1, [r6, #0]
 80091b2:	b911      	cbnz	r1, 80091ba <sbrk_aligned+0x12>
 80091b4:	f000 f88c 	bl	80092d0 <_sbrk_r>
 80091b8:	6030      	str	r0, [r6, #0]
 80091ba:	4621      	mov	r1, r4
 80091bc:	4628      	mov	r0, r5
 80091be:	f000 f887 	bl	80092d0 <_sbrk_r>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d00a      	beq.n	80091dc <sbrk_aligned+0x34>
 80091c6:	1cc4      	adds	r4, r0, #3
 80091c8:	f024 0403 	bic.w	r4, r4, #3
 80091cc:	42a0      	cmp	r0, r4
 80091ce:	d007      	beq.n	80091e0 <sbrk_aligned+0x38>
 80091d0:	1a21      	subs	r1, r4, r0
 80091d2:	4628      	mov	r0, r5
 80091d4:	f000 f87c 	bl	80092d0 <_sbrk_r>
 80091d8:	3001      	adds	r0, #1
 80091da:	d101      	bne.n	80091e0 <sbrk_aligned+0x38>
 80091dc:	f04f 34ff 	mov.w	r4, #4294967295
 80091e0:	4620      	mov	r0, r4
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	200012b4 	.word	0x200012b4

080091e8 <_malloc_r>:
 80091e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ec:	1ccd      	adds	r5, r1, #3
 80091ee:	4607      	mov	r7, r0
 80091f0:	f025 0503 	bic.w	r5, r5, #3
 80091f4:	3508      	adds	r5, #8
 80091f6:	2d0c      	cmp	r5, #12
 80091f8:	bf38      	it	cc
 80091fa:	250c      	movcc	r5, #12
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	db01      	blt.n	8009204 <_malloc_r+0x1c>
 8009200:	42a9      	cmp	r1, r5
 8009202:	d905      	bls.n	8009210 <_malloc_r+0x28>
 8009204:	230c      	movs	r3, #12
 8009206:	2600      	movs	r6, #0
 8009208:	603b      	str	r3, [r7, #0]
 800920a:	4630      	mov	r0, r6
 800920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009210:	4e2e      	ldr	r6, [pc, #184]	; (80092cc <_malloc_r+0xe4>)
 8009212:	f000 f8b1 	bl	8009378 <__malloc_lock>
 8009216:	6833      	ldr	r3, [r6, #0]
 8009218:	461c      	mov	r4, r3
 800921a:	bb34      	cbnz	r4, 800926a <_malloc_r+0x82>
 800921c:	4629      	mov	r1, r5
 800921e:	4638      	mov	r0, r7
 8009220:	f7ff ffc2 	bl	80091a8 <sbrk_aligned>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	4604      	mov	r4, r0
 8009228:	d14d      	bne.n	80092c6 <_malloc_r+0xde>
 800922a:	6834      	ldr	r4, [r6, #0]
 800922c:	4626      	mov	r6, r4
 800922e:	2e00      	cmp	r6, #0
 8009230:	d140      	bne.n	80092b4 <_malloc_r+0xcc>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	4631      	mov	r1, r6
 8009236:	4638      	mov	r0, r7
 8009238:	eb04 0803 	add.w	r8, r4, r3
 800923c:	f000 f848 	bl	80092d0 <_sbrk_r>
 8009240:	4580      	cmp	r8, r0
 8009242:	d13a      	bne.n	80092ba <_malloc_r+0xd2>
 8009244:	6821      	ldr	r1, [r4, #0]
 8009246:	3503      	adds	r5, #3
 8009248:	4638      	mov	r0, r7
 800924a:	1a6d      	subs	r5, r5, r1
 800924c:	f025 0503 	bic.w	r5, r5, #3
 8009250:	3508      	adds	r5, #8
 8009252:	2d0c      	cmp	r5, #12
 8009254:	bf38      	it	cc
 8009256:	250c      	movcc	r5, #12
 8009258:	4629      	mov	r1, r5
 800925a:	f7ff ffa5 	bl	80091a8 <sbrk_aligned>
 800925e:	3001      	adds	r0, #1
 8009260:	d02b      	beq.n	80092ba <_malloc_r+0xd2>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	442b      	add	r3, r5
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	e00e      	b.n	8009288 <_malloc_r+0xa0>
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	1b52      	subs	r2, r2, r5
 800926e:	d41e      	bmi.n	80092ae <_malloc_r+0xc6>
 8009270:	2a0b      	cmp	r2, #11
 8009272:	d916      	bls.n	80092a2 <_malloc_r+0xba>
 8009274:	1961      	adds	r1, r4, r5
 8009276:	42a3      	cmp	r3, r4
 8009278:	6025      	str	r5, [r4, #0]
 800927a:	bf18      	it	ne
 800927c:	6059      	strne	r1, [r3, #4]
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	bf08      	it	eq
 8009282:	6031      	streq	r1, [r6, #0]
 8009284:	5162      	str	r2, [r4, r5]
 8009286:	604b      	str	r3, [r1, #4]
 8009288:	f104 060b 	add.w	r6, r4, #11
 800928c:	4638      	mov	r0, r7
 800928e:	f000 f879 	bl	8009384 <__malloc_unlock>
 8009292:	1d23      	adds	r3, r4, #4
 8009294:	f026 0607 	bic.w	r6, r6, #7
 8009298:	1af2      	subs	r2, r6, r3
 800929a:	d0b6      	beq.n	800920a <_malloc_r+0x22>
 800929c:	1b9b      	subs	r3, r3, r6
 800929e:	50a3      	str	r3, [r4, r2]
 80092a0:	e7b3      	b.n	800920a <_malloc_r+0x22>
 80092a2:	6862      	ldr	r2, [r4, #4]
 80092a4:	42a3      	cmp	r3, r4
 80092a6:	bf0c      	ite	eq
 80092a8:	6032      	streq	r2, [r6, #0]
 80092aa:	605a      	strne	r2, [r3, #4]
 80092ac:	e7ec      	b.n	8009288 <_malloc_r+0xa0>
 80092ae:	4623      	mov	r3, r4
 80092b0:	6864      	ldr	r4, [r4, #4]
 80092b2:	e7b2      	b.n	800921a <_malloc_r+0x32>
 80092b4:	4634      	mov	r4, r6
 80092b6:	6876      	ldr	r6, [r6, #4]
 80092b8:	e7b9      	b.n	800922e <_malloc_r+0x46>
 80092ba:	230c      	movs	r3, #12
 80092bc:	4638      	mov	r0, r7
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	f000 f860 	bl	8009384 <__malloc_unlock>
 80092c4:	e7a1      	b.n	800920a <_malloc_r+0x22>
 80092c6:	6025      	str	r5, [r4, #0]
 80092c8:	e7de      	b.n	8009288 <_malloc_r+0xa0>
 80092ca:	bf00      	nop
 80092cc:	200012b0 	.word	0x200012b0

080092d0 <_sbrk_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	2300      	movs	r3, #0
 80092d4:	4d05      	ldr	r5, [pc, #20]	; (80092ec <_sbrk_r+0x1c>)
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	f7f9 fb40 	bl	8002960 <_sbrk>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_sbrk_r+0x1a>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_sbrk_r+0x1a>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200012b8 	.word	0x200012b8

080092f0 <_raise_r>:
 80092f0:	291f      	cmp	r1, #31
 80092f2:	b538      	push	{r3, r4, r5, lr}
 80092f4:	4604      	mov	r4, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	d904      	bls.n	8009304 <_raise_r+0x14>
 80092fa:	2316      	movs	r3, #22
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009306:	b112      	cbz	r2, 800930e <_raise_r+0x1e>
 8009308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800930c:	b94b      	cbnz	r3, 8009322 <_raise_r+0x32>
 800930e:	4620      	mov	r0, r4
 8009310:	f000 f830 	bl	8009374 <_getpid_r>
 8009314:	462a      	mov	r2, r5
 8009316:	4601      	mov	r1, r0
 8009318:	4620      	mov	r0, r4
 800931a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931e:	f000 b817 	b.w	8009350 <_kill_r>
 8009322:	2b01      	cmp	r3, #1
 8009324:	d00a      	beq.n	800933c <_raise_r+0x4c>
 8009326:	1c59      	adds	r1, r3, #1
 8009328:	d103      	bne.n	8009332 <_raise_r+0x42>
 800932a:	2316      	movs	r3, #22
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	2001      	movs	r0, #1
 8009330:	e7e7      	b.n	8009302 <_raise_r+0x12>
 8009332:	2400      	movs	r4, #0
 8009334:	4628      	mov	r0, r5
 8009336:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800933a:	4798      	blx	r3
 800933c:	2000      	movs	r0, #0
 800933e:	e7e0      	b.n	8009302 <_raise_r+0x12>

08009340 <raise>:
 8009340:	4b02      	ldr	r3, [pc, #8]	; (800934c <raise+0xc>)
 8009342:	4601      	mov	r1, r0
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	f7ff bfd3 	b.w	80092f0 <_raise_r>
 800934a:	bf00      	nop
 800934c:	20000010 	.word	0x20000010

08009350 <_kill_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	2300      	movs	r3, #0
 8009354:	4d06      	ldr	r5, [pc, #24]	; (8009370 <_kill_r+0x20>)
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	f7f9 fae5 	bl	800292c <_kill>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d102      	bne.n	800936c <_kill_r+0x1c>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b103      	cbz	r3, 800936c <_kill_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	bf00      	nop
 8009370:	200012b8 	.word	0x200012b8

08009374 <_getpid_r>:
 8009374:	f7f9 bad2 	b.w	800291c <_getpid>

08009378 <__malloc_lock>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__malloc_lock+0x8>)
 800937a:	f000 b809 	b.w	8009390 <__retarget_lock_acquire_recursive>
 800937e:	bf00      	nop
 8009380:	200012bc 	.word	0x200012bc

08009384 <__malloc_unlock>:
 8009384:	4801      	ldr	r0, [pc, #4]	; (800938c <__malloc_unlock+0x8>)
 8009386:	f000 b804 	b.w	8009392 <__retarget_lock_release_recursive>
 800938a:	bf00      	nop
 800938c:	200012bc 	.word	0x200012bc

08009390 <__retarget_lock_acquire_recursive>:
 8009390:	4770      	bx	lr

08009392 <__retarget_lock_release_recursive>:
 8009392:	4770      	bx	lr

08009394 <_init>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	bf00      	nop
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr

080093a0 <_fini>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr
