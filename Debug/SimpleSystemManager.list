
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009984  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aad8  0800aad8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aae0  0800aae0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800aae0  0800aae0  0001aae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800aae8  0800aae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aaf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000186c  20000078  0800ab68  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018e4  0800ab68  000218e4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d74  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006152  00000000  00000000  00051e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00057f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  00059968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e047  00000000  00000000  0005b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033920  00000000  00000000  0009917f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018c87f  00000000  00000000  000cca9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025931e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f4c  00000000  00000000  00259370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000078 	.word	0x20000078
 8000210:	00000000 	.word	0x00000000
 8000214:	08009b60 	.word	0x08009b60

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000007c 	.word	0x2000007c
 8000230:	08009b60 	.word	0x08009b60

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN14CircularBuffer4readEPhi>:
    } 
    res = buf[(readPtr + dist) % size];  
    return 1;
}

uint8_t CircularBuffer::read(uint8_t* res, int dist) {
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
    if(dist + readPtr > writePtr) return 0;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	441a      	add	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	429a      	cmp	r2, r3
 800056e:	dd01      	ble.n	8000574 <_ZN14CircularBuffer4readEPhi+0x20>
 8000570:	2300      	movs	r3, #0
 8000572:	e069      	b.n	8000648 <_ZN14CircularBuffer4readEPhi+0xf4>

    if( (readPtr % size) + dist >= size ) {
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	6852      	ldr	r2, [r2, #4]
 800057c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000580:	fb01 f202 	mul.w	r2, r1, r2
 8000584:	1a9a      	subs	r2, r3, r2
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	441a      	add	r2, r3
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	db42      	blt.n	8000618 <_ZN14CircularBuffer4readEPhi+0xc4>
        // two memcpys needed
        int dist_to_end = size - (readPtr % size);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	6852      	ldr	r2, [r2, #4]
 800059e:	fb93 f0f2 	sdiv	r0, r3, r2
 80005a2:	fb00 f202 	mul.w	r2, r0, r2
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	1acb      	subs	r3, r1, r3
 80005aa:	617b      	str	r3, [r7, #20]
        std::memcpy(res, &buf[readPtr % size], dist_to_end);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	6852      	ldr	r2, [r2, #4]
 80005b8:	fb93 f0f2 	sdiv	r0, r3, r2
 80005bc:	fb00 f202 	mul.w	r2, r0, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	4619      	mov	r1, r3
 80005c8:	68b8      	ldr	r0, [r7, #8]
 80005ca:	f009 f971 	bl	80098b0 <memcpy>
        readPtr += dist_to_end;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	441a      	add	r2, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	60da      	str	r2, [r3, #12]
        dist -= dist_to_end;
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	607b      	str	r3, [r7, #4]
        std::memcpy(&res[dist_to_end], &buf[readPtr % size], dist);
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	18d4      	adds	r4, r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	6852      	ldr	r2, [r2, #4]
 80005f4:	fb93 f0f2 	sdiv	r0, r3, r2
 80005f8:	fb00 f202 	mul.w	r2, r0, r2
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	440b      	add	r3, r1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4619      	mov	r1, r3
 8000604:	4620      	mov	r0, r4
 8000606:	f009 f953 	bl	80098b0 <memcpy>
        readPtr += dist;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	441a      	add	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	e016      	b.n	8000646 <_ZN14CircularBuffer4readEPhi+0xf2>
    } else {
        // one memcpy needed
        std::memcpy(res, &buf[readPtr % size], dist);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6819      	ldr	r1, [r3, #0]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	6852      	ldr	r2, [r2, #4]
 8000624:	fb93 f0f2 	sdiv	r0, r3, r2
 8000628:	fb00 f202 	mul.w	r2, r0, r2
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	440b      	add	r3, r1
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4619      	mov	r1, r3
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f009 f93b 	bl	80098b0 <memcpy>
        readPtr += dist;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	68da      	ldr	r2, [r3, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	441a      	add	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60da      	str	r2, [r3, #12]
    }

    return 1;
 8000646:	2301      	movs	r3, #1

}
 8000648:	4618      	mov	r0, r3
 800064a:	371c      	adds	r7, #28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}

08000650 <_ZN14CircularBufferC1EPhi>:


CircularBuffer::CircularBuffer(uint8_t* buf, int size) {
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
    this->buf = buf;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
    this->size = size;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	605a      	str	r2, [r3, #4]
}
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZN14CircularBuffer5writeEh>:

bool CircularBuffer::hasSpace() {
    return !((writePtr % size == readPtr % size) && writePtr != readPtr);
}

uint8_t CircularBuffer::write(uint8_t data) {
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	460b      	mov	r3, r1
 800068c:	70fb      	strb	r3, [r7, #3]
    buf[writePtr % size] = data;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6819      	ldr	r1, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6852      	ldr	r2, [r2, #4]
 800069a:	fb93 f0f2 	sdiv	r0, r3, r2
 800069e:	fb00 f202 	mul.w	r2, r0, r2
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	78fa      	ldrb	r2, [r7, #3]
 80006a8:	701a      	strb	r2, [r3, #0]
    this->writePtr++;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]
    return 1;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <HAL_UARTEx_RxEventCallback>:
#include "../../SSM_MAVLink_Driver/Inc/SSM_D_MAVLink.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSReceiver.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSSender.hpp"
#include "../Inc/driver_config.hpp"

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
    
    if(huart == pixhawk_mavlink_uart){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a42      	ldr	r2, [pc, #264]	; (80007dc <HAL_UARTEx_RxEventCallback+0x118>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d13c      	bne.n	8000752 <HAL_UARTEx_RxEventCallback+0x8e>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_SET); //turn on green light
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4840      	ldr	r0, [pc, #256]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 80006de:	f005 f827 	bl	8005730 <HAL_GPIO_WritePin>

        for (uint16_t i = 0; i < size; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	81fb      	strh	r3, [r7, #14]
 80006e6:	89fa      	ldrh	r2, [r7, #14]
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d210      	bcs.n	8000710 <HAL_UARTEx_RxEventCallback+0x4c>
        {
            pixhawk_mavlink->rx_circular_buffer_->write(pixhawk_mavlink->raw_rx_msg_[i]);
 80006ee:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x120>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 80006f6:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x120>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	4413      	add	r3, r2
 80006fe:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8000702:	4619      	mov	r1, r3
 8000704:	f7ff ffbd 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	3301      	adds	r3, #1
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	e7ea      	b.n	80006e6 <HAL_UARTEx_RxEventCallback+0x22>
        }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, pixhawk_mavlink->raw_rx_msg_, sizeof(pixhawk_mavlink->raw_rx_msg_));
 8000710:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x120>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000718:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f008 fdc1 	bl	80092a6 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0204 	bic.w	r2, r2, #4
 800073a:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET); //turn off green light
 800073c:	2200      	movs	r2, #0
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	4827      	ldr	r0, [pc, #156]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000742:	f004 fff5 	bl	8005730 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	4826      	ldr	r0, [pc, #152]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x124>)
 800074e:	f004 ffef 	bl	8005730 <HAL_GPIO_WritePin>
    }

    if(huart == ground_mavlink_uart){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a25      	ldr	r2, [pc, #148]	; (80007ec <HAL_UARTEx_RxEventCallback+0x128>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d13c      	bne.n	80007d4 <HAL_UARTEx_RxEventCallback+0x110>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_SET); //turn on green light
 800075a:	2201      	movs	r2, #1
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000760:	f004 ffe6 	bl	8005730 <HAL_GPIO_WritePin>

        for (uint16_t i = 0; i < size; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	81bb      	strh	r3, [r7, #12]
 8000768:	89ba      	ldrh	r2, [r7, #12]
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	429a      	cmp	r2, r3
 800076e:	d210      	bcs.n	8000792 <HAL_UARTEx_RxEventCallback+0xce>
        {
            ground_mavlink->rx_circular_buffer_->write(ground_mavlink->raw_rx_msg_[i]);
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	89bb      	ldrh	r3, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8000784:	4619      	mov	r1, r3
 8000786:	f7ff ff7c 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 800078a:	89bb      	ldrh	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	81bb      	strh	r3, [r7, #12]
 8000790:	e7ea      	b.n	8000768 <HAL_UARTEx_RxEventCallback+0xa4>
        }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, ground_mavlink->raw_rx_msg_, sizeof(pixhawk_mavlink->raw_rx_msg_));
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800079a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800079e:	4619      	mov	r1, r3
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f008 fd80 	bl	80092a6 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f022 0204 	bic.w	r2, r2, #4
 80007bc:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET); //turn off green light
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 80007c4:	f004 ffb4 	bl	8005730 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x124>)
 80007d0:	f004 ffae 	bl	8005730 <HAL_GPIO_WritePin>
    }


}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200013a4 	.word	0x200013a4
 80007e0:	42020800 	.word	0x42020800
 80007e4:	20000000 	.word	0x20000000
 80007e8:	42020000 	.word	0x42020000
 80007ec:	2000127c 	.word	0x2000127c
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a57      	ldr	r2, [pc, #348]	; (800095c <HAL_UART_RxCpltCallback+0x168>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d130      	bne.n	8000866 <HAL_UART_RxCpltCallback+0x72>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080a:	4855      	ldr	r0, [pc, #340]	; (8000960 <HAL_UART_RxCpltCallback+0x16c>)
 800080c:	f004 ff90 	bl	8005730 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 8000810:	2201      	movs	r2, #1
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	4853      	ldr	r0, [pc, #332]	; (8000964 <HAL_UART_RxCpltCallback+0x170>)
 8000816:	f004 ff8b 	bl	8005730 <HAL_GPIO_WritePin>
        SBUSReceiver::getInstance(huart)->parse();
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f98c 	bl	8000b38 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000820:	4603      	mov	r3, r0
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f9e1 	bl	8000bea <_ZN12SBUSReceiver5parseEv>
        HAL_UART_Receive_DMA (huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 f985 	bl	8000b38 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 800082e:	4603      	mov	r3, r0
 8000830:	2219      	movs	r2, #25
 8000832:	4619      	mov	r1, r3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f007 f8ad 	bl	8007994 <HAL_UART_Receive_DMA>
        SBUSSender::getInstance(huart)->assemble_packet();
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 fb48 	bl	8000ed0 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000840:	4603      	mov	r3, r0
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fb98 	bl	8000f78 <_ZN10SBUSSender15assemble_packetEv>
        HAL_UART_Transmit(huart, SBUSSender::getInstance(huart)->send_buf_, SBUS_FRAME_SIZE, 10);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 fb41 	bl	8000ed0 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 800084e:	4603      	mov	r3, r0
 8000850:	4619      	mov	r1, r3
 8000852:	230a      	movs	r3, #10
 8000854:	2219      	movs	r2, #25
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f006 ff8e 	bl	8007778 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 800085c:	2200      	movs	r2, #0
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	4840      	ldr	r0, [pc, #256]	; (8000964 <HAL_UART_RxCpltCallback+0x170>)
 8000862:	f004 ff65 	bl	8005730 <HAL_GPIO_WritePin>
    }

    if(huart == pixhawk_mavlink_uart){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a3f      	ldr	r2, [pc, #252]	; (8000968 <HAL_UART_RxCpltCallback+0x174>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d136      	bne.n	80008dc <HAL_UART_RxCpltCallback+0xe8>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 800086e:	2201      	movs	r2, #1
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	483c      	ldr	r0, [pc, #240]	; (8000964 <HAL_UART_RxCpltCallback+0x170>)
 8000874:	f004 ff5c 	bl	8005730 <HAL_GPIO_WritePin>

        for (uint16_t i = 0; i < sizeof(pixhawk_mavlink->raw_rx_msg_); i++)
 8000878:	2300      	movs	r3, #0
 800087a:	81fb      	strh	r3, [r7, #14]
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000882:	d210      	bcs.n	80008a6 <HAL_UART_RxCpltCallback+0xb2>
        {
            ground_mavlink->rx_circular_buffer_->write(ground_mavlink->raw_rx_msg_[i]);
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <HAL_UART_RxCpltCallback+0x178>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <HAL_UART_RxCpltCallback+0x178>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	4413      	add	r3, r2
 8000894:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8000898:	4619      	mov	r1, r3
 800089a:	f7ff fef2 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < sizeof(pixhawk_mavlink->raw_rx_msg_); i++)
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	3301      	adds	r3, #1
 80008a2:	81fb      	strh	r3, [r7, #14]
 80008a4:	e7ea      	b.n	800087c <HAL_UART_RxCpltCallback+0x88>
        }

        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, ground_mavlink->raw_rx_msg_, sizeof(pixhawk_mavlink->raw_rx_msg_));
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <HAL_UART_RxCpltCallback+0x178>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80008ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f008 fcf6 	bl	80092a6 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0204 	bic.w	r2, r2, #4
 80008d0:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 80008d2:	2200      	movs	r2, #0
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4823      	ldr	r0, [pc, #140]	; (8000964 <HAL_UART_RxCpltCallback+0x170>)
 80008d8:	f004 ff2a 	bl	8005730 <HAL_GPIO_WritePin>
    }

    if(huart == ground_mavlink_uart){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <HAL_UART_RxCpltCallback+0x17c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d136      	bne.n	8000952 <HAL_UART_RxCpltCallback+0x15e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 80008e4:	2201      	movs	r2, #1
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	481e      	ldr	r0, [pc, #120]	; (8000964 <HAL_UART_RxCpltCallback+0x170>)
 80008ea:	f004 ff21 	bl	8005730 <HAL_GPIO_WritePin>

        
        for (uint16_t i = 0; i < sizeof(pixhawk_mavlink->raw_rx_msg_); i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	81bb      	strh	r3, [r7, #12]
 80008f2:	89bb      	ldrh	r3, [r7, #12]
 80008f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008f8:	d210      	bcs.n	800091c <HAL_UART_RxCpltCallback+0x128>
        {
            ground_mavlink->rx_circular_buffer_->write(ground_mavlink->raw_rx_msg_[i]);
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_UART_RxCpltCallback+0x178>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_UART_RxCpltCallback+0x178>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	4413      	add	r3, r2
 800090a:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800090e:	4619      	mov	r1, r3
 8000910:	f7ff feb7 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < sizeof(pixhawk_mavlink->raw_rx_msg_); i++)
 8000914:	89bb      	ldrh	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	81bb      	strh	r3, [r7, #12]
 800091a:	e7ea      	b.n	80008f2 <HAL_UART_RxCpltCallback+0xfe>
        }

        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, ground_mavlink->raw_rx_msg_, sizeof(pixhawk_mavlink->raw_rx_msg_));
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_UART_RxCpltCallback+0x178>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000924:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000928:	4619      	mov	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f008 fcbb 	bl	80092a6 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0204 	bic.w	r2, r2, #4
 8000946:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 8000948:	2200      	movs	r2, #0
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_UART_RxCpltCallback+0x170>)
 800094e:	f004 feef 	bl	8005730 <HAL_GPIO_WritePin>
    }

 }
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20001310 	.word	0x20001310
 8000960:	42020000 	.word	0x42020000
 8000964:	42020400 	.word	0x42020400
 8000968:	200013a4 	.word	0x200013a4
 800096c:	20000004 	.word	0x20000004
 8000970:	2000127c 	.word	0x2000127c

08000974 <HAL_UART_ErrorCallback>:

 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <HAL_UART_ErrorCallback+0x98>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d111      	bne.n	80009a8 <HAL_UART_ErrorCallback+0x34>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	4821      	ldr	r0, [pc, #132]	; (8000a10 <HAL_UART_ErrorCallback+0x9c>)
 800098c:	f004 fed0 	bl	8005730 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f007 f84b 	bl	8007a2c <HAL_UART_DMAStop>
        HAL_UART_Receive_DMA(huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f8ce 	bl	8000b38 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 800099c:	4603      	mov	r3, r0
 800099e:	2219      	movs	r2, #25
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f006 fff6 	bl	8007994 <HAL_UART_Receive_DMA>
    }
    if(huart == pixhawk_mavlink_uart){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <HAL_UART_ErrorCallback+0xa0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d112      	bne.n	80009d6 <HAL_UART_ErrorCallback+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b6:	4816      	ldr	r0, [pc, #88]	; (8000a10 <HAL_UART_ErrorCallback+0x9c>)
 80009b8:	f004 feba 	bl	8005730 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f007 f835 	bl	8007a2c <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_ErrorCallback+0xa4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80009ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 80009ce:	4619      	mov	r1, r3
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f008 fc68 	bl	80092a6 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    if(huart == ground_mavlink_uart){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_UART_ErrorCallback+0xa8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d112      	bne.n	8000a04 <HAL_UART_ErrorCallback+0x90>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <HAL_UART_ErrorCallback+0x9c>)
 80009e6:	f004 fea3 	bl	8005730 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f007 f81e 	bl	8007a2c <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, ground_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_UART_ErrorCallback+0xac>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80009f8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80009fc:	4619      	mov	r1, r3
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f008 fc51 	bl	80092a6 <HAL_UARTEx_ReceiveToIdle_DMA>
    }

 }
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20001310 	.word	0x20001310
 8000a10:	42020000 	.word	0x42020000
 8000a14:	200013a4 	.word	0x200013a4
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	2000127c 	.word	0x2000127c
 8000a20:	20000004 	.word	0x20000004

08000a24 <_Z41__static_initialization_and_destruction_0ii>:

MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
MAVLink* pixhawk_mavlink = &pixhawk_mavlink_instance;

MAVLink ground_mavlink_instance(ground_mavlink_uart);
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10c      	bne.n	8000a4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d107      	bne.n	8000a4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000a42:	f001 fdb5 	bl	80025b0 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
MAVLink ground_mavlink_instance(ground_mavlink_uart);
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000a4a:	f001 fdb1 	bl	80025b0 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10a      	bne.n	8000a6a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d105      	bne.n	8000a6a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8000a5e:	4808      	ldr	r0, [pc, #32]	; (8000a80 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000a60:	f001 fdd1 	bl	8002606 <_ZN7MAVLinkD1Ev>
MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000a66:	f001 fdce 	bl	8002606 <_ZN7MAVLinkD1Ev>
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200013a4 	.word	0x200013a4
 8000a78:	20000094 	.word	0x20000094
 8000a7c:	2000127c 	.word	0x2000127c
 8000a80:	20000678 	.word	0x20000678

08000a84 <_GLOBAL__sub_I_pixhawk_mavlink_instance>:
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff ffc9 	bl	8000a24 <_Z41__static_initialization_and_destruction_0ii>
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_GLOBAL__sub_D_pixhawk_mavlink_instance>:
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ffc1 	bl	8000a24 <_Z41__static_initialization_and_destruction_0ii>
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_ZN9RCControlC1Ev>:
    };

    float &operator[] (int i) { return ControlSignals[i]; }

    /*  initial values*/
    RCControl()
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    {
        ControlSignals[0] = 50.0f;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <_ZN9RCControlC1Ev+0x90>)
 8000ab0:	601a      	str	r2, [r3, #0]
        ControlSignals[1] = 50.0f;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <_ZN9RCControlC1Ev+0x90>)
 8000ab6:	605a      	str	r2, [r3, #4]
        ControlSignals[2] = 0.0f;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
        ControlSignals[3] = 50.0f;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <_ZN9RCControlC1Ev+0x90>)
 8000ac4:	60da      	str	r2, [r3, #12]
        ControlSignals[4] = 0.0f;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
        ControlSignals[5] = 0.0f;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
        ControlSignals[6] = 0.0f;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f04f 0200 	mov.w	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
        ControlSignals[7] = 0.0f;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f04f 0200 	mov.w	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
        ControlSignals[8] = 0.0f;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f04f 0200 	mov.w	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
        ControlSignals[9] = 0.0f;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
        ControlSignals[10] = 0.0f;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f04f 0200 	mov.w	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
        ControlSignals[11] = 0.0f;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
        ControlSignals[12] = 0.0f;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
        ControlSignals[13] = 0.0f;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f04f 0200 	mov.w	r2, #0
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
        ControlSignals[14] = 0.0f;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
        ControlSignals[15] = 0.0f;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	42480000 	.word	0x42480000

08000b38 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSReceiver* SBUSReceiver::singleton_ = NULL;

SBUSReceiver* SBUSReceiver::getInstance(UART_HandleTypeDef* uart){
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    if (singleton_ == NULL)
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10a      	bne.n	8000b5e <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x26>
    	singleton_ = new SBUSReceiver(uart);
 8000b48:	2088      	movs	r0, #136	; 0x88
 8000b4a:	f008 fe45 	bl	80097d8 <_Znwj>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461c      	mov	r4, r3
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	4620      	mov	r0, r4
 8000b56:	f000 f80b 	bl	8000b70 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b5c:	601c      	str	r4, [r3, #0]

    // returning the instance pointer
    return singleton_;
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000b60:	681b      	ldr	r3, [r3, #0]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000c5c 	.word	0x20000c5c

08000b70 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	61da      	str	r2, [r3, #28]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3348      	adds	r3, #72	; 0x48
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff8d 	bl	8000aa4 <_ZN9RCControlC1Ev>
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	dc0a      	bgt.n	8000baa <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x3a>
    {
        received_sbus_.ch[i] = 1000;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	3210      	adds	r2, #16
 8000b9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e7f1      	b.n	8000b8e <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x1e>
    }
    received_sbus_.ch17 = false;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    HAL_UART_Receive_DMA (uart_, raw_sbus_, SBUS_FRAME_SIZE);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2219      	movs	r2, #25
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f006 feda 	bl	8007994 <HAL_UART_Receive_DMA>
}
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_ZN12SBUSReceiver5parseEv>:
    cast_rccontrol();
    return received_rccontrol_;
}

void SBUSReceiver::parse()
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
    if ((raw_sbus_[0] == HEADER_) && (raw_sbus_[24] == FOOTER_)) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	f040 815e 	bne.w	8000eb8 <_ZN12SBUSReceiver5parseEv+0x2ce>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7e1b      	ldrb	r3, [r3, #24]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 8159 	bne.w	8000eb8 <_ZN12SBUSReceiver5parseEv+0x2ce>

        //exactal parsing
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[2] << 8) & 0x07FF));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	789b      	ldrb	r3, [r3, #2]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c18:	b21b      	sxth	r3, r3
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	841a      	strh	r2, [r3, #32]
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	789b      	ldrb	r3, [r3, #2]
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[3] << 5) & 0x07FF));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	78db      	ldrb	r3, [r3, #3]
 8000c32:	015b      	lsls	r3, r3, #5
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c3a:	b21b      	sxth	r3, r3
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	845a      	strh	r2, [r3, #34]	; 0x22
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	78db      	ldrb	r3, [r3, #3]
 8000c4a:	099b      	lsrs	r3, r3, #6
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	b21a      	sxth	r2, r3
                                            (raw_sbus_[4] << 2) |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[5] << 10) & 0x07FF));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	795b      	ldrb	r3, [r3, #5]
 8000c60:	029b      	lsls	r3, r3, #10
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c68:	b21b      	sxth	r3, r3
                                            (raw_sbus_[4] << 2) |
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b21b      	sxth	r3, r3
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	849a      	strh	r2, [r3, #36]	; 0x24
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	795b      	ldrb	r3, [r3, #5]
 8000c78:	085b      	lsrs	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[6] << 7) & 0x07FF));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	799b      	ldrb	r3, [r3, #6]
 8000c82:	01db      	lsls	r3, r3, #7
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c8a:	b21b      	sxth	r3, r3
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	84da      	strh	r2, [r3, #38]	; 0x26
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	799b      	ldrb	r3, [r3, #6]
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[7] << 4) & 0x07FF));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	79db      	ldrb	r3, [r3, #7]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cac:	b21b      	sxth	r3, r3
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	851a      	strh	r2, [r3, #40]	; 0x28
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	79db      	ldrb	r3, [r3, #7]
 8000cbc:	09db      	lsrs	r3, r3, #7
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	b21a      	sxth	r2, r3
                                            (raw_sbus_[8] << 1) |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a1b      	ldrb	r3, [r3, #8]
 8000cc6:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[9] << 9) & 0x07FF));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7a5b      	ldrb	r3, [r3, #9]
 8000cd2:	025b      	lsls	r3, r3, #9
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cda:	b21b      	sxth	r3, r3
                                            (raw_sbus_[8] << 1) |
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b21b      	sxth	r3, r3
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7a5b      	ldrb	r3, [r3, #9]
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[10] << 6) & 0x07FF));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7a9b      	ldrb	r3, [r3, #10]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cfc:	b21b      	sxth	r3, r3
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	859a      	strh	r2, [r3, #44]	; 0x2c
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7a9b      	ldrb	r3, [r3, #10]
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[11] << 3) & 0x07FF));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7adb      	ldrb	r3, [r3, #11]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d1e:	b21b      	sxth	r3, r3
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	85da      	strh	r2, [r3, #46]	; 0x2e
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7b1b      	ldrb	r3, [r3, #12]
 8000d2e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[13] << 8) & 0x07FF));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7b5b      	ldrb	r3, [r3, #13]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d3c:	b21b      	sxth	r3, r3
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	861a      	strh	r2, [r3, #48]	; 0x30
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7b5b      	ldrb	r3, [r3, #13]
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[14] << 5) & 0x07FF));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7b9b      	ldrb	r3, [r3, #14]
 8000d56:	015b      	lsls	r3, r3, #5
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d5e:	b21b      	sxth	r3, r3
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	865a      	strh	r2, [r3, #50]	; 0x32
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7b9b      	ldrb	r3, [r3, #14]
 8000d6e:	099b      	lsrs	r3, r3, #6
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	b21a      	sxth	r2, r3
                                            (raw_sbus_[15] << 2) |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7bdb      	ldrb	r3, [r3, #15]
 8000d78:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[16] << 10) & 0x07FF));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7c1b      	ldrb	r3, [r3, #16]
 8000d84:	029b      	lsls	r3, r3, #10
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d8c:	b21b      	sxth	r3, r3
                                            (raw_sbus_[15] << 2) |
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21b      	sxth	r3, r3
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	869a      	strh	r2, [r3, #52]	; 0x34
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7c1b      	ldrb	r3, [r3, #16]
 8000d9c:	085b      	lsrs	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[17] << 7) & 0x07FF));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7c5b      	ldrb	r3, [r3, #17]
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dae:	b21b      	sxth	r3, r3
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	86da      	strh	r2, [r3, #54]	; 0x36
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7c5b      	ldrb	r3, [r3, #17]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[18] << 4) & 0x07FF));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7c9b      	ldrb	r3, [r3, #18]
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dd0:	b21b      	sxth	r3, r3
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	871a      	strh	r2, [r3, #56]	; 0x38
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7c9b      	ldrb	r3, [r3, #18]
 8000de0:	09db      	lsrs	r3, r3, #7
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	b21a      	sxth	r2, r3
                                            (raw_sbus_[19] << 1) |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7cdb      	ldrb	r3, [r3, #19]
 8000dea:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[20] << 9) & 0x07FF));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7d1b      	ldrb	r3, [r3, #20]
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dfe:	b21b      	sxth	r3, r3
                                            (raw_sbus_[19] << 1) |
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21b      	sxth	r3, r3
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	875a      	strh	r2, [r3, #58]	; 0x3a
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7d1b      	ldrb	r3, [r3, #20]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[21] << 6) & 0x07FF));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7d5b      	ldrb	r3, [r3, #21]
 8000e18:	019b      	lsls	r3, r3, #6
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e20:	b21b      	sxth	r3, r3
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7d5b      	ldrb	r3, [r3, #21]
 8000e30:	095b      	lsrs	r3, r3, #5
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[22] << 3) & 0x07FF));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7d9b      	ldrb	r3, [r3, #22]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e42:	b21b      	sxth	r3, r3
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* CH 17 */
        received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7ddb      	ldrb	r3, [r3, #23]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        /* CH 18 */
        received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7ddb      	ldrb	r3, [r3, #23]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf14      	ite	ne
 8000e72:	2301      	movne	r3, #1
 8000e74:	2300      	moveq	r3, #0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        /* Grab the lost frame */
        received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7ddb      	ldrb	r3, [r3, #23]
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        /* Grab the failsafe */
        received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7ddb      	ldrb	r3, [r3, #23]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf14      	ite	ne
 8000ea2:	2301      	movne	r3, #1
 8000ea4:	2300      	moveq	r3, #0
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        received_sbus_.new_data = true;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000eb6:	e004      	b.n	8000ec2 <_ZN12SBUSReceiver5parseEv+0x2d8>

    }else{
    	received_sbus_.new_data = false;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender* SBUSSender::singleton_ = NULL;

SBUSSender* SBUSSender::getInstance(UART_HandleTypeDef* uart){
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    if (singleton_ == nullptr)
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10a      	bne.n	8000ef6 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x26>
      singleton_ = new SBUSSender(uart);
 8000ee0:	2048      	movs	r0, #72	; 0x48
 8000ee2:	f008 fc79 	bl	80097d8 <_Znwj>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461c      	mov	r4, r3
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4620      	mov	r0, r4
 8000eee:	f000 f80b 	bl	8000f08 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000ef4:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000ef6:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000c60 	.word	0x20000c60

08000f08 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	dc0a      	bgt.n	8000f38 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x30>
	{
		send_sbus_.ch[i] = 1000;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	3210      	adds	r2, #16
 8000f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	e7f1      	b.n	8000f1c <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x14>
	}
	send_sbus_.ch17 = false;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	send_sbus_.ch18 = false;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	send_sbus_.failsafe = false;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	send_sbus_.lost_frame = false;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	send_sbus_.new_data = false;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit_DMA(uart_, send_buf_, SBUS_FRAME_SIZE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	2219      	movs	r2, #25
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 fc93 	bl	8007894 <HAL_UART_Transmit_DMA>
}
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_ZN10SBUSSender15assemble_packetEv>:
      send_sbus_.ch[i] = rccontrol_to_sbus(values.ControlSignals[i]);
    }
}

void SBUSSender::assemble_packet()
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	220f      	movs	r2, #15
 8000f84:	701a      	strb	r2, [r3, #0]
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	8c1b      	ldrh	r3, [r3, #32]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	705a      	strb	r2, [r3, #1]
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8c1b      	ldrh	r3, [r3, #32]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	f023 0307 	bic.w	r3, r3, #7
 8000fac:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	709a      	strb	r2, [r3, #2]
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fc6:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd4:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	70da      	strb	r2, [r3, #3]
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	711a      	strb	r2, [r3, #4]
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ff2:	0a9b      	lsrs	r3, r3, #10
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b25b      	sxtb	r3, r3
 8001006:	f023 0301 	bic.w	r3, r3, #1
 800100a:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	b2da      	uxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	715a      	strb	r2, [r3, #5]
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800101a:	09db      	lsrs	r3, r3, #7
 800101c:	b29b      	uxth	r3, r3
 800101e:	b25b      	sxtb	r3, r3
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	b25b      	sxtb	r3, r3
 800102e:	f023 030f 	bic.w	r3, r3, #15
 8001032:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	719a      	strb	r2, [r3, #6]
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	b29b      	uxth	r3, r3
 8001046:	b25b      	sxtb	r3, r3
 8001048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800104c:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001052:	01db      	lsls	r3, r3, #7
 8001054:	b25b      	sxtb	r3, r3
 8001056:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800105a:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 800105c:	4313      	orrs	r3, r2
 800105e:	b25b      	sxtb	r3, r3
 8001060:	b2da      	uxtb	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	71da      	strb	r2, [r3, #7]
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106a:	085b      	lsrs	r3, r3, #1
 800106c:	b29b      	uxth	r3, r3
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	721a      	strb	r2, [r3, #8]
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001078:	0a5b      	lsrs	r3, r3, #9
 800107a:	b29b      	uxth	r3, r3
 800107c:	b25b      	sxtb	r3, r3
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f023 0303 	bic.w	r3, r3, #3
 8001090:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8001092:	4313      	orrs	r3, r2
 8001094:	b25b      	sxtb	r3, r3
 8001096:	b2da      	uxtb	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	725a      	strb	r2, [r3, #9]
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80010a0:	099b      	lsrs	r3, r3, #6
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80010b0:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	729a      	strb	r2, [r3, #10]
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	72da      	strb	r2, [r3, #11]
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	731a      	strb	r2, [r3, #12]
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	f023 0307 	bic.w	r3, r3, #7
 80010f2:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	735a      	strb	r2, [r3, #13]
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	b29b      	uxth	r3, r3
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800110c:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001112:	019b      	lsls	r3, r3, #6
 8001114:	b25b      	sxtb	r3, r3
 8001116:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800111a:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 800111c:	4313      	orrs	r3, r2
 800111e:	b25b      	sxtb	r3, r3
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	739a      	strb	r2, [r3, #14]
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2da      	uxtb	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	73da      	strb	r2, [r3, #15]
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001138:	0a9b      	lsrs	r3, r3, #10
 800113a:	b29b      	uxth	r3, r3
 800113c:	b25b      	sxtb	r3, r3
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	b25b      	sxtb	r3, r3
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8001152:	4313      	orrs	r3, r2
 8001154:	b25b      	sxtb	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	741a      	strb	r2, [r3, #16]
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	b29b      	uxth	r3, r3
 8001164:	b25b      	sxtb	r3, r3
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f023 030f 	bic.w	r3, r3, #15
 8001178:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 800117a:	4313      	orrs	r3, r2
 800117c:	b25b      	sxtb	r3, r3
 800117e:	b2da      	uxtb	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	745a      	strb	r2, [r3, #17]
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	b29b      	uxth	r3, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001192:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001198:	01db      	lsls	r3, r3, #7
 800119a:	b25b      	sxtb	r3, r3
 800119c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011a0:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	749a      	strb	r2, [r3, #18]
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011b0:	085b      	lsrs	r3, r3, #1
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	74da      	strb	r2, [r3, #19]
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011be:	0a5b      	lsrs	r3, r3, #9
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	f023 0303 	bic.w	r3, r3, #3
 80011d6:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	751a      	strb	r2, [r3, #20]
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80011e6:	099b      	lsrs	r3, r3, #6
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80011f6:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	755a      	strb	r2, [r3, #21]
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	b29b      	uxth	r3, r3
 800120c:	b2da      	uxtb	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	759a      	strb	r2, [r3, #22]
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001218:	b25a      	sxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	b25b      	sxtb	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	b2db      	uxtb	r3, r3
 8001244:	b25b      	sxtb	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b25b      	sxtb	r3, r3
 800124a:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	75da      	strb	r2, [r3, #23]
  send_buf_[24] = FOOTER_;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	6039      	str	r1, [r7, #0]
 800126c:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4053      	eors	r3, r2
 8001278:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	b25a      	sxtb	r2, r3
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	4053      	eors	r3, r2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	b29b      	uxth	r3, r3
 8001292:	b21a      	sxth	r2, r3
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	4053      	eors	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4053      	eors	r3, r2
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4053      	eors	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	801a      	strh	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <mavlink_sha256_init+0x50>)
 80012fc:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <mavlink_sha256_init+0x54>)
 8001302:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <mavlink_sha256_init+0x58>)
 8001308:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <mavlink_sha256_init+0x5c>)
 800130e:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <mavlink_sha256_init+0x60>)
 8001314:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <mavlink_sha256_init+0x64>)
 800131a:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <mavlink_sha256_init+0x68>)
 8001320:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <mavlink_sha256_init+0x6c>)
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	6a09e667 	.word	0x6a09e667
 8001338:	bb67ae85 	.word	0xbb67ae85
 800133c:	3c6ef372 	.word	0x3c6ef372
 8001340:	a54ff53a 	.word	0xa54ff53a
 8001344:	510e527f 	.word	0x510e527f
 8001348:	9b05688c 	.word	0x9b05688c
 800134c:	1f83d9ab 	.word	0x1f83d9ab
 8001350:	5be0cd19 	.word	0x5be0cd19

08001354 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8001354:	b480      	push	{r7}
 8001356:	b0cf      	sub	sp, #316	; 0x13c
 8001358:	af00      	add	r7, sp, #0
 800135a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800135e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001362:	6018      	str	r0, [r3, #0]
 8001364:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001368:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800136c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800136e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001372:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 800137e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001382:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 800138e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001392:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 800139e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 80013ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80013be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80013ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80013de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80013f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	dc17      	bgt.n	800142c <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 80013fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001406:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	4413      	add	r3, r2
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001414:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001418:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8001420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001424:	3301      	adds	r3, #1
 8001426:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800142a:	e7e3      	b.n	80013f4 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 800142c:	2310      	movs	r3, #16
 800142e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001436:	2b3f      	cmp	r3, #63	; 0x3f
 8001438:	dc6a      	bgt.n	8001510 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800143a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800143e:	1e9a      	subs	r2, r3, #2
 8001440:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	ea4f 4273 	mov.w	r2, r3, ror #17
 8001450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001454:	1e99      	subs	r1, r3, #2
 8001456:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800145a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800145e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001462:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8001466:	405a      	eors	r2, r3
 8001468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800146c:	1e99      	subs	r1, r3, #2
 800146e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001476:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800147a:	0a9b      	lsrs	r3, r3, #10
 800147c:	405a      	eors	r2, r3
 800147e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001482:	1fd9      	subs	r1, r3, #7
 8001484:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800148c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001490:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001496:	f1a3 010f 	sub.w	r1, r3, #15
 800149a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800149e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014a6:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80014aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014ae:	f1a3 000f 	sub.w	r0, r3, #15
 80014b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014be:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80014c2:	4059      	eors	r1, r3
 80014c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014c8:	f1a3 000f 	sub.w	r0, r3, #15
 80014cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014dc:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80014de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014e2:	f1a3 0110 	sub.w	r1, r3, #16
 80014e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014f2:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001508:	3301      	adds	r3, #1
 800150a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800150e:	e790      	b.n	8001432 <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800151a:	2b3f      	cmp	r3, #63	; 0x3f
 800151c:	dc79      	bgt.n	8001612 <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800151e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001522:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001526:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800152a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800152e:	405a      	eors	r2, r3
 8001530:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001534:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001538:	405a      	eors	r2, r3
 800153a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800153e:	441a      	add	r2, r3
 8001540:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001544:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001548:	4019      	ands	r1, r3
 800154a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800154e:	43d8      	mvns	r0, r3
 8001550:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001554:	4003      	ands	r3, r0
 8001556:	404b      	eors	r3, r1
 8001558:	441a      	add	r2, r3
 800155a:	496d      	ldr	r1, [pc, #436]	; (8001710 <mavlink_sha256_calc+0x3bc>)
 800155c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001560:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001564:	441a      	add	r2, r3
 8001566:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800156a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800156e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001572:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001576:	4413      	add	r3, r2
 8001578:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800157c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001580:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001584:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001588:	ea4f 3373 	mov.w	r3, r3, ror #13
 800158c:	405a      	eors	r2, r3
 800158e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001592:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001596:	405a      	eors	r2, r3
 8001598:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800159c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015a0:	4059      	eors	r1, r3
 80015a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015a6:	4019      	ands	r1, r3
 80015a8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80015ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015b0:	4003      	ands	r3, r0
 80015b2:	404b      	eors	r3, r1
 80015b4:	4413      	add	r3, r2
 80015b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 80015ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80015be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 80015ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 80015d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80015d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015da:	4413      	add	r3, r2
 80015dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 80015e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 80015e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 80015f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80015f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001600:	4413      	add	r3, r2
 8001602:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8001606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800160a:	3301      	adds	r3, #1
 800160c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001610:	e781      	b.n	8001516 <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8001612:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001616:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001622:	441a      	add	r2, r3
 8001624:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001628:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8001630:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001634:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001640:	441a      	add	r2, r3
 8001642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001646:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 800164e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001652:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800165e:	441a      	add	r2, r3
 8001660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001664:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 800166c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001670:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800167c:	441a      	add	r2, r3
 800167e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001682:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 800168a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800168e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800169a:	441a      	add	r2, r3
 800169c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 80016a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b8:	441a      	add	r2, r3
 80016ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 80016c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016d6:	441a      	add	r2, r3
 80016d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 80016e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016f4:	441a      	add	r2, r3
 80016f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001702:	bf00      	nop
 8001704:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	08009b78 	.word	0x08009b78

08001714 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09c      	sub	sp, #112	; 0x70
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	441a      	add	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800173e:	429a      	cmp	r2, r3
 8001740:	d904      	bls.n	800174c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 800174c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001754:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d058      	beq.n	800180e <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 800175c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800175e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001762:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001768:	429a      	cmp	r2, r3
 800176a:	d201      	bcs.n	8001770 <mavlink_sha256_update+0x5c>
            l = len;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001778:	4413      	add	r3, r2
 800177a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800177c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800177e:	4618      	mov	r0, r3
 8001780:	f008 f896 	bl	80098b0 <memcpy>
	offset += l;
 8001784:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001788:	4413      	add	r3, r2
 800178a:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 800178c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800178e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001790:	4413      	add	r3, r2
 8001792:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 800179c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800179e:	2b40      	cmp	r3, #64	; 0x40
 80017a0:	d1d9      	bne.n	8001756 <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3328      	adds	r3, #40	; 0x28
 80017a6:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80017a8:	2300      	movs	r3, #0
 80017aa:	663b      	str	r3, [r7, #96]	; 0x60
 80017ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	dc24      	bgt.n	80017fc <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80017b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017b8:	4413      	add	r3, r2
 80017ba:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	3303      	adds	r3, #3
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d0:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80017d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d4:	1c9a      	adds	r2, r3, #2
 80017d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d8:	3301      	adds	r3, #1
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017e4:	3302      	adds	r3, #2
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80017ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ec:	3303      	adds	r3, #3
 80017ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80017f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017f6:	3301      	adds	r3, #1
 80017f8:	663b      	str	r3, [r7, #96]	; 0x60
 80017fa:	e7d7      	b.n	80017ac <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f7ff fda6 	bl	8001354 <mavlink_sha256_calc>
	    offset = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 800180c:	e7a3      	b.n	8001756 <mavlink_sha256_update+0x42>
	}
    }
}
 800180e:	bf00      	nop
 8001810:	3770      	adds	r7, #112	; 0x70
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b098      	sub	sp, #96	; 0x60
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182a:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800182c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182e:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001836:	3301      	adds	r3, #1
 8001838:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3308      	adds	r3, #8
 800183e:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	3301      	adds	r3, #1
 800184a:	2247      	movs	r2, #71	; 0x47
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f008 f83b 	bl	80098ca <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800185a:	3307      	adds	r3, #7
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	3360      	adds	r3, #96	; 0x60
 8001860:	443b      	add	r3, r7
 8001862:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0a1a      	lsrs	r2, r3, #8
 800186c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800186e:	3306      	adds	r3, #6
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	3360      	adds	r3, #96	; 0x60
 8001874:	443b      	add	r3, r7
 8001876:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0c1a      	lsrs	r2, r3, #16
 8001880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001882:	3305      	adds	r3, #5
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	3360      	adds	r3, #96	; 0x60
 8001888:	443b      	add	r3, r7
 800188a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0e1a      	lsrs	r2, r3, #24
 8001894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001896:	3304      	adds	r3, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	3360      	adds	r3, #96	; 0x60
 800189c:	443b      	add	r3, r7
 800189e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018a8:	3303      	adds	r3, #3
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	3360      	adds	r3, #96	; 0x60
 80018ae:	443b      	add	r3, r7
 80018b0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0a1a      	lsrs	r2, r3, #8
 80018ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018bc:	3302      	adds	r3, #2
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	3360      	adds	r3, #96	; 0x60
 80018c2:	443b      	add	r3, r7
 80018c4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	0c1a      	lsrs	r2, r3, #16
 80018ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	3360      	adds	r3, #96	; 0x60
 80018d6:	443b      	add	r3, r7
 80018d8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0e1b      	lsrs	r3, r3, #24
 80018e2:	b2d9      	uxtb	r1, r3
 80018e4:	f107 020c 	add.w	r2, r7, #12
 80018e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ea:	4413      	add	r3, r2
 80018ec:	460a      	mov	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 80018f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f2:	f103 0208 	add.w	r2, r3, #8
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff09 	bl	8001714 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001904:	78da      	ldrb	r2, [r3, #3]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001910:	7892      	ldrb	r2, [r2, #2]
 8001912:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3302      	adds	r3, #2
 8001918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800191a:	7852      	ldrb	r2, [r2, #1]
 800191c:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3303      	adds	r3, #3
 8001922:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	3304      	adds	r3, #4
 800192c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800192e:	79d2      	ldrb	r2, [r2, #7]
 8001930:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	3305      	adds	r3, #5
 8001936:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001938:	7992      	ldrb	r2, [r2, #6]
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	3760      	adds	r7, #96	; 0x60
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800194e:	79fa      	ldrb	r2, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <mavlink_get_channel_status+0x24>)
 800195a:	4413      	add	r3, r2
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	20000c64 	.word	0x20000c64

0800196c <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f240 1223 	movw	r2, #291	; 0x123
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	4a03      	ldr	r2, [pc, #12]	; (8001990 <mavlink_get_channel_buffer+0x24>)
 8001982:	4413      	add	r3, r2
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	20000cc4 	.word	0x20000cc4

08001994 <mavlink_reset_channel_status>:

/**
 * @brief Reset the status of a channel.
 */
MAVLINK_HELPER void mavlink_reset_channel_status(uint8_t chan)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ffcf 	bl	8001944 <mavlink_get_channel_status>
 80019a6:	60f8      	str	r0, [r7, #12]
	status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	70da      	strb	r2, [r3, #3]
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d90a      	bls.n	80019de <_mav_trim_payload+0x28>
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <_mav_trim_payload+0x28>
		length--;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	3b01      	subs	r3, #1
 80019da:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80019dc:	e7f1      	b.n	80019c2 <_mav_trim_payload+0xc>
	}
	return length;
 80019de:	78fb      	ldrb	r3, [r7, #3]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 80019ec:	b5b0      	push	{r4, r5, r7, lr}
 80019ee:	b0aa      	sub	sp, #168	; 0xa8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <mavlink_signature_check+0x16>
		return true;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e125      	b.n	8001c4e <mavlink_signature_check+0x262>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3302      	adds	r3, #2
 8001a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a18:	3307      	adds	r3, #7
 8001a1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fc5e 	bl	80012e4 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f103 0110 	add.w	r1, r3, #16
 8001a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a32:	2220      	movs	r2, #32
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe6d 	bl	8001714 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	220a      	movs	r2, #10
 8001a40:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe65 	bl	8001714 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f103 010c 	add.w	r1, r3, #12
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	78db      	ldrb	r3, [r3, #3]
 8001a54:	461a      	mov	r2, r3
 8001a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe5a 	bl	8001714 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe51 	bl	8001714 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a76:	2207      	movs	r2, #7
 8001a78:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe49 	bl	8001714 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001a82:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fec2 	bl	8001816 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a96:	2206      	movs	r2, #6
 8001a98:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f007 fef7 	bl	8009890 <memcmp>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <mavlink_signature_check+0xc0>
		return false;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e0d0      	b.n	8001c4e <mavlink_signature_check+0x262>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ac6:	1c59      	adds	r1, r3, #1
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	2206      	movs	r2, #6
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f007 feee 	bl	80098b0 <memcpy>

	if (signing_streams == NULL) {
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <mavlink_signature_check+0xf2>
		return false;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e0b7      	b.n	8001c4e <mavlink_signature_check+0x262>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d22d      	bcs.n	8001b4c <mavlink_signature_check+0x160>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	79d9      	ldrb	r1, [r3, #7]
 8001af4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001af8:	68b8      	ldr	r0, [r7, #8]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	4403      	add	r3, r0
 8001b02:	3303      	adds	r3, #3
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4299      	cmp	r1, r3
 8001b08:	d119      	bne.n	8001b3e <mavlink_signature_check+0x152>
		    msg->compid == signing_streams->stream[i].compid &&
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7a19      	ldrb	r1, [r3, #8]
 8001b0e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b12:	68b8      	ldr	r0, [r7, #8]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001b20:	4299      	cmp	r1, r3
 8001b22:	d10c      	bne.n	8001b3e <mavlink_signature_check+0x152>
		    link_id == signing_streams->stream[i].link_id) {
 8001b24:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	3302      	adds	r3, #2
 8001b34:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001b36:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d005      	beq.n	8001b4a <mavlink_signature_check+0x15e>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001b3e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001b42:	3301      	adds	r3, #1
 8001b44:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001b48:	e7cc      	b.n	8001ae4 <mavlink_signature_check+0xf8>
			break;
 8001b4a:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d13e      	bne.n	8001bd6 <mavlink_signature_check+0x1ea>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d901      	bls.n	8001b64 <mavlink_signature_check+0x178>
			// over max number of streams
			return false;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e074      	b.n	8001c4e <mavlink_signature_check+0x262>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b68:	493b      	ldr	r1, [pc, #236]	; (8001c58 <mavlink_signature_check+0x26c>)
 8001b6a:	1854      	adds	r4, r2, r1
 8001b6c:	f143 0500 	adc.w	r5, r3, #0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b76:	4294      	cmp	r4, r2
 8001b78:	eb75 0303 	sbcs.w	r3, r5, r3
 8001b7c:	d201      	bcs.n	8001b82 <mavlink_signature_check+0x196>
			return false;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e065      	b.n	8001c4e <mavlink_signature_check+0x262>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001b82:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	79d8      	ldrb	r0, [r3, #7]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	3303      	adds	r3, #3
 8001b96:	4602      	mov	r2, r0
 8001b98:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001b9a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7a18      	ldrb	r0, [r3, #8]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	3304      	adds	r3, #4
 8001bae:	4602      	mov	r2, r0
 8001bb0:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001bb2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001bc6:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	801a      	strh	r2, [r3, #0]
 8001bd4:	e01d      	b.n	8001c12 <mavlink_signature_check+0x226>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001be2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	4413      	add	r3, r2
 8001bf0:	1d59      	adds	r1, r3, #5
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	2206      	movs	r2, #6
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f007 fe59 	bl	80098b0 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c06:	4290      	cmp	r0, r2
 8001c08:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c0c:	d301      	bcc.n	8001c12 <mavlink_signature_check+0x226>
			// repeating old timestamp
			return false;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e01d      	b.n	8001c4e <mavlink_signature_check+0x262>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001c12:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	4413      	add	r3, r2
 8001c20:	1d58      	adds	r0, r3, #5
 8001c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c26:	3301      	adds	r3, #1
 8001c28:	2206      	movs	r2, #6
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f007 fe40 	bl	80098b0 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001c3a:	4290      	cmp	r0, r2
 8001c3c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c40:	d204      	bcs.n	8001c4c <mavlink_signature_check+0x260>
		signing->timestamp = tstamp.t64;
 8001c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c46:	68f9      	ldr	r1, [r7, #12]
 8001c48:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	return true;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	37a8      	adds	r7, #168	; 0xa8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	005b8d80 	.word	0x005b8d80

08001c5c <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	709a      	strb	r2, [r3, #2]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	789b      	ldrb	r3, [r3, #2]
 8001c90:	2bfe      	cmp	r3, #254	; 0xfe
 8001c92:	d13a      	bne.n	8001d0a <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001c98:	2305      	movs	r3, #5
 8001c9a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	789a      	ldrb	r2, [r3, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	7992      	ldrb	r2, [r2, #6]
 8001cb4:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3303      	adds	r3, #3
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	79d2      	ldrb	r2, [r2, #7]
 8001cbe:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	7a12      	ldrb	r2, [r2, #8]
 8001cc8:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7a5a      	ldrb	r2, [r3, #9]
 8001cce:	7a99      	ldrb	r1, [r3, #10]
 8001cd0:	0209      	lsls	r1, r1, #8
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	7adb      	ldrb	r3, [r3, #11]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3305      	adds	r3, #5
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	1d98      	adds	r0, r3, #6
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f103 010c 	add.w	r1, r3, #12
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	78db      	ldrb	r3, [r3, #3]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f007 fddc 	bl	80098b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001cf8:	7dbb      	ldrb	r3, [r7, #22]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	78d2      	ldrb	r2, [r2, #3]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3301      	adds	r3, #1
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e06c      	b.n	8001de4 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fe4f 	bl	80019b6 <_mav_trim_payload>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001d1c:	2309      	movs	r3, #9
 8001d1e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	789a      	ldrb	r2, [r3, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3302      	adds	r3, #2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	7912      	ldrb	r2, [r2, #4]
 8001d38:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	7952      	ldrb	r2, [r2, #5]
 8001d42:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	7992      	ldrb	r2, [r2, #6]
 8001d4c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3305      	adds	r3, #5
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	79d2      	ldrb	r2, [r2, #7]
 8001d56:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3306      	adds	r3, #6
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	7a12      	ldrb	r2, [r2, #8]
 8001d60:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7a5a      	ldrb	r2, [r3, #9]
 8001d66:	7a99      	ldrb	r1, [r3, #10]
 8001d68:	0209      	lsls	r1, r1, #8
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	7adb      	ldrb	r3, [r3, #11]
 8001d6e:	041b      	lsls	r3, r3, #16
 8001d70:	4313      	orrs	r3, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3307      	adds	r3, #7
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	7a5a      	ldrb	r2, [r3, #9]
 8001d80:	7a99      	ldrb	r1, [r3, #10]
 8001d82:	0209      	lsls	r1, r1, #8
 8001d84:	430a      	orrs	r2, r1
 8001d86:	7adb      	ldrb	r3, [r3, #11]
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	121a      	asrs	r2, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3308      	adds	r3, #8
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	7a5a      	ldrb	r2, [r3, #9]
 8001d9a:	7a99      	ldrb	r1, [r3, #10]
 8001d9c:	0209      	lsls	r1, r1, #8
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	7adb      	ldrb	r3, [r3, #11]
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	4313      	orrs	r3, r2
 8001da6:	141a      	asrs	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3309      	adds	r3, #9
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f103 000a 	add.w	r0, r3, #10
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	330c      	adds	r3, #12
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f007 fd77 	bl	80098b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001dc2:	7dba      	ldrb	r2, [r7, #22]
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3301      	adds	r3, #1
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <mavlink_msg_to_send_buffer+0x164>
 8001ddc:	230d      	movs	r3, #13
 8001dde:	e000      	b.n	8001de2 <mavlink_msg_to_send_buffer+0x166>
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1c98      	adds	r0, r3, #2
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001e12:	7dfa      	ldrb	r2, [r7, #23]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f007 fd4b 	bl	80098b0 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001e1a:	7dbb      	ldrb	r3, [r7, #22]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3303      	adds	r3, #3
 8001e30:	b29b      	uxth	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001e46:	f107 030e 	add.w	r3, r7, #14
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fa3b 	bl	80012c6 <crc_init>
	msg->checksum = crcTmp;
 8001e50:	89fa      	ldrh	r2, [r7, #14]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	801a      	strh	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001e72:	f107 020e 	add.w	r2, r7, #14
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f9f1 	bl	8001262 <crc_accumulate>
	msg->checksum = checksum;
 8001e80:	89fa      	ldrh	r2, [r7, #14]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	801a      	strh	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	f240 1327 	movw	r3, #295	; 0x127
 8001ea0:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d226      	bcs.n	8001ef8 <mavlink_get_msg_entry+0x68>
            uint32_t mid = (low+1+high)/2;
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001eb6:	491d      	ldr	r1, [pc, #116]	; (8001f2c <mavlink_get_msg_entry+0x9c>)
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d203      	bcs.n	8001ed4 <mavlink_get_msg_entry+0x44>
                high = mid-1;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	613b      	str	r3, [r7, #16]
                continue;
 8001ed2:	e010      	b.n	8001ef6 <mavlink_get_msg_entry+0x66>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001ed4:	4915      	ldr	r1, [pc, #84]	; (8001f2c <mavlink_get_msg_entry+0x9c>)
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d902      	bls.n	8001ef0 <mavlink_get_msg_entry+0x60>
                low = mid;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	617b      	str	r3, [r7, #20]
                continue;
 8001eee:	e002      	b.n	8001ef6 <mavlink_get_msg_entry+0x66>
            }
            low = mid;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	617b      	str	r3, [r7, #20]
            break;
 8001ef4:	e000      	b.n	8001ef8 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8001ef6:	e7d4      	b.n	8001ea2 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <mavlink_get_msg_entry+0x9c>)
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e006      	b.n	8001f20 <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <mavlink_get_msg_entry+0x9c>)
 8001f1e:	4413      	add	r3, r2
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	08009c78 	.word	0x08009c78

08001f30 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	78db      	ldrb	r3, [r3, #3]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f200 8277 	bhi.w	8002442 <mavlink_frame_char_buffer+0x512>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <mavlink_frame_char_buffer+0x2c>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f9d 	.word	0x08001f9d
 8001f60:	08001f9d 	.word	0x08001f9d
 8001f64:	08001ffb 	.word	0x08001ffb
 8001f68:	08002061 	.word	0x08002061
 8001f6c:	08002099 	.word	0x08002099
 8001f70:	080020b1 	.word	0x080020b1
 8001f74:	080020c9 	.word	0x080020c9
 8001f78:	080020e1 	.word	0x080020e1
 8001f7c:	080020f9 	.word	0x080020f9
 8001f80:	08002153 	.word	0x08002153
 8001f84:	0800219f 	.word	0x0800219f
 8001f88:	080021fb 	.word	0x080021fb
 8001f8c:	08002233 	.word	0x08002233
 8001f90:	080022bf 	.word	0x080022bf
 8001f94:	080022bf 	.word	0x080022bf
 8001f98:	08002383 	.word	0x08002383
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2bfd      	cmp	r3, #253	; 0xfd
 8001fa0:	d113      	bne.n	8001fca <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	7b1b      	ldrb	r3, [r3, #12]
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff ff39 	bl	8001e3a <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001fc8:	e232      	b.n	8002430 <mavlink_frame_char_buffer+0x500>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2bfe      	cmp	r3, #254	; 0xfe
 8001fce:	f040 822f 	bne.w	8002430 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	7b1b      	ldrb	r3, [r3, #12]
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff21 	bl	8001e3a <mavlink_start_checksum>
		break;
 8001ff8:	e21a      	b.n	8002430 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00f      	beq.n	8002022 <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	3301      	adds	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 800200e:	68b8      	ldr	r0, [r7, #8]
 8002010:	f7ff fe24 	bl	8001c5c <_mav_parse_error>
			status->msg_received = 0;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2201      	movs	r2, #1
 800201e:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8002020:	e20f      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
			rxmsg->len = c;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4619      	mov	r1, r3
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff13 	bl	8001e5e <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	7b1b      	ldrb	r3, [r3, #12]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2205      	movs	r2, #5
 8002054:	70da      	strb	r2, [r3, #3]
		break;
 8002056:	e1f4      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2203      	movs	r2, #3
 800205c:	70da      	strb	r2, [r3, #3]
		break;
 800205e:	e1f0      	b.n	8002442 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8002072:	68b8      	ldr	r0, [r7, #8]
 8002074:	f7ff fdf2 	bl	8001c5c <_mav_parse_error>
			status->msg_received = 0;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2201      	movs	r2, #1
 8002082:	70da      	strb	r2, [r3, #3]
			break;
 8002084:	e1dd      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
		}
		mavlink_update_checksum(rxmsg, c);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4619      	mov	r1, r3
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7ff fee7 	bl	8001e5e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2204      	movs	r2, #4
 8002094:	70da      	strb	r2, [r3, #3]
		break;
 8002096:	e1d4      	b.n	8002442 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	4619      	mov	r1, r3
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff fedb 	bl	8001e5e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2205      	movs	r2, #5
 80020ac:	70da      	strb	r2, [r3, #3]
		break;
 80020ae:	e1c8      	b.n	8002442 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4619      	mov	r1, r3
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff fecf 	bl	8001e5e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2206      	movs	r2, #6
 80020c4:	70da      	strb	r2, [r3, #3]
		break;
 80020c6:	e1bc      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	79fa      	ldrb	r2, [r7, #7]
 80020cc:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4619      	mov	r1, r3
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff fec3 	bl	8001e5e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2207      	movs	r2, #7
 80020dc:	70da      	strb	r2, [r3, #3]
		break;
 80020de:	e1b0      	b.n	8002442 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	4619      	mov	r1, r3
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff feb7 	bl	8001e5e <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2208      	movs	r2, #8
 80020f4:	70da      	strb	r2, [r3, #3]
		break;
 80020f6:	e1a4      	b.n	8002442 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	b2d9      	uxtb	r1, r3
 8002102:	2000      	movs	r0, #0
 8002104:	4301      	orrs	r1, r0
 8002106:	7251      	strb	r1, [r2, #9]
 8002108:	0a19      	lsrs	r1, r3, #8
 800210a:	b2c9      	uxtb	r1, r1
 800210c:	2000      	movs	r0, #0
 800210e:	4301      	orrs	r1, r0
 8002110:	7291      	strb	r1, [r2, #10]
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2100      	movs	r1, #0
 8002118:	430b      	orrs	r3, r1
 800211a:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	4619      	mov	r1, r3
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff fe9c 	bl	8001e5e <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	7b1b      	ldrb	r3, [r3, #12]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	78db      	ldrb	r3, [r3, #3]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	220b      	movs	r2, #11
 800213e:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8002140:	e17f      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	220c      	movs	r2, #12
 8002146:	70da      	strb	r2, [r3, #3]
		break;
 8002148:	e17b      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2209      	movs	r2, #9
 800214e:	70da      	strb	r2, [r3, #3]
		break;
 8002150:	e177      	b.n	8002442 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	7a5a      	ldrb	r2, [r3, #9]
 8002156:	7a99      	ldrb	r1, [r3, #10]
 8002158:	0209      	lsls	r1, r1, #8
 800215a:	430a      	orrs	r2, r1
 800215c:	7adb      	ldrb	r3, [r3, #11]
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	4313      	orrs	r3, r2
 8002162:	461a      	mov	r2, r3
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4313      	orrs	r3, r2
 800216a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	b2d1      	uxtb	r1, r2
 8002172:	2000      	movs	r0, #0
 8002174:	4301      	orrs	r1, r0
 8002176:	7259      	strb	r1, [r3, #9]
 8002178:	0a11      	lsrs	r1, r2, #8
 800217a:	b2c9      	uxtb	r1, r1
 800217c:	2000      	movs	r0, #0
 800217e:	4301      	orrs	r1, r0
 8002180:	7299      	strb	r1, [r3, #10]
 8002182:	0c12      	lsrs	r2, r2, #16
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	2100      	movs	r1, #0
 8002188:	430a      	orrs	r2, r1
 800218a:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4619      	mov	r1, r3
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff fe64 	bl	8001e5e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	220a      	movs	r2, #10
 800219a:	70da      	strb	r2, [r3, #3]
		break;
 800219c:	e151      	b.n	8002442 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	7a5a      	ldrb	r2, [r3, #9]
 80021a2:	7a99      	ldrb	r1, [r3, #10]
 80021a4:	0209      	lsls	r1, r1, #8
 80021a6:	430a      	orrs	r2, r1
 80021a8:	7adb      	ldrb	r3, [r3, #11]
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	4313      	orrs	r3, r2
 80021ae:	461a      	mov	r2, r3
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	b2d1      	uxtb	r1, r2
 80021be:	2000      	movs	r0, #0
 80021c0:	4301      	orrs	r1, r0
 80021c2:	7259      	strb	r1, [r3, #9]
 80021c4:	0a11      	lsrs	r1, r2, #8
 80021c6:	b2c9      	uxtb	r1, r1
 80021c8:	2000      	movs	r0, #0
 80021ca:	4301      	orrs	r1, r0
 80021cc:	7299      	strb	r1, [r3, #10]
 80021ce:	0c12      	lsrs	r2, r2, #16
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	2100      	movs	r1, #0
 80021d4:	430a      	orrs	r2, r1
 80021d6:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	4619      	mov	r1, r3
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff fe3e 	bl	8001e5e <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	78db      	ldrb	r3, [r3, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	220b      	movs	r2, #11
 80021ee:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80021f0:	e127      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	220c      	movs	r2, #12
 80021f6:	70da      	strb	r2, [r3, #3]
		break;
 80021f8:	e123      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f103 020c 	add.w	r2, r3, #12
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	791b      	ldrb	r3, [r3, #4]
 8002204:	1c59      	adds	r1, r3, #1
 8002206:	b2c8      	uxtb	r0, r1
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	7108      	strb	r0, [r1, #4]
 800220c:	4413      	add	r3, r2
 800220e:	79fa      	ldrb	r2, [r7, #7]
 8002210:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	4619      	mov	r1, r3
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff fe21 	bl	8001e5e <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	791a      	ldrb	r2, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	78db      	ldrb	r3, [r3, #3]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8105 	bne.w	8002434 <mavlink_frame_char_buffer+0x504>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	220c      	movs	r2, #12
 800222e:	70da      	strb	r2, [r3, #3]
		}
		break;
 8002230:	e100      	b.n	8002434 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	7a5a      	ldrb	r2, [r3, #9]
 8002236:	7a99      	ldrb	r1, [r3, #10]
 8002238:	0209      	lsls	r1, r1, #8
 800223a:	430a      	orrs	r2, r1
 800223c:	7adb      	ldrb	r3, [r3, #11]
 800223e:	041b      	lsls	r3, r3, #16
 8002240:	4313      	orrs	r3, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fe24 	bl	8001e90 <mavlink_get_msg_entry>
 8002248:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <mavlink_frame_char_buffer+0x326>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	e000      	b.n	8002258 <mavlink_frame_char_buffer+0x328>
 8002256:	2300      	movs	r3, #0
 8002258:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	4619      	mov	r1, r3
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff fdfd 	bl	8001e5e <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002264:	79fa      	ldrb	r2, [r7, #7]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	d003      	beq.n	800227a <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	220e      	movs	r2, #14
 8002276:	70da      	strb	r2, [r3, #3]
 8002278:	e002      	b.n	8002280 <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	220d      	movs	r2, #13
 800227e:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	79fa      	ldrb	r2, [r7, #7]
 8002284:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80d4 	beq.w	8002438 <mavlink_frame_char_buffer+0x508>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	791a      	ldrb	r2, [r3, #4]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	799b      	ldrb	r3, [r3, #6]
 8002298:	429a      	cmp	r2, r3
 800229a:	f080 80cd 	bcs.w	8002438 <mavlink_frame_char_buffer+0x508>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	330c      	adds	r3, #12
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	7912      	ldrb	r2, [r2, #4]
 80022a6:	1898      	adds	r0, r3, r2
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	799b      	ldrb	r3, [r3, #6]
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	791b      	ldrb	r3, [r3, #4]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	2100      	movs	r1, #0
 80022b8:	f007 fb07 	bl	80098ca <memset>
		}
		break;
 80022bc:	e0bc      	b.n	8002438 <mavlink_frame_char_buffer+0x508>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	2b0e      	cmp	r3, #14
 80022c4:	d007      	beq.n	80022d6 <mavlink_frame_char_buffer+0x3a6>
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	b292      	uxth	r2, r2
 80022ce:	0a12      	lsrs	r2, r2, #8
 80022d0:	b292      	uxth	r2, r2
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <mavlink_frame_char_buffer+0x3ae>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e002      	b.n	80022e4 <mavlink_frame_char_buffer+0x3b4>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	79fa      	ldrb	r2, [r7, #7]
 80022e8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	791b      	ldrb	r3, [r3, #4]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <mavlink_frame_char_buffer+0x3e6>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	220f      	movs	r2, #15
 80022fc:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	220d      	movs	r2, #13
 8002302:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b02      	cmp	r3, #2
 800230a:	f000 8097 	beq.w	800243c <mavlink_frame_char_buffer+0x50c>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8002314:	e092      	b.n	800243c <mavlink_frame_char_buffer+0x50c>
			if (status->signing &&
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01a      	beq.n	8002354 <mavlink_frame_char_buffer+0x424>
			   	(status->signing->accept_unsigned_callback == NULL ||
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <mavlink_frame_char_buffer+0x420>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	7a59      	ldrb	r1, [r3, #9]
 8002332:	7a98      	ldrb	r0, [r3, #10]
 8002334:	0200      	lsls	r0, r0, #8
 8002336:	4301      	orrs	r1, r0
 8002338:	7adb      	ldrb	r3, [r3, #11]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	430b      	orrs	r3, r1
 800233e:	4619      	mov	r1, r3
 8002340:	68b8      	ldr	r0, [r7, #8]
 8002342:	4790      	blx	r2
 8002344:	4603      	mov	r3, r0
 8002346:	f083 0301 	eor.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <mavlink_frame_char_buffer+0x424>
			if (status->signing &&
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <mavlink_frame_char_buffer+0x426>
 8002354:	2300      	movs	r3, #0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <mavlink_frame_char_buffer+0x438>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d002      	beq.n	8002368 <mavlink_frame_char_buffer+0x438>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2203      	movs	r2, #3
 8002366:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2201      	movs	r2, #1
 800236c:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d063      	beq.n	800243c <mavlink_frame_char_buffer+0x50c>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002374:	f240 1223 	movw	r2, #291	; 0x123
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	6838      	ldr	r0, [r7, #0]
 800237c:	f007 fa98 	bl	80098b0 <memcpy>
		break;
 8002380:	e05c      	b.n	800243c <mavlink_frame_char_buffer+0x50c>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	7b5b      	ldrb	r3, [r3, #13]
 8002386:	f1c3 030d 	rsb	r3, r3, #13
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4413      	add	r3, r2
 800238e:	79fa      	ldrb	r2, [r7, #7]
 8002390:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	7b5b      	ldrb	r3, [r3, #13]
 8002398:	3b01      	subs	r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	7b5b      	ldrb	r3, [r3, #13]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d14b      	bne.n	8002440 <mavlink_frame_char_buffer+0x510>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6918      	ldr	r0, [r3, #16]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7ff fb1a 	bl	80019ec <mavlink_signature_check>
 80023b8:	4603      	mov	r3, r0
 80023ba:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d017      	beq.n	80023f8 <mavlink_frame_char_buffer+0x4c8>
			   	(status->signing->accept_unsigned_callback &&
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d012      	beq.n	80023f8 <mavlink_frame_char_buffer+0x4c8>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	7a59      	ldrb	r1, [r3, #9]
 80023dc:	7a98      	ldrb	r0, [r3, #10]
 80023de:	0200      	lsls	r0, r0, #8
 80023e0:	4301      	orrs	r1, r0
 80023e2:	7adb      	ldrb	r3, [r3, #11]
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	430b      	orrs	r3, r1
 80023e8:	4619      	mov	r1, r3
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	4790      	blx	r2
 80023ee:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <mavlink_frame_char_buffer+0x4c8>
			if (!sig_ok &&
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <mavlink_frame_char_buffer+0x4ca>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <mavlink_frame_char_buffer+0x4d2>
				// accepted via application level override
				sig_ok = true;
 80023fe:	2301      	movs	r3, #1
 8002400:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8002402:	7ffb      	ldrb	r3, [r7, #31]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <mavlink_frame_char_buffer+0x4e0>
				status->msg_received = MAVLINK_FRAMING_OK;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e002      	b.n	8002416 <mavlink_frame_char_buffer+0x4e6>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2203      	movs	r2, #3
 8002414:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2201      	movs	r2, #1
 800241a:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <mavlink_frame_char_buffer+0x510>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002422:	f240 1223 	movw	r2, #291	; 0x123
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	6838      	ldr	r0, [r7, #0]
 800242a:	f007 fa41 	bl	80098b0 <memcpy>
			}
		}
		break;
 800242e:	e007      	b.n	8002440 <mavlink_frame_char_buffer+0x510>
		break;
 8002430:	bf00      	nop
 8002432:	e006      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
		break;
 8002434:	bf00      	nop
 8002436:	e004      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
		break;
 8002438:	bf00      	nop
 800243a:	e002      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
		break;
 800243c:	bf00      	nop
 800243e:	e000      	b.n	8002442 <mavlink_frame_char_buffer+0x512>
		break;
 8002440:	bf00      	nop
	}

	bufferIndex++;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	3301      	adds	r3, #1
 8002446:	61bb      	str	r3, [r7, #24]
	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d110      	bne.n	8002472 <mavlink_frame_char_buffer+0x542>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	799a      	ldrb	r2, [r3, #6]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	891b      	ldrh	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <mavlink_frame_char_buffer+0x536>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	891b      	ldrh	r3, [r3, #8]
 800246a:	3301      	adds	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <mavlink_frame_char_buffer+0x550>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	78da      	ldrb	r2, [r3, #3]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01a      	beq.n	80024bc <mavlink_frame_char_buffer+0x58c>
           r_mavlink_status->parse_state = status->parse_state;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	78da      	ldrb	r2, [r3, #3]
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	791a      	ldrb	r2, [r3, #4]
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	795b      	ldrb	r3, [r3, #5]
 800249a:	3301      	adds	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	891a      	ldrh	r2, [r3, #8]
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	789b      	ldrb	r3, [r3, #2]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	7b1a      	ldrb	r2, [r3, #12]
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d110      	bne.n	80024ec <mavlink_frame_char_buffer+0x5bc>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00d      	beq.n	80024ec <mavlink_frame_char_buffer+0x5bc>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b21b      	sxth	r3, r3
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60ba      	str	r2, [r7, #8]
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	4603      	mov	r3, r0
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	460b      	mov	r3, r1
 8002508:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fa2d 	bl	800196c <mavlink_get_channel_buffer>
 8002512:	4604      	mov	r4, r0
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fa14 	bl	8001944 <mavlink_get_channel_status>
 800251c:	4601      	mov	r1, r0
 800251e:	7bba      	ldrb	r2, [r7, #14]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fd02 	bl	8001f30 <mavlink_frame_char_buffer>
 800252c:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}

08002536 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af00      	add	r7, sp, #0
 800253c:	60ba      	str	r2, [r7, #8]
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	460b      	mov	r3, r1
 8002546:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002548:	7bb9      	ldrb	r1, [r7, #14]
 800254a:	7bf8      	ldrb	r0, [r7, #15]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f7ff ffd2 	bl	80024f8 <mavlink_frame_char>
 8002554:	4603      	mov	r3, r0
 8002556:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002558:	7ffb      	ldrb	r3, [r7, #31]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d002      	beq.n	8002564 <mavlink_parse_char+0x2e>
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d120      	bne.n	80025a6 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fa00 	bl	800196c <mavlink_get_channel_buffer>
 800256c:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f9e7 	bl	8001944 <mavlink_get_channel_status>
 8002576:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f7ff fb6f 	bl	8001c5c <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2201      	movs	r2, #1
 8002588:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 800258a:	7bbb      	ldrb	r3, [r7, #14]
 800258c:	2bfd      	cmp	r3, #253	; 0xfd
 800258e:	d108      	bne.n	80025a2 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2202      	movs	r2, #2
 8002594:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2200      	movs	r2, #0
 800259a:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 800259c:	69b8      	ldr	r0, [r7, #24]
 800259e:	f7ff fc4c 	bl	8001e3a <mavlink_start_checksum>
	    }
	    return 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <mavlink_parse_char+0x72>
    }
    return msg_received;
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>:
 *
 */

#include "../Inc/SSM_D_MAVLink.hpp"

MAVLink::MAVLink(UART_HandleTypeDef* uart_handle) : uart_(uart_handle)
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
{

    rx_circular_buffer_ = new CircularBuffer(rx_circular_buffer_ptr_, 1000);
 80025c2:	2010      	movs	r0, #16
 80025c4:	f007 f908 	bl	80097d8 <_Znwj>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461c      	mov	r4, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025d2:	4619      	mov	r1, r3
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7fe f83b 	bl	8000650 <_ZN14CircularBufferC1EPhi>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8c3 43e8 	str.w	r4, [r3, #1000]	; 0x3e8

    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80025ea:	da07      	bge.n	80025fc <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x4c>
        raw_rx_msg_[MAVLINK_MAX_PACKET_LEN] = 0;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e7f3      	b.n	80025e4 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x34>
    }
}
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}

08002606 <_ZN7MAVLinkD1Ev>:

MAVLink::~MAVLink(){
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
    delete rx_circular_buffer_;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <_ZN7MAVLinkD1Ev+0x1a>
 8002618:	2110      	movs	r1, #16
 800261a:	4618      	mov	r0, r3
 800261c:	f007 f8da 	bl	80097d4 <_ZdlPvj>
}
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZN7MAVLink11readMessageER17__mavlink_message>:

bool MAVLink::readMessage(mavlink_message_t& message)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b0d2      	sub	sp, #328	; 0x148
 800262e:	af00      	add	r7, sp, #0
 8002630:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002634:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002638:	6018      	str	r0, [r3, #0]
 800263a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800263e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002642:	6019      	str	r1, [r3, #0]
    //if Data Reception process is not ongoing, then activate it
    if(uart_->RxState != HAL_UART_STATE_BUSY_RX){
 8002644:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002648:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002656:	2b22      	cmp	r3, #34	; 0x22
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d012      	beq.n	800268a <_ZN7MAVLink11readMessageER17__mavlink_message+0x60>
        HAL_UARTEx_ReceiveToIdle_DMA(uart_, raw_rx_msg_, sizeof(raw_rx_msg_));
 8002664:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002668:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002672:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002676:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8002680:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002684:	4619      	mov	r1, r3
 8002686:	f006 fe0e 	bl	80092a6 <HAL_UARTEx_ReceiveToIdle_DMA>
    }

    uint8_t byte = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	mavlink_status_t status = {};
 8002690:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
 80026a0:	615a      	str	r2, [r3, #20]
    mavlink_message_t rx_msg;

    while(rx_circular_buffer_->read(&byte, 1)){
 80026a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80026a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 80026b0:	f207 1147 	addw	r1, r7, #327	; 0x147
 80026b4:	2201      	movs	r2, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff4c 	bl	8000554 <_ZN14CircularBuffer4readEPhi>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d025      	beq.n	8002718 <_ZN7MAVLink11readMessageER17__mavlink_message+0xee>
        if( mavlink_parse_char(MAVLINK_COMM_1, byte, &(rx_msg), &status)){
 80026cc:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 80026d0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80026d4:	f107 0208 	add.w	r2, r7, #8
 80026d8:	2001      	movs	r0, #1
 80026da:	f7ff ff2c 	bl	8002536 <mavlink_parse_char>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0d9      	beq.n	80026a2 <_ZN7MAVLink11readMessageER17__mavlink_message+0x78>
            mavlink_reset_channel_status(MAVLINK_COMM_1);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff f950 	bl	8001994 <mavlink_reset_channel_status>
            message = rx_msg;
 80026f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80026f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002702:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f240 1323 	movw	r3, #291	; 0x123
 800270e:	461a      	mov	r2, r3
 8002710:	f007 f8ce 	bl	80098b0 <memcpy>

            return true;
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <_ZN7MAVLink11readMessageER17__mavlink_message+0xf0>
        }
    }
    return false;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_ZN7MAVLink12writeMessageE17__mavlink_message>:

void MAVLink::writeMessage(const mavlink_message_t output_message){
 8002724:	b084      	sub	sp, #16
 8002726:	b590      	push	{r4, r7, lr}
 8002728:	b0cb      	sub	sp, #300	; 0x12c
 800272a:	af00      	add	r7, sp, #0
 800272c:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8002730:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8002734:	6020      	str	r0, [r4, #0]
 8002736:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 800273a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];
    uint16_t len = mavlink_msg_to_send_buffer(buf, &output_message);
 800273e:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fa97 	bl	8001c7c <mavlink_msg_to_send_buffer>
 800274e:	4603      	mov	r3, r0
 8002750:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	HAL_StatusTypeDef ret = HAL_UART_Transmit(uart_, buf, len, 1000);
 8002754:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002758:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002762:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8002766:	f107 010c 	add.w	r1, r7, #12
 800276a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276e:	f005 f803 	bl	8007778 <HAL_UART_Transmit>
 8002772:	4603      	mov	r3, r0
 8002774:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
}
 8002778:	bf00      	nop
 800277a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800277e:	46bd      	mov	sp, r7
 8002780:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002784:	b004      	add	sp, #16
 8002786:	4770      	bx	lr

08002788 <_ZN3SSM11getInstanceEv>:
 */
#include "../Inc/Simple_Sytem_Manager.hpp"

SSM* SSM::singleton_= NULL;

SSM* SSM::getInstance(){
 8002788:	b598      	push	{r3, r4, r7, lr}
 800278a:	af00      	add	r7, sp, #0
    if (singleton_ == NULL)
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <_ZN3SSM11getInstanceEv+0x28>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <_ZN3SSM11getInstanceEv+0x20>
      singleton_ = new SSM();
 8002794:	2003      	movs	r0, #3
 8002796:	f007 f81f 	bl	80097d8 <_Znwj>
 800279a:	4603      	mov	r3, r0
 800279c:	461c      	mov	r4, r3
 800279e:	4620      	mov	r0, r4
 80027a0:	f000 f813 	bl	80027ca <_ZN3SSMC1Ev>
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <_ZN3SSM11getInstanceEv+0x28>)
 80027a6:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 80027a8:	4b01      	ldr	r3, [pc, #4]	; (80027b0 <_ZN3SSM11getInstanceEv+0x28>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd98      	pop	{r3, r4, r7, pc}
 80027b0:	20001150 	.word	0x20001150

080027b4 <_ZN3SSM23execute_mavlink_passingEv>:
    SBus sbus_data;
    fetch_command(sbus_data);
    transmit_command(sbus_data);
}

void SSM::execute_mavlink_passing(){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    forwarding_MAVLink();
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f81b 	bl	80027f8 <_ZN3SSM18forwarding_MAVLinkEv>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ZN3SSMC1Ev>:
    else {
        transmit_command(sbus_data);
    }
}

SSM::SSM(){
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
    config();
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f805 	bl	80027e2 <_ZN3SSM6configEv>
}
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_ZN3SSM6configEv>:

SSM::~SSM(){
}

void SSM::config(){
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
    /*empty for now*/
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <_ZN3SSM18forwarding_MAVLinkEv>:
bool SSM::transmit_command(SBus &sbus_data)
{
    SBUSSender::getInstance(&huart2)->SetSBusValue(sbus_data);
}

void SSM::forwarding_MAVLink(){
 80027f8:	b5b0      	push	{r4, r5, r7, lr}
 80027fa:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80027fe:	af46      	add	r7, sp, #280	; 0x118
 8002800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002808:	6018      	str	r0, [r3, #0]
    mavlink_message_t new_message;
    if (pixhawk_mavlink->readMessage(new_message)){
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <_ZN3SSM18forwarding_MAVLinkEv+0x94>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f107 020c 	add.w	r2, r7, #12
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff08 	bl	800262a <_ZN7MAVLink11readMessageER17__mavlink_message>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <_ZN3SSM18forwarding_MAVLinkEv+0x4e>
        ground_mavlink->writeMessage(new_message);
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <_ZN3SSM18forwarding_MAVLinkEv+0x98>)
 8002822:	681d      	ldr	r5, [r3, #0]
 8002824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002828:	f5a3 7492 	sub.w	r4, r3, #292	; 0x124
 800282c:	4668      	mov	r0, sp
 800282e:	f104 030c 	add.w	r3, r4, #12
 8002832:	f240 1217 	movw	r2, #279	; 0x117
 8002836:	4619      	mov	r1, r3
 8002838:	f007 f83a 	bl	80098b0 <memcpy>
 800283c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002840:	4628      	mov	r0, r5
 8002842:	f7ff ff6f 	bl	8002724 <_ZN7MAVLink12writeMessageE17__mavlink_message>
    }

    if (ground_mavlink->readMessage(new_message)){
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <_ZN3SSM18forwarding_MAVLinkEv+0x98>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f107 020c 	add.w	r2, r7, #12
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff feea 	bl	800262a <_ZN7MAVLink11readMessageER17__mavlink_message>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <_ZN3SSM18forwarding_MAVLinkEv+0x8a>
        pixhawk_mavlink->writeMessage(new_message);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <_ZN3SSM18forwarding_MAVLinkEv+0x94>)
 800285e:	681d      	ldr	r5, [r3, #0]
 8002860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002864:	f5a3 7492 	sub.w	r4, r3, #292	; 0x124
 8002868:	4668      	mov	r0, sp
 800286a:	f104 030c 	add.w	r3, r4, #12
 800286e:	f240 1217 	movw	r2, #279	; 0x117
 8002872:	4619      	mov	r1, r3
 8002874:	f007 f81c 	bl	80098b0 <memcpy>
 8002878:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800287c:	4628      	mov	r0, r5
 800287e:	f7ff ff51 	bl	8002724 <_ZN7MAVLink12writeMessageE17__mavlink_message>
    }
}
 8002882:	bf00      	nop
 8002884:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002888:	46bd      	mov	sp, r7
 800288a:	bdb0      	pop	{r4, r5, r7, pc}
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
 80028b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80028b6:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028b8:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <MX_ADC1_Init+0xe4>)
 80028ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028d6:	2204      	movs	r2, #4
 80028d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028fa:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <MX_ADC1_Init+0xe0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <MX_ADC1_Init+0xe0>)
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <MX_ADC1_Init+0xe0>)
 800290a:	2200      	movs	r2, #0
 800290c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <MX_ADC1_Init+0xe0>)
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002916:	4817      	ldr	r0, [pc, #92]	; (8002974 <MX_ADC1_Init+0xe0>)
 8002918:	f001 fac0 	bl	8003e9c <HAL_ADC_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002922:	f000 f9ed 	bl	8002d00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4810      	ldr	r0, [pc, #64]	; (8002974 <MX_ADC1_Init+0xe0>)
 8002932:	f002 f80f 	bl	8004954 <HAL_ADCEx_MultiModeConfigChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800293c:	f000 f9e0 	bl	8002d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_ADC1_Init+0xe8>)
 8002942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002944:	2306      	movs	r3, #6
 8002946:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800294c:	237f      	movs	r3, #127	; 0x7f
 800294e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002950:	2304      	movs	r3, #4
 8002952:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <MX_ADC1_Init+0xe0>)
 800295e:	f001 fbe9 	bl	8004134 <HAL_ADC_ConfigChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002968:	f000 f9ca 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20001154 	.word	0x20001154
 8002978:	42028000 	.word	0x42028000
 800297c:	0c900008 	.word	0x0c900008

08002980 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b0ae      	sub	sp, #184	; 0xb8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	2294      	movs	r2, #148	; 0x94
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f006 ff92 	bl	80098ca <memset>
  if(adcHandle->Instance==ADC1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_ADC_MspInit+0xa8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d137      	bne.n	8002a20 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80029b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80029ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 f838 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80029ce:	f000 f997 	bl	8002d00 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_ADC_MspInit+0xac>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_ADC_MspInit+0xac>)
 80029d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_ADC_MspInit+0xac>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_ADC_MspInit+0xac>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <HAL_ADC_MspInit+0xac>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_ADC_MspInit+0xac>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002a02:	2304      	movs	r3, #4
 8002a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <HAL_ADC_MspInit+0xb0>)
 8002a1c:	f002 fd08 	bl	8005430 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a20:	bf00      	nop
 8002a22:	37b8      	adds	r7, #184	; 0xb8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	42028000 	.word	0x42028000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	42020800 	.word	0x42020800

08002a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <MX_DMA_Init+0x80>)
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <MX_DMA_Init+0x80>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6493      	str	r3, [r2, #72]	; 0x48
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <MX_DMA_Init+0x80>)
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_DMA_Init+0x80>)
 8002a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <MX_DMA_Init+0x80>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6493      	str	r3, [r2, #72]	; 0x48
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <MX_DMA_Init+0x80>)
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	201d      	movs	r0, #29
 8002a70:	f002 f8ef 	bl	8004c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a74:	201d      	movs	r0, #29
 8002a76:	f002 f906 	bl	8004c86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	201e      	movs	r0, #30
 8002a80:	f002 f8e7 	bl	8004c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002a84:	201e      	movs	r0, #30
 8002a86:	f002 f8fe 	bl	8004c86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	201f      	movs	r0, #31
 8002a90:	f002 f8df 	bl	8004c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002a94:	201f      	movs	r0, #31
 8002a96:	f002 f8f6 	bl	8004c86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2020      	movs	r0, #32
 8002aa0:	f002 f8d7 	bl	8004c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002aa4:	2020      	movs	r0, #32
 8002aa6:	f002 f8ee 	bl	8004c86 <HAL_NVIC_EnableIRQ>

}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ada:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0a:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b22:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <MX_GPIO_Init+0x114>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002b2e:	f002 ff95 	bl	8005a5c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	4826      	ldr	r0, [pc, #152]	; (8002bd0 <MX_GPIO_Init+0x118>)
 8002b38:	f002 fdfa 	bl	8005730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b42:	4824      	ldr	r0, [pc, #144]	; (8002bd4 <MX_GPIO_Init+0x11c>)
 8002b44:	f002 fdf4 	bl	8005730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	21a0      	movs	r1, #160	; 0xa0
 8002b4c:	4822      	ldr	r0, [pc, #136]	; (8002bd8 <MX_GPIO_Init+0x120>)
 8002b4e:	f002 fdef 	bl	8005730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8002b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	481b      	ldr	r0, [pc, #108]	; (8002bd8 <MX_GPIO_Init+0x120>)
 8002b6a:	f002 fc61 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4812      	ldr	r0, [pc, #72]	; (8002bd0 <MX_GPIO_Init+0x118>)
 8002b86:	f002 fc53 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8002b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <MX_GPIO_Init+0x11c>)
 8002ba4:	f002 fc44 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8002ba8:	23a0      	movs	r3, #160	; 0xa0
 8002baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <MX_GPIO_Init+0x120>)
 8002bc0:	f002 fc36 	bl	8005430 <HAL_GPIO_Init>

}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	42020800 	.word	0x42020800
 8002bd4:	42020000 	.word	0x42020000
 8002bd8:	42020400 	.word	0x42020400

08002bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002be0:	f000 ff45 	bl	8003a6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002be4:	f000 f81c 	bl	8002c20 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be8:	f7ff ff66 	bl	8002ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bec:	f7ff ff22 	bl	8002a34 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002bf0:	f000 fb26 	bl	8003240 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002bf4:	f000 f88a 	bl	8002d0c <MX_RTC_Init>
  MX_UCPD1_Init();
 8002bf8:	f000 faec 	bl	80031d4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8002bfc:	f000 fe86 	bl	800390c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8002c00:	f7ff fe48 	bl	8002894 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002c04:	f000 fbb6 	bl	8003374 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002c08:	f000 fc0c 	bl	8003424 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8002c0c:	f000 fb66 	bl	80032dc <MX_UART4_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    
    /* USER CODE BEGIN 3 */
    SSM::getInstance()->execute_mavlink_passing();
 8002c10:	f7ff fdba 	bl	8002788 <_ZN3SSM11getInstanceEv>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fdcc 	bl	80027b4 <_ZN3SSM23execute_mavlink_passingEv>
 8002c1c:	e7f8      	b.n	8002c10 <main+0x34>
	...

08002c20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b098      	sub	sp, #96	; 0x60
 8002c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c26:	f107 0318 	add.w	r3, r7, #24
 8002c2a:	2248      	movs	r2, #72	; 0x48
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f006 fe4b 	bl	80098ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002c42:	2000      	movs	r0, #0
 8002c44:	f002 feae 	bl	80059a4 <HAL_PWREx_ControlVoltageScaling>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bf14      	ite	ne
 8002c4e:	2301      	movne	r3, #1
 8002c50:	2300      	moveq	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002c58:	f000 f852 	bl	8002d00 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c5c:	f002 fe84 	bl	8005968 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <_Z18SystemClock_Configv+0xdc>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <_Z18SystemClock_Configv+0xdc>)
 8002c68:	f023 0318 	bic.w	r3, r3, #24
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8002c70:	2334      	movs	r3, #52	; 0x34
 8002c72:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c74:	2381      	movs	r3, #129	; 0x81
 8002c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c84:	2360      	movs	r3, #96	; 0x60
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c90:	2301      	movs	r3, #1
 8002c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8002c94:	2337      	movs	r3, #55	; 0x37
 8002c96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ca4:	f107 0318 	add.w	r3, r7, #24
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f002 ff0b 	bl	8005ac4 <HAL_RCC_OscConfig>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf14      	ite	ne
 8002cb4:	2301      	movne	r3, #1
 8002cb6:	2300      	moveq	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002cbe:	f000 f81f 	bl	8002d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cc2:	230f      	movs	r3, #15
 8002cc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	2105      	movs	r1, #5
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fbc8 	bl	8006470 <HAL_RCC_ClockConfig>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002cf0:	f000 f806 	bl	8002d00 <Error_Handler>
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3760      	adds	r7, #96	; 0x60
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d04:	b672      	cpsid	i
}
 8002d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <Error_Handler+0x8>
	...

08002d0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002d12:	463b      	mov	r3, r7
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
 8002d20:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <MX_RTC_Init+0x90>)
 8002d26:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d30:	227f      	movs	r2, #127	; 0x7f
 8002d32:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d34:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d52:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d5a:	480f      	ldr	r0, [pc, #60]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d5c:	f004 fb82 	bl	8007464 <HAL_RTC_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002d66:	f7ff ffcb 	bl	8002d00 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4806      	ldr	r0, [pc, #24]	; (8002d98 <MX_RTC_Init+0x8c>)
 8002d80:	f004 fc7e 	bl	8007680 <HAL_RTCEx_PrivilegeModeSet>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002d8a:	f7ff ffb9 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200011bc 	.word	0x200011bc
 8002d9c:	40002800 	.word	0x40002800

08002da0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b0a8      	sub	sp, #160	; 0xa0
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	2294      	movs	r2, #148	; 0x94
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f006 fd8a 	bl	80098ca <memset>
  if(rtcHandle->Instance==RTC)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_RTC_MspInit+0x74>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d124      	bne.n	8002e0a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fe30 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002dde:	f7ff ff8f 	bl	8002d00 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RTC_MspInit+0x78>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <HAL_RTC_MspInit+0x78>)
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RTC_MspInit+0x78>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_RTC_MspInit+0x78>)
 8002df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RTC_MspInit+0x78>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	37a0      	adds	r7, #160	; 0xa0
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40002800 	.word	0x40002800
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_MspInit+0x44>)
 8002e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <HAL_MspInit+0x44>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_MspInit+0x44>)
 8002e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_MspInit+0x44>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_MspInit+0x44>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6593      	str	r3, [r2, #88]	; 0x58
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_MspInit+0x44>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <NMI_Handler+0x4>

08002e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <HardFault_Handler+0x4>

08002e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <MemManage_Handler+0x4>

08002e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <BusFault_Handler+0x4>

08002e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <UsageFault_Handler+0x4>

08002e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb0:	f000 fe34 	bl	8003b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <DMA1_Channel1_IRQHandler+0x10>)
 8002ebe:	f002 f8db 	bl	8005078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200014a0 	.word	0x200014a0

08002ecc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <DMA1_Channel2_IRQHandler+0x10>)
 8002ed2:	f002 f8d1 	bl	8005078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20001508 	.word	0x20001508

08002ee0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <DMA1_Channel3_IRQHandler+0x10>)
 8002ee6:	f002 f8c7 	bl	8005078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20001570 	.word	0x20001570

08002ef4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <DMA1_Channel4_IRQHandler+0x10>)
 8002efa:	f002 f8bd 	bl	8005078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20001438 	.word	0x20001438

08002f08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <USART2_IRQHandler+0x10>)
 8002f0e:	f004 fe23 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20001310 	.word	0x20001310

08002f1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <USART3_IRQHandler+0x10>)
 8002f22:	f004 fe19 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200013a4 	.word	0x200013a4

08002f30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <UART4_IRQHandler+0x10>)
 8002f36:	f004 fe0f 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000127c 	.word	0x2000127c

08002f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return 1;
 8002f48:	2301      	movs	r3, #1
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_kill>:

int _kill(int pid, int sig)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f5e:	f006 fc5d 	bl	800981c <__errno>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2216      	movs	r2, #22
 8002f66:	601a      	str	r2, [r3, #0]
  return -1;
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_exit>:

void _exit (int status)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ffe7 	bl	8002f54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f86:	e7fe      	b.n	8002f86 <_exit+0x12>

08002f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <_sbrk+0x5c>)
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <_sbrk+0x60>)
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <_sbrk+0x64>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <_sbrk+0x64>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <_sbrk+0x68>)
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d207      	bcs.n	8002fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb8:	f006 fc30 	bl	800981c <__errno>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e009      	b.n	8002fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <_sbrk+0x64>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <_sbrk+0x64>)
 8002fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20030000 	.word	0x20030000
 8002fe8:	00000400 	.word	0x00000400
 8002fec:	200011e4 	.word	0x200011e4
 8002ff0:	200018e8 	.word	0x200018e8

08002ff4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SystemInit+0x20>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <SystemInit+0x20>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800301e:	4b4f      	ldr	r3, [pc, #316]	; (800315c <SystemCoreClockUpdate+0x144>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <SystemCoreClockUpdate+0x144>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e005      	b.n	8003046 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800303a:	4b48      	ldr	r3, [pc, #288]	; (800315c <SystemCoreClockUpdate+0x144>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <SystemCoreClockUpdate+0x148>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <SystemCoreClockUpdate+0x144>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d866      	bhi.n	800312a <SystemCoreClockUpdate+0x112>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <SystemCoreClockUpdate+0x4c>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003099 	.word	0x08003099
 8003068:	0800312b 	.word	0x0800312b
 800306c:	0800312b 	.word	0x0800312b
 8003070:	0800312b 	.word	0x0800312b
 8003074:	080030a1 	.word	0x080030a1
 8003078:	0800312b 	.word	0x0800312b
 800307c:	0800312b 	.word	0x0800312b
 8003080:	0800312b 	.word	0x0800312b
 8003084:	080030a9 	.word	0x080030a9
 8003088:	0800312b 	.word	0x0800312b
 800308c:	0800312b 	.word	0x0800312b
 8003090:	0800312b 	.word	0x0800312b
 8003094:	080030b1 	.word	0x080030b1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003098:	4a32      	ldr	r2, [pc, #200]	; (8003164 <SystemCoreClockUpdate+0x14c>)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	6013      	str	r3, [r2, #0]
      break;
 800309e:	e048      	b.n	8003132 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80030a0:	4b30      	ldr	r3, [pc, #192]	; (8003164 <SystemCoreClockUpdate+0x14c>)
 80030a2:	4a31      	ldr	r2, [pc, #196]	; (8003168 <SystemCoreClockUpdate+0x150>)
 80030a4:	601a      	str	r2, [r3, #0]
      break;
 80030a6:	e044      	b.n	8003132 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80030a8:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <SystemCoreClockUpdate+0x14c>)
 80030aa:	4a30      	ldr	r2, [pc, #192]	; (800316c <SystemCoreClockUpdate+0x154>)
 80030ac:	601a      	str	r2, [r3, #0]
      break;
 80030ae:	e040      	b.n	8003132 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <SystemCoreClockUpdate+0x144>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <SystemCoreClockUpdate+0x144>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	3301      	adds	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d003      	beq.n	80030d6 <SystemCoreClockUpdate+0xbe>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d006      	beq.n	80030e2 <SystemCoreClockUpdate+0xca>
 80030d4:	e00b      	b.n	80030ee <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80030d6:	4a24      	ldr	r2, [pc, #144]	; (8003168 <SystemCoreClockUpdate+0x150>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	613b      	str	r3, [r7, #16]
          break;
 80030e0:	e00b      	b.n	80030fa <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <SystemCoreClockUpdate+0x154>)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	613b      	str	r3, [r7, #16]
          break;
 80030ec:	e005      	b.n	80030fa <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	613b      	str	r3, [r7, #16]
          break;
 80030f8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <SystemCoreClockUpdate+0x144>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <SystemCoreClockUpdate+0x144>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0e5b      	lsrs	r3, r3, #25
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	3301      	adds	r3, #1
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <SystemCoreClockUpdate+0x14c>)
 8003126:	6013      	str	r3, [r2, #0]
      break;
 8003128:	e003      	b.n	8003132 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800312a:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <SystemCoreClockUpdate+0x14c>)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	6013      	str	r3, [r2, #0]
      break;
 8003130:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <SystemCoreClockUpdate+0x144>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <SystemCoreClockUpdate+0x158>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <SystemCoreClockUpdate+0x14c>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <SystemCoreClockUpdate+0x14c>)
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40021000 	.word	0x40021000
 8003160:	0800aa70 	.word	0x0800aa70
 8003164:	20000008 	.word	0x20000008
 8003168:	00f42400 	.word	0x00f42400
 800316c:	007a1200 	.word	0x007a1200
 8003170:	0800aa58 	.word	0x0800aa58

08003174 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800317e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003180:	4907      	ldr	r1, [pc, #28]	; (80031a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4313      	orrs	r3, r2
 8003186:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800318a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4013      	ands	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000

080031a4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <LL_APB1_GRP2_EnableClock+0x2c>)
 80031ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <LL_APB1_GRP2_EnableClock+0x2c>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LL_APB1_GRP2_EnableClock+0x2c>)
 80031ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40021000 	.word	0x40021000

080031d4 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031da:	463b      	mov	r3, r7
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80031ea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80031ee:	f7ff ffd9 	bl	80031a4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7ff ffbe 	bl	8003174 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7ff ffbb 	bl	8003174 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003204:	2303      	movs	r3, #3
 8003206:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320c:	463b      	mov	r3, r7
 800320e:	4619      	mov	r1, r3
 8003210:	4809      	ldr	r0, [pc, #36]	; (8003238 <MX_UCPD1_Init+0x64>)
 8003212:	f006 fa36 	bl	8009682 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800321c:	2303      	movs	r3, #3
 800321e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	463b      	mov	r3, r7
 8003226:	4619      	mov	r1, r3
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <MX_UCPD1_Init+0x68>)
 800322a:	f006 fa2a 	bl	8009682 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800322e:	bf00      	nop
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	42020400 	.word	0x42020400
 800323c:	42020000 	.word	0x42020000

08003240 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003246:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <MX_LPUART1_UART_Init+0x94>)
 8003248:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <MX_LPUART1_UART_Init+0x98>)
 800324e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003264:	220c      	movs	r2, #12
 8003266:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003276:	2200      	movs	r2, #0
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003282:	2200      	movs	r2, #0
 8003284:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003286:	4812      	ldr	r0, [pc, #72]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 8003288:	f004 fa26 	bl	80076d8 <HAL_UART_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8003292:	f7ff fd35 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003296:	2100      	movs	r1, #0
 8003298:	480d      	ldr	r0, [pc, #52]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 800329a:	f005 ff88 	bl	80091ae <HAL_UARTEx_SetTxFifoThreshold>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80032a4:	f7ff fd2c 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032a8:	2100      	movs	r1, #0
 80032aa:	4809      	ldr	r0, [pc, #36]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 80032ac:	f005 ffbd 	bl	800922a <HAL_UARTEx_SetRxFifoThreshold>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80032b6:	f7ff fd23 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <MX_LPUART1_UART_Init+0x90>)
 80032bc:	f005 ff3e 	bl	800913c <HAL_UARTEx_DisableFifoMode>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80032c6:	f7ff fd1b 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200011e8 	.word	0x200011e8
 80032d4:	40008000 	.word	0x40008000
 80032d8:	00033324 	.word	0x00033324

080032dc <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <MX_UART4_Init+0x90>)
 80032e2:	4a23      	ldr	r2, [pc, #140]	; (8003370 <MX_UART4_Init+0x94>)
 80032e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <MX_UART4_Init+0x90>)
 80032e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <MX_UART4_Init+0x90>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <MX_UART4_Init+0x90>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <MX_UART4_Init+0x90>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <MX_UART4_Init+0x90>)
 8003302:	220c      	movs	r2, #12
 8003304:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003306:	4b19      	ldr	r3, [pc, #100]	; (800336c <MX_UART4_Init+0x90>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <MX_UART4_Init+0x90>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003312:	4b16      	ldr	r3, [pc, #88]	; (800336c <MX_UART4_Init+0x90>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <MX_UART4_Init+0x90>)
 800331a:	2200      	movs	r2, #0
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <MX_UART4_Init+0x90>)
 8003320:	2200      	movs	r2, #0
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003324:	4811      	ldr	r0, [pc, #68]	; (800336c <MX_UART4_Init+0x90>)
 8003326:	f004 f9d7 	bl	80076d8 <HAL_UART_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003330:	f7ff fce6 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003334:	2100      	movs	r1, #0
 8003336:	480d      	ldr	r0, [pc, #52]	; (800336c <MX_UART4_Init+0x90>)
 8003338:	f005 ff39 	bl	80091ae <HAL_UARTEx_SetTxFifoThreshold>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003342:	f7ff fcdd 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003346:	2100      	movs	r1, #0
 8003348:	4808      	ldr	r0, [pc, #32]	; (800336c <MX_UART4_Init+0x90>)
 800334a:	f005 ff6e 	bl	800922a <HAL_UARTEx_SetRxFifoThreshold>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003354:	f7ff fcd4 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003358:	4804      	ldr	r0, [pc, #16]	; (800336c <MX_UART4_Init+0x90>)
 800335a:	f005 feef 	bl	800913c <HAL_UARTEx_DisableFifoMode>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003364:	f7ff fccc 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}
 800336c:	2000127c 	.word	0x2000127c
 8003370:	40004c00 	.word	0x40004c00

08003374 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 800337a:	4a28      	ldr	r2, [pc, #160]	; (800341c <MX_USART2_UART_Init+0xa8>)
 800337c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <MX_USART2_UART_Init+0xac>)
 8003382:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 8003386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800338a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 800338e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003392:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 8003396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800339a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 800339e:	220c      	movs	r2, #12
 80033a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033bc:	2203      	movs	r2, #3
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033d0:	4811      	ldr	r0, [pc, #68]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033d2:	f004 f981 	bl	80076d8 <HAL_UART_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80033dc:	f7ff fc90 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e0:	2100      	movs	r1, #0
 80033e2:	480d      	ldr	r0, [pc, #52]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033e4:	f005 fee3 	bl	80091ae <HAL_UARTEx_SetTxFifoThreshold>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80033ee:	f7ff fc87 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033f2:	2100      	movs	r1, #0
 80033f4:	4808      	ldr	r0, [pc, #32]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 80033f6:	f005 ff18 	bl	800922a <HAL_UARTEx_SetRxFifoThreshold>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003400:	f7ff fc7e 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003404:	4804      	ldr	r0, [pc, #16]	; (8003418 <MX_USART2_UART_Init+0xa4>)
 8003406:	f005 fe99 	bl	800913c <HAL_UARTEx_DisableFifoMode>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8003410:	f7ff fc76 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20001310 	.word	0x20001310
 800341c:	40004400 	.word	0x40004400
 8003420:	000186a0 	.word	0x000186a0

08003424 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003428:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 800342a:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <MX_USART3_UART_Init+0x94>)
 800342c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800342e:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003434:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003436:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003448:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 800344a:	220c      	movs	r2, #12
 800344c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003460:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003468:	2200      	movs	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800346c:	4811      	ldr	r0, [pc, #68]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 800346e:	f004 f933 	bl	80076d8 <HAL_UART_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003478:	f7ff fc42 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800347c:	2100      	movs	r1, #0
 800347e:	480d      	ldr	r0, [pc, #52]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003480:	f005 fe95 	bl	80091ae <HAL_UARTEx_SetTxFifoThreshold>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800348a:	f7ff fc39 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800348e:	2100      	movs	r1, #0
 8003490:	4808      	ldr	r0, [pc, #32]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 8003492:	f005 feca 	bl	800922a <HAL_UARTEx_SetRxFifoThreshold>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800349c:	f7ff fc30 	bl	8002d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80034a0:	4804      	ldr	r0, [pc, #16]	; (80034b4 <MX_USART3_UART_Init+0x90>)
 80034a2:	f005 fe4b 	bl	800913c <HAL_UARTEx_DisableFifoMode>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80034ac:	f7ff fc28 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200013a4 	.word	0x200013a4
 80034b8:	40004800 	.word	0x40004800

080034bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b0b4      	sub	sp, #208	; 0xd0
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d8:	2294      	movs	r2, #148	; 0x94
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f006 f9f4 	bl	80098ca <memset>
  if(uartHandle->Instance==LPUART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5f      	ldr	r2, [pc, #380]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d13e      	bne.n	800356a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80034ec:	2320      	movs	r3, #32
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80034f0:	2300      	movs	r3, #0
 80034f2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fa9d 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003504:	f7ff fbfc 	bl	8002d00 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003508:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	4a56      	ldr	r2, [pc, #344]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003514:	4b54      	ldr	r3, [pc, #336]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003520:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003524:	4a50      	ldr	r2, [pc, #320]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 8003526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800352c:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8003538:	f002 fa90 	bl	8005a5c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800353c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003556:	2308      	movs	r3, #8
 8003558:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800355c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003560:	4619      	mov	r1, r3
 8003562:	4842      	ldr	r0, [pc, #264]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003564:	f001 ff64 	bl	8005430 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003568:	e1b5      	b.n	80038d6 <HAL_UART_MspInit+0x41a>
  else if(uartHandle->Instance==UART4)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a40      	ldr	r2, [pc, #256]	; (8003670 <HAL_UART_MspInit+0x1b4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	f040 8085 	bne.w	8003680 <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003576:	2308      	movs	r3, #8
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800357a:	2300      	movs	r3, #0
 800357c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800357e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003582:	4618      	mov	r0, r3
 8003584:	f003 fa58 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800358e:	f7ff fbb7 	bl	8002d00 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003592:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a34      	ldr	r2, [pc, #208]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 8003598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035b6:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035c2:	2303      	movs	r3, #3
 80035c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035da:	2308      	movs	r3, #8
 80035dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035e4:	4619      	mov	r1, r3
 80035e6:	4823      	ldr	r0, [pc, #140]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035e8:	f001 ff22 	bl	8005430 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel4;
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 80035ee:	4a23      	ldr	r2, [pc, #140]	; (800367c <HAL_UART_MspInit+0x1c0>)
 80035f0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 80035f4:	221f      	movs	r2, #31
 80035f6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fe:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360a:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 800360c:	2200      	movs	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003610:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003612:	2200      	movs	r2, #0
 8003614:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003618:	2200      	movs	r2, #0
 800361a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800361c:	4b16      	ldr	r3, [pc, #88]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 800361e:	2200      	movs	r2, #0
 8003620:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003622:	4815      	ldr	r0, [pc, #84]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003624:	f001 fb4a 	bl	8004cbc <HAL_DMA_Init>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_UART_MspInit+0x176>
      Error_Handler();
 800362e:	f7ff fb67 	bl	8002d00 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_uart4_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003632:	2110      	movs	r1, #16
 8003634:	4810      	ldr	r0, [pc, #64]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003636:	f001 fe2b 	bl	8005290 <HAL_DMA_ConfigChannelAttributes>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8003640:	f7ff fb5e 	bl	8002d00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	2040      	movs	r0, #64	; 0x40
 8003658:	f001 fafb 	bl	8004c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800365c:	2040      	movs	r0, #64	; 0x40
 800365e:	f001 fb12 	bl	8004c86 <HAL_NVIC_EnableIRQ>
}
 8003662:	e138      	b.n	80038d6 <HAL_UART_MspInit+0x41a>
 8003664:	40008000 	.word	0x40008000
 8003668:	40021000 	.word	0x40021000
 800366c:	42021800 	.word	0x42021800
 8003670:	40004c00 	.word	0x40004c00
 8003674:	42020000 	.word	0x42020000
 8003678:	20001438 	.word	0x20001438
 800367c:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a96      	ldr	r2, [pc, #600]	; (80038e0 <HAL_UART_MspInit+0x424>)
 8003686:	4293      	cmp	r3, r2
 8003688:	f040 80a9 	bne.w	80037de <HAL_UART_MspInit+0x322>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800368c:	2302      	movs	r3, #2
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003690:	2300      	movs	r3, #0
 8003692:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003698:	4618      	mov	r0, r3
 800369a:	f003 f9cd 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 80036a4:	f7ff fb2c 	bl	8002d00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036a8:	4b8e      	ldr	r3, [pc, #568]	; (80038e4 <HAL_UART_MspInit+0x428>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	4a8d      	ldr	r2, [pc, #564]	; (80038e4 <HAL_UART_MspInit+0x428>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b2:	6593      	str	r3, [r2, #88]	; 0x58
 80036b4:	4b8b      	ldr	r3, [pc, #556]	; (80038e4 <HAL_UART_MspInit+0x428>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c0:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_UART_MspInit+0x428>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	4a87      	ldr	r2, [pc, #540]	; (80038e4 <HAL_UART_MspInit+0x428>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036cc:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_UART_MspInit+0x428>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036d8:	230c      	movs	r3, #12
 80036da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036f0:	2307      	movs	r3, #7
 80036f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036fa:	4619      	mov	r1, r3
 80036fc:	487a      	ldr	r0, [pc, #488]	; (80038e8 <HAL_UART_MspInit+0x42c>)
 80036fe:	f001 fe97 	bl	8005430 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003702:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <HAL_UART_MspInit+0x430>)
 8003704:	4a7a      	ldr	r2, [pc, #488]	; (80038f0 <HAL_UART_MspInit+0x434>)
 8003706:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003708:	4b78      	ldr	r3, [pc, #480]	; (80038ec <HAL_UART_MspInit+0x430>)
 800370a:	221b      	movs	r2, #27
 800370c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800370e:	4b77      	ldr	r3, [pc, #476]	; (80038ec <HAL_UART_MspInit+0x430>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003714:	4b75      	ldr	r3, [pc, #468]	; (80038ec <HAL_UART_MspInit+0x430>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800371a:	4b74      	ldr	r3, [pc, #464]	; (80038ec <HAL_UART_MspInit+0x430>)
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003720:	4b72      	ldr	r3, [pc, #456]	; (80038ec <HAL_UART_MspInit+0x430>)
 8003722:	2200      	movs	r2, #0
 8003724:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003726:	4b71      	ldr	r3, [pc, #452]	; (80038ec <HAL_UART_MspInit+0x430>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800372c:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <HAL_UART_MspInit+0x430>)
 800372e:	2220      	movs	r2, #32
 8003730:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003732:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <HAL_UART_MspInit+0x430>)
 8003734:	2200      	movs	r2, #0
 8003736:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003738:	486c      	ldr	r0, [pc, #432]	; (80038ec <HAL_UART_MspInit+0x430>)
 800373a:	f001 fabf 	bl	8004cbc <HAL_DMA_Init>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 8003744:	f7ff fadc 	bl	8002d00 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003748:	2110      	movs	r1, #16
 800374a:	4868      	ldr	r0, [pc, #416]	; (80038ec <HAL_UART_MspInit+0x430>)
 800374c:	f001 fda0 	bl	8005290 <HAL_DMA_ConfigChannelAttributes>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_UART_MspInit+0x29e>
      Error_Handler();
 8003756:	f7ff fad3 	bl	8002d00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a63      	ldr	r2, [pc, #396]	; (80038ec <HAL_UART_MspInit+0x430>)
 800375e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003762:	4a62      	ldr	r2, [pc, #392]	; (80038ec <HAL_UART_MspInit+0x430>)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003768:	4b62      	ldr	r3, [pc, #392]	; (80038f4 <HAL_UART_MspInit+0x438>)
 800376a:	4a63      	ldr	r2, [pc, #396]	; (80038f8 <HAL_UART_MspInit+0x43c>)
 800376c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800376e:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <HAL_UART_MspInit+0x438>)
 8003770:	221c      	movs	r2, #28
 8003772:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003774:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_UART_MspInit+0x438>)
 8003776:	2210      	movs	r2, #16
 8003778:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800377a:	4b5e      	ldr	r3, [pc, #376]	; (80038f4 <HAL_UART_MspInit+0x438>)
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003780:	4b5c      	ldr	r3, [pc, #368]	; (80038f4 <HAL_UART_MspInit+0x438>)
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003786:	4b5b      	ldr	r3, [pc, #364]	; (80038f4 <HAL_UART_MspInit+0x438>)
 8003788:	2200      	movs	r2, #0
 800378a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_UART_MspInit+0x438>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003792:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_UART_MspInit+0x438>)
 8003794:	2200      	movs	r2, #0
 8003796:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003798:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <HAL_UART_MspInit+0x438>)
 800379a:	2200      	movs	r2, #0
 800379c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800379e:	4855      	ldr	r0, [pc, #340]	; (80038f4 <HAL_UART_MspInit+0x438>)
 80037a0:	f001 fa8c 	bl	8004cbc <HAL_DMA_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 80037aa:	f7ff faa9 	bl	8002d00 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80037ae:	2110      	movs	r1, #16
 80037b0:	4850      	ldr	r0, [pc, #320]	; (80038f4 <HAL_UART_MspInit+0x438>)
 80037b2:	f001 fd6d 	bl	8005290 <HAL_DMA_ConfigChannelAttributes>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_UART_MspInit+0x304>
      Error_Handler();
 80037bc:	f7ff faa0 	bl	8002d00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a4c      	ldr	r2, [pc, #304]	; (80038f4 <HAL_UART_MspInit+0x438>)
 80037c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80037c6:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_UART_MspInit+0x438>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	2100      	movs	r1, #0
 80037d0:	203e      	movs	r0, #62	; 0x3e
 80037d2:	f001 fa3e 	bl	8004c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037d6:	203e      	movs	r0, #62	; 0x3e
 80037d8:	f001 fa55 	bl	8004c86 <HAL_NVIC_EnableIRQ>
}
 80037dc:	e07b      	b.n	80038d6 <HAL_UART_MspInit+0x41a>
  else if(uartHandle->Instance==USART3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a46      	ldr	r2, [pc, #280]	; (80038fc <HAL_UART_MspInit+0x440>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d176      	bne.n	80038d6 <HAL_UART_MspInit+0x41a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037e8:	2304      	movs	r3, #4
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80037ec:	2300      	movs	r3, #0
 80037ee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 f91f 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8003800:	f7ff fa7e 	bl	8002d00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003804:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <HAL_UART_MspInit+0x428>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a36      	ldr	r2, [pc, #216]	; (80038e4 <HAL_UART_MspInit+0x428>)
 800380a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
 8003810:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_UART_MspInit+0x428>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_UART_MspInit+0x428>)
 800381e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003820:	4a30      	ldr	r2, [pc, #192]	; (80038e4 <HAL_UART_MspInit+0x428>)
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003828:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <HAL_UART_MspInit+0x428>)
 800382a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003834:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800384e:	2307      	movs	r3, #7
 8003850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003854:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003858:	4619      	mov	r1, r3
 800385a:	4829      	ldr	r0, [pc, #164]	; (8003900 <HAL_UART_MspInit+0x444>)
 800385c:	f001 fde8 	bl	8005430 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_UART_MspInit+0x448>)
 8003862:	4a29      	ldr	r2, [pc, #164]	; (8003908 <HAL_UART_MspInit+0x44c>)
 8003864:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_UART_MspInit+0x448>)
 8003868:	221d      	movs	r2, #29
 800386a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_UART_MspInit+0x448>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_UART_MspInit+0x448>)
 8003874:	2200      	movs	r2, #0
 8003876:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_UART_MspInit+0x448>)
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_UART_MspInit+0x448>)
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_UART_MspInit+0x448>)
 8003886:	2200      	movs	r2, #0
 8003888:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_UART_MspInit+0x448>)
 800388c:	2200      	movs	r2, #0
 800388e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <HAL_UART_MspInit+0x448>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003896:	481b      	ldr	r0, [pc, #108]	; (8003904 <HAL_UART_MspInit+0x448>)
 8003898:	f001 fa10 	bl	8004cbc <HAL_DMA_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_UART_MspInit+0x3ea>
      Error_Handler();
 80038a2:	f7ff fa2d 	bl	8002d00 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80038a6:	2110      	movs	r1, #16
 80038a8:	4816      	ldr	r0, [pc, #88]	; (8003904 <HAL_UART_MspInit+0x448>)
 80038aa:	f001 fcf1 	bl	8005290 <HAL_DMA_ConfigChannelAttributes>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_UART_MspInit+0x3fc>
      Error_Handler();
 80038b4:	f7ff fa24 	bl	8002d00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a12      	ldr	r2, [pc, #72]	; (8003904 <HAL_UART_MspInit+0x448>)
 80038bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80038c0:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_UART_MspInit+0x448>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	203f      	movs	r0, #63	; 0x3f
 80038cc:	f001 f9c1 	bl	8004c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80038d0:	203f      	movs	r0, #63	; 0x3f
 80038d2:	f001 f9d8 	bl	8004c86 <HAL_NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	37d0      	adds	r7, #208	; 0xd0
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40004400 	.word	0x40004400
 80038e4:	40021000 	.word	0x40021000
 80038e8:	42020000 	.word	0x42020000
 80038ec:	200014a0 	.word	0x200014a0
 80038f0:	40020008 	.word	0x40020008
 80038f4:	20001508 	.word	0x20001508
 80038f8:	4002001c 	.word	0x4002001c
 80038fc:	40004800 	.word	0x40004800
 8003900:	42020400 	.word	0x42020400
 8003904:	20001570 	.word	0x20001570
 8003908:	40020030 	.word	0x40020030

0800390c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003910:	4b10      	ldr	r3, [pc, #64]	; (8003954 <MX_USB_PCD_Init+0x48>)
 8003912:	4a11      	ldr	r2, [pc, #68]	; (8003958 <MX_USB_PCD_Init+0x4c>)
 8003914:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <MX_USB_PCD_Init+0x48>)
 8003918:	2208      	movs	r2, #8
 800391a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <MX_USB_PCD_Init+0x48>)
 800391e:	2202      	movs	r2, #2
 8003920:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <MX_USB_PCD_Init+0x48>)
 8003924:	2202      	movs	r2, #2
 8003926:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <MX_USB_PCD_Init+0x48>)
 800392a:	2200      	movs	r2, #0
 800392c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <MX_USB_PCD_Init+0x48>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <MX_USB_PCD_Init+0x48>)
 8003936:	2200      	movs	r2, #0
 8003938:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <MX_USB_PCD_Init+0x48>)
 800393c:	2200      	movs	r2, #0
 800393e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003940:	4804      	ldr	r0, [pc, #16]	; (8003954 <MX_USB_PCD_Init+0x48>)
 8003942:	f001 ff0d 	bl	8005760 <HAL_PCD_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800394c:	f7ff f9d8 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	200015d8 	.word	0x200015d8
 8003958:	4000d400 	.word	0x4000d400

0800395c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b0ae      	sub	sp, #184	; 0xb8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003964:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003974:	f107 0310 	add.w	r3, r7, #16
 8003978:	2294      	movs	r2, #148	; 0x94
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f005 ffa4 	bl	80098ca <memset>
  if(pcdHandle->Instance==USB)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <HAL_PCD_MspInit+0xb4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d13d      	bne.n	8003a08 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800398c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003990:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003998:	f107 0310 	add.w	r3, r7, #16
 800399c:	4618      	mov	r0, r3
 800399e:	f003 f84b 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80039a8:	f7ff f9aa 	bl	8002d00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_PCD_MspInit+0xb8>)
 80039ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_PCD_MspInit+0xb8>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_PCD_MspInit+0xb8>)
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80039c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80039c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80039de:	230a      	movs	r3, #10
 80039e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039e8:	4619      	mov	r1, r3
 80039ea:	480b      	ldr	r0, [pc, #44]	; (8003a18 <HAL_PCD_MspInit+0xbc>)
 80039ec:	f001 fd20 	bl	8005430 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_PCD_MspInit+0xb8>)
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_PCD_MspInit+0xb8>)
 80039f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039fa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_PCD_MspInit+0xb8>)
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003a08:	bf00      	nop
 8003a0a:	37b8      	adds	r7, #184	; 0xb8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	4000d400 	.word	0x4000d400
 8003a14:	40021000 	.word	0x40021000
 8003a18:	42020000 	.word	0x42020000

08003a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a20:	f7ff fae8 	bl	8002ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a26:	e003      	b.n	8003a30 <LoopCopyDataInit>

08003a28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a2e:	3104      	adds	r1, #4

08003a30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a30:	480a      	ldr	r0, [pc, #40]	; (8003a5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a38:	d3f6      	bcc.n	8003a28 <CopyDataInit>
	ldr	r2, =_sbss
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a3c:	e002      	b.n	8003a44 <LoopFillZerobss>

08003a3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a40:	f842 3b04 	str.w	r3, [r2], #4

08003a44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <LoopForever+0x16>)
	cmp	r2, r3
 8003a46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a48:	d3f9      	bcc.n	8003a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a4a:	f005 feed 	bl	8009828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a4e:	f7ff f8c5 	bl	8002bdc <main>

08003a52 <LoopForever>:

LoopForever:
    b LoopForever
 8003a52:	e7fe      	b.n	8003a52 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003a54:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8003a58:	0800aaf0 	.word	0x0800aaf0
	ldr	r0, =_sdata
 8003a5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a60:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8003a64:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8003a68:	200018e4 	.word	0x200018e4

08003a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a6c:	e7fe      	b.n	8003a6c <ADC1_2_IRQHandler>

08003a6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003a78:	2004      	movs	r0, #4
 8003a7a:	f001 f8df 	bl	8004c3c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8003a7e:	f7ff facb 	bl	8003018 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a82:	2000      	movs	r0, #0
 8003a84:	f000 f80e 	bl	8003aa4 <HAL_InitTick>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	71fb      	strb	r3, [r7, #7]
 8003a92:	e001      	b.n	8003a98 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a94:	f7ff f9c2 	bl	8002e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a98:	79fb      	ldrb	r3, [r7, #7]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_InitTick+0x6c>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <HAL_InitTick+0x70>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_InitTick+0x6c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 f8e7 	bl	8004ca2 <HAL_SYSTICK_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b07      	cmp	r3, #7
 8003ade:	d809      	bhi.n	8003af4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	f001 f8b3 	bl	8004c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_InitTick+0x74>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e007      	b.n	8003b04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e004      	b.n	8003b04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	e001      	b.n	8003b04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000010 	.word	0x20000010
 8003b14:	20000008 	.word	0x20000008
 8003b18:	2000000c 	.word	0x2000000c

08003b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_IncTick+0x20>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_IncTick+0x24>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_IncTick+0x24>)
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000010 	.word	0x20000010
 8003b40:	200018cc 	.word	0x200018cc

08003b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return uwTick;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <HAL_GetTick+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	200018cc 	.word	0x200018cc

08003b5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3360      	adds	r3, #96	; 0x60
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <LL_ADC_SetOffset+0x44>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	03fff000 	.word	0x03fff000

08003c0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3360      	adds	r3, #96	; 0x60
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3360      	adds	r3, #96	; 0x60
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	615a      	str	r2, [r3, #20]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3330      	adds	r3, #48	; 0x30
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	4413      	add	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	211f      	movs	r1, #31
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	0e9b      	lsrs	r3, r3, #26
 8003ccc:	f003 011f 	and.w	r1, r3, #31
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	0e5b      	lsrs	r3, r3, #25
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	4413      	add	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	0d1b      	lsrs	r3, r3, #20
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2107      	movs	r1, #7
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	401a      	ands	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0d1b      	lsrs	r3, r3, #20
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	431a      	orrs	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	401a      	ands	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0318 	and.w	r3, r3, #24
 8003d66:	4908      	ldr	r1, [pc, #32]	; (8003d88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d68:	40d9      	lsrs	r1, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	0007ffff 	.word	0x0007ffff

08003d8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6093      	str	r3, [r2, #8]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc4:	d101      	bne.n	8003dca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e14:	d101      	bne.n	8003e1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <LL_ADC_IsEnabled+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_ADC_IsEnabled+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d101      	bne.n	8003e8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e12e      	b.n	8004114 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fe fd5b 	bl	8002980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff67 	bl	8003db0 <LL_ADC_IsDeepPowerDownEnabled>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff4d 	bl	8003d8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ff82 	bl	8003e00 <LL_ADC_IsInternalRegulatorEnabled>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d115      	bne.n	8003f2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ff66 	bl	8003dd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f0c:	4b83      	ldr	r3, [pc, #524]	; (800411c <HAL_ADC_Init+0x280>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	4a83      	ldr	r2, [pc, #524]	; (8004120 <HAL_ADC_Init+0x284>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f20:	e002      	b.n	8003f28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f9      	bne.n	8003f22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff64 	bl	8003e00 <LL_ADC_IsInternalRegulatorEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f043 0210 	orr.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ff75 	bl	8003e4e <LL_ADC_REG_IsConversionOngoing>
 8003f64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 80c7 	bne.w	8004102 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 80c3 	bne.w	8004102 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f84:	f043 0202 	orr.w	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff49 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d110      	bne.n	8003fbe <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f9c:	4861      	ldr	r0, [pc, #388]	; (8004124 <HAL_ADC_Init+0x288>)
 8003f9e:	f7ff ff43 	bl	8003e28 <LL_ADC_IsEnabled>
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4860      	ldr	r0, [pc, #384]	; (8004128 <HAL_ADC_Init+0x28c>)
 8003fa6:	f7ff ff3f 	bl	8003e28 <LL_ADC_IsEnabled>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4323      	orrs	r3, r4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	485c      	ldr	r0, [pc, #368]	; (800412c <HAL_ADC_Init+0x290>)
 8003fba:	f7ff fdcf 	bl	8003b5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7e5b      	ldrb	r3, [r3, #25]
 8003fc2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fc8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003fce:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003fd4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fdc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	045b      	lsls	r3, r3, #17
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	4b44      	ldr	r3, [pc, #272]	; (8004130 <HAL_ADC_Init+0x294>)
 800401e:	4013      	ands	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	69b9      	ldr	r1, [r7, #24]
 8004026:	430b      	orrs	r3, r1
 8004028:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff20 	bl	8003e74 <LL_ADC_INJ_IsConversionOngoing>
 8004034:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d140      	bne.n	80040be <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d13d      	bne.n	80040be <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7e1b      	ldrb	r3, [r3, #24]
 800404a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800404c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004054:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004064:	f023 0306 	bic.w	r3, r3, #6
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	430b      	orrs	r3, r1
 8004070:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004078:	2b01      	cmp	r3, #1
 800407a:	d118      	bne.n	80040ae <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800409e:	430a      	orrs	r2, r1
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	611a      	str	r2, [r3, #16]
 80040ac:	e007      	b.n	80040be <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10c      	bne.n	80040e0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	f023 010f 	bic.w	r1, r3, #15
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
 80040de:	e007      	b.n	80040f0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 020f 	bic.w	r2, r2, #15
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004100:	e007      	b.n	8004112 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	f043 0210 	orr.w	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004112:	7ffb      	ldrb	r3, [r7, #31]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3724      	adds	r7, #36	; 0x24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd90      	pop	{r4, r7, pc}
 800411c:	20000008 	.word	0x20000008
 8004120:	053e2d63 	.word	0x053e2d63
 8004124:	42028000 	.word	0x42028000
 8004128:	42028100 	.word	0x42028100
 800412c:	42028300 	.word	0x42028300
 8004130:	fff0c007 	.word	0xfff0c007

08004134 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b0b7      	sub	sp, #220	; 0xdc
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x22>
 8004152:	2302      	movs	r3, #2
 8004154:	e3c1      	b.n	80048da <HAL_ADC_ConfigChannel+0x7a6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fe73 	bl	8003e4e <LL_ADC_REG_IsConversionOngoing>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 83a6 	bne.w	80048bc <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	f7ff fd89 	bl	8003c94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fe61 	bl	8003e4e <LL_ADC_REG_IsConversionOngoing>
 800418c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fe6d 	bl	8003e74 <LL_ADC_INJ_IsConversionOngoing>
 800419a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800419e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 81c1 	bne.w	800452a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 81bc 	bne.w	800452a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ba:	d10f      	bne.n	80041dc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	4619      	mov	r1, r3
 80041c8:	f7ff fd90 	bl	8003cec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fd4a 	bl	8003c6e <LL_ADC_SetSamplingTimeCommonConfig>
 80041da:	e00e      	b.n	80041fa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f7ff fd7f 	bl	8003cec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fd3a 	bl	8003c6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d00a      	beq.n	8004232 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6919      	ldr	r1, [r3, #16]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800422c:	f7ff fcca 	bl	8003bc4 <LL_ADC_SetOffset>
 8004230:	e17b      	b.n	800452a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fce7 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 800423e:	4603      	mov	r3, r0
 8004240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_ADC_ConfigChannel+0x12a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fcdc 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 8004254:	4603      	mov	r3, r0
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	e01e      	b.n	800429c <HAL_ADC_ConfigChannel+0x168>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fcd1 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 800426a:	4603      	mov	r3, r0
 800426c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800427c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800428c:	2320      	movs	r3, #32
 800428e:	e004      	b.n	800429a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8004290:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x180>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0e9b      	lsrs	r3, r3, #26
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	e018      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x1b2>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80042c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80042d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80042d8:	2320      	movs	r3, #32
 80042da:	e004      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80042dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d106      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fca0 	bl	8003c38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fc84 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 8004304:	4603      	mov	r3, r0
 8004306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x1f0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fc79 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 800431a:	4603      	mov	r3, r0
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 021f 	and.w	r2, r3, #31
 8004322:	e01e      	b.n	8004362 <HAL_ADC_ConfigChannel+0x22e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fc6e 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 8004330:	4603      	mov	r3, r0
 8004332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800434a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8004352:	2320      	movs	r3, #32
 8004354:	e004      	b.n	8004360 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8004356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <HAL_ADC_ConfigChannel+0x246>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0e9b      	lsrs	r3, r3, #26
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	e018      	b.n	80043ac <HAL_ADC_ConfigChannel+0x278>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800438e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800439e:	2320      	movs	r3, #32
 80043a0:	e004      	b.n	80043ac <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80043a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d106      	bne.n	80043be <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2101      	movs	r1, #1
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fc3d 	bl	8003c38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fc21 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x2b6>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fc16 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 80043e0:	4603      	mov	r3, r0
 80043e2:	0e9b      	lsrs	r3, r3, #26
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	e01e      	b.n	8004428 <HAL_ADC_ConfigChannel+0x2f4>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fc0b 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800440c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8004418:	2320      	movs	r3, #32
 800441a:	e004      	b.n	8004426 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 800441c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004420:	fab3 f383 	clz	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x30c>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0e9b      	lsrs	r3, r3, #26
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	e016      	b.n	800446e <HAL_ADC_ConfigChannel+0x33a>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8004460:	2320      	movs	r3, #32
 8004462:	e004      	b.n	800446e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8004464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004468:	fab3 f383 	clz	r3, r3
 800446c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800446e:	429a      	cmp	r2, r3
 8004470:	d106      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	2102      	movs	r1, #2
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fbdc 	bl	8003c38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2103      	movs	r1, #3
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fbc0 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 800448c:	4603      	mov	r3, r0
 800448e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x378>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2103      	movs	r1, #3
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fbb5 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 80044a2:	4603      	mov	r3, r0
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	f003 021f 	and.w	r2, r3, #31
 80044aa:	e017      	b.n	80044dc <HAL_ADC_ConfigChannel+0x3a8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2103      	movs	r1, #3
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fbaa 	bl	8003c0c <LL_ADC_GetOffsetChannel>
 80044b8:	4603      	mov	r3, r0
 80044ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044be:	fa93 f3a3 	rbit	r3, r3
 80044c2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80044c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044c6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80044c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80044ce:	2320      	movs	r3, #32
 80044d0:	e003      	b.n	80044da <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80044d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d4:	fab3 f383 	clz	r3, r3
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x3c0>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	e011      	b.n	8004518 <HAL_ADC_ConfigChannel+0x3e4>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004504:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 800450c:	2320      	movs	r3, #32
 800450e:	e003      	b.n	8004518 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004518:	429a      	cmp	r2, r3
 800451a:	d106      	bne.n	800452a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	2103      	movs	r1, #3
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fb87 	bl	8003c38 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fc7a 	bl	8003e28 <LL_ADC_IsEnabled>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 81c9 	bne.w	80048ce <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	461a      	mov	r2, r3
 800454a:	f7ff fbfb 	bl	8003d44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4a8f      	ldr	r2, [pc, #572]	; (8004790 <HAL_ADC_ConfigChannel+0x65c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	f040 8131 	bne.w	80047bc <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x44e>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	0e9b      	lsrs	r3, r3, #26
 8004570:	3301      	adds	r3, #1
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2b09      	cmp	r3, #9
 8004578:	bf94      	ite	ls
 800457a:	2301      	movls	r3, #1
 800457c:	2300      	movhi	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	e019      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x482>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004592:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800459a:	2320      	movs	r3, #32
 800459c:	e003      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800459e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	3301      	adds	r3, #1
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d079      	beq.n	80046ae <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d107      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x4a2>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	0e9b      	lsrs	r3, r3, #26
 80045cc:	3301      	adds	r3, #1
 80045ce:	069b      	lsls	r3, r3, #26
 80045d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045d4:	e015      	b.n	8004602 <HAL_ADC_ConfigChannel+0x4ce>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80045e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80045ee:	2320      	movs	r3, #32
 80045f0:	e003      	b.n	80045fa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80045f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	069b      	lsls	r3, r3, #26
 80045fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x4ee>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	0e9b      	lsrs	r3, r3, #26
 8004614:	3301      	adds	r3, #1
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	e017      	b.n	8004652 <HAL_ADC_ConfigChannel+0x51e>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e003      	b.n	8004646 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800463e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	3301      	adds	r3, #1
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	ea42 0103 	orr.w	r1, r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x544>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	0e9b      	lsrs	r3, r3, #26
 8004668:	3301      	adds	r3, #1
 800466a:	f003 021f 	and.w	r2, r3, #31
 800466e:	4613      	mov	r3, r2
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	4413      	add	r3, r2
 8004674:	051b      	lsls	r3, r3, #20
 8004676:	e018      	b.n	80046aa <HAL_ADC_ConfigChannel+0x576>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800468a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004690:	2320      	movs	r3, #32
 8004692:	e003      	b.n	800469c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3301      	adds	r3, #1
 800469e:	f003 021f 	and.w	r2, r3, #31
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046aa:	430b      	orrs	r3, r1
 80046ac:	e081      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x596>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	0e9b      	lsrs	r3, r3, #26
 80046c0:	3301      	adds	r3, #1
 80046c2:	069b      	lsls	r3, r3, #26
 80046c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046c8:	e015      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x5c2>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e003      	b.n	80046ee <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	069b      	lsls	r3, r3, #26
 80046f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x5e2>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	0e9b      	lsrs	r3, r3, #26
 8004708:	3301      	adds	r3, #1
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	e017      	b.n	8004746 <HAL_ADC_ConfigChannel+0x612>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	61fb      	str	r3, [r7, #28]
  return result;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800472e:	2320      	movs	r3, #32
 8004730:	e003      	b.n	800473a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	fab3 f383 	clz	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2101      	movs	r1, #1
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	ea42 0103 	orr.w	r1, r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x63e>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	0e9b      	lsrs	r3, r3, #26
 800475c:	3301      	adds	r3, #1
 800475e:	f003 021f 	and.w	r2, r3, #31
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	3b1e      	subs	r3, #30
 800476a:	051b      	lsls	r3, r3, #20
 800476c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004770:	e01e      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x67c>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	613b      	str	r3, [r7, #16]
  return result;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800478a:	2320      	movs	r3, #32
 800478c:	e006      	b.n	800479c <HAL_ADC_ConfigChannel+0x668>
 800478e:	bf00      	nop
 8004790:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	3301      	adds	r3, #1
 800479e:	f003 021f 	and.w	r2, r3, #31
 80047a2:	4613      	mov	r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	4413      	add	r3, r2
 80047a8:	3b1e      	subs	r3, #30
 80047aa:	051b      	lsls	r3, r3, #20
 80047ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b0:	430b      	orrs	r3, r1
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6892      	ldr	r2, [r2, #8]
 80047b6:	4619      	mov	r1, r3
 80047b8:	f7ff fa98 	bl	8003cec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b48      	ldr	r3, [pc, #288]	; (80048e4 <HAL_ADC_ConfigChannel+0x7b0>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8082 	beq.w	80048ce <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ca:	4847      	ldr	r0, [pc, #284]	; (80048e8 <HAL_ADC_ConfigChannel+0x7b4>)
 80047cc:	f7ff f9ec 	bl	8003ba8 <LL_ADC_GetCommonPathInternalCh>
 80047d0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047d4:	4845      	ldr	r0, [pc, #276]	; (80048ec <HAL_ADC_ConfigChannel+0x7b8>)
 80047d6:	f7ff fb27 	bl	8003e28 <LL_ADC_IsEnabled>
 80047da:	4604      	mov	r4, r0
 80047dc:	4844      	ldr	r0, [pc, #272]	; (80048f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80047de:	f7ff fb23 	bl	8003e28 <LL_ADC_IsEnabled>
 80047e2:	4603      	mov	r3, r0
 80047e4:	4323      	orrs	r3, r4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d15e      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a41      	ldr	r2, [pc, #260]	; (80048f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d127      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d121      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a39      	ldr	r2, [pc, #228]	; (80048ec <HAL_ADC_ConfigChannel+0x7b8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d161      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800480a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800480e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004812:	4619      	mov	r1, r3
 8004814:	4834      	ldr	r0, [pc, #208]	; (80048e8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004816:	f7ff f9b4 	bl	8003b82 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800481a:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	099b      	lsrs	r3, r3, #6
 8004820:	4a36      	ldr	r2, [pc, #216]	; (80048fc <HAL_ADC_ConfigChannel+0x7c8>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	4613      	mov	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004832:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004834:	e002      	b.n	800483c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3b01      	subs	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f9      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004842:	e044      	b.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <HAL_ADC_ConfigChannel+0x7cc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d113      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800484e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10d      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a23      	ldr	r2, [pc, #140]	; (80048ec <HAL_ADC_ConfigChannel+0x7b8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d134      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486c:	4619      	mov	r1, r3
 800486e:	481e      	ldr	r0, [pc, #120]	; (80048e8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004870:	f7ff f987 	bl	8003b82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004874:	e02b      	b.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a22      	ldr	r2, [pc, #136]	; (8004904 <HAL_ADC_ConfigChannel+0x7d0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d126      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d120      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a16      	ldr	r2, [pc, #88]	; (80048ec <HAL_ADC_ConfigChannel+0x7b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d11b      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800489a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800489e:	4619      	mov	r1, r3
 80048a0:	4811      	ldr	r0, [pc, #68]	; (80048e8 <HAL_ADC_ConfigChannel+0x7b4>)
 80048a2:	f7ff f96e 	bl	8003b82 <LL_ADC_SetCommonPathInternalCh>
 80048a6:	e012      	b.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80048ba:	e008      	b.n	80048ce <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80048d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80048da:	4618      	mov	r0, r3
 80048dc:	37dc      	adds	r7, #220	; 0xdc
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	bf00      	nop
 80048e4:	80080000 	.word	0x80080000
 80048e8:	42028300 	.word	0x42028300
 80048ec:	42028000 	.word	0x42028000
 80048f0:	42028100 	.word	0x42028100
 80048f4:	c7520000 	.word	0xc7520000
 80048f8:	20000008 	.word	0x20000008
 80048fc:	053e2d63 	.word	0x053e2d63
 8004900:	cb840000 	.word	0xcb840000
 8004904:	80000001 	.word	0x80000001

08004908 <LL_ADC_IsEnabled>:
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <LL_ADC_IsEnabled+0x18>
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <LL_ADC_IsEnabled+0x1a>
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_ADC_REG_IsConversionOngoing>:
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b04      	cmp	r3, #4
 8004940:	d101      	bne.n	8004946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b0a1      	sub	sp, #132	; 0x84
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800496e:	2302      	movs	r3, #2
 8004970:	e089      	b.n	8004a86 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800497a:	2300      	movs	r3, #0
 800497c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800497e:	2300      	movs	r3, #0
 8004980:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a42      	ldr	r2, [pc, #264]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d102      	bne.n	8004992 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800498c:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e001      	b.n	8004996 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e068      	b.n	8004a86 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ffb9 	bl	800492e <LL_ADC_REG_IsConversionOngoing>
 80049bc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ffb3 	bl	800492e <LL_ADC_REG_IsConversionOngoing>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d14a      	bne.n	8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d147      	bne.n	8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049d4:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80049d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d027      	beq.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80049e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049f2:	035b      	lsls	r3, r3, #13
 80049f4:	430b      	orrs	r3, r1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049fc:	4824      	ldr	r0, [pc, #144]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80049fe:	f7ff ff83 	bl	8004908 <LL_ADC_IsEnabled>
 8004a02:	4604      	mov	r4, r0
 8004a04:	4823      	ldr	r0, [pc, #140]	; (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004a06:	f7ff ff7f 	bl	8004908 <LL_ADC_IsEnabled>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4323      	orrs	r3, r4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d132      	bne.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a1a:	f023 030f 	bic.w	r3, r3, #15
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	6811      	ldr	r1, [r2, #0]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	6892      	ldr	r2, [r2, #8]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a2e:	e023      	b.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a3c:	4814      	ldr	r0, [pc, #80]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004a3e:	f7ff ff63 	bl	8004908 <LL_ADC_IsEnabled>
 8004a42:	4604      	mov	r4, r0
 8004a44:	4813      	ldr	r0, [pc, #76]	; (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004a46:	f7ff ff5f 	bl	8004908 <LL_ADC_IsEnabled>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4323      	orrs	r3, r4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d112      	bne.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a5a:	f023 030f 	bic.w	r3, r3, #15
 8004a5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a60:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a62:	e009      	b.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f043 0220 	orr.w	r2, r3, #32
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a76:	e000      	b.n	8004a7a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3784      	adds	r7, #132	; 0x84
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd90      	pop	{r4, r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	42028000 	.word	0x42028000
 8004a94:	42028100 	.word	0x42028100
 8004a98:	42028300 	.word	0x42028300

08004a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	60d3      	str	r3, [r2, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <__NVIC_GetPriorityGrouping+0x18>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	f003 0307 	and.w	r3, r3, #7
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db0b      	blt.n	8004b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	4907      	ldr	r1, [pc, #28]	; (8004b38 <__NVIC_EnableIRQ+0x38>)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2001      	movs	r0, #1
 8004b22:	fa00 f202 	lsl.w	r2, r0, r2
 8004b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e100 	.word	0xe000e100

08004b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db0a      	blt.n	8004b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	490c      	ldr	r1, [pc, #48]	; (8004b88 <__NVIC_SetPriority+0x4c>)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	0152      	lsls	r2, r2, #5
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b64:	e00a      	b.n	8004b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4908      	ldr	r1, [pc, #32]	; (8004b8c <__NVIC_SetPriority+0x50>)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3b04      	subs	r3, #4
 8004b74:	0152      	lsls	r2, r2, #5
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	440b      	add	r3, r1
 8004b7a:	761a      	strb	r2, [r3, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f1c3 0307 	rsb	r3, r3, #7
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	bf28      	it	cs
 8004bae:	2303      	movcs	r3, #3
 8004bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3303      	adds	r3, #3
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d902      	bls.n	8004bc0 <NVIC_EncodePriority+0x30>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	e000      	b.n	8004bc2 <NVIC_EncodePriority+0x32>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43d9      	mvns	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	4313      	orrs	r3, r2
         );
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	; 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c08:	d301      	bcc.n	8004c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00f      	b.n	8004c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <SysTick_Config+0x40>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c16:	2107      	movs	r1, #7
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f7ff ff8e 	bl	8004b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <SysTick_Config+0x40>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <SysTick_Config+0x40>)
 8004c28:	2207      	movs	r2, #7
 8004c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	e000e010 	.word	0xe000e010

08004c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff29 	bl	8004a9c <__NVIC_SetPriorityGrouping>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c60:	f7ff ff40 	bl	8004ae4 <__NVIC_GetPriorityGrouping>
 8004c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f7ff ff90 	bl	8004b90 <NVIC_EncodePriority>
 8004c70:	4602      	mov	r2, r0
 8004c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ff5f 	bl	8004b3c <__NVIC_SetPriority>
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ff33 	bl	8004b00 <__NVIC_EnableIRQ>
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff ffa4 	bl	8004bf8 <SysTick_Config>
 8004cb0:	4603      	mov	r3, r0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e08d      	b.n	8004dea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <HAL_DMA_Init+0x138>)
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d80f      	bhi.n	8004cfa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b45      	ldr	r3, [pc, #276]	; (8004df8 <HAL_DMA_Init+0x13c>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	4a45      	ldr	r2, [pc, #276]	; (8004dfc <HAL_DMA_Init+0x140>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	009a      	lsls	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a42      	ldr	r2, [pc, #264]	; (8004e00 <HAL_DMA_Init+0x144>)
 8004cf6:	649a      	str	r2, [r3, #72]	; 0x48
 8004cf8:	e00e      	b.n	8004d18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <HAL_DMA_Init+0x148>)
 8004d02:	4413      	add	r3, r2
 8004d04:	4a3d      	ldr	r2, [pc, #244]	; (8004dfc <HAL_DMA_Init+0x140>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	009a      	lsls	r2, r3, #2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a3c      	ldr	r2, [pc, #240]	; (8004e08 <HAL_DMA_Init+0x14c>)
 8004d16:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8004d2e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8004d32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fafe 	bl	800536c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d78:	d102      	bne.n	8004d80 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d94:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <HAL_DMA_Init+0x104>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d80c      	bhi.n	8004dc0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fb1e 	bl	80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	e008      	b.n	8004dd2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40020407 	.word	0x40020407
 8004df8:	bffdfff8 	.word	0xbffdfff8
 8004dfc:	cccccccd 	.word	0xcccccccd
 8004e00:	40020000 	.word	0x40020000
 8004e04:	bffdfbf8 	.word	0xbffdfbf8
 8004e08:	40020400 	.word	0x40020400

08004e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_DMA_Start_IT+0x20>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e066      	b.n	8004efa <HAL_DMA_Start_IT+0xee>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d155      	bne.n	8004eec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fa43 	bl	80052f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 020e 	orr.w	r2, r2, #14
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e00f      	b.n	8004ea4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 020a 	orr.w	r2, r2, #10
 8004ea2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e005      	b.n	8004ef8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d008      	beq.n	8004f2c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e040      	b.n	8004fae <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 020e 	bic.w	r2, r2, #14
 8004f3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	f003 021c 	and.w	r2, r3, #28
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f68:	2101      	movs	r1, #1
 8004f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004f9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d005      	beq.n	8004fde <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e047      	b.n	800506e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 020e 	bic.w	r2, r2, #14
 8004fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800500c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	f003 021c 	and.w	r2, r3, #28
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f202 	lsl.w	r2, r1, r2
 8005020:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800502a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005042:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800504c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
    }
  }
  return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	f003 031c 	and.w	r3, r3, #28
 8005098:	2204      	movs	r2, #4
 800509a:	409a      	lsls	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d053      	beq.n	800514c <HAL_DMA_IRQHandler+0xd4>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d04e      	beq.n	800514c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d024      	beq.n	8005106 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	f003 021c 	and.w	r2, r3, #28
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c8:	2104      	movs	r1, #4
 80050ca:	fa01 f202 	lsl.w	r2, r1, r2
 80050ce:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80c0 	beq.w	8005268 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80050f0:	e0ba      	b.n	8005268 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80b6 	beq.w	8005268 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005104:	e0b0      	b.n	8005268 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0204 	bic.w	r2, r2, #4
 8005122:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	f003 021c 	and.w	r2, r3, #28
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005130:	2104      	movs	r1, #4
 8005132:	fa01 f202 	lsl.w	r2, r1, r2
 8005136:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8093 	beq.w	8005268 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800514a:	e08d      	b.n	8005268 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005150:	f003 031c 	and.w	r3, r3, #28
 8005154:	2202      	movs	r2, #2
 8005156:	409a      	lsls	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04e      	beq.n	80051fe <HAL_DMA_IRQHandler+0x186>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d049      	beq.n	80051fe <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d018      	beq.n	80051aa <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	d06e      	beq.n	800526c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005196:	e069      	b.n	800526c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d065      	beq.n	800526c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80051a8:	e060      	b.n	800526c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 020a 	bic.w	r2, r2, #10
 80051c6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d4:	f003 021c 	and.w	r2, r3, #28
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051dc:	2102      	movs	r1, #2
 80051de:	fa01 f202 	lsl.w	r2, r1, r2
 80051e2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d03b      	beq.n	800526c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80051fc:	e036      	b.n	800526c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	f003 031c 	and.w	r3, r3, #28
 8005206:	2208      	movs	r2, #8
 8005208:	409a      	lsls	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02e      	beq.n	8005270 <HAL_DMA_IRQHandler+0x1f8>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d029      	beq.n	8005270 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 020e 	bic.w	r2, r2, #14
 800522a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005230:	f003 021c 	and.w	r2, r3, #28
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	2101      	movs	r1, #1
 800523a:	fa01 f202 	lsl.w	r2, r1, r2
 800523e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005266:	e002      	b.n	800526e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800526c:	bf00      	nop
  return;
 800526e:	bf00      	nop
 8005270:	bf00      	nop
}
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	72fb      	strb	r3, [r7, #11]
    return status;
 80052a8:	7afb      	ldrb	r3, [r7, #11]
 80052aa:	e01b      	b.n	80052e4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e003      	b.n	80052da <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052d8:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

  return status;
 80052e2:	7afb      	ldrb	r3, [r7, #11]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005306:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	f003 021c 	and.w	r2, r3, #28
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005326:	2101      	movs	r1, #1
 8005328:	fa01 f202 	lsl.w	r2, r1, r2
 800532c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b10      	cmp	r3, #16
 800533c:	d108      	bne.n	8005350 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800534e:	e007      	b.n	8005360 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d80a      	bhi.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800538c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6513      	str	r3, [r2, #80]	; 0x50
 8005394:	e007      	b.n	80053a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	009a      	lsls	r2, r3, #2
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053a0:	4413      	add	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	3b08      	subs	r3, #8
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2201      	movs	r2, #1
 80053c6:	409a      	lsls	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40020407 	.word	0x40020407
 80053dc:	40020820 	.word	0x40020820
 80053e0:	cccccccd 	.word	0xcccccccd
 80053e4:	40020880 	.word	0x40020880

080053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	461a      	mov	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a08      	ldr	r2, [pc, #32]	; (800542c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800540a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3b01      	subs	r3, #1
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	2201      	movs	r2, #1
 8005416:	409a      	lsls	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	1000823f 	.word	0x1000823f
 800542c:	40020940 	.word	0x40020940

08005430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800543e:	e158      	b.n	80056f2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	2101      	movs	r1, #1
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 814a 	beq.w	80056ec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d005      	beq.n	8005470 <HAL_GPIO_Init+0x40>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d130      	bne.n	80054d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054a6:	2201      	movs	r2, #1
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f003 0201 	and.w	r2, r3, #1
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d017      	beq.n	800550e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2203      	movs	r2, #3
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d123      	bne.n	8005562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	08da      	lsrs	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3208      	adds	r2, #8
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	220f      	movs	r2, #15
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	08da      	lsrs	r2, r3, #3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3208      	adds	r2, #8
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2203      	movs	r2, #3
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0203 	and.w	r2, r3, #3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80a4 	beq.w	80056ec <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80055a4:	4a5a      	ldr	r2, [pc, #360]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	089b      	lsrs	r3, r3, #2
 80055aa:	3318      	adds	r3, #24
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	220f      	movs	r2, #15
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	43db      	mvns	r3, r3
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4013      	ands	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_GPIO_Init+0x2e4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d025      	beq.n	800561c <HAL_GPIO_Init+0x1ec>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a51      	ldr	r2, [pc, #324]	; (8005718 <HAL_GPIO_Init+0x2e8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d01f      	beq.n	8005618 <HAL_GPIO_Init+0x1e8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a50      	ldr	r2, [pc, #320]	; (800571c <HAL_GPIO_Init+0x2ec>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d019      	beq.n	8005614 <HAL_GPIO_Init+0x1e4>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a4f      	ldr	r2, [pc, #316]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <HAL_GPIO_Init+0x1e0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a4e      	ldr	r2, [pc, #312]	; (8005724 <HAL_GPIO_Init+0x2f4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00d      	beq.n	800560c <HAL_GPIO_Init+0x1dc>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a4d      	ldr	r2, [pc, #308]	; (8005728 <HAL_GPIO_Init+0x2f8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <HAL_GPIO_Init+0x1d8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a4c      	ldr	r2, [pc, #304]	; (800572c <HAL_GPIO_Init+0x2fc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d101      	bne.n	8005604 <HAL_GPIO_Init+0x1d4>
 8005600:	2306      	movs	r3, #6
 8005602:	e00c      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005604:	2307      	movs	r3, #7
 8005606:	e00a      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005608:	2305      	movs	r3, #5
 800560a:	e008      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 800560c:	2304      	movs	r3, #4
 800560e:	e006      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005610:	2303      	movs	r3, #3
 8005612:	e004      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005614:	2302      	movs	r3, #2
 8005616:	e002      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 800561c:	2300      	movs	r3, #0
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	f002 0203 	and.w	r2, r2, #3
 8005624:	00d2      	lsls	r2, r2, #3
 8005626:	4093      	lsls	r3, r2
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800562e:	4938      	ldr	r1, [pc, #224]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	3318      	adds	r3, #24
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800563c:	4b34      	ldr	r3, [pc, #208]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	43db      	mvns	r3, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005660:	4a2b      	ldr	r2, [pc, #172]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005666:	4b2a      	ldr	r3, [pc, #168]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	43db      	mvns	r3, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800568a:	4a21      	ldr	r2, [pc, #132]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	43db      	mvns	r3, r3
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4013      	ands	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056b6:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 80056c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056e4:	4a0a      	ldr	r2, [pc, #40]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3301      	adds	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f47f ae9f 	bne.w	8005440 <HAL_GPIO_Init+0x10>
  }
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	4002f400 	.word	0x4002f400
 8005714:	42020000 	.word	0x42020000
 8005718:	42020400 	.word	0x42020400
 800571c:	42020800 	.word	0x42020800
 8005720:	42020c00 	.word	0x42020c00
 8005724:	42021000 	.word	0x42021000
 8005728:	42021400 	.word	0x42021400
 800572c:	42021800 	.word	0x42021800

08005730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	807b      	strh	r3, [r7, #2]
 800573c:	4613      	mov	r3, r2
 800573e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005740:	787b      	ldrb	r3, [r7, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005746:	887a      	ldrh	r2, [r7, #2]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800574c:	e002      	b.n	8005754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800574e:	887a      	ldrh	r2, [r7, #2]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005762:	b08b      	sub	sp, #44	; 0x2c
 8005764:	af06      	add	r7, sp, #24
 8005766:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0cb      	b.n	800590a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fe f8e8 	bl	800395c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2203      	movs	r2, #3
 8005790:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f003 ffdf 	bl	800975c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
 80057a2:	e040      	b.n	8005826 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	3301      	adds	r3, #1
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	7bfa      	ldrb	r2, [r7, #15]
 80057cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3303      	adds	r3, #3
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	440b      	add	r3, r1
 80057f2:	3338      	adds	r3, #56	; 0x38
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057f8:	7bfa      	ldrb	r2, [r7, #15]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	440b      	add	r3, r1
 8005806:	333c      	adds	r3, #60	; 0x3c
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800580c:	7bfa      	ldrb	r2, [r7, #15]
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	440b      	add	r3, r1
 800581a:	3340      	adds	r3, #64	; 0x40
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	3301      	adds	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d3b9      	bcc.n	80057a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e044      	b.n	80058c0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005836:	7bfa      	ldrb	r2, [r7, #15]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	440b      	add	r3, r1
 8005844:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800584c:	7bfa      	ldrb	r2, [r7, #15]
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	440b      	add	r3, r1
 800585a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800585e:	7bfa      	ldrb	r2, [r7, #15]
 8005860:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005862:	7bfa      	ldrb	r2, [r7, #15]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	440b      	add	r3, r1
 8005870:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005878:	7bfa      	ldrb	r2, [r7, #15]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	440b      	add	r3, r1
 8005886:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800588e:	7bfa      	ldrb	r2, [r7, #15]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058a4:	7bfa      	ldrb	r2, [r7, #15]
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	440b      	add	r3, r1
 80058b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	3301      	adds	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	7bfa      	ldrb	r2, [r7, #15]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3b5      	bcc.n	8005836 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	687e      	ldr	r6, [r7, #4]
 80058d2:	466d      	mov	r5, sp
 80058d4:	f106 0410 	add.w	r4, r6, #16
 80058d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	1d33      	adds	r3, r6, #4
 80058e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058e4:	6838      	ldr	r0, [r7, #0]
 80058e6:	f003 ff54 	bl	8009792 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d102      	bne.n	8005908 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f805 	bl	8005912 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005912 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005936:	b29b      	uxth	r3, r3
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800594a:	b29b      	uxth	r3, r3
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800596c:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a04      	ldr	r2, [pc, #16]	; (8005984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005976:	6013      	str	r3, [r2, #0]
}
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40007000 	.word	0x40007000

08005988 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40007000 	.word	0x40007000

080059a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80059ac:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059b4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80059b6:	f000 f861 	bl	8005a7c <HAL_PWREx_SMPS_GetEffectiveMode>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c0:	d101      	bne.n	80059c6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e03e      	b.n	8005a44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80059c6:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d2:	d101      	bne.n	80059d8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e035      	b.n	8005a44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d101      	bne.n	80059e4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e02f      	b.n	8005a44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80059e4:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80059ec:	4917      	ldr	r1, [pc, #92]	; (8005a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80059f4:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	09db      	lsrs	r3, r3, #7
 8005a02:	2232      	movs	r2, #50	; 0x32
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	08db      	lsrs	r3, r3, #3
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a14:	e002      	b.n	8005a1c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a28:	d102      	bne.n	8005a30 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f2      	bne.n	8005a16 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d101      	bne.n	8005a42 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e000      	b.n	8005a44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	20000008 	.word	0x20000008
 8005a54:	0a7c5ac5 	.word	0x0a7c5ac5
 8005a58:	cccccccd 	.word	0xcccccccd

08005a5c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a04      	ldr	r2, [pc, #16]	; (8005a78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a6a:	6053      	str	r3, [r2, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40007000 	.word	0x40007000

08005a7c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8005a82:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8005a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e00a      	b.n	8005ab0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8005aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	e001      	b.n	8005ab0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8005aac:	2300      	movs	r3, #0
 8005aae:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8005ab0:	687b      	ldr	r3, [r7, #4]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40007000 	.word	0x40007000

08005ac4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f000 bcc2 	b.w	800645c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad8:	4b99      	ldr	r3, [pc, #612]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 030c 	and.w	r3, r3, #12
 8005ae0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ae2:	4b97      	ldr	r3, [pc, #604]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80e9 	beq.w	8005ccc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d006      	beq.n	8005b0e <HAL_RCC_OscConfig+0x4a>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	f040 8083 	bne.w	8005c0e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d17f      	bne.n	8005c0e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b0e:	4b8c      	ldr	r3, [pc, #560]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d006      	beq.n	8005b28 <HAL_RCC_OscConfig+0x64>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f000 bc9a 	b.w	800645c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b2c:	4b84      	ldr	r3, [pc, #528]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_RCC_OscConfig+0x7e>
 8005b38:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b40:	e005      	b.n	8005b4e <HAL_RCC_OscConfig+0x8a>
 8005b42:	4b7f      	ldr	r3, [pc, #508]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d224      	bcs.n	8005b9c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fe9c 	bl	8006894 <RCC_SetFlashLatencyFromMSIRange>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f000 bc7a 	b.w	800645c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b68:	4b75      	ldr	r3, [pc, #468]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a74      	ldr	r2, [pc, #464]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	f043 0308 	orr.w	r3, r3, #8
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	4b72      	ldr	r3, [pc, #456]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	496f      	ldr	r1, [pc, #444]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b86:	4b6e      	ldr	r3, [pc, #440]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	496a      	ldr	r1, [pc, #424]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	604b      	str	r3, [r1, #4]
 8005b9a:	e026      	b.n	8005bea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b9c:	4b68      	ldr	r3, [pc, #416]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a67      	ldr	r2, [pc, #412]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005ba2:	f043 0308 	orr.w	r3, r3, #8
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4b65      	ldr	r3, [pc, #404]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	4962      	ldr	r1, [pc, #392]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bba:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	495d      	ldr	r1, [pc, #372]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fe5b 	bl	8006894 <RCC_SetFlashLatencyFromMSIRange>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f000 bc39 	b.w	800645c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005bea:	f000 fe17 	bl	800681c <HAL_RCC_GetHCLKFreq>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4a54      	ldr	r2, [pc, #336]	; (8005d44 <HAL_RCC_OscConfig+0x280>)
 8005bf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bf4:	4b54      	ldr	r3, [pc, #336]	; (8005d48 <HAL_RCC_OscConfig+0x284>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fd ff53 	bl	8003aa4 <HAL_InitTick>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d060      	beq.n	8005cca <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	f000 bc27 	b.w	800645c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d039      	beq.n	8005c8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c16:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a49      	ldr	r2, [pc, #292]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c22:	f7fd ff8f 	bl	8003b44 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c28:	e00f      	b.n	8005c4a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c2a:	f7fd ff8b 	bl	8003b44 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d908      	bls.n	8005c4a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c38:	4b41      	ldr	r3, [pc, #260]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	f000 bc09 	b.w	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c4a:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0e9      	beq.n	8005c2a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c56:	4b3a      	ldr	r3, [pc, #232]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a39      	ldr	r2, [pc, #228]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c5c:	f043 0308 	orr.w	r3, r3, #8
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	4934      	ldr	r1, [pc, #208]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c74:	4b32      	ldr	r3, [pc, #200]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	492f      	ldr	r1, [pc, #188]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	604b      	str	r3, [r1, #4]
 8005c88:	e020      	b.n	8005ccc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c8a:	4b2d      	ldr	r3, [pc, #180]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2c      	ldr	r2, [pc, #176]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c96:	f7fd ff55 	bl	8003b44 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c9c:	e00e      	b.n	8005cbc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c9e:	f7fd ff51 	bl	8003b44 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d907      	bls.n	8005cbc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cac:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e3cf      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cbc:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ea      	bne.n	8005c9e <HAL_RCC_OscConfig+0x1da>
 8005cc8:	e000      	b.n	8005ccc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d07e      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d005      	beq.n	8005cea <HAL_RCC_OscConfig+0x226>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d10e      	bne.n	8005d02 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d10b      	bne.n	8005d02 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d06e      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x310>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d16a      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e3ac      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCC_OscConfig+0x256>
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a0b      	ldr	r2, [pc, #44]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	e024      	b.n	8005d64 <HAL_RCC_OscConfig+0x2a0>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d22:	d113      	bne.n	8005d4c <HAL_RCC_OscConfig+0x288>
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a05      	ldr	r2, [pc, #20]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a02      	ldr	r2, [pc, #8]	; (8005d40 <HAL_RCC_OscConfig+0x27c>)
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e012      	b.n	8005d64 <HAL_RCC_OscConfig+0x2a0>
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000
 8005d44:	20000008 	.word	0x20000008
 8005d48:	2000000c 	.word	0x2000000c
 8005d4c:	4b8b      	ldr	r3, [pc, #556]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a8a      	ldr	r2, [pc, #552]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a87      	ldr	r2, [pc, #540]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d019      	beq.n	8005da0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fd feea 	bl	8003b44 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d72:	e00e      	b.n	8005d92 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fd fee6 	bl	8003b44 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d907      	bls.n	8005d92 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d82:	4b7e      	ldr	r3, [pc, #504]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e364      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d92:	4b7a      	ldr	r3, [pc, #488]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ea      	beq.n	8005d74 <HAL_RCC_OscConfig+0x2b0>
 8005d9e:	e01a      	b.n	8005dd6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fd fed0 	bl	8003b44 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005da6:	e00e      	b.n	8005dc6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005da8:	f7fd fecc 	bl	8003b44 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d907      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005db6:	4b71      	ldr	r3, [pc, #452]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e34a      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dc6:	4b6d      	ldr	r3, [pc, #436]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1ea      	bne.n	8005da8 <HAL_RCC_OscConfig+0x2e4>
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d06c      	beq.n	8005ebc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d005      	beq.n	8005df4 <HAL_RCC_OscConfig+0x330>
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	d119      	bne.n	8005e22 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d116      	bne.n	8005e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005df4:	4b61      	ldr	r3, [pc, #388]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_RCC_OscConfig+0x348>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e327      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0c:	4b5b      	ldr	r3, [pc, #364]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	061b      	lsls	r3, r3, #24
 8005e1a:	4958      	ldr	r1, [pc, #352]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e20:	e04c      	b.n	8005ebc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d029      	beq.n	8005e7e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e2a:	4b54      	ldr	r3, [pc, #336]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a53      	ldr	r2, [pc, #332]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e36:	f7fd fe85 	bl	8003b44 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e3c:	e00e      	b.n	8005e5c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e3e:	f7fd fe81 	bl	8003b44 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d907      	bls.n	8005e5c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e2ff      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5c:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0ea      	beq.n	8005e3e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e68:	4b44      	ldr	r3, [pc, #272]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	4941      	ldr	r1, [pc, #260]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]
 8005e7c:	e01e      	b.n	8005ebc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7e:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3e      	ldr	r2, [pc, #248]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fd fe5b 	bl	8003b44 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e90:	e00e      	b.n	8005eb0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e92:	f7fd fe57 	bl	8003b44 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d907      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea0:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e2d5      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb0:	4b32      	ldr	r3, [pc, #200]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1ea      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d062      	beq.n	8005f8e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d038      	beq.n	8005f42 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d108      	bne.n	8005eea <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005ed8:	4b28      	ldr	r3, [pc, #160]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005ee0:	f023 0310 	bic.w	r3, r3, #16
 8005ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005ee8:	e007      	b.n	8005efa <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005eea:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef0:	4a22      	ldr	r2, [pc, #136]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005ef2:	f043 0310 	orr.w	r3, r3, #16
 8005ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efa:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f00:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0a:	f7fd fe1b 	bl	8003b44 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f10:	e00f      	b.n	8005f32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f12:	f7fd fe17 	bl	8003b44 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b07      	cmp	r3, #7
 8005f1e:	d908      	bls.n	8005f32 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f20:	4b16      	ldr	r3, [pc, #88]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e294      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0e8      	beq.n	8005f12 <HAL_RCC_OscConfig+0x44e>
 8005f40:	e025      	b.n	8005f8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f42:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f48:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f52:	f7fd fdf7 	bl	8003b44 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f58:	e012      	b.n	8005f80 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5a:	f7fd fdf3 	bl	8003b44 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b07      	cmp	r3, #7
 8005f66:	d90b      	bls.n	8005f80 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <HAL_RCC_OscConfig+0x4b8>)
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e270      	b.n	800645c <HAL_RCC_OscConfig+0x998>
 8005f7a:	bf00      	nop
 8005f7c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f80:	4ba8      	ldr	r3, [pc, #672]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8005f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 812d 	beq.w	80061f6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fa0:	4ba0      	ldr	r3, [pc, #640]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10d      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fac:	4b9d      	ldr	r3, [pc, #628]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	4a9c      	ldr	r2, [pc, #624]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8005fb8:	4b9a      	ldr	r3, [pc, #616]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8005fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fc8:	4b97      	ldr	r3, [pc, #604]	; (8006228 <HAL_RCC_OscConfig+0x764>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d11e      	bne.n	8006012 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fd4:	4b94      	ldr	r3, [pc, #592]	; (8006228 <HAL_RCC_OscConfig+0x764>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a93      	ldr	r2, [pc, #588]	; (8006228 <HAL_RCC_OscConfig+0x764>)
 8005fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe0:	f7fd fdb0 	bl	8003b44 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fe6:	e00e      	b.n	8006006 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe8:	f7fd fdac 	bl	8003b44 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d907      	bls.n	8006006 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ff6:	4b8c      	ldr	r3, [pc, #560]	; (8006228 <HAL_RCC_OscConfig+0x764>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e22a      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006006:	4b88      	ldr	r3, [pc, #544]	; (8006228 <HAL_RCC_OscConfig+0x764>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0ea      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01f      	beq.n	800605e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d010      	beq.n	800604c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800602a:	4b7e      	ldr	r3, [pc, #504]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006030:	4a7c      	ldr	r2, [pc, #496]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006032:	f043 0304 	orr.w	r3, r3, #4
 8006036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800603a:	4b7a      	ldr	r3, [pc, #488]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006040:	4a78      	ldr	r2, [pc, #480]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800604a:	e018      	b.n	800607e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800604c:	4b75      	ldr	r3, [pc, #468]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	4a74      	ldr	r2, [pc, #464]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800605c:	e00f      	b.n	800607e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800605e:	4b71      	ldr	r3, [pc, #452]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	4a6f      	ldr	r2, [pc, #444]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800606e:	4b6d      	ldr	r3, [pc, #436]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	4a6b      	ldr	r2, [pc, #428]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006076:	f023 0304 	bic.w	r3, r3, #4
 800607a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d068      	beq.n	8006158 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006086:	f7fd fd5d 	bl	8003b44 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800608c:	e011      	b.n	80060b2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608e:	f7fd fd59 	bl	8003b44 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f241 3288 	movw	r2, #5000	; 0x1388
 800609c:	4293      	cmp	r3, r2
 800609e:	d908      	bls.n	80060b2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a0:	4b60      	ldr	r3, [pc, #384]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e1d4      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060b2:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0e6      	beq.n	800608e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d022      	beq.n	8006112 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060cc:	4b55      	ldr	r3, [pc, #340]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d2:	4a54      	ldr	r2, [pc, #336]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060dc:	e011      	b.n	8006102 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060de:	f7fd fd31 	bl	8003b44 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d908      	bls.n	8006102 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060f0:	4b4c      	ldr	r3, [pc, #304]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e1ac      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006102:	4b48      	ldr	r3, [pc, #288]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0e6      	beq.n	80060de <HAL_RCC_OscConfig+0x61a>
 8006110:	e068      	b.n	80061e4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006112:	4b44      	ldr	r3, [pc, #272]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006118:	4a42      	ldr	r2, [pc, #264]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 800611a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006122:	e011      	b.n	8006148 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006124:	f7fd fd0e 	bl	8003b44 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d908      	bls.n	8006148 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006136:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e189      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006148:	4b36      	ldr	r3, [pc, #216]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e6      	bne.n	8006124 <HAL_RCC_OscConfig+0x660>
 8006156:	e045      	b.n	80061e4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fd fcf4 	bl	8003b44 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800615e:	e011      	b.n	8006184 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fd fcf0 	bl	8003b44 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	; 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d908      	bls.n	8006184 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006172:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e16b      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006184:	4b27      	ldr	r3, [pc, #156]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e6      	bne.n	8006160 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006192:	4b24      	ldr	r3, [pc, #144]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619c:	2b00      	cmp	r3, #0
 800619e:	d021      	beq.n	80061e4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061a0:	4b20      	ldr	r3, [pc, #128]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80061a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061b0:	e011      	b.n	80061d6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fd fcc7 	bl	8003b44 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d908      	bls.n	80061d6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061c4:	4b17      	ldr	r3, [pc, #92]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e142      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061d6:	4b13      	ldr	r3, [pc, #76]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061e4:	7ffb      	ldrb	r3, [r7, #31]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d105      	bne.n	80061f6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 80061f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d04f      	beq.n	80062a2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d028      	beq.n	800625c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 800620c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006210:	4a04      	ldr	r2, [pc, #16]	; (8006224 <HAL_RCC_OscConfig+0x760>)
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621a:	f7fd fc93 	bl	8003b44 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006220:	e014      	b.n	800624c <HAL_RCC_OscConfig+0x788>
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000
 8006228:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800622c:	f7fd fc8a 	bl	8003b44 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d908      	bls.n	800624c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800623a:	4b8a      	ldr	r3, [pc, #552]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 800623c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e107      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800624c:	4b85      	ldr	r3, [pc, #532]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 800624e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0e8      	beq.n	800622c <HAL_RCC_OscConfig+0x768>
 800625a:	e022      	b.n	80062a2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800625c:	4b81      	ldr	r3, [pc, #516]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 800625e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006262:	4a80      	ldr	r2, [pc, #512]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626c:	f7fd fc6a 	bl	8003b44 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006272:	e00f      	b.n	8006294 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006274:	f7fd fc66 	bl	8003b44 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d908      	bls.n	8006294 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006282:	4b78      	ldr	r3, [pc, #480]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e0e3      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006294:	4b73      	ldr	r3, [pc, #460]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e8      	bne.n	8006274 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 80d7 	beq.w	800645a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ac:	4b6d      	ldr	r3, [pc, #436]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 030c 	and.w	r3, r3, #12
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	f000 8091 	beq.w	80063dc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d166      	bne.n	8006390 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c2:	4b68      	ldr	r3, [pc, #416]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a67      	ldr	r2, [pc, #412]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80062c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ce:	f7fd fc39 	bl	8003b44 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062d4:	e00e      	b.n	80062f4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d6:	f7fd fc35 	bl	8003b44 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d907      	bls.n	80062f4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062e4:	4b5f      	ldr	r3, [pc, #380]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e0b3      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062f4:	4b5b      	ldr	r3, [pc, #364]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1ea      	bne.n	80062d6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006300:	4b58      	ldr	r3, [pc, #352]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	4b58      	ldr	r3, [pc, #352]	; (8006468 <HAL_RCC_OscConfig+0x9a4>)
 8006306:	4013      	ands	r3, r2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006310:	3a01      	subs	r2, #1
 8006312:	0112      	lsls	r2, r2, #4
 8006314:	4311      	orrs	r1, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800631a:	0212      	lsls	r2, r2, #8
 800631c:	4311      	orrs	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006322:	0852      	lsrs	r2, r2, #1
 8006324:	3a01      	subs	r2, #1
 8006326:	0552      	lsls	r2, r2, #21
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800632e:	0852      	lsrs	r2, r2, #1
 8006330:	3a01      	subs	r2, #1
 8006332:	0652      	lsls	r2, r2, #25
 8006334:	4311      	orrs	r1, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800633a:	06d2      	lsls	r2, r2, #27
 800633c:	430a      	orrs	r2, r1
 800633e:	4949      	ldr	r1, [pc, #292]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006340:	4313      	orrs	r3, r2
 8006342:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006344:	4b47      	ldr	r3, [pc, #284]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a46      	ldr	r2, [pc, #280]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 800634a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800634e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006350:	4b44      	ldr	r3, [pc, #272]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4a43      	ldr	r2, [pc, #268]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635c:	f7fd fbf2 	bl	8003b44 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006362:	e00e      	b.n	8006382 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006364:	f7fd fbee 	bl	8003b44 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d907      	bls.n	8006382 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006372:	4b3c      	ldr	r3, [pc, #240]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e06c      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006382:	4b38      	ldr	r3, [pc, #224]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0ea      	beq.n	8006364 <HAL_RCC_OscConfig+0x8a0>
 800638e:	e064      	b.n	800645a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006390:	4b34      	ldr	r3, [pc, #208]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a33      	ldr	r2, [pc, #204]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 8006396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fd fbd2 	bl	8003b44 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063a2:	e00e      	b.n	80063c2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a4:	f7fd fbce 	bl	8003b44 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d907      	bls.n	80063c2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063b2:	4b2c      	ldr	r3, [pc, #176]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e04c      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c2:	4b28      	ldr	r3, [pc, #160]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ea      	bne.n	80063a4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80063ce:	4b25      	ldr	r3, [pc, #148]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	4924      	ldr	r1, [pc, #144]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80063d4:	4b25      	ldr	r3, [pc, #148]	; (800646c <HAL_RCC_OscConfig+0x9a8>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	60cb      	str	r3, [r1, #12]
 80063da:	e03e      	b.n	800645a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e039      	b.n	800645c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80063e8:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <HAL_RCC_OscConfig+0x9a0>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 0203 	and.w	r2, r3, #3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d12c      	bne.n	8006456 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	3b01      	subs	r3, #1
 8006408:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d123      	bne.n	8006456 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d11b      	bne.n	8006456 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800642a:	429a      	cmp	r2, r3
 800642c:	d113      	bne.n	8006456 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	085b      	lsrs	r3, r3, #1
 800643a:	3b01      	subs	r3, #1
 800643c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800643e:	429a      	cmp	r2, r3
 8006440:	d109      	bne.n	8006456 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	3b01      	subs	r3, #1
 8006450:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006452:	429a      	cmp	r2, r3
 8006454:	d001      	beq.n	800645a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3720      	adds	r7, #32
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40021000 	.word	0x40021000
 8006468:	019f800c 	.word	0x019f800c
 800646c:	feeefffc 	.word	0xfeeefffc

08006470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e11c      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006488:	4b90      	ldr	r3, [pc, #576]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d910      	bls.n	80064b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006496:	4b8d      	ldr	r3, [pc, #564]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 020f 	bic.w	r2, r3, #15
 800649e:	498b      	ldr	r1, [pc, #556]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	4b89      	ldr	r3, [pc, #548]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e104      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	4b81      	ldr	r3, [pc, #516]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d908      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d4:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	497b      	ldr	r1, [pc, #492]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 8085 	beq.w	80065fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d11f      	bne.n	800653c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064fc:	4b74      	ldr	r3, [pc, #464]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0da      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800650c:	f000 fa26 	bl	800695c <RCC_GetSysClockFreqFromPLLSource>
 8006510:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4a6f      	ldr	r2, [pc, #444]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d947      	bls.n	80065aa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800651a:	4b6d      	ldr	r3, [pc, #436]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d141      	bne.n	80065aa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006526:	4b6a      	ldr	r3, [pc, #424]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800652e:	4a68      	ldr	r2, [pc, #416]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006536:	2380      	movs	r3, #128	; 0x80
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e036      	b.n	80065aa <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d107      	bne.n	8006554 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006544:	4b62      	ldr	r3, [pc, #392]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d115      	bne.n	800657c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0b6      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d107      	bne.n	800656c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800655c:	4b5c      	ldr	r3, [pc, #368]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0aa      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800656c:	4b58      	ldr	r3, [pc, #352]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0a2      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800657c:	f000 f8b0 	bl	80066e0 <HAL_RCC_GetSysClockFreq>
 8006580:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4a53      	ldr	r2, [pc, #332]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d90f      	bls.n	80065aa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800658a:	4b51      	ldr	r3, [pc, #324]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006596:	4b4e      	ldr	r3, [pc, #312]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800659e:	4a4c      	ldr	r2, [pc, #304]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80065a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80065a6:	2380      	movs	r3, #128	; 0x80
 80065a8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065aa:	4b49      	ldr	r3, [pc, #292]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f023 0203 	bic.w	r2, r3, #3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4946      	ldr	r1, [pc, #280]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065bc:	f7fd fac2 	bl	8003b44 <HAL_GetTick>
 80065c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	e013      	b.n	80065ec <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c4:	f7fd fabe 	bl	8003b44 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d90a      	bls.n	80065ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 020c 	and.w	r2, r3, #12
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d001      	beq.n	80065ec <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e06a      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ec:	4b38      	ldr	r3, [pc, #224]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 020c 	and.w	r2, r3, #12
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d1e2      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b80      	cmp	r3, #128	; 0x80
 8006602:	d105      	bne.n	8006610 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4a31      	ldr	r2, [pc, #196]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800660a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800660e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006628:	429a      	cmp	r2, r3
 800662a:	d208      	bcs.n	800663e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800662c:	4b28      	ldr	r3, [pc, #160]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4925      	ldr	r1, [pc, #148]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800663e:	4b23      	ldr	r3, [pc, #140]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d210      	bcs.n	800666e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664c:	4b1f      	ldr	r3, [pc, #124]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 020f 	bic.w	r2, r3, #15
 8006654:	491d      	ldr	r1, [pc, #116]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	4313      	orrs	r3, r2
 800665a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <HAL_RCC_ClockConfig+0x25c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d001      	beq.n	800666e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e029      	b.n	80066c2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d008      	beq.n	800668c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	4912      	ldr	r1, [pc, #72]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006688:	4313      	orrs	r3, r2
 800668a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	490a      	ldr	r1, [pc, #40]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066ac:	f000 f8b6 	bl	800681c <HAL_RCC_GetHCLKFreq>
 80066b0:	4603      	mov	r3, r0
 80066b2:	4a09      	ldr	r2, [pc, #36]	; (80066d8 <HAL_RCC_ClockConfig+0x268>)
 80066b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <HAL_RCC_ClockConfig+0x26c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fd f9f2 	bl	8003aa4 <HAL_InitTick>
 80066c0:	4603      	mov	r3, r0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40022000 	.word	0x40022000
 80066d0:	40021000 	.word	0x40021000
 80066d4:	04c4b400 	.word	0x04c4b400
 80066d8:	20000008 	.word	0x20000008
 80066dc:	2000000c 	.word	0x2000000c

080066e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b089      	sub	sp, #36	; 0x24
 80066e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	2300      	movs	r3, #0
 80066ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ee:	4b47      	ldr	r3, [pc, #284]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066f8:	4b44      	ldr	r3, [pc, #272]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_GetSysClockFreq+0x34>
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2b0c      	cmp	r3, #12
 800670c:	d121      	bne.n	8006752 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d11e      	bne.n	8006752 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006714:	4b3d      	ldr	r3, [pc, #244]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006720:	4b3a      	ldr	r3, [pc, #232]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	e005      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006730:	4b36      	ldr	r3, [pc, #216]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	091b      	lsrs	r3, r3, #4
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800673c:	4a34      	ldr	r2, [pc, #208]	; (8006810 <HAL_RCC_GetSysClockFreq+0x130>)
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006744:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006750:	e00a      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d102      	bne.n	800675e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006758:	4b2e      	ldr	r3, [pc, #184]	; (8006814 <HAL_RCC_GetSysClockFreq+0x134>)
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e004      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d101      	bne.n	8006768 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006764:	4b2c      	ldr	r3, [pc, #176]	; (8006818 <HAL_RCC_GetSysClockFreq+0x138>)
 8006766:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b0c      	cmp	r3, #12
 800676c:	d146      	bne.n	80067fc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800676e:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006778:	4b24      	ldr	r3, [pc, #144]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3301      	adds	r3, #1
 8006784:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d003      	beq.n	8006794 <HAL_RCC_GetSysClockFreq+0xb4>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d00d      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0xce>
 8006792:	e019      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006794:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_RCC_GetSysClockFreq+0x134>)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	4a1b      	ldr	r2, [pc, #108]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 800679e:	68d2      	ldr	r2, [r2, #12]
 80067a0:	0a12      	lsrs	r2, r2, #8
 80067a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067a6:	fb02 f303 	mul.w	r3, r2, r3
 80067aa:	617b      	str	r3, [r7, #20]
        break;
 80067ac:	e019      	b.n	80067e2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_RCC_GetSysClockFreq+0x138>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	4a15      	ldr	r2, [pc, #84]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 80067b8:	68d2      	ldr	r2, [r2, #12]
 80067ba:	0a12      	lsrs	r2, r2, #8
 80067bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	617b      	str	r3, [r7, #20]
        break;
 80067c6:	e00c      	b.n	80067e2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d0:	4a0e      	ldr	r2, [pc, #56]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 80067d2:	68d2      	ldr	r2, [r2, #12]
 80067d4:	0a12      	lsrs	r2, r2, #8
 80067d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067da:	fb02 f303 	mul.w	r3, r2, r3
 80067de:	617b      	str	r3, [r7, #20]
        break;
 80067e0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_RCC_GetSysClockFreq+0x12c>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	0e5b      	lsrs	r3, r3, #25
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	3301      	adds	r3, #1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80067fc:	69bb      	ldr	r3, [r7, #24]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3724      	adds	r7, #36	; 0x24
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	0800aa70 	.word	0x0800aa70
 8006814:	00f42400 	.word	0x00f42400
 8006818:	007a1200 	.word	0x007a1200

0800681c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8006820:	f7ff ff5e 	bl	80066e0 <HAL_RCC_GetSysClockFreq>
 8006824:	4602      	mov	r2, r0
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_RCC_GetHCLKFreq+0x20>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	091b      	lsrs	r3, r3, #4
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	4903      	ldr	r1, [pc, #12]	; (8006840 <HAL_RCC_GetHCLKFreq+0x24>)
 8006832:	5ccb      	ldrb	r3, [r1, r3]
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40021000 	.word	0x40021000
 8006840:	0800aa58 	.word	0x0800aa58

08006844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006848:	f7ff ffe8 	bl	800681c <HAL_RCC_GetHCLKFreq>
 800684c:	4602      	mov	r2, r0
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	0a1b      	lsrs	r3, r3, #8
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	4903      	ldr	r1, [pc, #12]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40021000 	.word	0x40021000
 8006868:	0800aa68 	.word	0x0800aa68

0800686c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006870:	f7ff ffd4 	bl	800681c <HAL_RCC_GetHCLKFreq>
 8006874:	4602      	mov	r2, r0
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	0adb      	lsrs	r3, r3, #11
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4903      	ldr	r1, [pc, #12]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006882:	5ccb      	ldrb	r3, [r1, r3]
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40021000 	.word	0x40021000
 8006890:	0800aa68 	.word	0x0800aa68

08006894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80068a0:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80068a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80068ac:	f7ff f86c 	bl	8005988 <HAL_PWREx_GetVoltageRange>
 80068b0:	6138      	str	r0, [r7, #16]
 80068b2:	e014      	b.n	80068de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068b4:	4b27      	ldr	r3, [pc, #156]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	4a26      	ldr	r2, [pc, #152]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80068ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068be:	6593      	str	r3, [r2, #88]	; 0x58
 80068c0:	4b24      	ldr	r3, [pc, #144]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80068c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068cc:	f7ff f85c 	bl	8005988 <HAL_PWREx_GetVoltageRange>
 80068d0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068d2:	4b20      	ldr	r3, [pc, #128]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80068d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <RCC_SetFlashLatencyFromMSIRange+0x58>
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ea:	d10b      	bne.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d919      	bls.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2ba0      	cmp	r3, #160	; 0xa0
 80068f6:	d902      	bls.n	80068fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068f8:	2302      	movs	r3, #2
 80068fa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80068fc:	e013      	b.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068fe:	2301      	movs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006902:	e010      	b.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d902      	bls.n	8006910 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800690a:	2303      	movs	r3, #3
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	e00a      	b.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d102      	bne.n	800691c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006916:	2302      	movs	r3, #2
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e004      	b.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b70      	cmp	r3, #112	; 0x70
 8006920:	d101      	bne.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006922:	2301      	movs	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006926:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 020f 	bic.w	r2, r3, #15
 800692e:	490a      	ldr	r1, [pc, #40]	; (8006958 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006936:	4b08      	ldr	r3, [pc, #32]	; (8006958 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40021000 	.word	0x40021000
 8006958:	40022000 	.word	0x40022000

0800695c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006962:	4b31      	ldr	r3, [pc, #196]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800696c:	4b2e      	ldr	r3, [pc, #184]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	3301      	adds	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d015      	beq.n	80069ac <RCC_GetSysClockFreqFromPLLSource+0x50>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d839      	bhi.n	80069fa <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d01c      	beq.n	80069c6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d133      	bne.n	80069fa <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006992:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	4a23      	ldr	r2, [pc, #140]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800699c:	68d2      	ldr	r2, [r2, #12]
 800699e:	0a12      	lsrs	r2, r2, #8
 80069a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069a4:	fb02 f303 	mul.w	r3, r2, r3
 80069a8:	613b      	str	r3, [r7, #16]
      break;
 80069aa:	e029      	b.n	8006a00 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ac:	4a20      	ldr	r2, [pc, #128]	; (8006a30 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80069b6:	68d2      	ldr	r2, [r2, #12]
 80069b8:	0a12      	lsrs	r2, r2, #8
 80069ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	613b      	str	r3, [r7, #16]
      break;
 80069c4:	e01c      	b.n	8006a00 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069c6:	4b18      	ldr	r3, [pc, #96]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80069d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e005      	b.n	80069ee <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069e2:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80069ee:	4a11      	ldr	r2, [pc, #68]	; (8006a34 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f6:	613b      	str	r3, [r7, #16]
        break;
 80069f8:	e002      	b.n	8006a00 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	613b      	str	r3, [r7, #16]
      break;
 80069fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	0e5b      	lsrs	r3, r3, #25
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006a1a:	683b      	ldr	r3, [r7, #0]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	00f42400 	.word	0x00f42400
 8006a30:	007a1200 	.word	0x007a1200
 8006a34:	0800aa70 	.word	0x0800aa70

08006a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a40:	2300      	movs	r3, #0
 8006a42:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a44:	2300      	movs	r3, #0
 8006a46:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d040      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a58:	2b80      	cmp	r3, #128	; 0x80
 8006a5a:	d02a      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d825      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006a60:	2b60      	cmp	r3, #96	; 0x60
 8006a62:	d026      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a64:	2b60      	cmp	r3, #96	; 0x60
 8006a66:	d821      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006a68:	2b40      	cmp	r3, #64	; 0x40
 8006a6a:	d006      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d81d      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d010      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006a78:	e018      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a7a:	4b8f      	ldr	r3, [pc, #572]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	4a8e      	ldr	r2, [pc, #568]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a84:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a86:	e015      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fb56 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a98:	e00c      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3320      	adds	r3, #32
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fc33 	bl	800730c <RCCEx_PLLSAI2_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006aaa:	e003      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	77fb      	strb	r3, [r7, #31]
        break;
 8006ab0:	e000      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8006ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab4:	7ffb      	ldrb	r3, [r7, #31]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10b      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006aba:	4b7f      	ldr	r3, [pc, #508]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ac0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac8:	497b      	ldr	r1, [pc, #492]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006ad0:	e001      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	7ffb      	ldrb	r3, [r7, #31]
 8006ad4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d047      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aea:	d030      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af0:	d82a      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006af6:	d02a      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006afc:	d824      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b02:	d008      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b08:	d81e      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b12:	d010      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006b14:	e018      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b16:	4b68      	ldr	r3, [pc, #416]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	4a67      	ldr	r2, [pc, #412]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b20:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b22:	e015      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fb08 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b34:	e00c      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3320      	adds	r3, #32
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fbe5 	bl	800730c <RCCEx_PLLSAI2_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b46:	e003      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	77fb      	strb	r3, [r7, #31]
        break;
 8006b4c:	e000      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8006b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b50:	7ffb      	ldrb	r3, [r7, #31]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b56:	4b58      	ldr	r3, [pc, #352]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	4954      	ldr	r1, [pc, #336]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006b6c:	e001      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	7ffb      	ldrb	r3, [r7, #31]
 8006b70:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80ab 	beq.w	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b80:	2300      	movs	r3, #0
 8006b82:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b84:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10d      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b90:	4b49      	ldr	r3, [pc, #292]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b94:	4a48      	ldr	r2, [pc, #288]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b9c:	4b46      	ldr	r3, [pc, #280]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bac:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a42      	ldr	r2, [pc, #264]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bb8:	f7fc ffc4 	bl	8003b44 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bbe:	e00f      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc0:	f7fc ffc0 	bl	8003b44 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d908      	bls.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bce:	4b3b      	ldr	r3, [pc, #236]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d109      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8006bde:	e006      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006be0:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0e9      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006bec:	e000      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8006bee:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006bf0:	7ffb      	ldrb	r3, [r7, #31]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d164      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bf6:	4b30      	ldr	r3, [pc, #192]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c00:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01f      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d019      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c14:	4b28      	ldr	r3, [pc, #160]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c20:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	4a24      	ldr	r2, [pc, #144]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c30:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c36:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c40:	4a1d      	ldr	r2, [pc, #116]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01f      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fc ff77 	bl	8003b44 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c58:	e012      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c5a:	f7fc ff73 	bl	8003b44 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d909      	bls.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6c:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8006c7e:	e007      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c80:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0e5      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8006c90:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8006c92:	7ffb      	ldrb	r3, [r7, #31]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10c      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca8:	4903      	ldr	r1, [pc, #12]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006cb0:	e008      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
 8006cb4:	77bb      	strb	r3, [r7, #30]
 8006cb6:	e005      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	7ffb      	ldrb	r3, [r7, #31]
 8006cc2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d105      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cca:	4b9c      	ldr	r3, [pc, #624]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	4a9b      	ldr	r2, [pc, #620]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ce2:	4b96      	ldr	r3, [pc, #600]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce8:	f023 0203 	bic.w	r2, r3, #3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf0:	4992      	ldr	r1, [pc, #584]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d04:	4b8d      	ldr	r3, [pc, #564]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	f023 020c 	bic.w	r2, r3, #12
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	498a      	ldr	r1, [pc, #552]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d26:	4b85      	ldr	r3, [pc, #532]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	4981      	ldr	r1, [pc, #516]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d48:	4b7c      	ldr	r3, [pc, #496]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	4979      	ldr	r1, [pc, #484]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d6a:	4b74      	ldr	r3, [pc, #464]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d78:	4970      	ldr	r1, [pc, #448]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d8c:	4b6b      	ldr	r3, [pc, #428]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9a:	4968      	ldr	r1, [pc, #416]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dae:	4b63      	ldr	r3, [pc, #396]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbc:	495f      	ldr	r1, [pc, #380]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dd0:	4b5a      	ldr	r3, [pc, #360]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dde:	4957      	ldr	r1, [pc, #348]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006df2:	4b52      	ldr	r3, [pc, #328]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e00:	494e      	ldr	r1, [pc, #312]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d031      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e1c:	d00e      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e22:	d814      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d015      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e2c:	d10f      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e2e:	4b43      	ldr	r3, [pc, #268]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	4a42      	ldr	r2, [pc, #264]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e38:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006e3a:	e00c      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f97c 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006e4c:	e003      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	77fb      	strb	r3, [r7, #31]
        break;
 8006e52:	e000      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8006e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e56:	7ffb      	ldrb	r3, [r7, #31]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10b      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e5c:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e6a:	4934      	ldr	r1, [pc, #208]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006e72:	e001      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e74:	7ffb      	ldrb	r3, [r7, #31]
 8006e76:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	492a      	ldr	r1, [pc, #168]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ea6:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb4:	4921      	ldr	r1, [pc, #132]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed6:	4919      	ldr	r1, [pc, #100]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eea:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef0:	f023 0203 	bic.w	r2, r3, #3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef8:	4910      	ldr	r1, [pc, #64]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d02b      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1a:	4908      	ldr	r1, [pc, #32]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2a:	d109      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f2c:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4a02      	ldr	r2, [pc, #8]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f36:	60d3      	str	r3, [r2, #12]
 8006f38:	e014      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006f3a:	bf00      	nop
 8006f3c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f48:	d10c      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f8f5 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8006f5a:	7ffb      	ldrb	r3, [r7, #31]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8006f60:	7ffb      	ldrb	r3, [r7, #31]
 8006f62:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d04a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f78:	d108      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006f7a:	4b70      	ldr	r3, [pc, #448]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f80:	4a6e      	ldr	r2, [pc, #440]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f8a:	e012      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006f8c:	4b6b      	ldr	r3, [pc, #428]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f9a:	4968      	ldr	r1, [pc, #416]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006fa2:	4b66      	ldr	r3, [pc, #408]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fa8:	4a64      	ldr	r2, [pc, #400]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fba:	d10d      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f8bc 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006fcc:	7ffb      	ldrb	r3, [r7, #31]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d019      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8006fd2:	7ffb      	ldrb	r3, [r7, #31]
 8006fd4:	77bb      	strb	r3, [r7, #30]
 8006fd6:	e016      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fe0:	d106      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe2:	4b56      	ldr	r3, [pc, #344]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4a55      	ldr	r2, [pc, #340]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fec:	60d3      	str	r3, [r2, #12]
 8006fee:	e00a      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff8:	d105      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ffa:	4b50      	ldr	r3, [pc, #320]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	4a4f      	ldr	r2, [pc, #316]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007004:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d028      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007012:	4b4a      	ldr	r3, [pc, #296]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007018:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007020:	4946      	ldr	r1, [pc, #280]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007030:	d106      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007032:	4b42      	ldr	r3, [pc, #264]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	4a41      	ldr	r2, [pc, #260]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800703c:	60d3      	str	r3, [r2, #12]
 800703e:	e011      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007048:	d10c      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3304      	adds	r3, #4
 800704e:	2101      	movs	r1, #1
 8007050:	4618      	mov	r0, r3
 8007052:	f000 f875 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800705a:	7ffb      	ldrb	r3, [r7, #31]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01e      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007070:	4b32      	ldr	r3, [pc, #200]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007080:	492e      	ldr	r1, [pc, #184]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007092:	d10c      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3304      	adds	r3, #4
 8007098:	2102      	movs	r1, #2
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f850 	bl	8007140 <RCCEx_PLLSAI1_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80070a4:	7ffb      	ldrb	r3, [r7, #31]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80070aa:	7ffb      	ldrb	r3, [r7, #31]
 80070ac:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00b      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070ba:	4b20      	ldr	r3, [pc, #128]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80070bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c0:	f023 0204 	bic.w	r2, r3, #4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ca:	491c      	ldr	r1, [pc, #112]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80070de:	4b17      	ldr	r3, [pc, #92]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80070e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070e4:	f023 0218 	bic.w	r2, r3, #24
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ee:	4913      	ldr	r1, [pc, #76]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007102:	4b0e      	ldr	r3, [pc, #56]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007112:	490a      	ldr	r1, [pc, #40]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007120:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007124:	d105      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007126:	4b05      	ldr	r3, [pc, #20]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	4a04      	ldr	r2, [pc, #16]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800712c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007130:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007132:	7fbb      	ldrb	r3, [r7, #30]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021000 	.word	0x40021000

08007140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d018      	beq.n	8007188 <RCCEx_PLLSAI1_Config+0x48>
 8007156:	2b03      	cmp	r3, #3
 8007158:	d81f      	bhi.n	800719a <RCCEx_PLLSAI1_Config+0x5a>
 800715a:	2b01      	cmp	r3, #1
 800715c:	d002      	beq.n	8007164 <RCCEx_PLLSAI1_Config+0x24>
 800715e:	2b02      	cmp	r3, #2
 8007160:	d009      	beq.n	8007176 <RCCEx_PLLSAI1_Config+0x36>
 8007162:	e01a      	b.n	800719a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007164:	4b65      	ldr	r3, [pc, #404]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d117      	bne.n	80071a0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007174:	e014      	b.n	80071a0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007176:	4b61      	ldr	r3, [pc, #388]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800717e:	2b00      	cmp	r3, #0
 8007180:	d110      	bne.n	80071a4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007186:	e00d      	b.n	80071a4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007188:	4b5c      	ldr	r3, [pc, #368]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007198:	e006      	b.n	80071a8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
      break;
 800719e:	e004      	b.n	80071aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80071a0:	bf00      	nop
 80071a2:	e002      	b.n	80071aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80071a4:	bf00      	nop
 80071a6:	e000      	b.n	80071aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80071a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 809f 	bne.w	80072f0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80071b2:	4b52      	ldr	r3, [pc, #328]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a51      	ldr	r2, [pc, #324]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80071b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071be:	f7fc fcc1 	bl	8003b44 <HAL_GetTick>
 80071c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071c4:	e00f      	b.n	80071e6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071c6:	f7fc fcbd 	bl	8003b44 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d908      	bls.n	80071e6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071d4:	4b49      	ldr	r3, [pc, #292]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071e4:	e006      	b.n	80071f4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071e6:	4b45      	ldr	r3, [pc, #276]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e9      	bne.n	80071c6 <RCCEx_PLLSAI1_Config+0x86>
 80071f2:	e000      	b.n	80071f6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80071f4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d179      	bne.n	80072f0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d116      	bne.n	8007230 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007202:	4b3e      	ldr	r3, [pc, #248]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	4b3e      	ldr	r3, [pc, #248]	; (8007300 <RCCEx_PLLSAI1_Config+0x1c0>)
 8007208:	4013      	ands	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6892      	ldr	r2, [r2, #8]
 800720e:	0211      	lsls	r1, r2, #8
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68d2      	ldr	r2, [r2, #12]
 8007214:	06d2      	lsls	r2, r2, #27
 8007216:	4311      	orrs	r1, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6852      	ldr	r2, [r2, #4]
 800721c:	3a01      	subs	r2, #1
 800721e:	0112      	lsls	r2, r2, #4
 8007220:	4311      	orrs	r1, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	4934      	ldr	r1, [pc, #208]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800722a:	4313      	orrs	r3, r2
 800722c:	610b      	str	r3, [r1, #16]
 800722e:	e033      	b.n	8007298 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d118      	bne.n	8007268 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007236:	4b31      	ldr	r3, [pc, #196]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	4b32      	ldr	r3, [pc, #200]	; (8007304 <RCCEx_PLLSAI1_Config+0x1c4>)
 800723c:	4013      	ands	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6892      	ldr	r2, [r2, #8]
 8007242:	0211      	lsls	r1, r2, #8
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6912      	ldr	r2, [r2, #16]
 8007248:	0852      	lsrs	r2, r2, #1
 800724a:	3a01      	subs	r2, #1
 800724c:	0552      	lsls	r2, r2, #21
 800724e:	4311      	orrs	r1, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6852      	ldr	r2, [r2, #4]
 8007254:	3a01      	subs	r2, #1
 8007256:	0112      	lsls	r2, r2, #4
 8007258:	4311      	orrs	r1, r2
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6812      	ldr	r2, [r2, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	4926      	ldr	r1, [pc, #152]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8007262:	4313      	orrs	r3, r2
 8007264:	610b      	str	r3, [r1, #16]
 8007266:	e017      	b.n	8007298 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007268:	4b24      	ldr	r3, [pc, #144]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	4b26      	ldr	r3, [pc, #152]	; (8007308 <RCCEx_PLLSAI1_Config+0x1c8>)
 800726e:	4013      	ands	r3, r2
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6892      	ldr	r2, [r2, #8]
 8007274:	0211      	lsls	r1, r2, #8
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6952      	ldr	r2, [r2, #20]
 800727a:	0852      	lsrs	r2, r2, #1
 800727c:	3a01      	subs	r2, #1
 800727e:	0652      	lsls	r2, r2, #25
 8007280:	4311      	orrs	r1, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6852      	ldr	r2, [r2, #4]
 8007286:	3a01      	subs	r2, #1
 8007288:	0112      	lsls	r2, r2, #4
 800728a:	4311      	orrs	r1, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	491a      	ldr	r1, [pc, #104]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8007294:	4313      	orrs	r3, r2
 8007296:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007298:	4b18      	ldr	r3, [pc, #96]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a17      	ldr	r2, [pc, #92]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800729e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fc fc4e 	bl	8003b44 <HAL_GetTick>
 80072a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072aa:	e00f      	b.n	80072cc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072ac:	f7fc fc4a 	bl	8003b44 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d908      	bls.n	80072cc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80072ca:	e006      	b.n	80072da <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072cc:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0e9      	beq.n	80072ac <RCCEx_PLLSAI1_Config+0x16c>
 80072d8:	e000      	b.n	80072dc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80072da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	4904      	ldr	r1, [pc, #16]	; (80072fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40021000 	.word	0x40021000
 8007300:	07ff800c 	.word	0x07ff800c
 8007304:	ff9f800c 	.word	0xff9f800c
 8007308:	f9ff800c 	.word	0xf9ff800c

0800730c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b03      	cmp	r3, #3
 8007320:	d018      	beq.n	8007354 <RCCEx_PLLSAI2_Config+0x48>
 8007322:	2b03      	cmp	r3, #3
 8007324:	d81f      	bhi.n	8007366 <RCCEx_PLLSAI2_Config+0x5a>
 8007326:	2b01      	cmp	r3, #1
 8007328:	d002      	beq.n	8007330 <RCCEx_PLLSAI2_Config+0x24>
 800732a:	2b02      	cmp	r3, #2
 800732c:	d009      	beq.n	8007342 <RCCEx_PLLSAI2_Config+0x36>
 800732e:	e01a      	b.n	8007366 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007330:	4b4a      	ldr	r3, [pc, #296]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d117      	bne.n	800736c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007340:	e014      	b.n	800736c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007342:	4b46      	ldr	r3, [pc, #280]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734a:	2b00      	cmp	r3, #0
 800734c:	d110      	bne.n	8007370 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007352:	e00d      	b.n	8007370 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007354:	4b41      	ldr	r3, [pc, #260]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007364:	e006      	b.n	8007374 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	e004      	b.n	8007376 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800736c:	bf00      	nop
 800736e:	e002      	b.n	8007376 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007370:	bf00      	nop
 8007372:	e000      	b.n	8007376 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007374:	bf00      	nop
  }

  if (status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d169      	bne.n	8007450 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800737c:	4b37      	ldr	r3, [pc, #220]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a36      	ldr	r2, [pc, #216]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 8007382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007388:	f7fc fbdc 	bl	8003b44 <HAL_GetTick>
 800738c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800738e:	e00f      	b.n	80073b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007390:	f7fc fbd8 	bl	8003b44 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d908      	bls.n	80073b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800739e:	4b2f      	ldr	r3, [pc, #188]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073ae:	e006      	b.n	80073be <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80073b0:	4b2a      	ldr	r3, [pc, #168]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e9      	bne.n	8007390 <RCCEx_PLLSAI2_Config+0x84>
 80073bc:	e000      	b.n	80073c0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80073be:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d144      	bne.n	8007450 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d115      	bne.n	80073f8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80073cc:	4b23      	ldr	r3, [pc, #140]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 80073ce:	695a      	ldr	r2, [r3, #20]
 80073d0:	4b23      	ldr	r3, [pc, #140]	; (8007460 <RCCEx_PLLSAI2_Config+0x154>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6892      	ldr	r2, [r2, #8]
 80073d8:	0211      	lsls	r1, r2, #8
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68d2      	ldr	r2, [r2, #12]
 80073de:	06d2      	lsls	r2, r2, #27
 80073e0:	4311      	orrs	r1, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6852      	ldr	r2, [r2, #4]
 80073e6:	3a01      	subs	r2, #1
 80073e8:	0112      	lsls	r2, r2, #4
 80073ea:	4311      	orrs	r1, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	491a      	ldr	r1, [pc, #104]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80073f8:	4b18      	ldr	r3, [pc, #96]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a17      	ldr	r2, [pc, #92]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 80073fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007402:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007404:	f7fc fb9e 	bl	8003b44 <HAL_GetTick>
 8007408:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800740a:	e00f      	b.n	800742c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800740c:	f7fc fb9a 	bl	8003b44 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d908      	bls.n	800742c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800741a:	4b10      	ldr	r3, [pc, #64]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800742a:	e006      	b.n	800743a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800742c:	4b0b      	ldr	r3, [pc, #44]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0e9      	beq.n	800740c <RCCEx_PLLSAI2_Config+0x100>
 8007438:	e000      	b.n	800743c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800743a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 8007444:	695a      	ldr	r2, [r3, #20]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	4904      	ldr	r1, [pc, #16]	; (800745c <RCCEx_PLLSAI2_Config+0x150>)
 800744c:	4313      	orrs	r3, r2
 800744e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	40021000 	.word	0x40021000
 8007460:	07ff800c 	.word	0x07ff800c

08007464 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d066      	beq.n	8007544 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fb fc88 	bl	8002da0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d045      	beq.n	8007532 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074a6:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <HAL_RTC_Init+0xec>)
 80074a8:	22ca      	movs	r2, #202	; 0xca
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24
 80074ac:	4b28      	ldr	r3, [pc, #160]	; (8007550 <HAL_RTC_Init+0xec>)
 80074ae:	2253      	movs	r2, #83	; 0x53
 80074b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f872 	bl	800759c <RTC_EnterInitMode>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d121      	bne.n	8007506 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80074c2:	4b23      	ldr	r3, [pc, #140]	; (8007550 <HAL_RTC_Init+0xec>)
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	4a22      	ldr	r2, [pc, #136]	; (8007550 <HAL_RTC_Init+0xec>)
 80074c8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80074cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <HAL_RTC_Init+0xec>)
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6859      	ldr	r1, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	4319      	orrs	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	430b      	orrs	r3, r1
 80074e6:	491a      	ldr	r1, [pc, #104]	; (8007550 <HAL_RTC_Init+0xec>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	4916      	ldr	r1, [pc, #88]	; (8007550 <HAL_RTC_Init+0xec>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f881 	bl	8007604 <RTC_ExitInitMode>
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10e      	bne.n	800752a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800750c:	4b10      	ldr	r3, [pc, #64]	; (8007550 <HAL_RTC_Init+0xec>)
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a19      	ldr	r1, [r3, #32]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	4319      	orrs	r1, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	430b      	orrs	r3, r1
 8007524:	490a      	ldr	r1, [pc, #40]	; (8007550 <HAL_RTC_Init+0xec>)
 8007526:	4313      	orrs	r3, r2
 8007528:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <HAL_RTC_Init+0xec>)
 800752c:	22ff      	movs	r2, #255	; 0xff
 800752e:	625a      	str	r2, [r3, #36]	; 0x24
 8007530:	e001      	b.n	8007536 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40002800 	.word	0x40002800

08007554 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <HAL_RTC_WaitForSynchro+0x40>)
 800755e:	4a0e      	ldr	r2, [pc, #56]	; (8007598 <HAL_RTC_WaitForSynchro+0x44>)
 8007560:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007562:	f7fc faef 	bl	8003b44 <HAL_GetTick>
 8007566:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007568:	e009      	b.n	800757e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800756a:	f7fc faeb 	bl	8003b44 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007578:	d901      	bls.n	800757e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e006      	b.n	800758c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_RTC_WaitForSynchro+0x40>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0ef      	beq.n	800756a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40002800 	.word	0x40002800
 8007598:	0001005c 	.word	0x0001005c

0800759c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80075a8:	4b15      	ldr	r3, [pc, #84]	; (8007600 <RTC_EnterInitMode+0x64>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d120      	bne.n	80075f6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80075b4:	4b12      	ldr	r3, [pc, #72]	; (8007600 <RTC_EnterInitMode+0x64>)
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4a11      	ldr	r2, [pc, #68]	; (8007600 <RTC_EnterInitMode+0x64>)
 80075ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075be:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80075c0:	f7fc fac0 	bl	8003b44 <HAL_GetTick>
 80075c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075c6:	e00d      	b.n	80075e4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80075c8:	f7fc fabc 	bl	8003b44 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d6:	d905      	bls.n	80075e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2203      	movs	r2, #3
 80075e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075e4:	4b06      	ldr	r3, [pc, #24]	; (8007600 <RTC_EnterInitMode+0x64>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <RTC_EnterInitMode+0x5a>
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d1e8      	bne.n	80075c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40002800 	.word	0x40002800

08007604 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007610:	4b1a      	ldr	r3, [pc, #104]	; (800767c <RTC_ExitInitMode+0x78>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4a19      	ldr	r2, [pc, #100]	; (800767c <RTC_ExitInitMode+0x78>)
 8007616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800761a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800761c:	4b17      	ldr	r3, [pc, #92]	; (800767c <RTC_ExitInitMode+0x78>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10c      	bne.n	8007642 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff ff93 	bl	8007554 <HAL_RTC_WaitForSynchro>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01e      	beq.n	8007672 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2203      	movs	r2, #3
 8007638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	73fb      	strb	r3, [r7, #15]
 8007640:	e017      	b.n	8007672 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <RTC_ExitInitMode+0x78>)
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	4a0d      	ldr	r2, [pc, #52]	; (800767c <RTC_ExitInitMode+0x78>)
 8007648:	f023 0320 	bic.w	r3, r3, #32
 800764c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff ff80 	bl	8007554 <HAL_RTC_WaitForSynchro>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2203      	movs	r2, #3
 800765e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007666:	4b05      	ldr	r3, [pc, #20]	; (800767c <RTC_ExitInitMode+0x78>)
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	4a04      	ldr	r2, [pc, #16]	; (800767c <RTC_ExitInitMode+0x78>)
 800766c:	f043 0320 	orr.w	r3, r3, #32
 8007670:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	40002800 	.word	0x40002800

08007680 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	490f      	ldr	r1, [pc, #60]	; (80076d0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8007694:	4313      	orrs	r3, r2
 8007696:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	490c      	ldr	r1, [pc, #48]	; (80076d4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80076a6:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6919      	ldr	r1, [r3, #16]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	041b      	lsls	r3, r3, #16
 80076b8:	430b      	orrs	r3, r1
 80076ba:	4906      	ldr	r1, [pc, #24]	; (80076d4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	40002800 	.word	0x40002800
 80076d4:	40003400 	.word	0x40003400

080076d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e042      	b.n	8007770 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fb fedd 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2224      	movs	r2, #36	; 0x24
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0201 	bic.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fd5e 	bl	80081dc <UART_SetConfig>
 8007720:	4603      	mov	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e022      	b.n	8007770 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 f852 	bl	80087dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f8d9 	bl	8008920 <UART_CheckIdleState>
 800776e:	4603      	mov	r3, r0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	4613      	mov	r3, r2
 8007786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778e:	2b20      	cmp	r3, #32
 8007790:	d17b      	bne.n	800788a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_UART_Transmit+0x26>
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e074      	b.n	800788c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2221      	movs	r2, #33	; 0x21
 80077ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077b2:	f7fc f9c7 	bl	8003b44 <HAL_GetTick>
 80077b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d0:	d108      	bne.n	80077e4 <HAL_UART_Transmit+0x6c>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	e003      	b.n	80077ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077ec:	e030      	b.n	8007850 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2200      	movs	r2, #0
 80077f6:	2180      	movs	r1, #128	; 0x80
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f001 f93b 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e03d      	b.n	800788c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007824:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	3302      	adds	r3, #2
 800782a:	61bb      	str	r3, [r7, #24]
 800782c:	e007      	b.n	800783e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	3301      	adds	r3, #1
 800783c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1c8      	bne.n	80077ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2200      	movs	r2, #0
 8007864:	2140      	movs	r1, #64	; 0x40
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f001 f904 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e006      	b.n	800788c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	e000      	b.n	800788c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800788a:	2302      	movs	r3, #2
  }
}
 800788c:	4618      	mov	r0, r3
 800788e:	3720      	adds	r7, #32
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	; 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	d167      	bne.n	800797c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_UART_Transmit_DMA+0x24>
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e060      	b.n	800797e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2221      	movs	r2, #33	; 0x21
 80078de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d028      	beq.n	800793c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ee:	4a26      	ldr	r2, [pc, #152]	; (8007988 <HAL_UART_Transmit_DMA+0xf4>)
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f6:	4a25      	ldr	r2, [pc, #148]	; (800798c <HAL_UART_Transmit_DMA+0xf8>)
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078fe:	4a24      	ldr	r2, [pc, #144]	; (8007990 <HAL_UART_Transmit_DMA+0xfc>)
 8007900:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007906:	2200      	movs	r2, #0
 8007908:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007912:	4619      	mov	r1, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3328      	adds	r3, #40	; 0x28
 800791a:	461a      	mov	r2, r3
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	f7fd fa75 	bl	8004e0c <HAL_DMA_Start_IT>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2210      	movs	r2, #16
 800792c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e020      	b.n	800797e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2240      	movs	r2, #64	; 0x40
 8007942:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3308      	adds	r3, #8
 800794a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	613b      	str	r3, [r7, #16]
   return(result);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007964:	623a      	str	r2, [r7, #32]
 8007966:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69f9      	ldr	r1, [r7, #28]
 800796a:	6a3a      	ldr	r2, [r7, #32]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	61bb      	str	r3, [r7, #24]
   return(result);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	e000      	b.n	800797e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800797c:	2302      	movs	r3, #2
  }
}
 800797e:	4618      	mov	r0, r3
 8007980:	3728      	adds	r7, #40	; 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	08008ddf 	.word	0x08008ddf
 800798c:	08008e79 	.word	0x08008e79
 8007990:	08008fff 	.word	0x08008fff

08007994 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	d137      	bne.n	8007a1c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_UART_Receive_DMA+0x24>
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e030      	b.n	8007a1e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <HAL_UART_Receive_DMA+0x94>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d01f      	beq.n	8007a0c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d018      	beq.n	8007a0c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	613b      	str	r3, [r7, #16]
   return(result);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	623b      	str	r3, [r7, #32]
 80079fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69f9      	ldr	r1, [r7, #28]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f001 f896 	bl	8008b44 <UART_Start_Receive_DMA>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	e000      	b.n	8007a1e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3728      	adds	r7, #40	; 0x28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40008000 	.word	0x40008000

08007a2c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b090      	sub	sp, #64	; 0x40
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b80      	cmp	r3, #128	; 0x80
 8007a50:	d139      	bne.n	8007ac6 <HAL_UART_DMAStop+0x9a>
 8007a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a54:	2b21      	cmp	r3, #33	; 0x21
 8007a56:	d136      	bne.n	8007ac6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e5      	bne.n	8007a58 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d015      	beq.n	8007ac0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fd fa32 	bl	8004f02 <HAL_DMA_Abort>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fd fbe5 	bl	8005278 <HAL_DMA_GetError>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	d105      	bne.n	8007ac0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e047      	b.n	8007b50 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f8e5 	bl	8008c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d13c      	bne.n	8007b4e <HAL_UART_DMAStop+0x122>
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	2b22      	cmp	r3, #34	; 0x22
 8007ad8:	d139      	bne.n	8007b4e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af0:	633b      	str	r3, [r7, #48]	; 0x30
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afa:	61ba      	str	r2, [r7, #24]
 8007afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6979      	ldr	r1, [r7, #20]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	613b      	str	r3, [r7, #16]
   return(result);
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e5      	bne.n	8007ada <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d017      	beq.n	8007b48 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fd f9ef 	bl	8004f02 <HAL_DMA_Abort>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00e      	beq.n	8007b48 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd fba1 	bl	8005278 <HAL_DMA_GetError>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d105      	bne.n	8007b48 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e003      	b.n	8007b50 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 f8e2 	bl	8008d12 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3740      	adds	r7, #64	; 0x40
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b0ba      	sub	sp, #232	; 0xe8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b82:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b86:	4013      	ands	r3, r2
 8007b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d11b      	bne.n	8007bcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d015      	beq.n	8007bcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d105      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d009      	beq.n	8007bcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 82e3 	beq.w	8008188 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
      }
      return;
 8007bca:	e2dd      	b.n	8008188 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8123 	beq.w	8007e1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bda:	4b8d      	ldr	r3, [pc, #564]	; (8007e10 <HAL_UART_IRQHandler+0x2b8>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007be2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007be6:	4b8b      	ldr	r3, [pc, #556]	; (8007e14 <HAL_UART_IRQHandler+0x2bc>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8116 	beq.w	8007e1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d011      	beq.n	8007c20 <HAL_UART_IRQHandler+0xc8>
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d011      	beq.n	8007c50 <HAL_UART_IRQHandler+0xf8>
 8007c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c46:	f043 0204 	orr.w	r2, r3, #4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d011      	beq.n	8007c80 <HAL_UART_IRQHandler+0x128>
 8007c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c76:	f043 0202 	orr.w	r2, r3, #2
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d017      	beq.n	8007cbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d105      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c9c:	4b5c      	ldr	r3, [pc, #368]	; (8007e10 <HAL_UART_IRQHandler+0x2b8>)
 8007c9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2208      	movs	r2, #8
 8007caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb2:	f043 0208 	orr.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d012      	beq.n	8007cee <HAL_UART_IRQHandler+0x196>
 8007cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce4:	f043 0220 	orr.w	r2, r3, #32
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8249 	beq.w	800818c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d005      	beq.n	8007d52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d054      	beq.n	8007dfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 ffdd 	bl	8008d12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d146      	bne.n	8007df4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1d9      	bne.n	8007d66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d017      	beq.n	8007dec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc2:	4a15      	ldr	r2, [pc, #84]	; (8007e18 <HAL_UART_IRQHandler+0x2c0>)
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fd f8f4 	bl	8004fba <HAL_DMA_Abort_IT>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d019      	beq.n	8007e0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007de6:	4610      	mov	r0, r2
 8007de8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dea:	e00f      	b.n	8007e0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7f8 fdc1 	bl	8000974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df2:	e00b      	b.n	8007e0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7f8 fdbd 	bl	8000974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfa:	e007      	b.n	8007e0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7f8 fdb9 	bl	8000974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007e0a:	e1bf      	b.n	800818c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	bf00      	nop
    return;
 8007e0e:	e1bd      	b.n	800818c <HAL_UART_IRQHandler+0x634>
 8007e10:	10000001 	.word	0x10000001
 8007e14:	04000120 	.word	0x04000120
 8007e18:	0800907f 	.word	0x0800907f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	f040 8153 	bne.w	80080cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 814c 	beq.w	80080cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e38:	f003 0310 	and.w	r3, r3, #16
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8145 	beq.w	80080cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2210      	movs	r2, #16
 8007e48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b40      	cmp	r3, #64	; 0x40
 8007e56:	f040 80bb 	bne.w	8007fd0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 818f 	beq.w	8008190 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	f080 8187 	bcs.w	8008190 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f040 8087 	bne.w	8007fae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ece:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1da      	bne.n	8007ea0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e1      	bne.n	8007eea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e3      	bne.n	8007f26 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f7c:	f023 0310 	bic.w	r3, r3, #16
 8007f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e4      	bne.n	8007f6c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fc ffaa 	bl	8004f02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7f8 fb7b 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fce:	e0df      	b.n	8008190 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 80d1 	beq.w	8008194 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80cc 	beq.w	8008194 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
 8008020:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800802c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e4      	bne.n	8007ffc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	623b      	str	r3, [r7, #32]
   return(result);
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008048:	f023 0301 	bic.w	r3, r3, #1
 800804c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3308      	adds	r3, #8
 8008056:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800805a:	633a      	str	r2, [r7, #48]	; 0x30
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e1      	bne.n	8008032 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0310 	bic.w	r3, r3, #16
 8008096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	69b9      	ldr	r1, [r7, #24]
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	617b      	str	r3, [r7, #20]
   return(result);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e4      	bne.n	8008082 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7f8 fafd 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080ca:	e063      	b.n	8008194 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00e      	beq.n	80080f6 <HAL_UART_IRQHandler+0x59e>
 80080d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 f806 	bl	8009100 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f4:	e051      	b.n	800819a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d014      	beq.n	800812c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800810e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d008      	beq.n	800812c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811e:	2b00      	cmp	r3, #0
 8008120:	d03a      	beq.n	8008198 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
    }
    return;
 800812a:	e035      	b.n	8008198 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800812c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <HAL_UART_IRQHandler+0x5f4>
 8008138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 ffb0 	bl	80090aa <UART_EndTransmit_IT>
    return;
 800814a:	e026      	b.n	800819a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_UART_IRQHandler+0x614>
 8008158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 ffdf 	bl	8009128 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800816a:	e016      	b.n	800819a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d010      	beq.n	800819a <HAL_UART_IRQHandler+0x642>
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817c:	2b00      	cmp	r3, #0
 800817e:	da0c      	bge.n	800819a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 ffc7 	bl	8009114 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008186:	e008      	b.n	800819a <HAL_UART_IRQHandler+0x642>
      return;
 8008188:	bf00      	nop
 800818a:	e006      	b.n	800819a <HAL_UART_IRQHandler+0x642>
    return;
 800818c:	bf00      	nop
 800818e:	e004      	b.n	800819a <HAL_UART_IRQHandler+0x642>
      return;
 8008190:	bf00      	nop
 8008192:	e002      	b.n	800819a <HAL_UART_IRQHandler+0x642>
      return;
 8008194:	bf00      	nop
 8008196:	e000      	b.n	800819a <HAL_UART_IRQHandler+0x642>
    return;
 8008198:	bf00      	nop
  }
}
 800819a:	37e8      	adds	r7, #232	; 0xe8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e0:	b08c      	sub	sp, #48	; 0x30
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	4313      	orrs	r3, r2
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4baa      	ldr	r3, [pc, #680]	; (80084b4 <UART_SetConfig+0x2d8>)
 800820c:	4013      	ands	r3, r2
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	6812      	ldr	r2, [r2, #0]
 8008212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008214:	430b      	orrs	r3, r1
 8008216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a9f      	ldr	r2, [pc, #636]	; (80084b8 <UART_SetConfig+0x2dc>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d004      	beq.n	8008248 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008244:	4313      	orrs	r3, r2
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008252:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800825c:	430b      	orrs	r3, r1
 800825e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	f023 010f 	bic.w	r1, r3, #15
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a90      	ldr	r2, [pc, #576]	; (80084bc <UART_SetConfig+0x2e0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d125      	bne.n	80082cc <UART_SetConfig+0xf0>
 8008280:	4b8f      	ldr	r3, [pc, #572]	; (80084c0 <UART_SetConfig+0x2e4>)
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	2b03      	cmp	r3, #3
 800828c:	d81a      	bhi.n	80082c4 <UART_SetConfig+0xe8>
 800828e:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <UART_SetConfig+0xb8>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082b5 	.word	0x080082b5
 800829c:	080082ad 	.word	0x080082ad
 80082a0:	080082bd 	.word	0x080082bd
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082aa:	e116      	b.n	80084da <UART_SetConfig+0x2fe>
 80082ac:	2302      	movs	r3, #2
 80082ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b2:	e112      	b.n	80084da <UART_SetConfig+0x2fe>
 80082b4:	2304      	movs	r3, #4
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ba:	e10e      	b.n	80084da <UART_SetConfig+0x2fe>
 80082bc:	2308      	movs	r3, #8
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c2:	e10a      	b.n	80084da <UART_SetConfig+0x2fe>
 80082c4:	2310      	movs	r3, #16
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ca:	e106      	b.n	80084da <UART_SetConfig+0x2fe>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a7c      	ldr	r2, [pc, #496]	; (80084c4 <UART_SetConfig+0x2e8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d138      	bne.n	8008348 <UART_SetConfig+0x16c>
 80082d6:	4b7a      	ldr	r3, [pc, #488]	; (80084c0 <UART_SetConfig+0x2e4>)
 80082d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082dc:	f003 030c 	and.w	r3, r3, #12
 80082e0:	2b0c      	cmp	r3, #12
 80082e2:	d82d      	bhi.n	8008340 <UART_SetConfig+0x164>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0x110>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008321 	.word	0x08008321
 80082f0:	08008341 	.word	0x08008341
 80082f4:	08008341 	.word	0x08008341
 80082f8:	08008341 	.word	0x08008341
 80082fc:	08008331 	.word	0x08008331
 8008300:	08008341 	.word	0x08008341
 8008304:	08008341 	.word	0x08008341
 8008308:	08008341 	.word	0x08008341
 800830c:	08008329 	.word	0x08008329
 8008310:	08008341 	.word	0x08008341
 8008314:	08008341 	.word	0x08008341
 8008318:	08008341 	.word	0x08008341
 800831c:	08008339 	.word	0x08008339
 8008320:	2300      	movs	r3, #0
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008326:	e0d8      	b.n	80084da <UART_SetConfig+0x2fe>
 8008328:	2302      	movs	r3, #2
 800832a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800832e:	e0d4      	b.n	80084da <UART_SetConfig+0x2fe>
 8008330:	2304      	movs	r3, #4
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008336:	e0d0      	b.n	80084da <UART_SetConfig+0x2fe>
 8008338:	2308      	movs	r3, #8
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e0cc      	b.n	80084da <UART_SetConfig+0x2fe>
 8008340:	2310      	movs	r3, #16
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e0c8      	b.n	80084da <UART_SetConfig+0x2fe>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a5e      	ldr	r2, [pc, #376]	; (80084c8 <UART_SetConfig+0x2ec>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d125      	bne.n	800839e <UART_SetConfig+0x1c2>
 8008352:	4b5b      	ldr	r3, [pc, #364]	; (80084c0 <UART_SetConfig+0x2e4>)
 8008354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008358:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800835c:	2b30      	cmp	r3, #48	; 0x30
 800835e:	d016      	beq.n	800838e <UART_SetConfig+0x1b2>
 8008360:	2b30      	cmp	r3, #48	; 0x30
 8008362:	d818      	bhi.n	8008396 <UART_SetConfig+0x1ba>
 8008364:	2b20      	cmp	r3, #32
 8008366:	d00a      	beq.n	800837e <UART_SetConfig+0x1a2>
 8008368:	2b20      	cmp	r3, #32
 800836a:	d814      	bhi.n	8008396 <UART_SetConfig+0x1ba>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <UART_SetConfig+0x19a>
 8008370:	2b10      	cmp	r3, #16
 8008372:	d008      	beq.n	8008386 <UART_SetConfig+0x1aa>
 8008374:	e00f      	b.n	8008396 <UART_SetConfig+0x1ba>
 8008376:	2300      	movs	r3, #0
 8008378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837c:	e0ad      	b.n	80084da <UART_SetConfig+0x2fe>
 800837e:	2302      	movs	r3, #2
 8008380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008384:	e0a9      	b.n	80084da <UART_SetConfig+0x2fe>
 8008386:	2304      	movs	r3, #4
 8008388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838c:	e0a5      	b.n	80084da <UART_SetConfig+0x2fe>
 800838e:	2308      	movs	r3, #8
 8008390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008394:	e0a1      	b.n	80084da <UART_SetConfig+0x2fe>
 8008396:	2310      	movs	r3, #16
 8008398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839c:	e09d      	b.n	80084da <UART_SetConfig+0x2fe>
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a4a      	ldr	r2, [pc, #296]	; (80084cc <UART_SetConfig+0x2f0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d125      	bne.n	80083f4 <UART_SetConfig+0x218>
 80083a8:	4b45      	ldr	r3, [pc, #276]	; (80084c0 <UART_SetConfig+0x2e4>)
 80083aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083b2:	2bc0      	cmp	r3, #192	; 0xc0
 80083b4:	d016      	beq.n	80083e4 <UART_SetConfig+0x208>
 80083b6:	2bc0      	cmp	r3, #192	; 0xc0
 80083b8:	d818      	bhi.n	80083ec <UART_SetConfig+0x210>
 80083ba:	2b80      	cmp	r3, #128	; 0x80
 80083bc:	d00a      	beq.n	80083d4 <UART_SetConfig+0x1f8>
 80083be:	2b80      	cmp	r3, #128	; 0x80
 80083c0:	d814      	bhi.n	80083ec <UART_SetConfig+0x210>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <UART_SetConfig+0x1f0>
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d008      	beq.n	80083dc <UART_SetConfig+0x200>
 80083ca:	e00f      	b.n	80083ec <UART_SetConfig+0x210>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d2:	e082      	b.n	80084da <UART_SetConfig+0x2fe>
 80083d4:	2302      	movs	r3, #2
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083da:	e07e      	b.n	80084da <UART_SetConfig+0x2fe>
 80083dc:	2304      	movs	r3, #4
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e2:	e07a      	b.n	80084da <UART_SetConfig+0x2fe>
 80083e4:	2308      	movs	r3, #8
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ea:	e076      	b.n	80084da <UART_SetConfig+0x2fe>
 80083ec:	2310      	movs	r3, #16
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f2:	e072      	b.n	80084da <UART_SetConfig+0x2fe>
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a35      	ldr	r2, [pc, #212]	; (80084d0 <UART_SetConfig+0x2f4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d12a      	bne.n	8008454 <UART_SetConfig+0x278>
 80083fe:	4b30      	ldr	r3, [pc, #192]	; (80084c0 <UART_SetConfig+0x2e4>)
 8008400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800840c:	d01a      	beq.n	8008444 <UART_SetConfig+0x268>
 800840e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008412:	d81b      	bhi.n	800844c <UART_SetConfig+0x270>
 8008414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008418:	d00c      	beq.n	8008434 <UART_SetConfig+0x258>
 800841a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841e:	d815      	bhi.n	800844c <UART_SetConfig+0x270>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <UART_SetConfig+0x250>
 8008424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008428:	d008      	beq.n	800843c <UART_SetConfig+0x260>
 800842a:	e00f      	b.n	800844c <UART_SetConfig+0x270>
 800842c:	2300      	movs	r3, #0
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008432:	e052      	b.n	80084da <UART_SetConfig+0x2fe>
 8008434:	2302      	movs	r3, #2
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843a:	e04e      	b.n	80084da <UART_SetConfig+0x2fe>
 800843c:	2304      	movs	r3, #4
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008442:	e04a      	b.n	80084da <UART_SetConfig+0x2fe>
 8008444:	2308      	movs	r3, #8
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844a:	e046      	b.n	80084da <UART_SetConfig+0x2fe>
 800844c:	2310      	movs	r3, #16
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008452:	e042      	b.n	80084da <UART_SetConfig+0x2fe>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <UART_SetConfig+0x2dc>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d13a      	bne.n	80084d4 <UART_SetConfig+0x2f8>
 800845e:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <UART_SetConfig+0x2e4>)
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800846c:	d01a      	beq.n	80084a4 <UART_SetConfig+0x2c8>
 800846e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008472:	d81b      	bhi.n	80084ac <UART_SetConfig+0x2d0>
 8008474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008478:	d00c      	beq.n	8008494 <UART_SetConfig+0x2b8>
 800847a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847e:	d815      	bhi.n	80084ac <UART_SetConfig+0x2d0>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <UART_SetConfig+0x2b0>
 8008484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008488:	d008      	beq.n	800849c <UART_SetConfig+0x2c0>
 800848a:	e00f      	b.n	80084ac <UART_SetConfig+0x2d0>
 800848c:	2300      	movs	r3, #0
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008492:	e022      	b.n	80084da <UART_SetConfig+0x2fe>
 8008494:	2302      	movs	r3, #2
 8008496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849a:	e01e      	b.n	80084da <UART_SetConfig+0x2fe>
 800849c:	2304      	movs	r3, #4
 800849e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084a2:	e01a      	b.n	80084da <UART_SetConfig+0x2fe>
 80084a4:	2308      	movs	r3, #8
 80084a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084aa:	e016      	b.n	80084da <UART_SetConfig+0x2fe>
 80084ac:	2310      	movs	r3, #16
 80084ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b2:	e012      	b.n	80084da <UART_SetConfig+0x2fe>
 80084b4:	cfff69f3 	.word	0xcfff69f3
 80084b8:	40008000 	.word	0x40008000
 80084bc:	40013800 	.word	0x40013800
 80084c0:	40021000 	.word	0x40021000
 80084c4:	40004400 	.word	0x40004400
 80084c8:	40004800 	.word	0x40004800
 80084cc:	40004c00 	.word	0x40004c00
 80084d0:	40005000 	.word	0x40005000
 80084d4:	2310      	movs	r3, #16
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4ab0      	ldr	r2, [pc, #704]	; (80087a0 <UART_SetConfig+0x5c4>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	f040 809b 	bne.w	800861c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d827      	bhi.n	800853e <UART_SetConfig+0x362>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <UART_SetConfig+0x318>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008521 	.word	0x08008521
 80084fc:	08008529 	.word	0x08008529
 8008500:	0800853f 	.word	0x0800853f
 8008504:	0800852f 	.word	0x0800852f
 8008508:	0800853f 	.word	0x0800853f
 800850c:	0800853f 	.word	0x0800853f
 8008510:	0800853f 	.word	0x0800853f
 8008514:	08008537 	.word	0x08008537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008518:	f7fe f994 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 800851c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800851e:	e014      	b.n	800854a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008520:	f7fe f9a4 	bl	800686c <HAL_RCC_GetPCLK2Freq>
 8008524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008526:	e010      	b.n	800854a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008528:	4b9e      	ldr	r3, [pc, #632]	; (80087a4 <UART_SetConfig+0x5c8>)
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800852c:	e00d      	b.n	800854a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800852e:	f7fe f8d7 	bl	80066e0 <HAL_RCC_GetSysClockFreq>
 8008532:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008534:	e009      	b.n	800854a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800853c:	e005      	b.n	800854a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008548:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8130 	beq.w	80087b2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	4a94      	ldr	r2, [pc, #592]	; (80087a8 <UART_SetConfig+0x5cc>)
 8008558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800855c:	461a      	mov	r2, r3
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	fbb3 f3f2 	udiv	r3, r3, r2
 8008564:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	4413      	add	r3, r2
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	429a      	cmp	r2, r3
 8008574:	d305      	bcc.n	8008582 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	429a      	cmp	r2, r3
 8008580:	d903      	bls.n	800858a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008588:	e113      	b.n	80087b2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	2200      	movs	r2, #0
 800858e:	60bb      	str	r3, [r7, #8]
 8008590:	60fa      	str	r2, [r7, #12]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	4a84      	ldr	r2, [pc, #528]	; (80087a8 <UART_SetConfig+0x5cc>)
 8008598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800859c:	b29b      	uxth	r3, r3
 800859e:	2200      	movs	r2, #0
 80085a0:	603b      	str	r3, [r7, #0]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085ac:	f7f7 fe42 	bl	8000234 <__aeabi_uldivmod>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4610      	mov	r0, r2
 80085b6:	4619      	mov	r1, r3
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	020b      	lsls	r3, r1, #8
 80085c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085c6:	0202      	lsls	r2, r0, #8
 80085c8:	6979      	ldr	r1, [r7, #20]
 80085ca:	6849      	ldr	r1, [r1, #4]
 80085cc:	0849      	lsrs	r1, r1, #1
 80085ce:	2000      	movs	r0, #0
 80085d0:	460c      	mov	r4, r1
 80085d2:	4605      	mov	r5, r0
 80085d4:	eb12 0804 	adds.w	r8, r2, r4
 80085d8:	eb43 0905 	adc.w	r9, r3, r5
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	469a      	mov	sl, r3
 80085e4:	4693      	mov	fp, r2
 80085e6:	4652      	mov	r2, sl
 80085e8:	465b      	mov	r3, fp
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f7 fe21 	bl	8000234 <__aeabi_uldivmod>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4613      	mov	r3, r2
 80085f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008600:	d308      	bcc.n	8008614 <UART_SetConfig+0x438>
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008608:	d204      	bcs.n	8008614 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	60da      	str	r2, [r3, #12]
 8008612:	e0ce      	b.n	80087b2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800861a:	e0ca      	b.n	80087b2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008624:	d166      	bne.n	80086f4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8008626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800862a:	2b08      	cmp	r3, #8
 800862c:	d827      	bhi.n	800867e <UART_SetConfig+0x4a2>
 800862e:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <UART_SetConfig+0x458>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008659 	.word	0x08008659
 8008638:	08008661 	.word	0x08008661
 800863c:	08008669 	.word	0x08008669
 8008640:	0800867f 	.word	0x0800867f
 8008644:	0800866f 	.word	0x0800866f
 8008648:	0800867f 	.word	0x0800867f
 800864c:	0800867f 	.word	0x0800867f
 8008650:	0800867f 	.word	0x0800867f
 8008654:	08008677 	.word	0x08008677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008658:	f7fe f8f4 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 800865c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800865e:	e014      	b.n	800868a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008660:	f7fe f904 	bl	800686c <HAL_RCC_GetPCLK2Freq>
 8008664:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008666:	e010      	b.n	800868a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008668:	4b4e      	ldr	r3, [pc, #312]	; (80087a4 <UART_SetConfig+0x5c8>)
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800866c:	e00d      	b.n	800868a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800866e:	f7fe f837 	bl	80066e0 <HAL_RCC_GetSysClockFreq>
 8008672:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008674:	e009      	b.n	800868a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800867c:	e005      	b.n	800868a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8090 	beq.w	80087b2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	4a44      	ldr	r2, [pc, #272]	; (80087a8 <UART_SetConfig+0x5cc>)
 8008698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869c:	461a      	mov	r2, r3
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a4:	005a      	lsls	r2, r3, #1
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	441a      	add	r2, r3
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2b0f      	cmp	r3, #15
 80086bc:	d916      	bls.n	80086ec <UART_SetConfig+0x510>
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c4:	d212      	bcs.n	80086ec <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f023 030f 	bic.w	r3, r3, #15
 80086ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	b29a      	uxth	r2, r3
 80086dc:	8bfb      	ldrh	r3, [r7, #30]
 80086de:	4313      	orrs	r3, r2
 80086e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	8bfa      	ldrh	r2, [r7, #30]
 80086e8:	60da      	str	r2, [r3, #12]
 80086ea:	e062      	b.n	80087b2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086f2:	e05e      	b.n	80087b2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d828      	bhi.n	800874e <UART_SetConfig+0x572>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <UART_SetConfig+0x528>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008729 	.word	0x08008729
 8008708:	08008731 	.word	0x08008731
 800870c:	08008739 	.word	0x08008739
 8008710:	0800874f 	.word	0x0800874f
 8008714:	0800873f 	.word	0x0800873f
 8008718:	0800874f 	.word	0x0800874f
 800871c:	0800874f 	.word	0x0800874f
 8008720:	0800874f 	.word	0x0800874f
 8008724:	08008747 	.word	0x08008747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008728:	f7fe f88c 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 800872c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800872e:	e014      	b.n	800875a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008730:	f7fe f89c 	bl	800686c <HAL_RCC_GetPCLK2Freq>
 8008734:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008736:	e010      	b.n	800875a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008738:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <UART_SetConfig+0x5c8>)
 800873a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800873c:	e00d      	b.n	800875a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800873e:	f7fd ffcf 	bl	80066e0 <HAL_RCC_GetSysClockFreq>
 8008742:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008744:	e009      	b.n	800875a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800874c:	e005      	b.n	800875a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008758:	bf00      	nop
    }

    if (pclk != 0U)
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	d028      	beq.n	80087b2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <UART_SetConfig+0x5cc>)
 8008766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800876a:	461a      	mov	r2, r3
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	441a      	add	r2, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008782:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	d910      	bls.n	80087ac <UART_SetConfig+0x5d0>
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008790:	d20c      	bcs.n	80087ac <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	b29a      	uxth	r2, r3
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60da      	str	r2, [r3, #12]
 800879c:	e009      	b.n	80087b2 <UART_SetConfig+0x5d6>
 800879e:	bf00      	nop
 80087a0:	40008000 	.word	0x40008000
 80087a4:	00f42400 	.word	0x00f42400
 80087a8:	0800aab0 	.word	0x0800aab0
      }
      else
      {
        ret = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2201      	movs	r2, #1
 80087be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2200      	movs	r2, #0
 80087c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	2200      	movs	r2, #0
 80087cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80087ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3730      	adds	r7, #48	; 0x30
 80087d6:	46bd      	mov	sp, r7
 80087d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	f003 0308 	and.w	r3, r3, #8
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01a      	beq.n	80088f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088da:	d10a      	bne.n	80088f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	605a      	str	r2, [r3, #4]
  }
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b098      	sub	sp, #96	; 0x60
 8008924:	af02      	add	r7, sp, #8
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008930:	f7fb f908 	bl	8003b44 <HAL_GetTick>
 8008934:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b08      	cmp	r3, #8
 8008942:	d12f      	bne.n	80089a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800894c:	2200      	movs	r2, #0
 800894e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f88e 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d022      	beq.n	80089a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008972:	653b      	str	r3, [r7, #80]	; 0x50
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897c:	647b      	str	r3, [r7, #68]	; 0x44
 800897e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800898a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e063      	b.n	8008a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d149      	bne.n	8008a46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ba:	2200      	movs	r2, #0
 80089bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f857 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d03c      	beq.n	8008a46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	623b      	str	r3, [r7, #32]
   return(result);
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ea:	633b      	str	r3, [r7, #48]	; 0x30
 80089ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e6      	bne.n	80089cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3308      	adds	r3, #8
 8008a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f023 0301 	bic.w	r3, r3, #1
 8008a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a1e:	61fa      	str	r2, [r7, #28]
 8008a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	69b9      	ldr	r1, [r7, #24]
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e5      	bne.n	80089fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e012      	b.n	8008a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3758      	adds	r7, #88	; 0x58
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	4613      	mov	r3, r2
 8008a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a84:	e049      	b.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d045      	beq.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8e:	f7fb f859 	bl	8003b44 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d302      	bcc.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e048      	b.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d031      	beq.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d110      	bne.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2208      	movs	r2, #8
 8008aca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f920 	bl	8008d12 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2208      	movs	r2, #8
 8008ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e029      	b.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af4:	d111      	bne.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f906 	bl	8008d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e00f      	b.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69da      	ldr	r2, [r3, #28]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4013      	ands	r3, r2
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	bf0c      	ite	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	2300      	movne	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d0a6      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b096      	sub	sp, #88	; 0x58
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2222      	movs	r2, #34	; 0x22
 8008b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d02d      	beq.n	8008bd6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b80:	4a40      	ldr	r2, [pc, #256]	; (8008c84 <UART_Start_Receive_DMA+0x140>)
 8008b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b8a:	4a3f      	ldr	r2, [pc, #252]	; (8008c88 <UART_Start_Receive_DMA+0x144>)
 8008b8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b94:	4a3d      	ldr	r2, [pc, #244]	; (8008c8c <UART_Start_Receive_DMA+0x148>)
 8008b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3324      	adds	r3, #36	; 0x24
 8008bae:	4619      	mov	r1, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	f7fc f928 	bl	8004e0c <HAL_DMA_Start_IT>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2210      	movs	r2, #16
 8008bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e051      	b.n	8008c7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d018      	beq.n	8008c10 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bfe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c04:	e841 2300 	strex	r3, r2, [r1]
 8008c08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e6      	bne.n	8008bde <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3308      	adds	r3, #8
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	653b      	str	r3, [r7, #80]	; 0x50
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c30:	637a      	str	r2, [r7, #52]	; 0x34
 8008c32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e5      	bne.n	8008c10 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	613b      	str	r3, [r7, #16]
   return(result);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c64:	623a      	str	r2, [r7, #32]
 8008c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	69f9      	ldr	r1, [r7, #28]
 8008c6a:	6a3a      	ldr	r2, [r7, #32]
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e5      	bne.n	8008c44 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3758      	adds	r7, #88	; 0x58
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	08008e95 	.word	0x08008e95
 8008c88:	08008fc1 	.word	0x08008fc1
 8008c8c:	08008fff 	.word	0x08008fff

08008c90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b08f      	sub	sp, #60	; 0x3c
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cea:	61ba      	str	r2, [r7, #24]
 8008cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6979      	ldr	r1, [r7, #20]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008d06:	bf00      	nop
 8008d08:	373c      	adds	r7, #60	; 0x3c
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b095      	sub	sp, #84	; 0x54
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d38:	643b      	str	r3, [r7, #64]	; 0x40
 8008d3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e6      	bne.n	8008d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3308      	adds	r3, #8
 8008d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d62:	f023 0301 	bic.w	r3, r3, #1
 8008d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e3      	bne.n	8008d4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d118      	bne.n	8008dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f023 0310 	bic.w	r3, r3, #16
 8008da0:	647b      	str	r3, [r7, #68]	; 0x44
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6979      	ldr	r1, [r7, #20]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	613b      	str	r3, [r7, #16]
   return(result);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e6      	bne.n	8008d8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008dd2:	bf00      	nop
 8008dd4:	3754      	adds	r7, #84	; 0x54
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b090      	sub	sp, #64	; 0x40
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d137      	bne.n	8008e6a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	623b      	str	r3, [r7, #32]
   return(result);
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e22:	633a      	str	r2, [r7, #48]	; 0x30
 8008e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e5      	bne.n	8008e02 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e54:	61fb      	str	r3, [r7, #28]
 8008e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e58:	69b9      	ldr	r1, [r7, #24]
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	617b      	str	r3, [r7, #20]
   return(result);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e6      	bne.n	8008e36 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e68:	e002      	b.n	8008e70 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e6c:	f7ff f998 	bl	80081a0 <HAL_UART_TxCpltCallback>
}
 8008e70:	bf00      	nop
 8008e72:	3740      	adds	r7, #64	; 0x40
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff f994 	bl	80081b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b09c      	sub	sp, #112	; 0x70
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d171      	bne.n	8008f94 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ed8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e6      	bne.n	8008eb8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efc:	f023 0301 	bic.w	r3, r3, #1
 8008f00:	667b      	str	r3, [r7, #100]	; 0x64
 8008f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3308      	adds	r3, #8
 8008f08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f0a:	647a      	str	r2, [r7, #68]	; 0x44
 8008f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e5      	bne.n	8008eea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f34:	663b      	str	r3, [r7, #96]	; 0x60
 8008f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e5      	bne.n	8008f1e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d118      	bne.n	8008f94 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0310 	bic.w	r3, r3, #16
 8008f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f80:	61fb      	str	r3, [r7, #28]
 8008f82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f84:	69b9      	ldr	r1, [r7, #24]
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	e841 2300 	strex	r3, r2, [r1]
 8008f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e6      	bne.n	8008f62 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f96:	2200      	movs	r2, #0
 8008f98:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d107      	bne.n	8008fb2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008fac:	f7f7 fb8a 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fb0:	e002      	b.n	8008fb8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008fb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008fb4:	f7f7 fc1e 	bl	80007f4 <HAL_UART_RxCpltCallback>
}
 8008fb8:	bf00      	nop
 8008fba:	3770      	adds	r7, #112	; 0x70
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d109      	bne.n	8008ff0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fe2:	085b      	lsrs	r3, r3, #1
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f7f7 fb6b 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fee:	e002      	b.n	8008ff6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f7ff f8e9 	bl	80081c8 <HAL_UART_RxHalfCpltCallback>
}
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b086      	sub	sp, #24
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009012:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009026:	2b80      	cmp	r3, #128	; 0x80
 8009028:	d109      	bne.n	800903e <UART_DMAError+0x40>
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b21      	cmp	r3, #33	; 0x21
 800902e:	d106      	bne.n	800903e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2200      	movs	r2, #0
 8009034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009038:	6978      	ldr	r0, [r7, #20]
 800903a:	f7ff fe29 	bl	8008c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009048:	2b40      	cmp	r3, #64	; 0x40
 800904a:	d109      	bne.n	8009060 <UART_DMAError+0x62>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b22      	cmp	r3, #34	; 0x22
 8009050:	d106      	bne.n	8009060 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2200      	movs	r2, #0
 8009056:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800905a:	6978      	ldr	r0, [r7, #20]
 800905c:	f7ff fe59 	bl	8008d12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009066:	f043 0210 	orr.w	r2, r3, #16
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009070:	6978      	ldr	r0, [r7, #20]
 8009072:	f7f7 fc7f 	bl	8000974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009076:	bf00      	nop
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7f7 fc69 	bl	8000974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b088      	sub	sp, #32
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	613b      	str	r3, [r7, #16]
   return(result);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff f854 	bl	80081a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f8:	bf00      	nop
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800914a:	2b01      	cmp	r3, #1
 800914c:	d101      	bne.n	8009152 <HAL_UARTEx_DisableFifoMode+0x16>
 800914e:	2302      	movs	r3, #2
 8009150:	e027      	b.n	80091a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2224      	movs	r2, #36	; 0x24
 800915e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 0201 	bic.w	r2, r2, #1
 8009178:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009180:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e02d      	b.n	8009222 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2224      	movs	r2, #36	; 0x24
 80091d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0201 	bic.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8a4 	bl	8009350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2220      	movs	r2, #32
 8009214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800923e:	2302      	movs	r3, #2
 8009240:	e02d      	b.n	800929e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2224      	movs	r2, #36	; 0x24
 800924e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0201 	bic.w	r2, r2, #1
 8009268:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f866 	bl	8009350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2220      	movs	r2, #32
 8009290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b08c      	sub	sp, #48	; 0x30
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	4613      	mov	r3, r2
 80092b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	d142      	bne.n	8009344 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e03b      	b.n	8009346 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	461a      	mov	r2, r3
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fc2f 	bl	8008b44 <UART_Start_Receive_DMA>
 80092e6:	4603      	mov	r3, r0
 80092e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80092ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d124      	bne.n	800933e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d11d      	bne.n	8009338 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2210      	movs	r2, #16
 8009302:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	617b      	str	r3, [r7, #20]
   return(result);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f043 0310 	orr.w	r3, r3, #16
 8009318:	62bb      	str	r3, [r7, #40]	; 0x28
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
 8009324:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6a39      	ldr	r1, [r7, #32]
 8009328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e6      	bne.n	8009304 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009336:	e002      	b.n	800933e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800933e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009342:	e000      	b.n	8009346 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009344:	2302      	movs	r3, #2
  }
}
 8009346:	4618      	mov	r0, r3
 8009348:	3730      	adds	r7, #48	; 0x30
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935c:	2b00      	cmp	r3, #0
 800935e:	d108      	bne.n	8009372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009370:	e031      	b.n	80093d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009372:	2308      	movs	r3, #8
 8009374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009376:	2308      	movs	r3, #8
 8009378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	0e5b      	lsrs	r3, r3, #25
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	0f5b      	lsrs	r3, r3, #29
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 0307 	and.w	r3, r3, #7
 8009398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	7b3a      	ldrb	r2, [r7, #12]
 800939e:	4911      	ldr	r1, [pc, #68]	; (80093e4 <UARTEx_SetNbDataToProcess+0x94>)
 80093a0:	5c8a      	ldrb	r2, [r1, r2]
 80093a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093a6:	7b3a      	ldrb	r2, [r7, #12]
 80093a8:	490f      	ldr	r1, [pc, #60]	; (80093e8 <UARTEx_SetNbDataToProcess+0x98>)
 80093aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	7b7a      	ldrb	r2, [r7, #13]
 80093bc:	4909      	ldr	r1, [pc, #36]	; (80093e4 <UARTEx_SetNbDataToProcess+0x94>)
 80093be:	5c8a      	ldrb	r2, [r1, r2]
 80093c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093c4:	7b7a      	ldrb	r2, [r7, #13]
 80093c6:	4908      	ldr	r1, [pc, #32]	; (80093e8 <UARTEx_SetNbDataToProcess+0x98>)
 80093c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	0800aac8 	.word	0x0800aac8
 80093e8:	0800aad0 	.word	0x0800aad0

080093ec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b08b      	sub	sp, #44	; 0x2c
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	fa93 f3a3 	rbit	r3, r3
 8009406:	613b      	str	r3, [r7, #16]
  return result;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009412:	2320      	movs	r3, #32
 8009414:	e003      	b.n	800941e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	fab3 f383 	clz	r3, r3
 800941c:	b2db      	uxtb	r3, r3
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	2103      	movs	r1, #3
 8009422:	fa01 f303 	lsl.w	r3, r1, r3
 8009426:	43db      	mvns	r3, r3
 8009428:	401a      	ands	r2, r3
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	fa93 f3a3 	rbit	r3, r3
 8009434:	61fb      	str	r3, [r7, #28]
  return result;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009440:	2320      	movs	r3, #32
 8009442:	e003      	b.n	800944c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	fab3 f383 	clz	r3, r3
 800944a:	b2db      	uxtb	r3, r3
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	fa01 f303 	lsl.w	r3, r1, r3
 8009454:	431a      	orrs	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	601a      	str	r2, [r3, #0]
}
 800945a:	bf00      	nop
 800945c:	372c      	adds	r7, #44	; 0x2c
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	43db      	mvns	r3, r3
 800947a:	401a      	ands	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	fb01 f303 	mul.w	r3, r1, r3
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	605a      	str	r2, [r3, #4]
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009496:	b480      	push	{r7}
 8009498:	b08b      	sub	sp, #44	; 0x2c
 800949a:	af00      	add	r7, sp, #0
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	fa93 f3a3 	rbit	r3, r3
 80094b0:	613b      	str	r3, [r7, #16]
  return result;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80094bc:	2320      	movs	r3, #32
 80094be:	e003      	b.n	80094c8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	fab3 f383 	clz	r3, r3
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	2103      	movs	r1, #3
 80094cc:	fa01 f303 	lsl.w	r3, r1, r3
 80094d0:	43db      	mvns	r3, r3
 80094d2:	401a      	ands	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	fa93 f3a3 	rbit	r3, r3
 80094de:	61fb      	str	r3, [r7, #28]
  return result;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80094ea:	2320      	movs	r3, #32
 80094ec:	e003      	b.n	80094f6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	fab3 f383 	clz	r3, r3
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	fa01 f303 	lsl.w	r3, r1, r3
 80094fe:	431a      	orrs	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009504:	bf00      	nop
 8009506:	372c      	adds	r7, #44	; 0x2c
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009510:	b480      	push	{r7}
 8009512:	b08b      	sub	sp, #44	; 0x2c
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	fa93 f3a3 	rbit	r3, r3
 800952a:	613b      	str	r3, [r7, #16]
  return result;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009536:	2320      	movs	r3, #32
 8009538:	e003      	b.n	8009542 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	fab3 f383 	clz	r3, r3
 8009540:	b2db      	uxtb	r3, r3
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	2103      	movs	r1, #3
 8009546:	fa01 f303 	lsl.w	r3, r1, r3
 800954a:	43db      	mvns	r3, r3
 800954c:	401a      	ands	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	fa93 f3a3 	rbit	r3, r3
 8009558:	61fb      	str	r3, [r7, #28]
  return result;
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009564:	2320      	movs	r3, #32
 8009566:	e003      	b.n	8009570 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	fab3 f383 	clz	r3, r3
 800956e:	b2db      	uxtb	r3, r3
 8009570:	005b      	lsls	r3, r3, #1
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	fa01 f303 	lsl.w	r3, r1, r3
 8009578:	431a      	orrs	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	60da      	str	r2, [r3, #12]
}
 800957e:	bf00      	nop
 8009580:	372c      	adds	r7, #44	; 0x2c
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800958a:	b480      	push	{r7}
 800958c:	b08b      	sub	sp, #44	; 0x2c
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a1a      	ldr	r2, [r3, #32]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	fa93 f3a3 	rbit	r3, r3
 80095a4:	613b      	str	r3, [r7, #16]
  return result;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80095b0:	2320      	movs	r3, #32
 80095b2:	e003      	b.n	80095bc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	fab3 f383 	clz	r3, r3
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	210f      	movs	r1, #15
 80095c0:	fa01 f303 	lsl.w	r3, r1, r3
 80095c4:	43db      	mvns	r3, r3
 80095c6:	401a      	ands	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	fa93 f3a3 	rbit	r3, r3
 80095d2:	61fb      	str	r3, [r7, #28]
  return result;
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80095de:	2320      	movs	r3, #32
 80095e0:	e003      	b.n	80095ea <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	fab3 f383 	clz	r3, r3
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	fa01 f303 	lsl.w	r3, r1, r3
 80095f2:	431a      	orrs	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80095f8:	bf00      	nop
 80095fa:	372c      	adds	r7, #44	; 0x2c
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009604:	b480      	push	{r7}
 8009606:	b08b      	sub	sp, #44	; 0x2c
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	fa93 f3a3 	rbit	r3, r3
 8009620:	613b      	str	r3, [r7, #16]
  return result;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800962c:	2320      	movs	r3, #32
 800962e:	e003      	b.n	8009638 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	fab3 f383 	clz	r3, r3
 8009636:	b2db      	uxtb	r3, r3
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	210f      	movs	r1, #15
 800963c:	fa01 f303 	lsl.w	r3, r1, r3
 8009640:	43db      	mvns	r3, r3
 8009642:	401a      	ands	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	fa93 f3a3 	rbit	r3, r3
 8009650:	61fb      	str	r3, [r7, #28]
  return result;
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800965c:	2320      	movs	r3, #32
 800965e:	e003      	b.n	8009668 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	fab3 f383 	clz	r3, r3
 8009666:	b2db      	uxtb	r3, r3
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	fa01 f303 	lsl.w	r3, r1, r3
 8009670:	431a      	orrs	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009676:	bf00      	nop
 8009678:	372c      	adds	r7, #44	; 0x2c
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b088      	sub	sp, #32
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	fa93 f3a3 	rbit	r3, r3
 8009698:	60fb      	str	r3, [r7, #12]
  return result;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <LL_GPIO_Init+0x26>
    return 32U;
 80096a4:	2320      	movs	r3, #32
 80096a6:	e003      	b.n	80096b0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	fab3 f383 	clz	r3, r3
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80096b2:	e047      	b.n	8009744 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	2101      	movs	r1, #1
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	fa01 f303 	lsl.w	r3, r1, r3
 80096c0:	4013      	ands	r3, r2
 80096c2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d039      	beq.n	800973e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d003      	beq.n	80096da <LL_GPIO_Init+0x58>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d10d      	bne.n	80096f6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	461a      	mov	r2, r3
 80096e0:	69b9      	ldr	r1, [r7, #24]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff fed7 	bl	8009496 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	461a      	mov	r2, r3
 80096ee:	69b9      	ldr	r1, [r7, #24]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff feb8 	bl	8009466 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	461a      	mov	r2, r3
 80096fc:	69b9      	ldr	r1, [r7, #24]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff ff06 	bl	8009510 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d111      	bne.n	8009730 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	2bff      	cmp	r3, #255	; 0xff
 8009710:	d807      	bhi.n	8009722 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	461a      	mov	r2, r3
 8009718:	69b9      	ldr	r1, [r7, #24]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff ff35 	bl	800958a <LL_GPIO_SetAFPin_0_7>
 8009720:	e006      	b.n	8009730 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	461a      	mov	r2, r3
 8009728:	69b9      	ldr	r1, [r7, #24]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff ff6a 	bl	8009604 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	461a      	mov	r2, r3
 8009736:	69b9      	ldr	r1, [r7, #24]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff fe57 	bl	80093ec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	3301      	adds	r3, #1
 8009742:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	fa22 f303 	lsr.w	r3, r2, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1b0      	bne.n	80096b4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3720      	adds	r7, #32
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009764:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009768:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009770:	b29a      	uxth	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	b29b      	uxth	r3, r3
 8009776:	43db      	mvns	r3, r3
 8009778:	b29b      	uxth	r3, r3
 800977a:	4013      	ands	r3, r2
 800977c:	b29a      	uxth	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009792:	b084      	sub	sp, #16
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	f107 0014 	add.w	r0, r7, #20
 80097a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	b004      	add	sp, #16
 80097d2:	4770      	bx	lr

080097d4 <_ZdlPvj>:
 80097d4:	f000 b811 	b.w	80097fa <_ZdlPv>

080097d8 <_Znwj>:
 80097d8:	2801      	cmp	r0, #1
 80097da:	bf38      	it	cc
 80097dc:	2001      	movcc	r0, #1
 80097de:	b510      	push	{r4, lr}
 80097e0:	4604      	mov	r4, r0
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f844 	bl	8009870 <malloc>
 80097e8:	b930      	cbnz	r0, 80097f8 <_Znwj+0x20>
 80097ea:	f000 f809 	bl	8009800 <_ZSt15get_new_handlerv>
 80097ee:	b908      	cbnz	r0, 80097f4 <_Znwj+0x1c>
 80097f0:	f000 f80c 	bl	800980c <abort>
 80097f4:	4780      	blx	r0
 80097f6:	e7f4      	b.n	80097e2 <_Znwj+0xa>
 80097f8:	bd10      	pop	{r4, pc}

080097fa <_ZdlPv>:
 80097fa:	f000 b841 	b.w	8009880 <free>
	...

08009800 <_ZSt15get_new_handlerv>:
 8009800:	4b01      	ldr	r3, [pc, #4]	; (8009808 <_ZSt15get_new_handlerv+0x8>)
 8009802:	e8d3 0faf 	lda	r0, [r3]
 8009806:	4770      	bx	lr
 8009808:	200018d0 	.word	0x200018d0

0800980c <abort>:
 800980c:	2006      	movs	r0, #6
 800980e:	b508      	push	{r3, lr}
 8009810:	f000 f97c 	bl	8009b0c <raise>
 8009814:	2001      	movs	r0, #1
 8009816:	f7f9 fbad 	bl	8002f74 <_exit>
	...

0800981c <__errno>:
 800981c:	4b01      	ldr	r3, [pc, #4]	; (8009824 <__errno+0x8>)
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20000014 	.word	0x20000014

08009828 <__libc_init_array>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	4d0d      	ldr	r5, [pc, #52]	; (8009860 <__libc_init_array+0x38>)
 800982c:	2600      	movs	r6, #0
 800982e:	4c0d      	ldr	r4, [pc, #52]	; (8009864 <__libc_init_array+0x3c>)
 8009830:	1b64      	subs	r4, r4, r5
 8009832:	10a4      	asrs	r4, r4, #2
 8009834:	42a6      	cmp	r6, r4
 8009836:	d109      	bne.n	800984c <__libc_init_array+0x24>
 8009838:	4d0b      	ldr	r5, [pc, #44]	; (8009868 <__libc_init_array+0x40>)
 800983a:	2600      	movs	r6, #0
 800983c:	4c0b      	ldr	r4, [pc, #44]	; (800986c <__libc_init_array+0x44>)
 800983e:	f000 f98f 	bl	8009b60 <_init>
 8009842:	1b64      	subs	r4, r4, r5
 8009844:	10a4      	asrs	r4, r4, #2
 8009846:	42a6      	cmp	r6, r4
 8009848:	d105      	bne.n	8009856 <__libc_init_array+0x2e>
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009850:	3601      	adds	r6, #1
 8009852:	4798      	blx	r3
 8009854:	e7ee      	b.n	8009834 <__libc_init_array+0xc>
 8009856:	f855 3b04 	ldr.w	r3, [r5], #4
 800985a:	3601      	adds	r6, #1
 800985c:	4798      	blx	r3
 800985e:	e7f2      	b.n	8009846 <__libc_init_array+0x1e>
 8009860:	0800aae0 	.word	0x0800aae0
 8009864:	0800aae0 	.word	0x0800aae0
 8009868:	0800aae0 	.word	0x0800aae0
 800986c:	0800aae8 	.word	0x0800aae8

08009870 <malloc>:
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <malloc+0xc>)
 8009872:	4601      	mov	r1, r0
 8009874:	6818      	ldr	r0, [r3, #0]
 8009876:	f000 b89d 	b.w	80099b4 <_malloc_r>
 800987a:	bf00      	nop
 800987c:	20000014 	.word	0x20000014

08009880 <free>:
 8009880:	4b02      	ldr	r3, [pc, #8]	; (800988c <free+0xc>)
 8009882:	4601      	mov	r1, r0
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	f000 b829 	b.w	80098dc <_free_r>
 800988a:	bf00      	nop
 800988c:	20000014 	.word	0x20000014

08009890 <memcmp>:
 8009890:	3901      	subs	r1, #1
 8009892:	4402      	add	r2, r0
 8009894:	b510      	push	{r4, lr}
 8009896:	4290      	cmp	r0, r2
 8009898:	d101      	bne.n	800989e <memcmp+0xe>
 800989a:	2000      	movs	r0, #0
 800989c:	e005      	b.n	80098aa <memcmp+0x1a>
 800989e:	7803      	ldrb	r3, [r0, #0]
 80098a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	d001      	beq.n	80098ac <memcmp+0x1c>
 80098a8:	1b18      	subs	r0, r3, r4
 80098aa:	bd10      	pop	{r4, pc}
 80098ac:	3001      	adds	r0, #1
 80098ae:	e7f2      	b.n	8009896 <memcmp+0x6>

080098b0 <memcpy>:
 80098b0:	440a      	add	r2, r1
 80098b2:	1e43      	subs	r3, r0, #1
 80098b4:	4291      	cmp	r1, r2
 80098b6:	d100      	bne.n	80098ba <memcpy+0xa>
 80098b8:	4770      	bx	lr
 80098ba:	b510      	push	{r4, lr}
 80098bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c0:	4291      	cmp	r1, r2
 80098c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c6:	d1f9      	bne.n	80098bc <memcpy+0xc>
 80098c8:	bd10      	pop	{r4, pc}

080098ca <memset>:
 80098ca:	4402      	add	r2, r0
 80098cc:	4603      	mov	r3, r0
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d100      	bne.n	80098d4 <memset+0xa>
 80098d2:	4770      	bx	lr
 80098d4:	f803 1b01 	strb.w	r1, [r3], #1
 80098d8:	e7f9      	b.n	80098ce <memset+0x4>
	...

080098dc <_free_r>:
 80098dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098de:	2900      	cmp	r1, #0
 80098e0:	d043      	beq.n	800996a <_free_r+0x8e>
 80098e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e6:	1f0c      	subs	r4, r1, #4
 80098e8:	9001      	str	r0, [sp, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bfb8      	it	lt
 80098ee:	18e4      	addlt	r4, r4, r3
 80098f0:	f000 f928 	bl	8009b44 <__malloc_lock>
 80098f4:	4a1e      	ldr	r2, [pc, #120]	; (8009970 <_free_r+0x94>)
 80098f6:	9801      	ldr	r0, [sp, #4]
 80098f8:	6813      	ldr	r3, [r2, #0]
 80098fa:	b933      	cbnz	r3, 800990a <_free_r+0x2e>
 80098fc:	6063      	str	r3, [r4, #4]
 80098fe:	6014      	str	r4, [r2, #0]
 8009900:	b003      	add	sp, #12
 8009902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009906:	f000 b923 	b.w	8009b50 <__malloc_unlock>
 800990a:	42a3      	cmp	r3, r4
 800990c:	d908      	bls.n	8009920 <_free_r+0x44>
 800990e:	6825      	ldr	r5, [r4, #0]
 8009910:	1961      	adds	r1, r4, r5
 8009912:	428b      	cmp	r3, r1
 8009914:	bf01      	itttt	eq
 8009916:	6819      	ldreq	r1, [r3, #0]
 8009918:	685b      	ldreq	r3, [r3, #4]
 800991a:	1949      	addeq	r1, r1, r5
 800991c:	6021      	streq	r1, [r4, #0]
 800991e:	e7ed      	b.n	80098fc <_free_r+0x20>
 8009920:	461a      	mov	r2, r3
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	b10b      	cbz	r3, 800992a <_free_r+0x4e>
 8009926:	42a3      	cmp	r3, r4
 8009928:	d9fa      	bls.n	8009920 <_free_r+0x44>
 800992a:	6811      	ldr	r1, [r2, #0]
 800992c:	1855      	adds	r5, r2, r1
 800992e:	42a5      	cmp	r5, r4
 8009930:	d10b      	bne.n	800994a <_free_r+0x6e>
 8009932:	6824      	ldr	r4, [r4, #0]
 8009934:	4421      	add	r1, r4
 8009936:	1854      	adds	r4, r2, r1
 8009938:	6011      	str	r1, [r2, #0]
 800993a:	42a3      	cmp	r3, r4
 800993c:	d1e0      	bne.n	8009900 <_free_r+0x24>
 800993e:	681c      	ldr	r4, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	4421      	add	r1, r4
 8009944:	6053      	str	r3, [r2, #4]
 8009946:	6011      	str	r1, [r2, #0]
 8009948:	e7da      	b.n	8009900 <_free_r+0x24>
 800994a:	d902      	bls.n	8009952 <_free_r+0x76>
 800994c:	230c      	movs	r3, #12
 800994e:	6003      	str	r3, [r0, #0]
 8009950:	e7d6      	b.n	8009900 <_free_r+0x24>
 8009952:	6825      	ldr	r5, [r4, #0]
 8009954:	1961      	adds	r1, r4, r5
 8009956:	428b      	cmp	r3, r1
 8009958:	bf02      	ittt	eq
 800995a:	6819      	ldreq	r1, [r3, #0]
 800995c:	685b      	ldreq	r3, [r3, #4]
 800995e:	1949      	addeq	r1, r1, r5
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	bf08      	it	eq
 8009964:	6021      	streq	r1, [r4, #0]
 8009966:	6054      	str	r4, [r2, #4]
 8009968:	e7ca      	b.n	8009900 <_free_r+0x24>
 800996a:	b003      	add	sp, #12
 800996c:	bd30      	pop	{r4, r5, pc}
 800996e:	bf00      	nop
 8009970:	200018d4 	.word	0x200018d4

08009974 <sbrk_aligned>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	4e0e      	ldr	r6, [pc, #56]	; (80099b0 <sbrk_aligned+0x3c>)
 8009978:	460c      	mov	r4, r1
 800997a:	4605      	mov	r5, r0
 800997c:	6831      	ldr	r1, [r6, #0]
 800997e:	b911      	cbnz	r1, 8009986 <sbrk_aligned+0x12>
 8009980:	f000 f88c 	bl	8009a9c <_sbrk_r>
 8009984:	6030      	str	r0, [r6, #0]
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f000 f887 	bl	8009a9c <_sbrk_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d00a      	beq.n	80099a8 <sbrk_aligned+0x34>
 8009992:	1cc4      	adds	r4, r0, #3
 8009994:	f024 0403 	bic.w	r4, r4, #3
 8009998:	42a0      	cmp	r0, r4
 800999a:	d007      	beq.n	80099ac <sbrk_aligned+0x38>
 800999c:	1a21      	subs	r1, r4, r0
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 f87c 	bl	8009a9c <_sbrk_r>
 80099a4:	3001      	adds	r0, #1
 80099a6:	d101      	bne.n	80099ac <sbrk_aligned+0x38>
 80099a8:	f04f 34ff 	mov.w	r4, #4294967295
 80099ac:	4620      	mov	r0, r4
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	200018d8 	.word	0x200018d8

080099b4 <_malloc_r>:
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	1ccd      	adds	r5, r1, #3
 80099ba:	4607      	mov	r7, r0
 80099bc:	f025 0503 	bic.w	r5, r5, #3
 80099c0:	3508      	adds	r5, #8
 80099c2:	2d0c      	cmp	r5, #12
 80099c4:	bf38      	it	cc
 80099c6:	250c      	movcc	r5, #12
 80099c8:	2d00      	cmp	r5, #0
 80099ca:	db01      	blt.n	80099d0 <_malloc_r+0x1c>
 80099cc:	42a9      	cmp	r1, r5
 80099ce:	d905      	bls.n	80099dc <_malloc_r+0x28>
 80099d0:	230c      	movs	r3, #12
 80099d2:	2600      	movs	r6, #0
 80099d4:	603b      	str	r3, [r7, #0]
 80099d6:	4630      	mov	r0, r6
 80099d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099dc:	4e2e      	ldr	r6, [pc, #184]	; (8009a98 <_malloc_r+0xe4>)
 80099de:	f000 f8b1 	bl	8009b44 <__malloc_lock>
 80099e2:	6833      	ldr	r3, [r6, #0]
 80099e4:	461c      	mov	r4, r3
 80099e6:	bb34      	cbnz	r4, 8009a36 <_malloc_r+0x82>
 80099e8:	4629      	mov	r1, r5
 80099ea:	4638      	mov	r0, r7
 80099ec:	f7ff ffc2 	bl	8009974 <sbrk_aligned>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	4604      	mov	r4, r0
 80099f4:	d14d      	bne.n	8009a92 <_malloc_r+0xde>
 80099f6:	6834      	ldr	r4, [r6, #0]
 80099f8:	4626      	mov	r6, r4
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d140      	bne.n	8009a80 <_malloc_r+0xcc>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	4631      	mov	r1, r6
 8009a02:	4638      	mov	r0, r7
 8009a04:	eb04 0803 	add.w	r8, r4, r3
 8009a08:	f000 f848 	bl	8009a9c <_sbrk_r>
 8009a0c:	4580      	cmp	r8, r0
 8009a0e:	d13a      	bne.n	8009a86 <_malloc_r+0xd2>
 8009a10:	6821      	ldr	r1, [r4, #0]
 8009a12:	3503      	adds	r5, #3
 8009a14:	4638      	mov	r0, r7
 8009a16:	1a6d      	subs	r5, r5, r1
 8009a18:	f025 0503 	bic.w	r5, r5, #3
 8009a1c:	3508      	adds	r5, #8
 8009a1e:	2d0c      	cmp	r5, #12
 8009a20:	bf38      	it	cc
 8009a22:	250c      	movcc	r5, #12
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7ff ffa5 	bl	8009974 <sbrk_aligned>
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d02b      	beq.n	8009a86 <_malloc_r+0xd2>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	442b      	add	r3, r5
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	e00e      	b.n	8009a54 <_malloc_r+0xa0>
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	1b52      	subs	r2, r2, r5
 8009a3a:	d41e      	bmi.n	8009a7a <_malloc_r+0xc6>
 8009a3c:	2a0b      	cmp	r2, #11
 8009a3e:	d916      	bls.n	8009a6e <_malloc_r+0xba>
 8009a40:	1961      	adds	r1, r4, r5
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	6025      	str	r5, [r4, #0]
 8009a46:	bf18      	it	ne
 8009a48:	6059      	strne	r1, [r3, #4]
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	bf08      	it	eq
 8009a4e:	6031      	streq	r1, [r6, #0]
 8009a50:	5162      	str	r2, [r4, r5]
 8009a52:	604b      	str	r3, [r1, #4]
 8009a54:	f104 060b 	add.w	r6, r4, #11
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f000 f879 	bl	8009b50 <__malloc_unlock>
 8009a5e:	1d23      	adds	r3, r4, #4
 8009a60:	f026 0607 	bic.w	r6, r6, #7
 8009a64:	1af2      	subs	r2, r6, r3
 8009a66:	d0b6      	beq.n	80099d6 <_malloc_r+0x22>
 8009a68:	1b9b      	subs	r3, r3, r6
 8009a6a:	50a3      	str	r3, [r4, r2]
 8009a6c:	e7b3      	b.n	80099d6 <_malloc_r+0x22>
 8009a6e:	6862      	ldr	r2, [r4, #4]
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	bf0c      	ite	eq
 8009a74:	6032      	streq	r2, [r6, #0]
 8009a76:	605a      	strne	r2, [r3, #4]
 8009a78:	e7ec      	b.n	8009a54 <_malloc_r+0xa0>
 8009a7a:	4623      	mov	r3, r4
 8009a7c:	6864      	ldr	r4, [r4, #4]
 8009a7e:	e7b2      	b.n	80099e6 <_malloc_r+0x32>
 8009a80:	4634      	mov	r4, r6
 8009a82:	6876      	ldr	r6, [r6, #4]
 8009a84:	e7b9      	b.n	80099fa <_malloc_r+0x46>
 8009a86:	230c      	movs	r3, #12
 8009a88:	4638      	mov	r0, r7
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	f000 f860 	bl	8009b50 <__malloc_unlock>
 8009a90:	e7a1      	b.n	80099d6 <_malloc_r+0x22>
 8009a92:	6025      	str	r5, [r4, #0]
 8009a94:	e7de      	b.n	8009a54 <_malloc_r+0xa0>
 8009a96:	bf00      	nop
 8009a98:	200018d4 	.word	0x200018d4

08009a9c <_sbrk_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4d05      	ldr	r5, [pc, #20]	; (8009ab8 <_sbrk_r+0x1c>)
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	602b      	str	r3, [r5, #0]
 8009aa8:	f7f9 fa6e 	bl	8002f88 <_sbrk>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d102      	bne.n	8009ab6 <_sbrk_r+0x1a>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	b103      	cbz	r3, 8009ab6 <_sbrk_r+0x1a>
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	200018dc 	.word	0x200018dc

08009abc <_raise_r>:
 8009abc:	291f      	cmp	r1, #31
 8009abe:	b538      	push	{r3, r4, r5, lr}
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	d904      	bls.n	8009ad0 <_raise_r+0x14>
 8009ac6:	2316      	movs	r3, #22
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ad2:	b112      	cbz	r2, 8009ada <_raise_r+0x1e>
 8009ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ad8:	b94b      	cbnz	r3, 8009aee <_raise_r+0x32>
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 f830 	bl	8009b40 <_getpid_r>
 8009ae0:	462a      	mov	r2, r5
 8009ae2:	4601      	mov	r1, r0
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aea:	f000 b817 	b.w	8009b1c <_kill_r>
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d00a      	beq.n	8009b08 <_raise_r+0x4c>
 8009af2:	1c59      	adds	r1, r3, #1
 8009af4:	d103      	bne.n	8009afe <_raise_r+0x42>
 8009af6:	2316      	movs	r3, #22
 8009af8:	6003      	str	r3, [r0, #0]
 8009afa:	2001      	movs	r0, #1
 8009afc:	e7e7      	b.n	8009ace <_raise_r+0x12>
 8009afe:	2400      	movs	r4, #0
 8009b00:	4628      	mov	r0, r5
 8009b02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b06:	4798      	blx	r3
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e7e0      	b.n	8009ace <_raise_r+0x12>

08009b0c <raise>:
 8009b0c:	4b02      	ldr	r3, [pc, #8]	; (8009b18 <raise+0xc>)
 8009b0e:	4601      	mov	r1, r0
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	f7ff bfd3 	b.w	8009abc <_raise_r>
 8009b16:	bf00      	nop
 8009b18:	20000014 	.word	0x20000014

08009b1c <_kill_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	2300      	movs	r3, #0
 8009b20:	4d06      	ldr	r5, [pc, #24]	; (8009b3c <_kill_r+0x20>)
 8009b22:	4604      	mov	r4, r0
 8009b24:	4608      	mov	r0, r1
 8009b26:	4611      	mov	r1, r2
 8009b28:	602b      	str	r3, [r5, #0]
 8009b2a:	f7f9 fa13 	bl	8002f54 <_kill>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	d102      	bne.n	8009b38 <_kill_r+0x1c>
 8009b32:	682b      	ldr	r3, [r5, #0]
 8009b34:	b103      	cbz	r3, 8009b38 <_kill_r+0x1c>
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	bd38      	pop	{r3, r4, r5, pc}
 8009b3a:	bf00      	nop
 8009b3c:	200018dc 	.word	0x200018dc

08009b40 <_getpid_r>:
 8009b40:	f7f9 ba00 	b.w	8002f44 <_getpid>

08009b44 <__malloc_lock>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__malloc_lock+0x8>)
 8009b46:	f000 b809 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	200018e0 	.word	0x200018e0

08009b50 <__malloc_unlock>:
 8009b50:	4801      	ldr	r0, [pc, #4]	; (8009b58 <__malloc_unlock+0x8>)
 8009b52:	f000 b804 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009b56:	bf00      	nop
 8009b58:	200018e0 	.word	0x200018e0

08009b5c <__retarget_lock_acquire_recursive>:
 8009b5c:	4770      	bx	lr

08009b5e <__retarget_lock_release_recursive>:
 8009b5e:	4770      	bx	lr

08009b60 <_init>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr

08009b6c <_fini>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	bf00      	nop
 8009b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b72:	bc08      	pop	{r3}
 8009b74:	469e      	mov	lr, r3
 8009b76:	4770      	bx	lr
