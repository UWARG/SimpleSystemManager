
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001004  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb8  0800bcb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcb8  0800bcb8  0001bcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcc0  0800bcc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bcc0  0800bcc0  0001bcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bcc8  0800bcc8  0001bcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bcd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  20000074  0800bd44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001360  0800bd44  00021360  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003140b  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d90  00000000  00000000  000514b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00057248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00058c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cd60  00000000  00000000  0005a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fb13  00000000  00000000  00097238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018eaf9  00000000  00000000  000c6d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00255844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007394  00000000  00000000  00255894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000074 	.word	0x20000074
 8000210:	00000000 	.word	0x00000000
 8000214:	0800ac9c 	.word	0x0800ac9c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000078 	.word	0x20000078
 8000230:	0800ac9c 	.word	0x0800ac9c

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b982 	b.w	8000560 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800027a:	4604      	mov	r4, r0
 800027c:	460f      	mov	r7, r1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0xa0>
 8000282:	428a      	cmp	r2, r1
 8000284:	4694      	mov	ip, r2
 8000286:	d961      	bls.n	800034c <__udivmoddi4+0xd8>
 8000288:	fab2 f382 	clz	r3, r2
 800028c:	b143      	cbz	r3, 80002a0 <__udivmoddi4+0x2c>
 800028e:	f1c3 0120 	rsb	r1, r3, #32
 8000292:	409f      	lsls	r7, r3
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	409c      	lsls	r4, r3
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	430f      	orrs	r7, r1
 80002a0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a4:	fa1f fe8c 	uxth.w	lr, ip
 80002a8:	0c22      	lsrs	r2, r4, #16
 80002aa:	fbb7 f6f1 	udiv	r6, r7, r1
 80002ae:	fb01 7716 	mls	r7, r1, r6, r7
 80002b2:	fb06 f00e 	mul.w	r0, r6, lr
 80002b6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x5c>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x5a>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 8137 	bhi.w	800053c <__udivmoddi4+0x2c8>
 80002ce:	463e      	mov	r6, r7
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d8:	fb01 2210 	mls	r2, r1, r0, r2
 80002dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x86>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x84>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 811c 	bhi.w	8000530 <__udivmoddi4+0x2bc>
 80002f8:	4610      	mov	r0, r2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	2600      	movs	r6, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0x9a>
 8000306:	40dc      	lsrs	r4, r3
 8000308:	2300      	movs	r3, #0
 800030a:	e9c5 4300 	strd	r4, r3, [r5]
 800030e:	4631      	mov	r1, r6
 8000310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000314:	428b      	cmp	r3, r1
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0xb8>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 80fd 	beq.w	8000518 <__udivmoddi4+0x2a4>
 800031e:	2600      	movs	r6, #0
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	4630      	mov	r0, r6
 8000326:	4631      	mov	r1, r6
 8000328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032c:	fab3 f683 	clz	r6, r3
 8000330:	2e00      	cmp	r6, #0
 8000332:	d14b      	bne.n	80003cc <__udivmoddi4+0x158>
 8000334:	428b      	cmp	r3, r1
 8000336:	f0c0 80f2 	bcc.w	800051e <__udivmoddi4+0x2aa>
 800033a:	4282      	cmp	r2, r0
 800033c:	f240 80ef 	bls.w	800051e <__udivmoddi4+0x2aa>
 8000340:	4630      	mov	r0, r6
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e3      	beq.n	800030e <__udivmoddi4+0x9a>
 8000346:	e9c5 4700 	strd	r4, r7, [r5]
 800034a:	e7e0      	b.n	800030e <__udivmoddi4+0x9a>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xdc>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f382 	clz	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	f040 809d 	bne.w	8000494 <__udivmoddi4+0x220>
 800035a:	1a89      	subs	r1, r1, r2
 800035c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000360:	b297      	uxth	r7, r2
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f2fe 	udiv	r2, r1, lr
 800036a:	fb0e 1112 	mls	r1, lr, r2, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb07 f002 	mul.w	r0, r7, r2
 8000376:	4288      	cmp	r0, r1
 8000378:	d90f      	bls.n	800039a <__udivmoddi4+0x126>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	4288      	cmp	r0, r1
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80cf 	beq.w	8000536 <__udivmoddi4+0x2c2>
 8000398:	4642      	mov	r2, r8
 800039a:	1a09      	subs	r1, r1, r0
 800039c:	b2a4      	uxth	r4, r4
 800039e:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ae:	42a7      	cmp	r7, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x150>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14e>
 80003bc:	42a7      	cmp	r7, r4
 80003be:	f200 80b4 	bhi.w	800052a <__udivmoddi4+0x2b6>
 80003c2:	4608      	mov	r0, r1
 80003c4:	1be4      	subs	r4, r4, r7
 80003c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ca:	e79b      	b.n	8000304 <__udivmoddi4+0x90>
 80003cc:	f1c6 0720 	rsb	r7, r6, #32
 80003d0:	40b3      	lsls	r3, r6
 80003d2:	fa01 f406 	lsl.w	r4, r1, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	40f9      	lsrs	r1, r7
 80003dc:	40b2      	lsls	r2, r6
 80003de:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ea:	431c      	orrs	r4, r3
 80003ec:	fa1f fe8c 	uxth.w	lr, ip
 80003f0:	fa00 f306 	lsl.w	r3, r0, r6
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fa:	fb09 1118 	mls	r1, r9, r8, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb08 f00e 	mul.w	r0, r8, lr
 8000406:	4288      	cmp	r0, r1
 8000408:	d90f      	bls.n	800042a <__udivmoddi4+0x1b6>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	f04f 0b01 	movcs.w	fp, #1
 8000418:	f04f 0b00 	movcc.w	fp, #0
 800041c:	4288      	cmp	r0, r1
 800041e:	d903      	bls.n	8000428 <__udivmoddi4+0x1b4>
 8000420:	f1bb 0f00 	cmp.w	fp, #0
 8000424:	f000 808d 	beq.w	8000542 <__udivmoddi4+0x2ce>
 8000428:	46d0      	mov	r8, sl
 800042a:	1a09      	subs	r1, r1, r0
 800042c:	b2a4      	uxth	r4, r4
 800042e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000432:	fb09 1110 	mls	r1, r9, r0, r1
 8000436:	fb00 fe0e 	mul.w	lr, r0, lr
 800043a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043e:	458e      	cmp	lr, r1
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1de>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 34ff 	add.w	r4, r0, #4294967295
 800044a:	d201      	bcs.n	8000450 <__udivmoddi4+0x1dc>
 800044c:	458e      	cmp	lr, r1
 800044e:	d87f      	bhi.n	8000550 <__udivmoddi4+0x2dc>
 8000450:	4620      	mov	r0, r4
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	eba1 010e 	sub.w	r1, r1, lr
 800045a:	fba0 9802 	umull	r9, r8, r0, r2
 800045e:	4541      	cmp	r1, r8
 8000460:	464c      	mov	r4, r9
 8000462:	46c6      	mov	lr, r8
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0x1f8>
 8000466:	d106      	bne.n	8000476 <__udivmoddi4+0x202>
 8000468:	454b      	cmp	r3, r9
 800046a:	d204      	bcs.n	8000476 <__udivmoddi4+0x202>
 800046c:	3801      	subs	r0, #1
 800046e:	ebb9 0402 	subs.w	r4, r9, r2
 8000472:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000476:	2d00      	cmp	r5, #0
 8000478:	d070      	beq.n	800055c <__udivmoddi4+0x2e8>
 800047a:	1b1a      	subs	r2, r3, r4
 800047c:	eb61 010e 	sbc.w	r1, r1, lr
 8000480:	fa22 f306 	lsr.w	r3, r2, r6
 8000484:	fa01 f707 	lsl.w	r7, r1, r7
 8000488:	40f1      	lsrs	r1, r6
 800048a:	2600      	movs	r6, #0
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	e73c      	b.n	800030e <__udivmoddi4+0x9a>
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	f1c3 0020 	rsb	r0, r3, #32
 800049c:	fa01 f203 	lsl.w	r2, r1, r3
 80004a0:	fa21 f600 	lsr.w	r6, r1, r0
 80004a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a8:	fa24 f100 	lsr.w	r1, r4, r0
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	409c      	lsls	r4, r3
 80004b2:	4311      	orrs	r1, r2
 80004b4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b8:	0c0a      	lsrs	r2, r1, #16
 80004ba:	fb0e 6610 	mls	r6, lr, r0, r6
 80004be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004c2:	fb00 f607 	mul.w	r6, r0, r7
 80004c6:	4296      	cmp	r6, r2
 80004c8:	d90e      	bls.n	80004e8 <__udivmoddi4+0x274>
 80004ca:	eb1c 0202 	adds.w	r2, ip, r2
 80004ce:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d2:	bf2c      	ite	cs
 80004d4:	f04f 0901 	movcs.w	r9, #1
 80004d8:	f04f 0900 	movcc.w	r9, #0
 80004dc:	4296      	cmp	r6, r2
 80004de:	d902      	bls.n	80004e6 <__udivmoddi4+0x272>
 80004e0:	f1b9 0f00 	cmp.w	r9, #0
 80004e4:	d031      	beq.n	800054a <__udivmoddi4+0x2d6>
 80004e6:	4640      	mov	r0, r8
 80004e8:	1b92      	subs	r2, r2, r6
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fbb2 f6fe 	udiv	r6, r2, lr
 80004f0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f8:	fb06 f207 	mul.w	r2, r6, r7
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x29c>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f106 38ff 	add.w	r8, r6, #4294967295
 8000508:	d201      	bcs.n	800050e <__udivmoddi4+0x29a>
 800050a:	428a      	cmp	r2, r1
 800050c:	d823      	bhi.n	8000556 <__udivmoddi4+0x2e2>
 800050e:	4646      	mov	r6, r8
 8000510:	1a89      	subs	r1, r1, r2
 8000512:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000516:	e725      	b.n	8000364 <__udivmoddi4+0xf0>
 8000518:	462e      	mov	r6, r5
 800051a:	4628      	mov	r0, r5
 800051c:	e6f7      	b.n	800030e <__udivmoddi4+0x9a>
 800051e:	1a84      	subs	r4, r0, r2
 8000520:	eb61 0303 	sbc.w	r3, r1, r3
 8000524:	2001      	movs	r0, #1
 8000526:	461f      	mov	r7, r3
 8000528:	e70b      	b.n	8000342 <__udivmoddi4+0xce>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e749      	b.n	80003c4 <__udivmoddi4+0x150>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e6e1      	b.n	80002fa <__udivmoddi4+0x86>
 8000536:	3a02      	subs	r2, #2
 8000538:	4461      	add	r1, ip
 800053a:	e72e      	b.n	800039a <__udivmoddi4+0x126>
 800053c:	3e02      	subs	r6, #2
 800053e:	4462      	add	r2, ip
 8000540:	e6c6      	b.n	80002d0 <__udivmoddi4+0x5c>
 8000542:	f1a8 0802 	sub.w	r8, r8, #2
 8000546:	4461      	add	r1, ip
 8000548:	e76f      	b.n	800042a <__udivmoddi4+0x1b6>
 800054a:	3802      	subs	r0, #2
 800054c:	4462      	add	r2, ip
 800054e:	e7cb      	b.n	80004e8 <__udivmoddi4+0x274>
 8000550:	3802      	subs	r0, #2
 8000552:	4461      	add	r1, ip
 8000554:	e77d      	b.n	8000452 <__udivmoddi4+0x1de>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	e7d9      	b.n	8000510 <__udivmoddi4+0x29c>
 800055c:	462e      	mov	r6, r5
 800055e:	e6d6      	b.n	800030e <__udivmoddi4+0x9a>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <_ZN14CircularBuffer4readEPhi>:
    } 
    res = buf[(readPtr + dist) % size];  
    return 1;
}

uint8_t CircularBuffer::read(uint8_t* res, int dist) {
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
    if(dist + readPtr > writePtr) return 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	429a      	cmp	r2, r3
 800057e:	dd01      	ble.n	8000584 <_ZN14CircularBuffer4readEPhi+0x20>
 8000580:	2300      	movs	r3, #0
 8000582:	e069      	b.n	8000658 <_ZN14CircularBuffer4readEPhi+0xf4>

    if( (readPtr % size) + dist >= size ) {
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	6852      	ldr	r2, [r2, #4]
 800058c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000590:	fb01 f202 	mul.w	r2, r1, r2
 8000594:	1a9a      	subs	r2, r3, r2
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	441a      	add	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	db42      	blt.n	8000628 <_ZN14CircularBuffer4readEPhi+0xc4>
        // two memcpys needed
        int dist_to_end = size - (readPtr % size);
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6859      	ldr	r1, [r3, #4]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	6852      	ldr	r2, [r2, #4]
 80005ae:	fb93 f0f2 	sdiv	r0, r3, r2
 80005b2:	fb00 f202 	mul.w	r2, r0, r2
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	1acb      	subs	r3, r1, r3
 80005ba:	617b      	str	r3, [r7, #20]
        std::memcpy(res, &buf[readPtr % size], dist_to_end);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	6819      	ldr	r1, [r3, #0]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	6852      	ldr	r2, [r2, #4]
 80005c8:	fb93 f0f2 	sdiv	r0, r3, r2
 80005cc:	fb00 f202 	mul.w	r2, r0, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	440b      	add	r3, r1
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	4619      	mov	r1, r3
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	f009 fe7b 	bl	800a2d4 <memcpy>
        readPtr += dist_to_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	68da      	ldr	r2, [r3, #12]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	441a      	add	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	60da      	str	r2, [r3, #12]
        dist -= dist_to_end;
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	607b      	str	r3, [r7, #4]
        std::memcpy(&res[dist_to_end], &buf[readPtr % size], dist);
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	18d4      	adds	r4, r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	6819      	ldr	r1, [r3, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	6852      	ldr	r2, [r2, #4]
 8000604:	fb93 f0f2 	sdiv	r0, r3, r2
 8000608:	fb00 f202 	mul.w	r2, r0, r2
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	440b      	add	r3, r1
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	4620      	mov	r0, r4
 8000616:	f009 fe5d 	bl	800a2d4 <memcpy>
        readPtr += dist;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	68da      	ldr	r2, [r3, #12]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	441a      	add	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	e016      	b.n	8000656 <_ZN14CircularBuffer4readEPhi+0xf2>
    } else {
        // one memcpy needed
        std::memcpy(res, &buf[readPtr % size], dist);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6819      	ldr	r1, [r3, #0]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	6852      	ldr	r2, [r2, #4]
 8000634:	fb93 f0f2 	sdiv	r0, r3, r2
 8000638:	fb00 f202 	mul.w	r2, r0, r2
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	440b      	add	r3, r1
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	4619      	mov	r1, r3
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f009 fe45 	bl	800a2d4 <memcpy>
        readPtr += dist;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	441a      	add	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	60da      	str	r2, [r3, #12]
    }

    return 1;
 8000656:	2301      	movs	r3, #1

}
 8000658:	4618      	mov	r0, r3
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd90      	pop	{r4, r7, pc}

08000660 <_ZN14CircularBufferC1EPhi>:


CircularBuffer::CircularBuffer(uint8_t* buf, int size) {
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
    this->buf = buf;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	601a      	str	r2, [r3, #0]
    this->size = size;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	605a      	str	r2, [r3, #4]
}
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_ZN14CircularBuffer5writeEh>:

bool CircularBuffer::hasSpace() {
    return !((writePtr % size == readPtr % size) && writePtr != readPtr);
}

uint8_t CircularBuffer::write(uint8_t data) {
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	460b      	mov	r3, r1
 800069c:	70fb      	strb	r3, [r7, #3]
    buf[writePtr % size] = data;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6819      	ldr	r1, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	6852      	ldr	r2, [r2, #4]
 80006aa:	fb93 f0f2 	sdiv	r0, r3, r2
 80006ae:	fb00 f202 	mul.w	r2, r0, r2
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	78fa      	ldrb	r2, [r7, #3]
 80006b8:	701a      	strb	r2, [r3, #0]
    this->writePtr++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	609a      	str	r2, [r3, #8]
    return 1;
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <HAL_UARTEx_RxEventCallback>:
#include "../../SSM_MAVLink_Driver/Inc/SSM_D_MAVLink.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSReceiver.hpp"
#include "../../SBUS/Inc/LOS_D_SBUSSender.hpp"
#include "../Inc/driver_config.hpp"

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
    
    if(huart == pixhawk_mavlink_uart){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <HAL_UARTEx_RxEventCallback+0x98>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d13c      	bne.n	8000762 <HAL_UARTEx_RxEventCallback+0x8e>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_SET); //turn on green light
 80006e8:	2201      	movs	r2, #1
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <HAL_UARTEx_RxEventCallback+0x9c>)
 80006ee:	f005 fd31 	bl	8006154 <HAL_GPIO_WritePin>

        for (uint16_t i = 0; i < size; i++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	81fb      	strh	r3, [r7, #14]
 80006f6:	89fa      	ldrh	r2, [r7, #14]
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d210      	bcs.n	8000720 <HAL_UARTEx_RxEventCallback+0x4c>
        {
            pixhawk_mavlink->rx_circular_buffer_->write(pixhawk_mavlink->raw_rx_msg_[i]);
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4413      	add	r3, r2
 800070e:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8000712:	4619      	mov	r1, r3
 8000714:	f7ff ffbd 	bl	8000692 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	3301      	adds	r3, #1
 800071c:	81fb      	strh	r3, [r7, #14]
 800071e:	e7ea      	b.n	80006f6 <HAL_UARTEx_RxEventCallback+0x22>
        }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000728:	f44f 728c 	mov.w	r2, #280	; 0x118
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f009 facb 	bl	8009cca <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0204 	bic.w	r2, r2, #4
 800074a:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,GPIO_PIN_RESET); //turn off green light
 800074c:	2200      	movs	r2, #0
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000752:	f005 fcff 	bl	8006154 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <HAL_UARTEx_RxEventCallback+0xa4>)
 800075e:	f005 fcf9 	bl	8006154 <HAL_GPIO_WritePin>
    }


}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000e88 	.word	0x20000e88
 8000770:	42020800 	.word	0x42020800
 8000774:	20000000 	.word	0x20000000
 8000778:	42020000 	.word	0x42020000

0800077c <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <HAL_UART_RxCpltCallback+0x98>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d130      	bne.n	80007ee <HAL_UART_RxCpltCallback+0x72>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET); //turn off red light
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000792:	4821      	ldr	r0, [pc, #132]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 8000794:	f005 fcde 	bl	8006154 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 8000798:	2201      	movs	r2, #1
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	481f      	ldr	r0, [pc, #124]	; (800081c <HAL_UART_RxCpltCallback+0xa0>)
 800079e:	f005 fcd9 	bl	8006154 <HAL_GPIO_WritePin>
        SBUSReceiver::getInstance(huart)->parse();
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f8fa 	bl	800099c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f94f 	bl	8000a4e <_ZN12SBUSReceiver5parseEv>
        HAL_UART_Receive_DMA (huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f8f3 	bl	800099c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2219      	movs	r2, #25
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f007 fdfb 	bl	80083b8 <HAL_UART_Receive_DMA>
        SBUSSender::getInstance(huart)->assemble_packet();
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fab6 	bl	8000d34 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fb06 	bl	8000ddc <_ZN10SBUSSender15assemble_packetEv>
        HAL_UART_Transmit(huart, SBUSSender::getInstance(huart)->send_buf_, SBUS_FRAME_SIZE, 10);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 faaf 	bl	8000d34 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4619      	mov	r1, r3
 80007da:	230a      	movs	r3, #10
 80007dc:	2219      	movs	r2, #25
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f007 fcdc 	bl	800819c <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 80007e4:	2200      	movs	r2, #0
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007ea:	f005 fcb3 	bl	8006154 <HAL_GPIO_WritePin>
    }

    if(huart == pixhawk_mavlink_uart){
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <HAL_UART_RxCpltCallback+0xa4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d109      	bne.n	800080a <HAL_UART_RxCpltCallback+0x8e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET); //turn on blue light
 80007f6:	2201      	movs	r2, #1
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007fc:	f005 fcaa 	bl	8006154 <HAL_GPIO_WritePin>
        /*
            should never enter this callback
        */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET); //turn off blue light
 8000800:	2200      	movs	r2, #0
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_UART_RxCpltCallback+0xa0>)
 8000806:	f005 fca5 	bl	8006154 <HAL_GPIO_WritePin>
    }

 }
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000df4 	.word	0x20000df4
 8000818:	42020000 	.word	0x42020000
 800081c:	42020400 	.word	0x42020400
 8000820:	20000e88 	.word	0x20000e88

08000824 <HAL_UART_ErrorCallback>:

 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    if(huart == sbus_uart){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <HAL_UART_ErrorCallback+0x6c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d111      	bne.n	8000858 <HAL_UART_ErrorCallback+0x34>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083a:	4816      	ldr	r0, [pc, #88]	; (8000894 <HAL_UART_ErrorCallback+0x70>)
 800083c:	f005 fc8a 	bl	8006154 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f007 fe05 	bl	8008450 <HAL_UART_DMAStop>
        HAL_UART_Receive_DMA(huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f8a8 	bl	800099c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 800084c:	4603      	mov	r3, r0
 800084e:	2219      	movs	r2, #25
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f007 fdb0 	bl	80083b8 <HAL_UART_Receive_DMA>
    }
    if(huart == pixhawk_mavlink_uart){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_UART_ErrorCallback+0x74>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d112      	bne.n	8000886 <HAL_UART_ErrorCallback+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET); //turn on red light
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <HAL_UART_ErrorCallback+0x70>)
 8000868:	f005 fc74 	bl	8006154 <HAL_GPIO_WritePin>
        HAL_UART_DMAStop(huart);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f007 fdef 	bl	8008450 <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart3, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_UART_ErrorCallback+0x78>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800087a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_UART_ErrorCallback+0x74>)
 8000882:	f009 fa22 	bl	8009cca <HAL_UARTEx_ReceiveToIdle_DMA>
    }
 }
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000df4 	.word	0x20000df4
 8000894:	42020000 	.word	0x42020000
 8000898:	20000e88 	.word	0x20000e88
 800089c:	20000000 	.word	0x20000000

080008a0 <_Z41__static_initialization_and_destruction_0ii>:
/*
    creating mavlink instance
*/

MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d108      	bne.n	80008c2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d103      	bne.n	80008c2 <_Z41__static_initialization_and_destruction_0ii+0x22>
MAVLink pixhawk_mavlink_instance(pixhawk_mavlink_uart);
 80008ba:	4909      	ldr	r1, [pc, #36]	; (80008e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80008be:	f002 f9aa 	bl	8002c16 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d107      	bne.n	80008d8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d102      	bne.n	80008d8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80008d4:	f002 f9da 	bl	8002c8c <_ZN7MAVLinkD1Ev>
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000e88 	.word	0x20000e88
 80008e4:	20000090 	.word	0x20000090

080008e8 <_GLOBAL__sub_I_pixhawk_mavlink_instance>:
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff ffd5 	bl	80008a0 <_Z41__static_initialization_and_destruction_0ii>
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_GLOBAL__sub_D_pixhawk_mavlink_instance>:
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff ffcd 	bl	80008a0 <_Z41__static_initialization_and_destruction_0ii>
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZN9RCControlC1Ev>:
    };

    float &operator[] (int i) { return ControlSignals[i]; }

    /*  initial values*/
    RCControl()
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    {
        ControlSignals[0] = 50.0f;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a21      	ldr	r2, [pc, #132]	; (8000998 <_ZN9RCControlC1Ev+0x90>)
 8000914:	601a      	str	r2, [r3, #0]
        ControlSignals[1] = 50.0f;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <_ZN9RCControlC1Ev+0x90>)
 800091a:	605a      	str	r2, [r3, #4]
        ControlSignals[2] = 0.0f;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
        ControlSignals[3] = 50.0f;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <_ZN9RCControlC1Ev+0x90>)
 8000928:	60da      	str	r2, [r3, #12]
        ControlSignals[4] = 0.0f;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f04f 0200 	mov.w	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
        ControlSignals[5] = 0.0f;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
        ControlSignals[6] = 0.0f;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f04f 0200 	mov.w	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
        ControlSignals[7] = 0.0f;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
        ControlSignals[8] = 0.0f;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
        ControlSignals[9] = 0.0f;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
        ControlSignals[10] = 0.0f;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f04f 0200 	mov.w	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
        ControlSignals[11] = 0.0f;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f04f 0200 	mov.w	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
        ControlSignals[12] = 0.0f;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
        ControlSignals[13] = 0.0f;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
        ControlSignals[14] = 0.0f;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
        ControlSignals[15] = 0.0f;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	42480000 	.word	0x42480000

0800099c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSReceiver* SBUSReceiver::singleton_ = NULL;

SBUSReceiver* SBUSReceiver::getInstance(UART_HandleTypeDef* uart){
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    if (singleton_ == NULL)
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10a      	bne.n	80009c2 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x26>
    	singleton_ = new SBUSReceiver(uart);
 80009ac:	2088      	movs	r0, #136	; 0x88
 80009ae:	f009 fc25 	bl	800a1fc <_Znwj>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461c      	mov	r4, r3
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	4620      	mov	r0, r4
 80009ba:	f000 f80b 	bl	80009d4 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80009c0:	601c      	str	r4, [r3, #0]

    // returning the instance pointer
    return singleton_;
 80009c2:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80009c4:	681b      	ldr	r3, [r3, #0]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200006d8 	.word	0x200006d8

080009d4 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	61da      	str	r2, [r3, #28]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3348      	adds	r3, #72	; 0x48
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff8d 	bl	8000908 <_ZN9RCControlC1Ev>
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	dc0a      	bgt.n	8000a0e <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x3a>
    {
        received_sbus_.ch[i] = 1000;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	3210      	adds	r2, #16
 80009fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e7f1      	b.n	80009f2 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x1e>
    }
    received_sbus_.ch17 = false;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    HAL_UART_Receive_DMA (uart_, raw_sbus_, SBUS_FRAME_SIZE);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2219      	movs	r2, #25
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 fcba 	bl	80083b8 <HAL_UART_Receive_DMA>
}
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4618      	mov	r0, r3
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_ZN12SBUSReceiver5parseEv>:
    cast_rccontrol();
    return received_rccontrol_;
}

void SBUSReceiver::parse()
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
    if ((raw_sbus_[0] == HEADER_) && (raw_sbus_[24] == FOOTER_)) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	f040 815e 	bne.w	8000d1c <_ZN12SBUSReceiver5parseEv+0x2ce>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7e1b      	ldrb	r3, [r3, #24]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f040 8159 	bne.w	8000d1c <_ZN12SBUSReceiver5parseEv+0x2ce>

        //exactal parsing
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[2] << 8) & 0x07FF));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a7c:	b21b      	sxth	r3, r3
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	841a      	strh	r2, [r3, #32]
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[3] << 5) & 0x07FF));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	78db      	ldrb	r3, [r3, #3]
 8000a96:	015b      	lsls	r3, r3, #5
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a9e:	b21b      	sxth	r3, r3
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	845a      	strh	r2, [r3, #34]	; 0x22
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	78db      	ldrb	r3, [r3, #3]
 8000aae:	099b      	lsrs	r3, r3, #6
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	b21a      	sxth	r2, r3
                                            (raw_sbus_[4] << 2) |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[5] << 10) & 0x07FF));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	029b      	lsls	r3, r3, #10
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000acc:	b21b      	sxth	r3, r3
                                            (raw_sbus_[4] << 2) |
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b21b      	sxth	r3, r3
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	849a      	strh	r2, [r3, #36]	; 0x24
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	795b      	ldrb	r3, [r3, #5]
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[6] << 7) & 0x07FF));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	799b      	ldrb	r3, [r3, #6]
 8000ae6:	01db      	lsls	r3, r3, #7
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000aee:	b21b      	sxth	r3, r3
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	84da      	strh	r2, [r3, #38]	; 0x26
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	799b      	ldrb	r3, [r3, #6]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[7] << 4) & 0x07FF));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	79db      	ldrb	r3, [r3, #7]
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b10:	b21b      	sxth	r3, r3
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	851a      	strh	r2, [r3, #40]	; 0x28
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	79db      	ldrb	r3, [r3, #7]
 8000b20:	09db      	lsrs	r3, r3, #7
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	b21a      	sxth	r2, r3
                                            (raw_sbus_[8] << 1) |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7a1b      	ldrb	r3, [r3, #8]
 8000b2a:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[9] << 9) & 0x07FF));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7a5b      	ldrb	r3, [r3, #9]
 8000b36:	025b      	lsls	r3, r3, #9
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b3e:	b21b      	sxth	r3, r3
                                            (raw_sbus_[8] << 1) |
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b21b      	sxth	r3, r3
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	855a      	strh	r2, [r3, #42]	; 0x2a
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7a5b      	ldrb	r3, [r3, #9]
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[10] << 6) & 0x07FF));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a9b      	ldrb	r3, [r3, #10]
 8000b58:	019b      	lsls	r3, r3, #6
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b60:	b21b      	sxth	r3, r3
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	859a      	strh	r2, [r3, #44]	; 0x2c
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7a9b      	ldrb	r3, [r3, #10]
 8000b70:	095b      	lsrs	r3, r3, #5
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[11] << 3) & 0x07FF));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7adb      	ldrb	r3, [r3, #11]
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b82:	b21b      	sxth	r3, r3
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	85da      	strh	r2, [r3, #46]	; 0x2e
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7b1b      	ldrb	r3, [r3, #12]
 8000b92:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[13] << 8) & 0x07FF));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7b5b      	ldrb	r3, [r3, #13]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ba0:	b21b      	sxth	r3, r3
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	861a      	strh	r2, [r3, #48]	; 0x30
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7b5b      	ldrb	r3, [r3, #13]
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[14] << 5) & 0x07FF));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7b9b      	ldrb	r3, [r3, #14]
 8000bba:	015b      	lsls	r3, r3, #5
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bc2:	b21b      	sxth	r3, r3
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	865a      	strh	r2, [r3, #50]	; 0x32
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7b9b      	ldrb	r3, [r3, #14]
 8000bd2:	099b      	lsrs	r3, r3, #6
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	b21a      	sxth	r2, r3
                                            (raw_sbus_[15] << 2) |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7bdb      	ldrb	r3, [r3, #15]
 8000bdc:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[16] << 10) & 0x07FF));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7c1b      	ldrb	r3, [r3, #16]
 8000be8:	029b      	lsls	r3, r3, #10
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bf0:	b21b      	sxth	r3, r3
                                            (raw_sbus_[15] << 2) |
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21b      	sxth	r3, r3
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	869a      	strh	r2, [r3, #52]	; 0x34
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7c1b      	ldrb	r3, [r3, #16]
 8000c00:	085b      	lsrs	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[17] << 7) & 0x07FF));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7c5b      	ldrb	r3, [r3, #17]
 8000c0a:	01db      	lsls	r3, r3, #7
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c12:	b21b      	sxth	r3, r3
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	86da      	strh	r2, [r3, #54]	; 0x36
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7c5b      	ldrb	r3, [r3, #17]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[18] << 4) & 0x07FF));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7c9b      	ldrb	r3, [r3, #18]
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c34:	b21b      	sxth	r3, r3
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	871a      	strh	r2, [r3, #56]	; 0x38
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7c9b      	ldrb	r3, [r3, #18]
 8000c44:	09db      	lsrs	r3, r3, #7
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	b21a      	sxth	r2, r3
                                            (raw_sbus_[19] << 1) |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7cdb      	ldrb	r3, [r3, #19]
 8000c4e:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[20] << 9) & 0x07FF));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7d1b      	ldrb	r3, [r3, #20]
 8000c5a:	025b      	lsls	r3, r3, #9
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c62:	b21b      	sxth	r3, r3
                                            (raw_sbus_[19] << 1) |
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21b      	sxth	r3, r3
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	875a      	strh	r2, [r3, #58]	; 0x3a
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7d1b      	ldrb	r3, [r3, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[21] << 6) & 0x07FF));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7d5b      	ldrb	r3, [r3, #21]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c84:	b21b      	sxth	r3, r3
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7d5b      	ldrb	r3, [r3, #21]
 8000c94:	095b      	lsrs	r3, r3, #5
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[22] << 3) & 0x07FF));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7d9b      	ldrb	r3, [r3, #22]
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ca6:	b21b      	sxth	r3, r3
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* CH 17 */
        received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7ddb      	ldrb	r3, [r3, #23]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        /* CH 18 */
        received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7ddb      	ldrb	r3, [r3, #23]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        /* Grab the lost frame */
        received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7ddb      	ldrb	r3, [r3, #23]
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf14      	ite	ne
 8000cee:	2301      	movne	r3, #1
 8000cf0:	2300      	moveq	r3, #0
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        /* Grab the failsafe */
        received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7ddb      	ldrb	r3, [r3, #23]
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf14      	ite	ne
 8000d06:	2301      	movne	r3, #1
 8000d08:	2300      	moveq	r3, #0
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        received_sbus_.new_data = true;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d1a:	e004      	b.n	8000d26 <_ZN12SBUSReceiver5parseEv+0x2d8>

    }else{
    	received_sbus_.new_data = false;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender* SBUSSender::singleton_ = NULL;

SBUSSender* SBUSSender::getInstance(UART_HandleTypeDef* uart){
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
    if (singleton_ == nullptr)
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10a      	bne.n	8000d5a <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x26>
      singleton_ = new SBUSSender(uart);
 8000d44:	2048      	movs	r0, #72	; 0x48
 8000d46:	f009 fa59 	bl	800a1fc <_Znwj>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461c      	mov	r4, r3
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4620      	mov	r0, r4
 8000d52:	f000 f80b 	bl	8000d6c <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000d58:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000d5a:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200006dc 	.word	0x200006dc

08000d6c <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	dc0a      	bgt.n	8000d9c <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x30>
	{
		send_sbus_.ch[i] = 1000;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	3210      	adds	r2, #16
 8000d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e7f1      	b.n	8000d80 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x14>
	}
	send_sbus_.ch17 = false;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	send_sbus_.ch18 = false;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	send_sbus_.failsafe = false;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	send_sbus_.lost_frame = false;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	send_sbus_.new_data = false;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit_DMA(uart_, send_buf_, SBUS_FRAME_SIZE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	2219      	movs	r2, #25
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 fa73 	bl	80082b8 <HAL_UART_Transmit_DMA>
}
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZN10SBUSSender15assemble_packetEv>:
      send_sbus_.ch[i] = rccontrol_to_sbus(values.ControlSignals[i]);
    }
}

void SBUSSender::assemble_packet()
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	220f      	movs	r2, #15
 8000de8:	701a      	strb	r2, [r3, #0]
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	8c1b      	ldrh	r3, [r3, #32]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	705a      	strb	r2, [r3, #1]
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	8c1b      	ldrh	r3, [r3, #32]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	f023 0307 	bic.w	r3, r3, #7
 8000e10:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	709a      	strb	r2, [r3, #2]
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000e20:	095b      	lsrs	r3, r3, #5
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e2a:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e38:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	70da      	strb	r2, [r3, #3]
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	711a      	strb	r2, [r3, #4]
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e56:	0a9b      	lsrs	r3, r3, #10
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	715a      	strb	r2, [r3, #5]
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e7e:	09db      	lsrs	r3, r3, #7
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	f023 030f 	bic.w	r3, r3, #15
 8000e96:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	719a      	strb	r2, [r3, #6]
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eb0:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eb6:	01db      	lsls	r3, r3, #7
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ebe:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	71da      	strb	r2, [r3, #7]
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	721a      	strb	r2, [r3, #8]
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000edc:	0a5b      	lsrs	r3, r3, #9
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	f023 0303 	bic.w	r3, r3, #3
 8000ef4:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	725a      	strb	r2, [r3, #9]
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f04:	099b      	lsrs	r3, r3, #6
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000f14:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	729a      	strb	r2, [r3, #10]
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000f26:	08db      	lsrs	r3, r3, #3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	72da      	strb	r2, [r3, #11]
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	731a      	strb	r2, [r3, #12]
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	f023 0307 	bic.w	r3, r3, #7
 8000f56:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	735a      	strb	r2, [r3, #13]
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f70:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000f76:	019b      	lsls	r3, r3, #6
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f7e:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	739a      	strb	r2, [r3, #14]
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	73da      	strb	r2, [r3, #15]
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000f9c:	0a9b      	lsrs	r3, r3, #10
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	741a      	strb	r2, [r3, #16]
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000fc4:	09db      	lsrs	r3, r3, #7
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	f023 030f 	bic.w	r3, r3, #15
 8000fdc:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	745a      	strb	r2, [r3, #17]
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff6:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000ffc:	01db      	lsls	r3, r3, #7
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001004:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8001006:	4313      	orrs	r3, r2
 8001008:	b25b      	sxtb	r3, r3
 800100a:	b2da      	uxtb	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	749a      	strb	r2, [r3, #18]
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001014:	085b      	lsrs	r3, r3, #1
 8001016:	b29b      	uxth	r3, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	74da      	strb	r2, [r3, #19]
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001022:	0a5b      	lsrs	r3, r3, #9
 8001024:	b29b      	uxth	r3, r3
 8001026:	b25b      	sxtb	r3, r3
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	b25b      	sxtb	r3, r3
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 800103c:	4313      	orrs	r3, r2
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	751a      	strb	r2, [r3, #20]
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800104a:	099b      	lsrs	r3, r3, #6
 800104c:	b29b      	uxth	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	f003 031f 	and.w	r3, r3, #31
 8001054:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800105a:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 800105c:	b25b      	sxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	b2da      	uxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	755a      	strb	r2, [r3, #21]
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	b29b      	uxth	r3, r3
 8001070:	b2da      	uxtb	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	759a      	strb	r2, [r3, #22]
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800107c:	b25a      	sxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25b      	sxtb	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	75da      	strb	r2, [r3, #23]
  send_buf_[24] = FOOTER_;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	761a      	strb	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	6039      	str	r1, [r7, #0]
 80010d0:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4053      	eors	r3, r2
 80010dc:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	4053      	eors	r3, r2
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4053      	eors	r3, r2
 8001100:	b21a      	sxth	r2, r3
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	b21b      	sxth	r3, r3
 8001108:	4053      	eors	r3, r2
 800110a:	b21a      	sxth	r2, r3
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	b2db      	uxtb	r3, r3
 8001112:	b21b      	sxth	r3, r3
 8001114:	4053      	eors	r3, r2
 8001116:	b21b      	sxth	r3, r3
 8001118:	b29a      	uxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	801a      	strh	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001138:	801a      	strh	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8001152:	f107 030e 	add.w	r3, r7, #14
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffe7 	bl	800112a <crc_init>
	while (length--) {
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	807a      	strh	r2, [r7, #2]
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00a      	beq.n	8001186 <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	f107 020e 	add.w	r2, r7, #14
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffa1 	bl	80010c6 <crc_accumulate>
	while (length--) {
 8001184:	e7ea      	b.n	800115c <crc_calculate+0x16>
        }
        return crcTmp;
 8001186:	89fb      	ldrh	r3, [r7, #14]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4613      	mov	r3, r2
 800119c:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	617b      	str	r3, [r7, #20]
	while (length--) {
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	80fa      	strh	r2, [r7, #6]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d008      	beq.n	80011c8 <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	617a      	str	r2, [r7, #20]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff80 	bl	80010c6 <crc_accumulate>
	while (length--) {
 80011c6:	e7ec      	b.n	80011a2 <crc_accumulate_buffer+0x12>
        }
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <mavlink_sha256_init+0x50>)
 80011e8:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <mavlink_sha256_init+0x54>)
 80011ee:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <mavlink_sha256_init+0x58>)
 80011f4:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <mavlink_sha256_init+0x5c>)
 80011fa:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <mavlink_sha256_init+0x60>)
 8001200:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <mavlink_sha256_init+0x64>)
 8001206:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <mavlink_sha256_init+0x68>)
 800120c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <mavlink_sha256_init+0x6c>)
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	6a09e667 	.word	0x6a09e667
 8001224:	bb67ae85 	.word	0xbb67ae85
 8001228:	3c6ef372 	.word	0x3c6ef372
 800122c:	a54ff53a 	.word	0xa54ff53a
 8001230:	510e527f 	.word	0x510e527f
 8001234:	9b05688c 	.word	0x9b05688c
 8001238:	1f83d9ab 	.word	0x1f83d9ab
 800123c:	5be0cd19 	.word	0x5be0cd19

08001240 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8001240:	b480      	push	{r7}
 8001242:	b0cf      	sub	sp, #316	; 0x13c
 8001244:	af00      	add	r7, sp, #0
 8001246:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800124a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800124e:	6018      	str	r0, [r3, #0]
 8001250:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001254:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001258:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800125a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800125e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 800126a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800126e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 800127a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800127e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 800128a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800128e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 800129a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800129e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80012aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80012ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80012ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	dc17      	bgt.n	8001318 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 80012e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80012f2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001304:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 800130c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001310:	3301      	adds	r3, #1
 8001312:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001316:	e7e3      	b.n	80012e0 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8001318:	2310      	movs	r3, #16
 800131a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800131e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001322:	2b3f      	cmp	r3, #63	; 0x3f
 8001324:	dc6a      	bgt.n	80013fc <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800132a:	1e9a      	subs	r2, r3, #2
 800132c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	ea4f 4273 	mov.w	r2, r3, ror #17
 800133c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001340:	1e99      	subs	r1, r3, #2
 8001342:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001346:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800134a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800134e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8001352:	405a      	eors	r2, r3
 8001354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001358:	1e99      	subs	r1, r3, #2
 800135a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800135e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001362:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001366:	0a9b      	lsrs	r3, r3, #10
 8001368:	405a      	eors	r2, r3
 800136a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800136e:	1fd9      	subs	r1, r3, #7
 8001370:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001378:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800137c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800137e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001382:	f1a3 010f 	sub.w	r1, r3, #15
 8001386:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800138a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800138e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001392:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800139a:	f1a3 000f 	sub.w	r0, r3, #15
 800139e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013aa:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80013ae:	4059      	eors	r1, r3
 80013b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013b4:	f1a3 000f 	sub.w	r0, r3, #15
 80013b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80013c8:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80013ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ce:	f1a3 0110 	sub.w	r1, r3, #16
 80013d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013de:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80013e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80013f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013f4:	3301      	adds	r3, #1
 80013f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80013fa:	e790      	b.n	800131e <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001406:	2b3f      	cmp	r3, #63	; 0x3f
 8001408:	dc79      	bgt.n	80014fe <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800140a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800140e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001412:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001416:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800141a:	405a      	eors	r2, r3
 800141c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001420:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001424:	405a      	eors	r2, r3
 8001426:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800142a:	441a      	add	r2, r3
 800142c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001430:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001434:	4019      	ands	r1, r3
 8001436:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800143a:	43d8      	mvns	r0, r3
 800143c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001440:	4003      	ands	r3, r0
 8001442:	404b      	eors	r3, r1
 8001444:	441a      	add	r2, r3
 8001446:	496d      	ldr	r1, [pc, #436]	; (80015fc <mavlink_sha256_calc+0x3bc>)
 8001448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800144c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001450:	441a      	add	r2, r3
 8001452:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800145a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800145e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001462:	4413      	add	r3, r2
 8001464:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001468:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800146c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001470:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001474:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001478:	405a      	eors	r2, r3
 800147a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800147e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001482:	405a      	eors	r2, r3
 8001484:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800148c:	4059      	eors	r1, r3
 800148e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001492:	4019      	ands	r1, r3
 8001494:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800149c:	4003      	ands	r3, r0
 800149e:	404b      	eors	r3, r1
 80014a0:	4413      	add	r3, r2
 80014a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 80014a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80014aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 80014ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 80014b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 80014be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80014c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014c6:	4413      	add	r3, r2
 80014c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 80014cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 80014d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 80014dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80014e4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80014e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014ec:	4413      	add	r3, r2
 80014ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80014f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014fc:	e781      	b.n	8001402 <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 80014fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001502:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800150e:	441a      	add	r2, r3
 8001510:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001514:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 800151c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001520:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800152c:	441a      	add	r2, r3
 800152e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001532:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 800153a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800153e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800154a:	441a      	add	r2, r3
 800154c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001550:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8001558:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800155c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001568:	441a      	add	r2, r3
 800156a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800156e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8001576:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800157a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001586:	441a      	add	r2, r3
 8001588:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800158c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001594:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001598:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a4:	441a      	add	r2, r3
 80015a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 80015b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a1a      	ldr	r2, [r3, #32]
 80015be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80015c2:	441a      	add	r2, r3
 80015c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 80015d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015e0:	441a      	add	r2, r3
 80015e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015ee:	bf00      	nop
 80015f0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	0800ad24 	.word	0x0800ad24

08001600 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09c      	sub	sp, #112	; 0x70
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	441a      	add	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800162a:	429a      	cmp	r2, r3
 800162c:	d904      	bls.n	8001638 <mavlink_sha256_update+0x38>
	++m->sz[1];
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d058      	beq.n	80016fa <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8001648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800164e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001654:	429a      	cmp	r2, r3
 8001656:	d201      	bcs.n	800165c <mavlink_sha256_update+0x5c>
            l = len;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001664:	4413      	add	r3, r2
 8001666:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001668:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800166a:	4618      	mov	r0, r3
 800166c:	f008 fe32 	bl	800a2d4 <memcpy>
	offset += l;
 8001670:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001674:	4413      	add	r3, r2
 8001676:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800167a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800167c:	4413      	add	r3, r2
 800167e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800168a:	2b40      	cmp	r3, #64	; 0x40
 800168c:	d1d9      	bne.n	8001642 <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3328      	adds	r3, #40	; 0x28
 8001692:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001694:	2300      	movs	r3, #0
 8001696:	663b      	str	r3, [r7, #96]	; 0x60
 8001698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800169a:	2b0f      	cmp	r3, #15
 800169c:	dc24      	bgt.n	80016e8 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800169e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016a4:	4413      	add	r3, r2
 80016a6:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80016a8:	f107 0210 	add.w	r2, r7, #16
 80016ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80016b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b6:	3303      	adds	r3, #3
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016bc:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80016be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c0:	1c9a      	adds	r2, r3, #2
 80016c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c4:	3301      	adds	r3, #1
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80016ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016d0:	3302      	adds	r3, #2
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80016d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016d8:	3303      	adds	r3, #3
 80016da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80016e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016e2:	3301      	adds	r3, #1
 80016e4:	663b      	str	r3, [r7, #96]	; 0x60
 80016e6:	e7d7      	b.n	8001698 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f7ff fda6 	bl	8001240 <mavlink_sha256_calc>
	    offset = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80016f8:	e7a3      	b.n	8001642 <mavlink_sha256_update+0x42>
	}
    }
}
 80016fa:	bf00      	nop
 80016fc:	3770      	adds	r7, #112	; 0x70
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b098      	sub	sp, #96	; 0x60
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001716:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171a:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 800171e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001722:	3301      	adds	r3, #1
 8001724:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3308      	adds	r3, #8
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	3301      	adds	r3, #1
 8001736:	2247      	movs	r2, #71	; 0x47
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f008 fdd7 	bl	800a2ee <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001746:	3307      	adds	r3, #7
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	3360      	adds	r3, #96	; 0x60
 800174c:	443b      	add	r3, r7
 800174e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0a1a      	lsrs	r2, r3, #8
 8001758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800175a:	3306      	adds	r3, #6
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	3360      	adds	r3, #96	; 0x60
 8001760:	443b      	add	r3, r7
 8001762:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0c1a      	lsrs	r2, r3, #16
 800176c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800176e:	3305      	adds	r3, #5
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	3360      	adds	r3, #96	; 0x60
 8001774:	443b      	add	r3, r7
 8001776:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0e1a      	lsrs	r2, r3, #24
 8001780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001782:	3304      	adds	r3, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	3360      	adds	r3, #96	; 0x60
 8001788:	443b      	add	r3, r7
 800178a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001794:	3303      	adds	r3, #3
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	3360      	adds	r3, #96	; 0x60
 800179a:	443b      	add	r3, r7
 800179c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0a1a      	lsrs	r2, r3, #8
 80017a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017a8:	3302      	adds	r3, #2
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	3360      	adds	r3, #96	; 0x60
 80017ae:	443b      	add	r3, r7
 80017b0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0c1a      	lsrs	r2, r3, #16
 80017ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017bc:	3301      	adds	r3, #1
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	3360      	adds	r3, #96	; 0x60
 80017c2:	443b      	add	r3, r7
 80017c4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0e1b      	lsrs	r3, r3, #24
 80017ce:	b2d9      	uxtb	r1, r3
 80017d0:	f107 020c 	add.w	r2, r7, #12
 80017d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d6:	4413      	add	r3, r2
 80017d8:	460a      	mov	r2, r1
 80017da:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 80017dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017de:	f103 0208 	add.w	r2, r3, #8
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff09 	bl	8001600 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 80017ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f0:	78da      	ldrb	r2, [r3, #3]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017fc:	7892      	ldrb	r2, [r2, #2]
 80017fe:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3302      	adds	r3, #2
 8001804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001806:	7852      	ldrb	r2, [r2, #1]
 8001808:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3303      	adds	r3, #3
 800180e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3304      	adds	r3, #4
 8001818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800181a:	79d2      	ldrb	r2, [r2, #7]
 800181c:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	3305      	adds	r3, #5
 8001822:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001824:	7992      	ldrb	r2, [r2, #6]
 8001826:	701a      	strb	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	3760      	adds	r7, #96	; 0x60
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <mavlink_get_channel_status+0x24>)
 8001846:	4413      	add	r3, r2
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	200006e0 	.word	0x200006e0

08001858 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f240 1223 	movw	r2, #291	; 0x123
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <mavlink_get_channel_buffer+0x24>)
 800186e:	4413      	add	r3, r2
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	20000740 	.word	0x20000740

08001880 <mavlink_reset_channel_status>:

/**
 * @brief Reset the status of a channel.
 */
MAVLINK_HELPER void mavlink_reset_channel_status(uint8_t chan)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffcf 	bl	8001830 <mavlink_get_channel_status>
 8001892:	60f8      	str	r0, [r7, #12]
	status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	70da      	strb	r2, [r3, #3]
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 80018a2:	b5b0      	push	{r4, r5, r7, lr}
 80018a4:	b0a0      	sub	sp, #128	; 0x80
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <mavlink_sign_packet+0x20>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <mavlink_sign_packet+0x24>
	    return 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e04f      	b.n	8001966 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	785a      	ldrb	r2, [r3, #1]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	3301      	adds	r3, #1
 80018dc:	f107 0110 	add.w	r1, r7, #16
 80018e0:	2206      	movs	r2, #6
 80018e2:	4618      	mov	r0, r3
 80018e4:	f008 fcf6 	bl	800a2d4 <memcpy>
	signing->timestamp++;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ee:	1c54      	adds	r4, r2, #1
 80018f0:	f143 0500 	adc.w	r5, r3, #0
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fc66 	bl	80011d0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f103 0110 	add.w	r1, r3, #16
 800190a:	f107 0318 	add.w	r3, r7, #24
 800190e:	2220      	movs	r2, #32
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fe75 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fe6e 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001924:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fe65 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001936:	f107 0318 	add.w	r3, r7, #24
 800193a:	2202      	movs	r2, #2
 800193c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe5d 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	2207      	movs	r2, #7
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fe56 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1dda      	adds	r2, r3, #7
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fecf 	bl	8001702 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001964:	230d      	movs	r3, #13
}
 8001966:	4618      	mov	r0, r3
 8001968:	3780      	adds	r7, #128	; 0x80
 800196a:	46bd      	mov	sp, r7
 800196c:	bdb0      	pop	{r4, r5, r7, pc}

0800196e <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d90a      	bls.n	8001996 <_mav_trim_payload+0x28>
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	3b01      	subs	r3, #1
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <_mav_trim_payload+0x28>
		length--;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	3b01      	subs	r3, #1
 8001992:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001994:	e7f1      	b.n	800197a <_mav_trim_payload+0xc>
	}
	return length;
 8001996:	78fb      	ldrb	r3, [r7, #3]
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b0aa      	sub	sp, #168	; 0xa8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <mavlink_signature_check+0x16>
		return true;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e125      	b.n	8001c06 <mavlink_signature_check+0x262>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3302      	adds	r3, #2
 80019be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80019c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 80019cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d0:	3307      	adds	r3, #7
 80019d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 80019d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fbf8 	bl	80011d0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f103 0110 	add.w	r1, r3, #16
 80019e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ea:	2220      	movs	r2, #32
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fe07 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 80019f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f6:	220a      	movs	r2, #10
 80019f8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fdff 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f103 010c 	add.w	r1, r3, #12
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	78db      	ldrb	r3, [r3, #3]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fdf4 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	2202      	movs	r2, #2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fdeb 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2e:	2207      	movs	r2, #7
 8001a30:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fde3 	bl	8001600 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001a3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe5c 	bl	8001702 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	2206      	movs	r2, #6
 8001a50:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001a54:	4618      	mov	r0, r3
 8001a56:	f008 fc2d 	bl	800a2b4 <memcmp>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <mavlink_signature_check+0xc0>
		return false;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e0d0      	b.n	8001c06 <mavlink_signature_check+0x262>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	2206      	movs	r2, #6
 8001a86:	4618      	mov	r0, r3
 8001a88:	f008 fc24 	bl	800a2d4 <memcpy>

	if (signing_streams == NULL) {
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <mavlink_signature_check+0xf2>
		return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e0b7      	b.n	8001c06 <mavlink_signature_check+0x262>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d22d      	bcs.n	8001b04 <mavlink_signature_check+0x160>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	79d9      	ldrb	r1, [r3, #7]
 8001aac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ab0:	68b8      	ldr	r0, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4403      	add	r3, r0
 8001aba:	3303      	adds	r3, #3
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4299      	cmp	r1, r3
 8001ac0:	d119      	bne.n	8001af6 <mavlink_signature_check+0x152>
		    msg->compid == signing_streams->stream[i].compid &&
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7a19      	ldrb	r1, [r3, #8]
 8001ac6:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4403      	add	r3, r0
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001ad8:	4299      	cmp	r1, r3
 8001ada:	d10c      	bne.n	8001af6 <mavlink_signature_check+0x152>
		    link_id == signing_streams->stream[i].link_id) {
 8001adc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3302      	adds	r3, #2
 8001aec:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001aee:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d005      	beq.n	8001b02 <mavlink_signature_check+0x15e>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001af6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001b00:	e7cc      	b.n	8001a9c <mavlink_signature_check+0xf8>
			break;
 8001b02:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d13e      	bne.n	8001b8e <mavlink_signature_check+0x1ea>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d901      	bls.n	8001b1c <mavlink_signature_check+0x178>
			// over max number of streams
			return false;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e074      	b.n	8001c06 <mavlink_signature_check+0x262>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b20:	493b      	ldr	r1, [pc, #236]	; (8001c10 <mavlink_signature_check+0x26c>)
 8001b22:	1854      	adds	r4, r2, r1
 8001b24:	f143 0500 	adc.w	r5, r3, #0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b2e:	4294      	cmp	r4, r2
 8001b30:	eb75 0303 	sbcs.w	r3, r5, r3
 8001b34:	d201      	bcs.n	8001b3a <mavlink_signature_check+0x196>
			return false;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e065      	b.n	8001c06 <mavlink_signature_check+0x262>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001b3a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	79d8      	ldrb	r0, [r3, #7]
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3303      	adds	r3, #3
 8001b4e:	4602      	mov	r2, r0
 8001b50:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001b52:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7a18      	ldrb	r0, [r3, #8]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	3304      	adds	r3, #4
 8001b66:	4602      	mov	r2, r0
 8001b68:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001b6a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001b7e:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	e01d      	b.n	8001bca <mavlink_signature_check+0x226>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001b9a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	1d59      	adds	r1, r3, #5
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	2206      	movs	r2, #6
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f008 fb8f 	bl	800a2d4 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bbe:	4290      	cmp	r0, r2
 8001bc0:	eb71 0303 	sbcs.w	r3, r1, r3
 8001bc4:	d301      	bcc.n	8001bca <mavlink_signature_check+0x226>
			// repeating old timestamp
			return false;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e01d      	b.n	8001c06 <mavlink_signature_check+0x262>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001bca:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	1d58      	adds	r0, r3, #5
 8001bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bde:	3301      	adds	r3, #1
 8001be0:	2206      	movs	r2, #6
 8001be2:	4619      	mov	r1, r3
 8001be4:	f008 fb76 	bl	800a2d4 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001bf2:	4290      	cmp	r0, r2
 8001bf4:	eb71 0303 	sbcs.w	r3, r1, r3
 8001bf8:	d204      	bcs.n	8001c04 <mavlink_signature_check+0x260>
		signing->timestamp = tstamp.t64;
 8001bfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	return true;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	37a8      	adds	r7, #168	; 0xa8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	005b8d80 	.word	0x005b8d80

08001c14 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b08f      	sub	sp, #60	; 0x3c
 8001c18:	af04      	add	r7, sp, #16
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	72fb      	strb	r3, [r7, #11]
 8001c22:	4613      	mov	r3, r2
 8001c24:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7b1b      	ldrb	r3, [r3, #12]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf14      	ite	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	2300      	moveq	r3, #0
 8001c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00c      	beq.n	8001c62 <mavlink_finalize_message_buffer+0x4e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <mavlink_finalize_message_buffer+0x4e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <mavlink_finalize_message_buffer+0x4e>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <mavlink_finalize_message_buffer+0x50>
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001c68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <mavlink_finalize_message_buffer+0x60>
 8001c70:	230d      	movs	r3, #13
 8001c72:	e000      	b.n	8001c76 <mavlink_finalize_message_buffer+0x62>
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001c80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	22fe      	movs	r2, #254	; 0xfe
 8001c8c:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c94:	e002      	b.n	8001c9c <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	22fd      	movs	r2, #253	; 0xfd
 8001c9a:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <mavlink_finalize_message_buffer+0x96>
 8001ca4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001ca8:	e009      	b.n	8001cbe <mavlink_finalize_message_buffer+0xaa>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	330c      	adds	r3, #12
 8001cae:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fe5a 	bl	800196e <_mav_trim_payload>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	7afa      	ldrb	r2, [r7, #11]
 8001cc6:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	7aba      	ldrb	r2, [r7, #10]
 8001ccc:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001cd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	799a      	ldrb	r2, [r3, #6]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	799b      	ldrb	r3, [r3, #6]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	789b      	ldrb	r3, [r3, #2]
 8001d08:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	78db      	ldrb	r3, [r3, #3]
 8001d0e:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001d10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	799b      	ldrb	r3, [r3, #6]
 8001d1c:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	79db      	ldrb	r3, [r3, #7]
 8001d22:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	7a1b      	ldrb	r3, [r3, #8]
 8001d28:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	7a5a      	ldrb	r2, [r3, #9]
 8001d2e:	7a99      	ldrb	r1, [r3, #10]
 8001d30:	0209      	lsls	r1, r1, #8
 8001d32:	430a      	orrs	r2, r1
 8001d34:	7adb      	ldrb	r3, [r3, #11]
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	777b      	strb	r3, [r7, #29]
 8001d3e:	e030      	b.n	8001da2 <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	791b      	ldrb	r3, [r3, #4]
 8001d44:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	795b      	ldrb	r3, [r3, #5]
 8001d4a:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	799b      	ldrb	r3, [r3, #6]
 8001d50:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	79db      	ldrb	r3, [r3, #7]
 8001d56:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	7a1b      	ldrb	r3, [r3, #8]
 8001d5c:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	7a5a      	ldrb	r2, [r3, #9]
 8001d62:	7a99      	ldrb	r1, [r3, #10]
 8001d64:	0209      	lsls	r1, r1, #8
 8001d66:	430a      	orrs	r2, r1
 8001d68:	7adb      	ldrb	r3, [r3, #11]
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	7a5a      	ldrb	r2, [r3, #9]
 8001d76:	7a99      	ldrb	r1, [r3, #10]
 8001d78:	0209      	lsls	r1, r1, #8
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	7adb      	ldrb	r3, [r3, #11]
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	4313      	orrs	r3, r2
 8001d82:	121b      	asrs	r3, r3, #8
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	7a5a      	ldrb	r2, [r3, #9]
 8001d8e:	7a99      	ldrb	r1, [r3, #10]
 8001d90:	0209      	lsls	r1, r1, #8
 8001d92:	430a      	orrs	r2, r1
 8001d94:	7adb      	ldrb	r3, [r3, #11]
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	141b      	asrs	r3, r3, #16
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	3301      	adds	r3, #1
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f9c6 	bl	8001146 <crc_calculate>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f103 010c 	add.w	r1, r3, #12
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	78db      	ldrb	r3, [r3, #3]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	f107 0316 	add.w	r3, r7, #22
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f9de 	bl	8001190 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001dd4:	f107 0216 	add.w	r2, r7, #22
 8001dd8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f971 	bl	80010c6 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001de4:	8af9      	ldrh	r1, [r7, #22]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	330c      	adds	r3, #12
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	78d2      	ldrb	r2, [r2, #3]
 8001dee:	4413      	add	r3, r2
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001df4:	8afb      	ldrh	r3, [r7, #22]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f103 020c 	add.w	r2, r3, #12
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	78db      	ldrb	r3, [r3, #3]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	b2ca      	uxtb	r2, r1
 8001e0a:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001e0c:	8afa      	ldrh	r2, [r7, #22]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8001e12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	310c      	adds	r1, #12
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001e34:	4401      	add	r1, r0
 8001e36:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001e3a:	f107 0018 	add.w	r0, r7, #24
 8001e3e:	9102      	str	r1, [sp, #8]
 8001e40:	9201      	str	r2, [sp, #4]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4633      	mov	r3, r6
 8001e46:	4602      	mov	r2, r0
 8001e48:	4629      	mov	r1, r5
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff fd29 	bl	80018a2 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	b29b      	uxth	r3, r3
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	372c      	adds	r7, #44	; 0x2c
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e76 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b088      	sub	sp, #32
 8001e7a:	af04      	add	r7, sp, #16
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	4608      	mov	r0, r1
 8001e80:	4611      	mov	r1, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	70fb      	strb	r3, [r7, #3]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70bb      	strb	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fccc 	bl	8001830 <mavlink_get_channel_status>
 8001e98:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001e9a:	78ba      	ldrb	r2, [r7, #2]
 8001e9c:	78f9      	ldrb	r1, [r7, #3]
 8001e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	7f3b      	ldrb	r3, [r7, #28]
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	7e3b      	ldrb	r3, [r7, #24]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff feb0 	bl	8001c14 <mavlink_finalize_message_buffer>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af04      	add	r7, sp, #16
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4603      	mov	r3, r0
 8001ece:	70fb      	strb	r3, [r7, #3]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70bb      	strb	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001ed8:	78ba      	ldrb	r2, [r7, #2]
 8001eda:	78f9      	ldrb	r1, [r7, #3]
 8001edc:	7d3b      	ldrb	r3, [r7, #20]
 8001ede:	9302      	str	r3, [sp, #8]
 8001ee0:	7c3b      	ldrb	r3, [r7, #16]
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffc3 	bl	8001e76 <mavlink_finalize_message_chan>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	789b      	ldrb	r3, [r3, #2]
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	709a      	strb	r2, [r3, #2]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	78db      	ldrb	r3, [r3, #3]
 8001f28:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	789b      	ldrb	r3, [r3, #2]
 8001f2e:	2bfe      	cmp	r3, #254	; 0xfe
 8001f30:	d13a      	bne.n	8001fa8 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001f36:	2305      	movs	r3, #5
 8001f38:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	789a      	ldrb	r2, [r3, #2]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3301      	adds	r3, #1
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	7992      	ldrb	r2, [r2, #6]
 8001f52:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3303      	adds	r3, #3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	79d2      	ldrb	r2, [r2, #7]
 8001f5c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	7a12      	ldrb	r2, [r2, #8]
 8001f66:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	7a5a      	ldrb	r2, [r3, #9]
 8001f6c:	7a99      	ldrb	r1, [r3, #10]
 8001f6e:	0209      	lsls	r1, r1, #8
 8001f70:	430a      	orrs	r2, r1
 8001f72:	7adb      	ldrb	r3, [r3, #11]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	4313      	orrs	r3, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3305      	adds	r3, #5
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	1d98      	adds	r0, r3, #6
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f103 010c 	add.w	r1, r3, #12
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	78db      	ldrb	r3, [r3, #3]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f008 f99f 	bl	800a2d4 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001f96:	7dbb      	ldrb	r3, [r7, #22]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	78d2      	ldrb	r2, [r2, #3]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e06c      	b.n	8002082 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	330c      	adds	r3, #12
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fcdc 	bl	800196e <_mav_trim_payload>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001fba:	2309      	movs	r3, #9
 8001fbc:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	789a      	ldrb	r2, [r3, #2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	7912      	ldrb	r2, [r2, #4]
 8001fd6:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3303      	adds	r3, #3
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	7952      	ldrb	r2, [r2, #5]
 8001fe0:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	7992      	ldrb	r2, [r2, #6]
 8001fea:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3305      	adds	r3, #5
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	79d2      	ldrb	r2, [r2, #7]
 8001ff4:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	7a12      	ldrb	r2, [r2, #8]
 8001ffe:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	7a5a      	ldrb	r2, [r3, #9]
 8002004:	7a99      	ldrb	r1, [r3, #10]
 8002006:	0209      	lsls	r1, r1, #8
 8002008:	430a      	orrs	r2, r1
 800200a:	7adb      	ldrb	r3, [r3, #11]
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	4313      	orrs	r3, r2
 8002010:	461a      	mov	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3307      	adds	r3, #7
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7a5a      	ldrb	r2, [r3, #9]
 800201e:	7a99      	ldrb	r1, [r3, #10]
 8002020:	0209      	lsls	r1, r1, #8
 8002022:	430a      	orrs	r2, r1
 8002024:	7adb      	ldrb	r3, [r3, #11]
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	4313      	orrs	r3, r2
 800202a:	121a      	asrs	r2, r3, #8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3308      	adds	r3, #8
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7a5a      	ldrb	r2, [r3, #9]
 8002038:	7a99      	ldrb	r1, [r3, #10]
 800203a:	0209      	lsls	r1, r1, #8
 800203c:	430a      	orrs	r2, r1
 800203e:	7adb      	ldrb	r3, [r3, #11]
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	4313      	orrs	r3, r2
 8002044:	141a      	asrs	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3309      	adds	r3, #9
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 000a 	add.w	r0, r3, #10
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	4619      	mov	r1, r3
 800205c:	f008 f93a 	bl	800a2d4 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8002060:	7dba      	ldrb	r2, [r7, #22]
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	4413      	add	r3, r2
 8002066:	3301      	adds	r3, #1
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <mavlink_msg_to_send_buffer+0x164>
 800207a:	230d      	movs	r3, #13
 800207c:	e000      	b.n	8002080 <mavlink_msg_to_send_buffer+0x166>
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2da      	uxtb	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	b29a      	uxth	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	3301      	adds	r3, #1
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1c98      	adds	r0, r3, #2
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80020b0:	7dfa      	ldrb	r2, [r7, #23]
 80020b2:	4619      	mov	r1, r3
 80020b4:	f008 f90e 	bl	800a2d4 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80020b8:	7dbb      	ldrb	r3, [r7, #22]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3303      	adds	r3, #3
 80020ce:	b29b      	uxth	r3, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 80020e4:	f107 030e 	add.w	r3, r7, #14
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f81e 	bl	800112a <crc_init>
	msg->checksum = crcTmp;
 80020ee:	89fa      	ldrh	r2, [r7, #14]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	801a      	strh	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8002110:	f107 020e 	add.w	r2, r7, #14
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe ffd4 	bl	80010c6 <crc_accumulate>
	msg->checksum = checksum;
 800211e:	89fa      	ldrh	r2, [r7, #14]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	801a      	strh	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	f240 1327 	movw	r3, #295	; 0x127
 800213c:	613b      	str	r3, [r7, #16]
        while (low < high) {
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	429a      	cmp	r2, r3
 8002144:	d226      	bcs.n	8002194 <mavlink_get_msg_entry+0x68>
            uint32_t mid = (low+1+high)/2;
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	3301      	adds	r3, #1
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8002152:	491d      	ldr	r1, [pc, #116]	; (80021c8 <mavlink_get_msg_entry+0x9c>)
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d203      	bcs.n	8002170 <mavlink_get_msg_entry+0x44>
                high = mid-1;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3b01      	subs	r3, #1
 800216c:	613b      	str	r3, [r7, #16]
                continue;
 800216e:	e010      	b.n	8002192 <mavlink_get_msg_entry+0x66>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8002170:	4915      	ldr	r1, [pc, #84]	; (80021c8 <mavlink_get_msg_entry+0x9c>)
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d902      	bls.n	800218c <mavlink_get_msg_entry+0x60>
                low = mid;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	617b      	str	r3, [r7, #20]
                continue;
 800218a:	e002      	b.n	8002192 <mavlink_get_msg_entry+0x66>
            }
            low = mid;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	617b      	str	r3, [r7, #20]
            break;
 8002190:	e000      	b.n	8002194 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8002192:	e7d4      	b.n	800213e <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <mavlink_get_msg_entry+0x9c>)
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d001      	beq.n	80021ae <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e006      	b.n	80021bc <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4a03      	ldr	r2, [pc, #12]	; (80021c8 <mavlink_get_msg_entry+0x9c>)
 80021ba:	4413      	add	r3, r2
}
 80021bc:	4618      	mov	r0, r3
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	0800ae24 	.word	0x0800ae24

080021cc <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	78db      	ldrb	r3, [r3, #3]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	f200 8277 	bhi.w	80026de <mavlink_frame_char_buffer+0x512>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <mavlink_frame_char_buffer+0x2c>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002239 	.word	0x08002239
 80021fc:	08002239 	.word	0x08002239
 8002200:	08002297 	.word	0x08002297
 8002204:	080022fd 	.word	0x080022fd
 8002208:	08002335 	.word	0x08002335
 800220c:	0800234d 	.word	0x0800234d
 8002210:	08002365 	.word	0x08002365
 8002214:	0800237d 	.word	0x0800237d
 8002218:	08002395 	.word	0x08002395
 800221c:	080023ef 	.word	0x080023ef
 8002220:	0800243b 	.word	0x0800243b
 8002224:	08002497 	.word	0x08002497
 8002228:	080024cf 	.word	0x080024cf
 800222c:	0800255b 	.word	0x0800255b
 8002230:	0800255b 	.word	0x0800255b
 8002234:	0800261f 	.word	0x0800261f
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2bfd      	cmp	r3, #253	; 0xfd
 800223c:	d113      	bne.n	8002266 <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2202      	movs	r2, #2
 8002242:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	7b1b      	ldrb	r3, [r3, #12]
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff ff3a 	bl	80020d8 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8002264:	e232      	b.n	80026cc <mavlink_frame_char_buffer+0x500>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2bfe      	cmp	r3, #254	; 0xfe
 800226a:	f040 822f 	bne.w	80026cc <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2202      	movs	r2, #2
 8002272:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	79fa      	ldrb	r2, [r7, #7]
 800227e:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	7b1b      	ldrb	r3, [r3, #12]
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7ff ff22 	bl	80020d8 <mavlink_start_checksum>
		break;
 8002294:	e21a      	b.n	80026cc <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00f      	beq.n	80022be <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 80022aa:	68b8      	ldr	r0, [r7, #8]
 80022ac:	f7ff fe25 	bl	8001efa <_mav_parse_error>
			status->msg_received = 0;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2201      	movs	r2, #1
 80022ba:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 80022bc:	e20f      	b.n	80026de <mavlink_frame_char_buffer+0x512>
			rxmsg->len = c;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	79fa      	ldrb	r2, [r7, #7]
 80022c2:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4619      	mov	r1, r3
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff ff14 	bl	80020fc <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	7b1b      	ldrb	r3, [r3, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2205      	movs	r2, #5
 80022f0:	70da      	strb	r2, [r3, #3]
		break;
 80022f2:	e1f4      	b.n	80026de <mavlink_frame_char_buffer+0x512>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2203      	movs	r2, #3
 80022f8:	70da      	strb	r2, [r3, #3]
		break;
 80022fa:	e1f0      	b.n	80026de <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	791b      	ldrb	r3, [r3, #4]
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 800230e:	68b8      	ldr	r0, [r7, #8]
 8002310:	f7ff fdf3 	bl	8001efa <_mav_parse_error>
			status->msg_received = 0;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2201      	movs	r2, #1
 800231e:	70da      	strb	r2, [r3, #3]
			break;
 8002320:	e1dd      	b.n	80026de <mavlink_frame_char_buffer+0x512>
		}
		mavlink_update_checksum(rxmsg, c);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4619      	mov	r1, r3
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff fee8 	bl	80020fc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2204      	movs	r2, #4
 8002330:	70da      	strb	r2, [r3, #3]
		break;
 8002332:	e1d4      	b.n	80026de <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	79fa      	ldrb	r2, [r7, #7]
 8002338:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4619      	mov	r1, r3
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff fedc 	bl	80020fc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2205      	movs	r2, #5
 8002348:	70da      	strb	r2, [r3, #3]
		break;
 800234a:	e1c8      	b.n	80026de <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	79fa      	ldrb	r2, [r7, #7]
 8002350:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	4619      	mov	r1, r3
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff fed0 	bl	80020fc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2206      	movs	r2, #6
 8002360:	70da      	strb	r2, [r3, #3]
		break;
 8002362:	e1bc      	b.n	80026de <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	4619      	mov	r1, r3
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff fec4 	bl	80020fc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2207      	movs	r2, #7
 8002378:	70da      	strb	r2, [r3, #3]
		break;
 800237a:	e1b0      	b.n	80026de <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	4619      	mov	r1, r3
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff feb8 	bl	80020fc <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2208      	movs	r2, #8
 8002390:	70da      	strb	r2, [r3, #3]
		break;
 8002392:	e1a4      	b.n	80026de <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	b2d9      	uxtb	r1, r3
 800239e:	2000      	movs	r0, #0
 80023a0:	4301      	orrs	r1, r0
 80023a2:	7251      	strb	r1, [r2, #9]
 80023a4:	0a19      	lsrs	r1, r3, #8
 80023a6:	b2c9      	uxtb	r1, r1
 80023a8:	2000      	movs	r0, #0
 80023aa:	4301      	orrs	r1, r0
 80023ac:	7291      	strb	r1, [r2, #10]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2100      	movs	r1, #0
 80023b4:	430b      	orrs	r3, r1
 80023b6:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	4619      	mov	r1, r3
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff fe9d 	bl	80020fc <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	7b1b      	ldrb	r3, [r3, #12]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	78db      	ldrb	r3, [r3, #3]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	220b      	movs	r2, #11
 80023da:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 80023dc:	e17f      	b.n	80026de <mavlink_frame_char_buffer+0x512>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	220c      	movs	r2, #12
 80023e2:	70da      	strb	r2, [r3, #3]
		break;
 80023e4:	e17b      	b.n	80026de <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2209      	movs	r2, #9
 80023ea:	70da      	strb	r2, [r3, #3]
		break;
 80023ec:	e177      	b.n	80026de <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	7a5a      	ldrb	r2, [r3, #9]
 80023f2:	7a99      	ldrb	r1, [r3, #10]
 80023f4:	0209      	lsls	r1, r1, #8
 80023f6:	430a      	orrs	r2, r1
 80023f8:	7adb      	ldrb	r3, [r3, #11]
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	4313      	orrs	r3, r2
 80023fe:	461a      	mov	r2, r3
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	4313      	orrs	r3, r2
 8002406:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	b2d1      	uxtb	r1, r2
 800240e:	2000      	movs	r0, #0
 8002410:	4301      	orrs	r1, r0
 8002412:	7259      	strb	r1, [r3, #9]
 8002414:	0a11      	lsrs	r1, r2, #8
 8002416:	b2c9      	uxtb	r1, r1
 8002418:	2000      	movs	r0, #0
 800241a:	4301      	orrs	r1, r0
 800241c:	7299      	strb	r1, [r3, #10]
 800241e:	0c12      	lsrs	r2, r2, #16
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	2100      	movs	r1, #0
 8002424:	430a      	orrs	r2, r1
 8002426:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	4619      	mov	r1, r3
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f7ff fe65 	bl	80020fc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	220a      	movs	r2, #10
 8002436:	70da      	strb	r2, [r3, #3]
		break;
 8002438:	e151      	b.n	80026de <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	7a5a      	ldrb	r2, [r3, #9]
 800243e:	7a99      	ldrb	r1, [r3, #10]
 8002440:	0209      	lsls	r1, r1, #8
 8002442:	430a      	orrs	r2, r1
 8002444:	7adb      	ldrb	r3, [r3, #11]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	4313      	orrs	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	4313      	orrs	r3, r2
 8002452:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	b2d1      	uxtb	r1, r2
 800245a:	2000      	movs	r0, #0
 800245c:	4301      	orrs	r1, r0
 800245e:	7259      	strb	r1, [r3, #9]
 8002460:	0a11      	lsrs	r1, r2, #8
 8002462:	b2c9      	uxtb	r1, r1
 8002464:	2000      	movs	r0, #0
 8002466:	4301      	orrs	r1, r0
 8002468:	7299      	strb	r1, [r3, #10]
 800246a:	0c12      	lsrs	r2, r2, #16
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	2100      	movs	r1, #0
 8002470:	430a      	orrs	r2, r1
 8002472:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4619      	mov	r1, r3
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fe3f 	bl	80020fc <mavlink_update_checksum>
		if(rxmsg->len > 0){
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	78db      	ldrb	r3, [r3, #3]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	220b      	movs	r2, #11
 800248a:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 800248c:	e127      	b.n	80026de <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	220c      	movs	r2, #12
 8002492:	70da      	strb	r2, [r3, #3]
		break;
 8002494:	e123      	b.n	80026de <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f103 020c 	add.w	r2, r3, #12
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	1c59      	adds	r1, r3, #1
 80024a2:	b2c8      	uxtb	r0, r1
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	7108      	strb	r0, [r1, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4619      	mov	r1, r3
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7ff fe22 	bl	80020fc <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	791a      	ldrb	r2, [r3, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	78db      	ldrb	r3, [r3, #3]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8105 	bne.w	80026d0 <mavlink_frame_char_buffer+0x504>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	220c      	movs	r2, #12
 80024ca:	70da      	strb	r2, [r3, #3]
		}
		break;
 80024cc:	e100      	b.n	80026d0 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	7a5a      	ldrb	r2, [r3, #9]
 80024d2:	7a99      	ldrb	r1, [r3, #10]
 80024d4:	0209      	lsls	r1, r1, #8
 80024d6:	430a      	orrs	r2, r1
 80024d8:	7adb      	ldrb	r3, [r3, #11]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	4313      	orrs	r3, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fe24 	bl	800212c <mavlink_get_msg_entry>
 80024e4:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <mavlink_frame_char_buffer+0x326>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	e000      	b.n	80024f4 <mavlink_frame_char_buffer+0x328>
 80024f2:	2300      	movs	r3, #0
 80024f4:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	4619      	mov	r1, r3
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff fdfe 	bl	80020fc <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	429a      	cmp	r2, r3
 800250c:	d003      	beq.n	8002516 <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	220e      	movs	r2, #14
 8002512:	70da      	strb	r2, [r3, #3]
 8002514:	e002      	b.n	800251c <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	220d      	movs	r2, #13
 800251a:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80d4 	beq.w	80026d4 <mavlink_frame_char_buffer+0x508>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	791a      	ldrb	r2, [r3, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	799b      	ldrb	r3, [r3, #6]
 8002534:	429a      	cmp	r2, r3
 8002536:	f080 80cd 	bcs.w	80026d4 <mavlink_frame_char_buffer+0x508>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	330c      	adds	r3, #12
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	7912      	ldrb	r2, [r2, #4]
 8002542:	1898      	adds	r0, r3, r2
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	799b      	ldrb	r3, [r3, #6]
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	791b      	ldrb	r3, [r3, #4]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	461a      	mov	r2, r3
 8002552:	2100      	movs	r1, #0
 8002554:	f007 fecb 	bl	800a2ee <memset>
		}
		break;
 8002558:	e0bc      	b.n	80026d4 <mavlink_frame_char_buffer+0x508>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	2b0e      	cmp	r3, #14
 8002560:	d007      	beq.n	8002572 <mavlink_frame_char_buffer+0x3a6>
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	b292      	uxth	r2, r2
 800256a:	0a12      	lsrs	r2, r2, #8
 800256c:	b292      	uxth	r2, r2
 800256e:	4293      	cmp	r3, r2
 8002570:	d003      	beq.n	800257a <mavlink_frame_char_buffer+0x3ae>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e002      	b.n	8002580 <mavlink_frame_char_buffer+0x3b4>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	79fa      	ldrb	r2, [r7, #7]
 8002584:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	791b      	ldrb	r3, [r3, #4]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <mavlink_frame_char_buffer+0x3e6>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	220f      	movs	r2, #15
 8002598:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	220d      	movs	r2, #13
 800259e:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	f000 8097 	beq.w	80026d8 <mavlink_frame_char_buffer+0x50c>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 80025b0:	e092      	b.n	80026d8 <mavlink_frame_char_buffer+0x50c>
			if (status->signing &&
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01a      	beq.n	80025f0 <mavlink_frame_char_buffer+0x424>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <mavlink_frame_char_buffer+0x420>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	7a59      	ldrb	r1, [r3, #9]
 80025ce:	7a98      	ldrb	r0, [r3, #10]
 80025d0:	0200      	lsls	r0, r0, #8
 80025d2:	4301      	orrs	r1, r0
 80025d4:	7adb      	ldrb	r3, [r3, #11]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	430b      	orrs	r3, r1
 80025da:	4619      	mov	r1, r3
 80025dc:	68b8      	ldr	r0, [r7, #8]
 80025de:	4790      	blx	r2
 80025e0:	4603      	mov	r3, r0
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <mavlink_frame_char_buffer+0x424>
			if (status->signing &&
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <mavlink_frame_char_buffer+0x426>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <mavlink_frame_char_buffer+0x438>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d002      	beq.n	8002604 <mavlink_frame_char_buffer+0x438>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2203      	movs	r2, #3
 8002602:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2201      	movs	r2, #1
 8002608:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d063      	beq.n	80026d8 <mavlink_frame_char_buffer+0x50c>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002610:	f240 1223 	movw	r2, #291	; 0x123
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	6838      	ldr	r0, [r7, #0]
 8002618:	f007 fe5c 	bl	800a2d4 <memcpy>
		break;
 800261c:	e05c      	b.n	80026d8 <mavlink_frame_char_buffer+0x50c>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	7b5b      	ldrb	r3, [r3, #13]
 8002622:	f1c3 030d 	rsb	r3, r3, #13
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4413      	add	r3, r2
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	7b5b      	ldrb	r3, [r3, #13]
 8002634:	3b01      	subs	r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	7b5b      	ldrb	r3, [r3, #13]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d14b      	bne.n	80026dc <mavlink_frame_char_buffer+0x510>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6918      	ldr	r0, [r3, #16]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4619      	mov	r1, r3
 8002650:	f7ff f9a8 	bl	80019a4 <mavlink_signature_check>
 8002654:	4603      	mov	r3, r0
 8002656:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8002658:	7ffb      	ldrb	r3, [r7, #31]
 800265a:	f083 0301 	eor.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <mavlink_frame_char_buffer+0x4c8>
			   	(status->signing->accept_unsigned_callback &&
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d012      	beq.n	8002694 <mavlink_frame_char_buffer+0x4c8>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	7a59      	ldrb	r1, [r3, #9]
 8002678:	7a98      	ldrb	r0, [r3, #10]
 800267a:	0200      	lsls	r0, r0, #8
 800267c:	4301      	orrs	r1, r0
 800267e:	7adb      	ldrb	r3, [r3, #11]
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	430b      	orrs	r3, r1
 8002684:	4619      	mov	r1, r3
 8002686:	68b8      	ldr	r0, [r7, #8]
 8002688:	4790      	blx	r2
 800268a:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <mavlink_frame_char_buffer+0x4c8>
			if (!sig_ok &&
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <mavlink_frame_char_buffer+0x4ca>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <mavlink_frame_char_buffer+0x4d2>
				// accepted via application level override
				sig_ok = true;
 800269a:	2301      	movs	r3, #1
 800269c:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 800269e:	7ffb      	ldrb	r3, [r7, #31]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <mavlink_frame_char_buffer+0x4e0>
				status->msg_received = MAVLINK_FRAMING_OK;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e002      	b.n	80026b2 <mavlink_frame_char_buffer+0x4e6>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2203      	movs	r2, #3
 80026b0:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2201      	movs	r2, #1
 80026b6:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <mavlink_frame_char_buffer+0x510>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80026be:	f240 1223 	movw	r2, #291	; 0x123
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	6838      	ldr	r0, [r7, #0]
 80026c6:	f007 fe05 	bl	800a2d4 <memcpy>
			}
		}
		break;
 80026ca:	e007      	b.n	80026dc <mavlink_frame_char_buffer+0x510>
		break;
 80026cc:	bf00      	nop
 80026ce:	e006      	b.n	80026de <mavlink_frame_char_buffer+0x512>
		break;
 80026d0:	bf00      	nop
 80026d2:	e004      	b.n	80026de <mavlink_frame_char_buffer+0x512>
		break;
 80026d4:	bf00      	nop
 80026d6:	e002      	b.n	80026de <mavlink_frame_char_buffer+0x512>
		break;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <mavlink_frame_char_buffer+0x512>
		break;
 80026dc:	bf00      	nop
	}

	bufferIndex++;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61bb      	str	r3, [r7, #24]
	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d110      	bne.n	800270e <mavlink_frame_char_buffer+0x542>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	799a      	ldrb	r2, [r3, #6]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	891b      	ldrh	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <mavlink_frame_char_buffer+0x536>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	891b      	ldrh	r3, [r3, #8]
 8002706:	3301      	adds	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <mavlink_frame_char_buffer+0x550>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	78da      	ldrb	r2, [r3, #3]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <mavlink_frame_char_buffer+0x58c>
           r_mavlink_status->parse_state = status->parse_state;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	78da      	ldrb	r2, [r3, #3]
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	791a      	ldrb	r2, [r3, #4]
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	795b      	ldrb	r3, [r3, #5]
 8002736:	3301      	adds	r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	891a      	ldrh	r2, [r3, #8]
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	789b      	ldrb	r3, [r3, #2]
 800274a:	b29a      	uxth	r2, r3
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	7b1a      	ldrb	r2, [r3, #12]
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d110      	bne.n	8002788 <mavlink_frame_char_buffer+0x5bc>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <mavlink_frame_char_buffer+0x5bc>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002772:	b21a      	sxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b21b      	sxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	b21b      	sxth	r3, r3
 8002782:	b29a      	uxth	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b087      	sub	sp, #28
 8002798:	af02      	add	r7, sp, #8
 800279a:	60ba      	str	r2, [r7, #8]
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	460b      	mov	r3, r1
 80027a4:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f855 	bl	8001858 <mavlink_get_channel_buffer>
 80027ae:	4604      	mov	r4, r0
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f83c 	bl	8001830 <mavlink_get_channel_status>
 80027b8:	4601      	mov	r1, r0
 80027ba:	7bba      	ldrb	r2, [r7, #14]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff fd02 	bl	80021cc <mavlink_frame_char_buffer>
 80027c8:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}

080027d2 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b088      	sub	sp, #32
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60ba      	str	r2, [r7, #8]
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	4603      	mov	r3, r0
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	460b      	mov	r3, r1
 80027e2:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 80027e4:	7bb9      	ldrb	r1, [r7, #14]
 80027e6:	7bf8      	ldrb	r0, [r7, #15]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f7ff ffd2 	bl	8002794 <mavlink_frame_char>
 80027f0:	4603      	mov	r3, r0
 80027f2:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d002      	beq.n	8002800 <mavlink_parse_char+0x2e>
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d120      	bne.n	8002842 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f828 	bl	8001858 <mavlink_get_channel_buffer>
 8002808:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff f80f 	bl	8001830 <mavlink_get_channel_status>
 8002812:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002814:	6978      	ldr	r0, [r7, #20]
 8002816:	f7ff fb70 	bl	8001efa <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2201      	movs	r2, #1
 8002824:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	2bfd      	cmp	r3, #253	; 0xfd
 800282a:	d108      	bne.n	800283e <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2202      	movs	r2, #2
 8002830:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2200      	movs	r2, #0
 8002836:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002838:	69b8      	ldr	r0, [r7, #24]
 800283a:	f7ff fc4d 	bl	80020d8 <mavlink_start_checksum>
	    }
	    return 0;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8002842:	7ffb      	ldrb	r3, [r7, #31]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	2100      	movs	r1, #0
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f007 fd43 	bl	800a2ee <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 8002868:	e004      	b.n	8002874 <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f007 fd30 	bl	800a2d4 <memcpy>
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <mavlink_msg_param_value_decode>:
 *
 * @param msg The message to decode
 * @param param_value C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_value_decode(const mavlink_message_t* msg, mavlink_param_value_t* param_value)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
    param_value->param_count = mavlink_msg_param_value_get_param_count(msg);
    param_value->param_index = mavlink_msg_param_value_get_param_index(msg);
    mavlink_msg_param_value_get_param_id(msg, param_value->param_id);
    param_value->param_type = mavlink_msg_param_value_get_param_type(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_PARAM_VALUE_LEN? msg->len : MAVLINK_MSG_ID_PARAM_VALUE_LEN;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	78db      	ldrb	r3, [r3, #3]
 800288a:	2b19      	cmp	r3, #25
 800288c:	bf28      	it	cs
 800288e:	2319      	movcs	r3, #25
 8002890:	73fb      	strb	r3, [r7, #15]
        memset(param_value, 0, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
 8002892:	2219      	movs	r2, #25
 8002894:	2100      	movs	r1, #0
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	f007 fd29 	bl	800a2ee <memset>
    memcpy(param_value, _MAV_PAYLOAD(msg), len);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	330c      	adds	r3, #12
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6838      	ldr	r0, [r7, #0]
 80028a6:	f007 fd15 	bl	800a2d4 <memcpy>
#endif
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <mavlink_msg_param_set_pack>:
 * @param param_type  Onboard parameter type.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_param_set_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *param_id, float param_value, uint8_t param_type)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b08c      	sub	sp, #48	; 0x30
 80028b6:	af02      	add	r7, sp, #8
 80028b8:	60ba      	str	r2, [r7, #8]
 80028ba:	461a      	mov	r2, r3
 80028bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	460b      	mov	r3, r1
 80028c6:	73bb      	strb	r3, [r7, #14]
 80028c8:	4613      	mov	r3, r2
 80028ca:	737b      	strb	r3, [r7, #13]
    _mav_put_uint8_t(buf, 22, param_type);
    _mav_put_char_array(buf, 6, param_id, 16);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_PARAM_SET_LEN);
#else
    mavlink_param_set_t packet;
    packet.param_value = param_value;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	613b      	str	r3, [r7, #16]
    packet.target_system = target_system;
 80028d0:	7b7b      	ldrb	r3, [r7, #13]
 80028d2:	753b      	strb	r3, [r7, #20]
    packet.target_component = target_component;
 80028d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028d8:	757b      	strb	r3, [r7, #21]
    packet.param_type = param_type;
 80028da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80028de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	3306      	adds	r3, #6
 80028e8:	2210      	movs	r2, #16
 80028ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ffad 	bl	800284c <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_PARAM_SET_LEN);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	330c      	adds	r3, #12
 80028f6:	f107 0110 	add.w	r1, r7, #16
 80028fa:	2217      	movs	r2, #23
 80028fc:	4618      	mov	r0, r3
 80028fe:	f007 fce9 	bl	800a2d4 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_PARAM_SET;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	f042 0217 	orr.w	r2, r2, #23
 800290a:	725a      	strb	r2, [r3, #9]
 800290c:	2200      	movs	r2, #0
 800290e:	729a      	strb	r2, [r3, #10]
 8002910:	2200      	movs	r2, #0
 8002912:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_PARAM_SET_MIN_LEN, MAVLINK_MSG_ID_PARAM_SET_LEN, MAVLINK_MSG_ID_PARAM_SET_CRC);
 8002914:	7bba      	ldrb	r2, [r7, #14]
 8002916:	7bf9      	ldrb	r1, [r7, #15]
 8002918:	23a8      	movs	r3, #168	; 0xa8
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	2317      	movs	r3, #23
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2317      	movs	r3, #23
 8002922:	68b8      	ldr	r0, [r7, #8]
 8002924:	f7ff facb 	bl	8001ebe <mavlink_finalize_message>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3728      	adds	r7, #40	; 0x28
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <mavlink_msg_param_set_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param param_set C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_param_set_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
 8002932:	b5b0      	push	{r4, r5, r7, lr}
 8002934:	b088      	sub	sp, #32
 8002936:	af04      	add	r7, sp, #16
 8002938:	60ba      	str	r2, [r7, #8]
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	460b      	mov	r3, r1
 8002942:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_param_set_pack(system_id, component_id, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	791d      	ldrb	r5, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	795b      	ldrb	r3, [r3, #5]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	3206      	adds	r2, #6
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	edd1 7a00 	vldr	s15, [r1]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	7d89      	ldrb	r1, [r1, #22]
 800295a:	7bbc      	ldrb	r4, [r7, #14]
 800295c:	7bf8      	ldrb	r0, [r7, #15]
 800295e:	9102      	str	r1, [sp, #8]
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	eeb0 0a67 	vmov.f32	s0, s15
 8002968:	462b      	mov	r3, r5
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4621      	mov	r1, r4
 800296e:	f7ff ffa0 	bl	80028b2 <mavlink_msg_param_set_pack>
 8002972:	4603      	mov	r3, r0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bdb0      	pop	{r4, r5, r7, pc}

0800297c <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
    mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
    mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
    mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
    mission_ack->mission_type = mavlink_msg_mission_ack_get_mission_type(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_MISSION_ACK_LEN? msg->len : MAVLINK_MSG_ID_MISSION_ACK_LEN;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	78db      	ldrb	r3, [r3, #3]
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	73fb      	strb	r3, [r7, #15]
        memset(mission_ack, 0, MAVLINK_MSG_ID_MISSION_ACK_LEN);
 8002992:	2204      	movs	r2, #4
 8002994:	2100      	movs	r1, #0
 8002996:	6838      	ldr	r0, [r7, #0]
 8002998:	f007 fca9 	bl	800a2ee <memset>
    memcpy(mission_ack, _MAV_PAYLOAD(msg), len);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	330c      	adds	r3, #12
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	4619      	mov	r1, r3
 80029a4:	6838      	ldr	r0, [r7, #0]
 80029a6:	f007 fc95 	bl	800a2d4 <memcpy>
#endif
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <mavlink_msg_command_long_pack>:
 * @param param7  Parameter 7 (for the specific command).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b096      	sub	sp, #88	; 0x58
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	623a      	str	r2, [r7, #32]
 80029ba:	461a      	mov	r2, r3
 80029bc:	ed87 0a07 	vstr	s0, [r7, #28]
 80029c0:	edc7 0a06 	vstr	s1, [r7, #24]
 80029c4:	ed87 1a05 	vstr	s2, [r7, #20]
 80029c8:	edc7 1a04 	vstr	s3, [r7, #16]
 80029cc:	ed87 2a03 	vstr	s4, [r7, #12]
 80029d0:	edc7 2a02 	vstr	s5, [r7, #8]
 80029d4:	ed87 3a01 	vstr	s6, [r7, #4]
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029de:	460b      	mov	r3, r1
 80029e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029e4:	4613      	mov	r3, r2
 80029e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    _mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#else
    mavlink_command_long_t packet;
    packet.param1 = param1;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    packet.param2 = param2;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
    packet.param3 = param3;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
    packet.param4 = param4;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
    packet.param5 = param5;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    packet.param6 = param6;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	643b      	str	r3, [r7, #64]	; 0x40
    packet.param7 = param7;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
    packet.command = command;
 8002a06:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    packet.target_system = target_system;
 8002a0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a12:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    packet.target_component = target_component;
 8002a16:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002a1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    packet.confirmation = confirmation;
 8002a1e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002a22:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002a2e:	2221      	movs	r2, #33	; 0x21
 8002a30:	4618      	mov	r0, r3
 8002a32:	f007 fc4f 	bl	800a2d4 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
 8002a3e:	725a      	strb	r2, [r3, #9]
 8002a40:	2200      	movs	r2, #0
 8002a42:	729a      	strb	r2, [r3, #10]
 8002a44:	2200      	movs	r2, #0
 8002a46:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_COMMAND_LONG_MIN_LEN, MAVLINK_MSG_ID_COMMAND_LONG_LEN, MAVLINK_MSG_ID_COMMAND_LONG_CRC);
 8002a48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a4c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002a50:	2398      	movs	r3, #152	; 0x98
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2321      	movs	r3, #33	; 0x21
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2321      	movs	r3, #33	; 0x21
 8002a5a:	6a38      	ldr	r0, [r7, #32]
 8002a5c:	f7ff fa2f 	bl	8001ebe <mavlink_finalize_message>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3750      	adds	r7, #80	; 0x50
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <mavlink_msg_command_long_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param command_long C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_command_long_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
 8002a6a:	b5b0      	push	{r4, r5, r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af04      	add	r7, sp, #16
 8002a70:	60ba      	str	r2, [r7, #8]
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	4603      	mov	r3, r0
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_command_long_pack(system_id, component_id, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7f9d      	ldrb	r5, [r3, #30]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7fdb      	ldrb	r3, [r3, #31]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	8b92      	ldrh	r2, [r2, #28]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	f891 1020 	ldrb.w	r1, [r1, #32]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	edd0 7a00 	vldr	s15, [r0]
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	ed90 7a01 	vldr	s14, [r0, #4]
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	edd0 6a02 	vldr	s13, [r0, #8]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	ed90 6a03 	vldr	s12, [r0, #12]
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	edd0 5a04 	vldr	s11, [r0, #16]
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	ed90 5a05 	vldr	s10, [r0, #20]
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	edd0 4a06 	vldr	s9, [r0, #24]
 8002ab8:	7bbc      	ldrb	r4, [r7, #14]
 8002aba:	7bf8      	ldrb	r0, [r7, #15]
 8002abc:	9102      	str	r1, [sp, #8]
 8002abe:	9201      	str	r2, [sp, #4]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	eeb0 3a64 	vmov.f32	s6, s9
 8002ac6:	eef0 2a45 	vmov.f32	s5, s10
 8002aca:	eeb0 2a65 	vmov.f32	s4, s11
 8002ace:	eef0 1a46 	vmov.f32	s3, s12
 8002ad2:	eeb0 1a66 	vmov.f32	s2, s13
 8002ad6:	eef0 0a47 	vmov.f32	s1, s14
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	462b      	mov	r3, r5
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	f7ff ff65 	bl	80029b2 <mavlink_msg_command_long_pack>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bdb0      	pop	{r4, r5, r7, pc}

08002af2 <mavlink_msg_command_ack_decode>:
 *
 * @param msg The message to decode
 * @param command_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
    command_ack->progress = mavlink_msg_command_ack_get_progress(msg);
    command_ack->result_param2 = mavlink_msg_command_ack_get_result_param2(msg);
    command_ack->target_system = mavlink_msg_command_ack_get_target_system(msg);
    command_ack->target_component = mavlink_msg_command_ack_get_target_component(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_ACK_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_ACK_LEN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	78db      	ldrb	r3, [r3, #3]
 8002b00:	2b0a      	cmp	r3, #10
 8002b02:	bf28      	it	cs
 8002b04:	230a      	movcs	r3, #10
 8002b06:	73fb      	strb	r3, [r7, #15]
        memset(command_ack, 0, MAVLINK_MSG_ID_COMMAND_ACK_LEN);
 8002b08:	220a      	movs	r2, #10
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6838      	ldr	r0, [r7, #0]
 8002b0e:	f007 fbee 	bl	800a2ee <memset>
    memcpy(command_ack, _MAV_PAYLOAD(msg), len);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	330c      	adds	r3, #12
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6838      	ldr	r0, [r7, #0]
 8002b1c:	f007 fbda 	bl	800a2d4 <memcpy>
#endif
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	603a      	str	r2, [r7, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
 8002b36:	460b      	mov	r3, r1
 8002b38:	71bb      	strb	r3, [r7, #6]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8002b42:	797b      	ldrb	r3, [r7, #5]
 8002b44:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8002b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b4a:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b50:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8002b52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b56:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	f107 010c 	add.w	r1, r7, #12
 8002b64:	2209      	movs	r2, #9
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 fbb4 	bl	800a2d4 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	725a      	strb	r2, [r3, #9]
 8002b72:	2200      	movs	r2, #0
 8002b74:	729a      	strb	r2, [r3, #10]
 8002b76:	2200      	movs	r2, #0
 8002b78:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002b7a:	79ba      	ldrb	r2, [r7, #6]
 8002b7c:	79f9      	ldrb	r1, [r7, #7]
 8002b7e:	2332      	movs	r3, #50	; 0x32
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	2309      	movs	r3, #9
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2309      	movs	r3, #9
 8002b88:	6838      	ldr	r0, [r7, #0]
 8002b8a:	f7ff f998 	bl	8001ebe <mavlink_finalize_message>
 8002b8e:	4603      	mov	r3, r0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	60ba      	str	r2, [r7, #8]
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	791e      	ldrb	r6, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	7992      	ldrb	r2, [r2, #6]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	6809      	ldr	r1, [r1, #0]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	79c0      	ldrb	r0, [r0, #7]
 8002bbe:	7bbd      	ldrb	r5, [r7, #14]
 8002bc0:	7bfc      	ldrb	r4, [r7, #15]
 8002bc2:	9003      	str	r0, [sp, #12]
 8002bc4:	9102      	str	r1, [sp, #8]
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4633      	mov	r3, r6
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7ff ffa9 	bl	8002b28 <mavlink_msg_heartbeat_pack>
 8002bd6:	4603      	mov	r3, r0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be0 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	78db      	ldrb	r3, [r3, #3]
 8002bee:	2b09      	cmp	r3, #9
 8002bf0:	bf28      	it	cs
 8002bf2:	2309      	movcs	r3, #9
 8002bf4:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002bf6:	2209      	movs	r2, #9
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f007 fb77 	bl	800a2ee <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	330c      	adds	r3, #12
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	4619      	mov	r1, r3
 8002c08:	6838      	ldr	r0, [r7, #0]
 8002c0a:	f007 fb63 	bl	800a2d4 <memcpy>
#endif
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>:
#include "../Inc/SSM_D_MAVLink.hpp"
/*
    many struct types used here are referenced from mavlink_types.h
*/

MAVLink::MAVLink(UART_HandleTypeDef* uart_handle) : uart_(uart_handle)
 8002c16:	b590      	push	{r4, r7, lr}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	22ff      	movs	r2, #255	; 0xff
 8002c2c:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
{
    rx_circular_buffer_ = new CircularBuffer(rx_circular_buffer_ptr_, 1000);
 8002c48:	2010      	movs	r0, #16
 8002c4a:	f007 fad7 	bl	800a1fc <_Znwj>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461c      	mov	r4, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7fd fd00 	bl	8000660 <_ZN14CircularBufferC1EPhi>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8c3 43e8 	str.w	r4, [r3, #1000]	; 0x3e8

    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002c70:	da07      	bge.n	8002c82 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x6c>
        raw_rx_msg_[MAVLINK_MAX_PACKET_LEN] = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e7f3      	b.n	8002c6a <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x54>
    }
}
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}

08002c8c <_ZN7MAVLinkD1Ev>:

MAVLink::~MAVLink(){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    delete rx_circular_buffer_;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <_ZN7MAVLinkD1Ev+0x1a>
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f007 faa9 	bl	800a1f8 <_ZdlPvj>
}
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_ZN7MAVLink11readMessageEv>:

/*---------------------- Receiving ----------------------*/

bool MAVLink::readMessage()
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0d2      	sub	sp, #328	; 0x148
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002cba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cbe:	6018      	str	r0, [r3, #0]
    //if Data Reception process is not ongoing, then activate it
    if(uart_->RxState != HAL_UART_STATE_BUSY_RX){
 8002cc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002cc4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8002cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd2:	2b22      	cmp	r3, #34	; 0x22
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <_ZN7MAVLink11readMessageEv+0x56>
        HAL_UARTEx_ReceiveToIdle_DMA(uart_, raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8002ce0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ce4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8d3 0628 	ldr.w	r0, [r3, #1576]	; 0x628
 8002cee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002cf2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8002cfc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002d00:	4619      	mov	r1, r3
 8002d02:	f006 ffe2 	bl	8009cca <HAL_UARTEx_ReceiveToIdle_DMA>
    }

    uint8_t byte = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	mavlink_status_t status = {};
 8002d0c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
 8002d1c:	615a      	str	r2, [r3, #20]
    mavlink_message_t rx_msg;

    while(rx_circular_buffer_->read(&byte, 1)){
 8002d1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8002d2c:	f207 1147 	addw	r1, r7, #327	; 0x147
 8002d30:	2201      	movs	r2, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc16 	bl	8000564 <_ZN14CircularBuffer4readEPhi>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d026      	beq.n	8002d96 <_ZN7MAVLink11readMessageEv+0xe6>
        if( mavlink_parse_char(MAVLINK_COMM_1, byte, &(rx_msg), &status)){
 8002d48:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8002d4c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002d50:	f107 0208 	add.w	r2, r7, #8
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7ff fd3c 	bl	80027d2 <mavlink_parse_char>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0d9      	beq.n	8002d1e <_ZN7MAVLink11readMessageEv+0x6e>
            mavlink_reset_channel_status(MAVLINK_COMM_1);
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7fe fd88 	bl	8001880 <mavlink_reset_channel_status>
            rx_msg_ = rx_msg;
 8002d70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d74:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002d7e:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8002d82:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8002d86:	4611      	mov	r1, r2
 8002d88:	f240 1223 	movw	r2, #291	; 0x123
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f007 faa1 	bl	800a2d4 <memcpy>
            return true;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <_ZN7MAVLink11readMessageEv+0xe8>
        }
    }
    return false;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage>:


bool MAVLink::receiveMessage(MAVLinkMessage_t& mavlink_message){
 8002da2:	b5b0      	push	{r4, r5, r7, lr}
 8002da4:	b08e      	sub	sp, #56	; 0x38
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
	bool success = false;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (rx_msg_.sysid == plane_system_id &&
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 250b 	ldrb.w	r2, [r3, #1291]	; 0x50b
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 362e 	ldrb.w	r3, [r3, #1582]	; 0x62e
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	f040 8092 	bne.w	8002ee8 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x146>
        rx_msg_.compid == plane_component_id) {
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 250c 	ldrb.w	r2, [r3, #1292]	; 0x50c
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 362f 	ldrb.w	r3, [r3, #1583]	; 0x62f
	if (rx_msg_.sysid == plane_system_id &&
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	f040 8089 	bne.w	8002ee8 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x146>
		success = true;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		switch (rx_msg_.msgid) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8002de2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8002de6:	2b4d      	cmp	r3, #77	; 0x4d
 8002de8:	d043      	beq.n	8002e72 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0xd0>
 8002dea:	2b4d      	cmp	r3, #77	; 0x4d
 8002dec:	dc78      	bgt.n	8002ee0 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x13e>
 8002dee:	2b2f      	cmp	r3, #47	; 0x2f
 8002df0:	d05c      	beq.n	8002eac <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x10a>
 8002df2:	2b2f      	cmp	r3, #47	; 0x2f
 8002df4:	dc74      	bgt.n	8002ee0 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x13e>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x5e>
 8002dfa:	2b16      	cmp	r3, #22
 8002dfc:	d00d      	beq.n	8002e1a <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x78>
 8002dfe:	e06f      	b.n	8002ee0 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x13e>
			case MAVLINK_MSG_ID_HEARTBEAT:
            {
                mavlink_message.type = MAVLinkMessageType::HEARTBEAT;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
                mavlink_msg_heartbeat_decode(&rx_msg_, &(mavlink_message.heartbeat));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f7ff fee4 	bl	8002be0 <mavlink_msg_heartbeat_decode>

                break;
 8002e18:	e066      	b.n	8002ee8 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x146>
            }
            case MAVLINK_MSG_ID_PARAM_VALUE:
            {
                mavlink_message.type = MAVLinkMessageType::ACK;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

                mavlink_param_value_t param = {};
 8002e20:	f107 0318 	add.w	r3, r7, #24
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
 8002e30:	615a      	str	r2, [r3, #20]
 8002e32:	619a      	str	r2, [r3, #24]
                mavlink_msg_param_value_decode(&rx_msg_, &param);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8002e3a:	f107 0218 	add.w	r2, r7, #24
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd1b 	bl	800287c <mavlink_msg_param_value_decode>
                mavlink_message.ack.type = MAVLinkACKType::PARAM;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
                memcpy(mavlink_message.ack.param.param_id, param.param_id, 16);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	331c      	adds	r3, #28
 8002e50:	461d      	mov	r5, r3
 8002e52:	f107 0420 	add.w	r4, r7, #32
 8002e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e58:	6028      	str	r0, [r5, #0]
 8002e5a:	6069      	str	r1, [r5, #4]
 8002e5c:	60aa      	str	r2, [r5, #8]
 8002e5e:	60eb      	str	r3, [r5, #12]
                mavlink_message.ack.param.param_type = param.param_type;
 8002e60:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                mavlink_message.ack.param.param_value = param.param_value;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	615a      	str	r2, [r3, #20]

                break;
 8002e70:	e03a      	b.n	8002ee8 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x146>
            }
			case MAVLINK_MSG_ID_COMMAND_ACK:
            {
                mavlink_message.type = MAVLinkMessageType::ACK;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

                mavlink_command_ack_t command_ack = {};
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
				mavlink_msg_command_ack_decode(&rx_msg_, &command_ack);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8002e8a:	f107 020c 	add.w	r2, r7, #12
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fe2e 	bl	8002af2 <mavlink_msg_command_ack_decode>
                mavlink_message.ack.type = MAVLinkACKType::COMMAND;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	611a      	str	r2, [r3, #16]
                mavlink_message.ack.command = command_ack.command;
 8002e9c:	89ba      	ldrh	r2, [r7, #12]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	865a      	strh	r2, [r3, #50]	; 0x32
                mavlink_message.ack.ack_result = command_ack.result;
 8002ea2:	7bba      	ldrb	r2, [r7, #14]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                break;
 8002eaa:	e01d      	b.n	8002ee8 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x146>
            }
            case MAVLINK_MSG_ID_MISSION_ACK:
            {
                mavlink_message.type = MAVLinkMessageType::ACK;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

                mavlink_mission_ack_t mission_ack = {};
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
                mavlink_msg_mission_ack_decode(&rx_msg_, &mission_ack);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8002ebc:	f107 0208 	add.w	r2, r7, #8
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fd5a 	bl	800297c <mavlink_msg_mission_ack_decode>
                mavlink_message.ack.type = MAVLinkACKType::MISSION;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	611a      	str	r2, [r3, #16]
                mavlink_message.ack.mission = mission_ack.mission_type;
 8002ece:	7afb      	ldrb	r3, [r7, #11]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	869a      	strh	r2, [r3, #52]	; 0x34
                /* Do not be alarmed by `type`. It's actually the result according to docs. */
                mavlink_message.ack.ack_result = mission_ack.type;
 8002ed6:	7aba      	ldrb	r2, [r7, #10]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                break;
 8002ede:	e003      	b.n	8002ee8 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage+0x146>
            }
			default:
				success = false;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8002ee6:	bf00      	nop
		}
	}

	return success;
 8002ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3738      	adds	r7, #56	; 0x38
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bdb0      	pop	{r4, r5, r7, pc}

08002ef4 <_ZN7MAVLink13sendHeartbeatEv>:
    return valid;
}

/* -------------------- sending message -------------------*/
void MAVLink::sendHeartbeat()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0ce      	sub	sp, #312	; 0x138
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002efe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f02:	6018      	str	r0, [r3, #0]
	mavlink_heartbeat_t heartbeat = {};
 8002f04:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
	heartbeat.type = MAV_TYPE_GCS; /* We are representing ground (control) station. */
 8002f10:	2306      	movs	r3, #6
 8002f12:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
	heartbeat.autopilot = MAV_AUTOPILOT_INVALID;
 8002f16:	2308      	movs	r3, #8
 8002f18:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131

	mavlink_message_t message = {};
 8002f1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f24:	4618      	mov	r0, r3
 8002f26:	f240 1323 	movw	r3, #291	; 0x123
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f007 f9de 	bl	800a2ee <memset>
	mavlink_msg_heartbeat_encode(system_id, component_id, &message, &heartbeat);
 8002f32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f893 062c 	ldrb.w	r0, [r3, #1580]	; 0x62c
 8002f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f893 162d 	ldrb.w	r1, [r3, #1581]	; 0x62d
 8002f4e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002f52:	f107 0208 	add.w	r2, r7, #8
 8002f56:	f7ff fe1f 	bl	8002b98 <mavlink_msg_heartbeat_encode>

	writeMessage(message);
 8002f5a:	f107 0208 	add.w	r2, r7, #8
 8002f5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f66:	4611      	mov	r1, r2
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	f000 f957 	bl	800321c <_ZN7MAVLink12writeMessageERK17__mavlink_message>
}
 8002f6e:	bf00      	nop
 8002f70:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <_ZN7MAVLink18sendInitialConfigsEv>:

MAVLinkACK_t MAVLink::sendInitialConfigs()
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b0d3      	sub	sp, #332	; 0x14c
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f86:	6018      	str	r0, [r3, #0]
 8002f88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f90:	6019      	str	r1, [r3, #0]
    /* Tell the plane to VTOL hover over a waypoint when it's reached in guided mode. */
    mavlink_param_set_t vtol_hover_param = {};
 8002f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	60da      	str	r2, [r3, #12]
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	615a      	str	r2, [r3, #20]
    vtol_hover_param.target_system = plane_system_id;
 8002fa4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002fa8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f893 362e 	ldrb.w	r3, [r3, #1582]	; 0x62e
 8002fb2:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
    vtol_hover_param.target_system = plane_component_id;
 8002fb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002fba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f893 362f 	ldrb.w	r3, [r3, #1583]	; 0x62f
 8002fc4:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
    strcpy(vtol_hover_param.param_id, "Q_GUIDED_MODE");
 8002fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fcc:	3306      	adds	r3, #6
 8002fce:	4a38      	ldr	r2, [pc, #224]	; (80030b0 <_ZN7MAVLink18sendInitialConfigsEv+0x138>)
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fd6:	6020      	str	r0, [r4, #0]
 8002fd8:	6061      	str	r1, [r4, #4]
 8002fda:	60a2      	str	r2, [r4, #8]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	81a3      	strh	r3, [r4, #12]
    vtol_hover_param.param_value = 1;
 8002fe0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002fe4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    vtol_hover_param.param_type = MAV_PARAM_TYPE_UINT8;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146

    mavlink_message_t message = {};
 8002fee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ff2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f240 1323 	movw	r3, #291	; 0x123
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f007 f975 	bl	800a2ee <memset>
    mavlink_msg_param_set_encode(system_id, component_id, &message, &vtol_hover_param);
 8003004:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003008:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f893 062c 	ldrb.w	r0, [r3, #1580]	; 0x62c
 8003012:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003016:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f893 162d 	ldrb.w	r1, [r3, #1581]	; 0x62d
 8003020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003024:	f107 020c 	add.w	r2, r7, #12
 8003028:	f7ff fc83 	bl	8002932 <mavlink_msg_param_set_encode>

    MAVLinkACK_t expected_ack = {};
 800302c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003030:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	2328      	movs	r3, #40	; 0x28
 800303a:	461a      	mov	r2, r3
 800303c:	2100      	movs	r1, #0
 800303e:	f007 f956 	bl	800a2ee <memset>
    expected_ack.type = MAVLinkACKType::PARAM;
 8003042:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003046:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    strcpy(expected_ack.param.param_id, "Q_GUIDED_MODE");
 8003050:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003054:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <_ZN7MAVLink18sendInitialConfigsEv+0x138>)
 800305e:	461c      	mov	r4, r3
 8003060:	4613      	mov	r3, r2
 8003062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003064:	c407      	stmia	r4!, {r0, r1, r2}
 8003066:	8023      	strh	r3, [r4, #0]
    expected_ack.param.param_value = 1;
 8003068:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800306c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003076:	605a      	str	r2, [r3, #4]
    expected_ack.param.param_type = MAV_PARAM_TYPE_UINT8;
 8003078:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800307c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	771a      	strb	r2, [r3, #28]

    writeMessage(message);
 8003086:	f107 020c 	add.w	r2, r7, #12
 800308a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800308e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003092:	4611      	mov	r1, r2
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	f000 f8c1 	bl	800321c <_ZN7MAVLink12writeMessageERK17__mavlink_message>

    return expected_ack;
 800309a:	bf00      	nop
}
 800309c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80030a0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	0800acb4 	.word	0x0800acb4

080030b4 <_ZN7MAVLink13sendArmDisarmEb>:

MAVLinkACK_t MAVLink::sendArmDisarm(const bool arm)
{
 80030b4:	b5b0      	push	{r4, r5, r7, lr}
 80030b6:	b094      	sub	sp, #80	; 0x50
 80030b8:	af06      	add	r7, sp, #24
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	71fb      	strb	r3, [r7, #7]
    mavlink_command_long_t command_long = {};
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	2100      	movs	r1, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f007 f90f 	bl	800a2ee <memset>
    command_long.command = MAV_CMD_COMPONENT_ARM_DISARM;
 80030d0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80030d4:	863b      	strh	r3, [r7, #48]	; 0x30
    command_long.param1 = (float)arm;
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e0:	edc7 7a05 	vstr	s15, [r7, #20]

    MAVLinkACK_t expected_ack = {};
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4618      	mov	r0, r3
 80030e8:	2328      	movs	r3, #40	; 0x28
 80030ea:	461a      	mov	r2, r3
 80030ec:	2100      	movs	r1, #0
 80030ee:	f007 f8fe 	bl	800a2ee <memset>
    expected_ack.type = MAVLinkACKType::COMMAND;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
    expected_ack.command = MAV_CMD_COMPONENT_ARM_DISARM;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80030fe:	845a      	strh	r2, [r3, #34]	; 0x22

    sendCommandLong(command_long);
 8003100:	466d      	mov	r5, sp
 8003102:	f107 0420 	add.w	r4, r7, #32
 8003106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800310a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800310e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003118:	68b8      	ldr	r0, [r7, #8]
 800311a:	f000 f8b0 	bl	800327e <_ZN7MAVLink15sendCommandLongE24__mavlink_command_long_t>

    return expected_ack;
 800311e:	bf00      	nop
}
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	3738      	adds	r7, #56	; 0x38
 8003124:	46bd      	mov	sp, r7
 8003126:	bdb0      	pop	{r4, r5, r7, pc}

08003128 <_ZN7MAVLink20sendFlightModeChangeE10PLANE_MODE>:

MAVLinkACK_t MAVLink::sendFlightModeChange(const PLANE_MODE flight_mode)
{
 8003128:	b5b0      	push	{r4, r5, r7, lr}
 800312a:	b094      	sub	sp, #80	; 0x50
 800312c:	af06      	add	r7, sp, #24
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	71fb      	strb	r3, [r7, #7]
    mavlink_command_long_t command_long = {};
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	2224      	movs	r2, #36	; 0x24
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f007 f8d5 	bl	800a2ee <memset>
    command_long.command = MAV_CMD_DO_SET_MODE;
 8003144:	23b0      	movs	r3, #176	; 0xb0
 8003146:	863b      	strh	r3, [r7, #48]	; 0x30
    command_long.param2 = (float)flight_mode;
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	edc7 7a06 	vstr	s15, [r7, #24]

    MAVLinkACK_t expected_ack = {};
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	2328      	movs	r3, #40	; 0x28
 800315c:	461a      	mov	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	f007 f8c5 	bl	800a2ee <memset>
    expected_ack.type = MAVLinkACKType::COMMAND;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    expected_ack.command = MAV_CMD_DO_SET_MODE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	22b0      	movs	r2, #176	; 0xb0
 800316e:	845a      	strh	r2, [r3, #34]	; 0x22

    sendCommandLong(command_long);
 8003170:	466d      	mov	r5, sp
 8003172:	f107 0420 	add.w	r4, r7, #32
 8003176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800317e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003188:	68b8      	ldr	r0, [r7, #8]
 800318a:	f000 f878 	bl	800327e <_ZN7MAVLink15sendCommandLongE24__mavlink_command_long_t>

    return expected_ack;
 800318e:	bf00      	nop
}
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	3738      	adds	r7, #56	; 0x38
 8003194:	46bd      	mov	sp, r7
 8003196:	bdb0      	pop	{r4, r5, r7, pc}

08003198 <_ZN7MAVLink15sendWaypointNavEffff>:

    return expected_ack;
}

MAVLinkACK_t MAVLink::sendWaypointNav(const float x, const float y, const float z, const float acceptable_range)
{
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b096      	sub	sp, #88	; 0x58
 800319c:	af06      	add	r7, sp, #24
 800319e:	6178      	str	r0, [r7, #20]
 80031a0:	6139      	str	r1, [r7, #16]
 80031a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80031a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80031aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80031ae:	edc7 1a00 	vstr	s3, [r7]
	mavlink_command_long_t command_long = {};
 80031b2:	f107 031c 	add.w	r3, r7, #28
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f007 f897 	bl	800a2ee <memset>
	command_long.command = MAV_CMD_NAV_WAYPOINT;
 80031c0:	2310      	movs	r3, #16
 80031c2:	873b      	strh	r3, [r7, #56]	; 0x38
	command_long.confirmation = 1;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	command_long.param2 = acceptable_range;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	623b      	str	r3, [r7, #32]
	command_long.param5 = x;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	command_long.param6 = y;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
	command_long.param7 = z;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34

    MAVLinkACK_t expected_ack = {};
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4618      	mov	r0, r3
 80031de:	2328      	movs	r3, #40	; 0x28
 80031e0:	461a      	mov	r2, r3
 80031e2:	2100      	movs	r1, #0
 80031e4:	f007 f883 	bl	800a2ee <memset>
    expected_ack.type = MAVLinkACKType::COMMAND;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    expected_ack.command = MAV_CMD_NAV_WAYPOINT;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2210      	movs	r2, #16
 80031f2:	845a      	strh	r2, [r3, #34]	; 0x22

	sendCommandLong(command_long);
 80031f4:	466d      	mov	r5, sp
 80031f6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80031fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003202:	e885 0003 	stmia.w	r5, {r0, r1}
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320c:	6938      	ldr	r0, [r7, #16]
 800320e:	f000 f836 	bl	800327e <_ZN7MAVLink15sendCommandLongE24__mavlink_command_long_t>

    return expected_ack;
 8003212:	bf00      	nop
}
 8003214:	6978      	ldr	r0, [r7, #20]
 8003216:	3740      	adds	r7, #64	; 0x40
 8003218:	46bd      	mov	sp, r7
 800321a:	bdb0      	pop	{r4, r5, r7, pc}

0800321c <_ZN7MAVLink12writeMessageERK17__mavlink_message>:

    return expected_ack;
}

/* ---------------- Helper Methods ---------------------------*/
void MAVLink::writeMessage(const mavlink_message_t &msg){
 800321c:	b580      	push	{r7, lr}
 800321e:	b0ca      	sub	sp, #296	; 0x128
 8003220:	af00      	add	r7, sp, #0
 8003222:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003226:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800322a:	6018      	str	r0, [r3, #0]
 800322c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003230:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003234:	6019      	str	r1, [r3, #0]
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];
	uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 8003236:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800323a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800323e:	f107 020c 	add.w	r2, r7, #12
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	4610      	mov	r0, r2
 8003246:	f7fe fe68 	bl	8001f1a <mavlink_msg_to_send_buffer>
 800324a:	4603      	mov	r3, r0
 800324c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

	HAL_StatusTypeDef ret = HAL_UART_Transmit(uart_, buf, len, 1000);
 8003250:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003254:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 0628 	ldr.w	r0, [r3, #1576]	; 0x628
 800325e:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8003262:	f107 010c 	add.w	r1, r7, #12
 8003266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326a:	f004 ff97 	bl	800819c <HAL_UART_Transmit>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
}
 8003274:	bf00      	nop
 8003276:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZN7MAVLink15sendCommandLongE24__mavlink_command_long_t>:

void MAVLink::sendCommandLong(mavlink_command_long_t command_long)
{
 800327e:	b084      	sub	sp, #16
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b0cd      	sub	sp, #308	; 0x134
 8003284:	af00      	add	r7, sp, #0
 8003286:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800328a:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 800328e:	6020      	str	r0, [r4, #0]
 8003290:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 8003294:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    command_long.target_system = plane_system_id;
 8003298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800329c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f893 362e 	ldrb.w	r3, [r3, #1582]	; 0x62e
 80032a6:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
	command_long.target_component = plane_component_id;
 80032aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f893 362f 	ldrb.w	r3, [r3, #1583]	; 0x62f
 80032b8:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    mavlink_message_t message = {};
 80032bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032c4:	4618      	mov	r0, r3
 80032c6:	f240 1323 	movw	r3, #291	; 0x123
 80032ca:	461a      	mov	r2, r3
 80032cc:	2100      	movs	r1, #0
 80032ce:	f007 f80e 	bl	800a2ee <memset>
	mavlink_msg_command_long_encode(system_id, component_id, &message, &command_long);
 80032d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f893 062c 	ldrb.w	r0, [r3, #1580]	; 0x62c
 80032e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f893 162d 	ldrb.w	r1, [r3, #1581]	; 0x62d
 80032ee:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80032f2:	f107 020c 	add.w	r2, r7, #12
 80032f6:	f7ff fbb8 	bl	8002a6a <mavlink_msg_command_long_encode>

	writeMessage(message);
 80032fa:	f107 020c 	add.w	r2, r7, #12
 80032fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003306:	4611      	mov	r1, r2
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f7ff ff87 	bl	800321c <_ZN7MAVLink12writeMessageERK17__mavlink_message>
}
 800330e:	bf00      	nop
 8003310:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800331a:	b004      	add	sp, #16
 800331c:	4770      	bx	lr
	...

08003320 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
 8003340:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003342:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003344:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <MX_ADC1_Init+0xe4>)
 8003346:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <MX_ADC1_Init+0xe0>)
 800334a:	2200      	movs	r2, #0
 800334c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800334e:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <MX_ADC1_Init+0xe0>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003362:	2204      	movs	r2, #4
 8003364:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003368:	2200      	movs	r2, #0
 800336a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <MX_ADC1_Init+0xe0>)
 800336e:	2200      	movs	r2, #0
 8003370:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003374:	2201      	movs	r2, #1
 8003376:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <MX_ADC1_Init+0xe0>)
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003382:	2200      	movs	r2, #0
 8003384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003388:	2200      	movs	r2, #0
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <MX_ADC1_Init+0xe0>)
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <MX_ADC1_Init+0xe0>)
 8003396:	2200      	movs	r2, #0
 8003398:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <MX_ADC1_Init+0xe0>)
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033a2:	4817      	ldr	r0, [pc, #92]	; (8003400 <MX_ADC1_Init+0xe0>)
 80033a4:	f001 fa8c 	bl	80048c0 <HAL_ADC_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80033ae:	f000 fa7b 	bl	80038a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80033b6:	f107 031c 	add.w	r3, r7, #28
 80033ba:	4619      	mov	r1, r3
 80033bc:	4810      	ldr	r0, [pc, #64]	; (8003400 <MX_ADC1_Init+0xe0>)
 80033be:	f001 ffdb 	bl	8005378 <HAL_ADCEx_MultiModeConfigChannel>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80033c8:	f000 fa6e 	bl	80038a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <MX_ADC1_Init+0xe8>)
 80033ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033d0:	2306      	movs	r3, #6
 80033d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80033d8:	237f      	movs	r3, #127	; 0x7f
 80033da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80033dc:	2304      	movs	r3, #4
 80033de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4805      	ldr	r0, [pc, #20]	; (8003400 <MX_ADC1_Init+0xe0>)
 80033ea:	f001 fbb5 	bl	8004b58 <HAL_ADC_ConfigChannel>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80033f4:	f000 fa58 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033f8:	bf00      	nop
 80033fa:	3728      	adds	r7, #40	; 0x28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000bcc 	.word	0x20000bcc
 8003404:	42028000 	.word	0x42028000
 8003408:	0c900008 	.word	0x0c900008

0800340c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b0ae      	sub	sp, #184	; 0xb8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	2294      	movs	r2, #148	; 0x94
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f006 ff5e 	bl	800a2ee <memset>
  if(adcHandle->Instance==ADC1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_ADC_MspInit+0xa8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d137      	bne.n	80034ac <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800343c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003440:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003442:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800344a:	f107 0310 	add.w	r3, r7, #16
 800344e:	4618      	mov	r0, r3
 8003450:	f004 f804 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800345a:	f000 fa25 	bl	80038a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <HAL_ADC_MspInit+0xac>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <HAL_ADC_MspInit+0xac>)
 8003464:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_ADC_MspInit+0xac>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_ADC_MspInit+0xac>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_ADC_MspInit+0xac>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_ADC_MspInit+0xac>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800348e:	2304      	movs	r3, #4
 8003490:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003494:	2303      	movs	r3, #3
 8003496:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80034a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4805      	ldr	r0, [pc, #20]	; (80034bc <HAL_ADC_MspInit+0xb0>)
 80034a8:	f002 fcd4 	bl	8005e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80034ac:	bf00      	nop
 80034ae:	37b8      	adds	r7, #184	; 0xb8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	42028000 	.word	0x42028000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	42020800 	.word	0x42020800

080034c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <MX_DMA_Init+0x70>)
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	4a19      	ldr	r2, [pc, #100]	; (8003530 <MX_DMA_Init+0x70>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6493      	str	r3, [r2, #72]	; 0x48
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <MX_DMA_Init+0x70>)
 80034d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <MX_DMA_Init+0x70>)
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <MX_DMA_Init+0x70>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6493      	str	r3, [r2, #72]	; 0x48
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <MX_DMA_Init+0x70>)
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80034f6:	2200      	movs	r2, #0
 80034f8:	2100      	movs	r1, #0
 80034fa:	201d      	movs	r0, #29
 80034fc:	f002 f8bb 	bl	8005676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003500:	201d      	movs	r0, #29
 8003502:	f002 f8d2 	bl	80056aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	201e      	movs	r0, #30
 800350c:	f002 f8b3 	bl	8005676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003510:	201e      	movs	r0, #30
 8003512:	f002 f8ca 	bl	80056aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	201f      	movs	r0, #31
 800351c:	f002 f8ab 	bl	8005676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003520:	201f      	movs	r0, #31
 8003522:	f002 f8c2 	bl	80056aa <HAL_NVIC_EnableIRQ>

}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000

08003534 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <MX_GPIO_Init+0x114>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354e:	4a3e      	ldr	r2, [pc, #248]	; (8003648 <MX_GPIO_Init+0x114>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003556:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <MX_GPIO_Init+0x114>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <MX_GPIO_Init+0x114>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	4a38      	ldr	r2, [pc, #224]	; (8003648 <MX_GPIO_Init+0x114>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <MX_GPIO_Init+0x114>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800357a:	4b33      	ldr	r3, [pc, #204]	; (8003648 <MX_GPIO_Init+0x114>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	4a32      	ldr	r2, [pc, #200]	; (8003648 <MX_GPIO_Init+0x114>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <MX_GPIO_Init+0x114>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <MX_GPIO_Init+0x114>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <MX_GPIO_Init+0x114>)
 8003598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <MX_GPIO_Init+0x114>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80035aa:	f002 ff69 	bl	8006480 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	4826      	ldr	r0, [pc, #152]	; (800364c <MX_GPIO_Init+0x118>)
 80035b4:	f002 fdce 	bl	8006154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80035b8:	2200      	movs	r2, #0
 80035ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035be:	4824      	ldr	r0, [pc, #144]	; (8003650 <MX_GPIO_Init+0x11c>)
 80035c0:	f002 fdc8 	bl	8006154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80035c4:	2200      	movs	r2, #0
 80035c6:	21a0      	movs	r1, #160	; 0xa0
 80035c8:	4822      	ldr	r0, [pc, #136]	; (8003654 <MX_GPIO_Init+0x120>)
 80035ca:	f002 fdc3 	bl	8006154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80035ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80035d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	481b      	ldr	r0, [pc, #108]	; (8003654 <MX_GPIO_Init+0x120>)
 80035e6:	f002 fc35 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4812      	ldr	r0, [pc, #72]	; (800364c <MX_GPIO_Init+0x118>)
 8003602:	f002 fc27 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360c:	2301      	movs	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	2300      	movs	r3, #0
 8003616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4619      	mov	r1, r3
 800361e:	480c      	ldr	r0, [pc, #48]	; (8003650 <MX_GPIO_Init+0x11c>)
 8003620:	f002 fc18 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8003624:	23a0      	movs	r3, #160	; 0xa0
 8003626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003628:	2301      	movs	r3, #1
 800362a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003630:	2300      	movs	r3, #0
 8003632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	4806      	ldr	r0, [pc, #24]	; (8003654 <MX_GPIO_Init+0x120>)
 800363c:	f002 fc0a 	bl	8005e54 <HAL_GPIO_Init>

}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	42020800 	.word	0x42020800
 8003650:	42020000 	.word	0x42020000
 8003654:	42020400 	.word	0x42020400

08003658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b0c0      	sub	sp, #256	; 0x100
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800365e:	f000 fef4 	bl	800444a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003662:	f000 f88b 	bl	800377c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003666:	f7ff ff65 	bl	8003534 <MX_GPIO_Init>
  MX_DMA_Init();
 800366a:	f7ff ff29 	bl	80034c0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800366e:	f000 fba7 	bl	8003dc0 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8003672:	f000 f91f 	bl	80038b4 <MX_RTC_Init>
  MX_UCPD1_Init();
 8003676:	f000 fb6d 	bl	8003d54 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800367a:	f000 fe35 	bl	80042e8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800367e:	f7ff fe4f 	bl	8003320 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8003682:	f000 fbeb 	bl	8003e5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003686:	f000 fc41 	bl	8003f0c <MX_USART3_UART_Init>
  MAVLinkMessage_t mav_msg;
  MAVLinkACK_t expected_ack;

  //HAL_UARTEx_ReceiveToIdle_DMA(&huart3, pixhawk_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);

  expected_ack = pixhawk_mavlink->sendInitialConfigs();
 800368a:	4b36      	ldr	r3, [pc, #216]	; (8003764 <main+0x10c>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	463b      	mov	r3, r7
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fc70 	bl	8002f78 <_ZN7MAVLink18sendInitialConfigsEv>
 8003698:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800369c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036a0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80036a4:	461d      	mov	r5, r3
 80036a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80036b2:	e884 0003 	stmia.w	r4, {r0, r1}
  {
    /* USER CODE END WHILE */
    
    /* USER CODE BEGIN 3 */
//     SSM::getInstance()->execute_manual_mode();
	  pixhawk_mavlink->readMessage();
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <main+0x10c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff faf8 	bl	8002cb0 <_ZN7MAVLink11readMessageEv>
    pixhawk_mavlink->receiveMessage(mav_msg);
 80036c0:	4b28      	ldr	r3, [pc, #160]	; (8003764 <main+0x10c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fb69 	bl	8002da2 <_ZN7MAVLink14receiveMessageER14MAVLinkMessage>
    if(mav_msg.type == MAVLinkMessageType::ACK){
 80036d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <main+0x90>
    	myprintf("Received ACK:\r\n");
 80036d6:	4824      	ldr	r0, [pc, #144]	; (8003768 <main+0x110>)
 80036d8:	f000 f8c0 	bl	800385c <_Z8myprintfPKcz>
    	myprintf("The ack type is %d\r\n", mav_msg.ack.type );
 80036dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036de:	4619      	mov	r1, r3
 80036e0:	4822      	ldr	r0, [pc, #136]	; (800376c <main+0x114>)
 80036e2:	f000 f8bb 	bl	800385c <_Z8myprintfPKcz>
 80036e6:	e00b      	b.n	8003700 <main+0xa8>
    }else if(mav_msg.type == MAVLinkMessageType::HEARTBEAT){
 80036e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <main+0xa8>
    	myprintf("Received heartbeat:\r\n");
 80036ee:	4820      	ldr	r0, [pc, #128]	; (8003770 <main+0x118>)
 80036f0:	f000 f8b4 	bl	800385c <_Z8myprintfPKcz>
    	myprintf("The mavlink version is  %d\r\n", mav_msg.heartbeat.mavlink_version );
 80036f4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80036f8:	4619      	mov	r1, r3
 80036fa:	481e      	ldr	r0, [pc, #120]	; (8003774 <main+0x11c>)
 80036fc:	f000 f8ae 	bl	800385c <_Z8myprintfPKcz>
    }
    pixhawk_mavlink->sendFlightModeChange(PLANE_MODE_MANUAL);
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <main+0x10c>)
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003708:	2200      	movs	r2, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fd0c 	bl	8003128 <_ZN7MAVLink20sendFlightModeChangeE10PLANE_MODE>
    HAL_Delay(100);
 8003710:	2064      	movs	r0, #100	; 0x64
 8003712:	f000 ff11 	bl	8004538 <HAL_Delay>
    pixhawk_mavlink->sendHeartbeat();
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <main+0x10c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fbea 	bl	8002ef4 <_ZN7MAVLink13sendHeartbeatEv>

    HAL_Delay(100);
 8003720:	2064      	movs	r0, #100	; 0x64
 8003722:	f000 ff09 	bl	8004538 <HAL_Delay>
    pixhawk_mavlink->sendWaypointNav(100, 100, 100, 100);
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <main+0x10c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800372e:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003778 <main+0x120>
 8003732:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8003778 <main+0x120>
 8003736:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003778 <main+0x120>
 800373a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003778 <main+0x120>
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fd29 	bl	8003198 <_ZN7MAVLink15sendWaypointNavEffff>
    HAL_Delay(100);
 8003746:	2064      	movs	r0, #100	; 0x64
 8003748:	f000 fef6 	bl	8004538 <HAL_Delay>
    pixhawk_mavlink->sendArmDisarm(true);
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <main+0x10c>)
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003754:	2201      	movs	r2, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fcac 	bl	80030b4 <_ZN7MAVLink13sendArmDisarmEb>
    HAL_Delay(100);
 800375c:	2064      	movs	r0, #100	; 0x64
 800375e:	f000 feeb 	bl	8004538 <HAL_Delay>
	  pixhawk_mavlink->readMessage();
 8003762:	e7a8      	b.n	80036b6 <main+0x5e>
 8003764:	20000000 	.word	0x20000000
 8003768:	0800acc4 	.word	0x0800acc4
 800376c:	0800acd4 	.word	0x0800acd4
 8003770:	0800acec 	.word	0x0800acec
 8003774:	0800ad04 	.word	0x0800ad04
 8003778:	42c80000 	.word	0x42c80000

0800377c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b098      	sub	sp, #96	; 0x60
 8003780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003782:	f107 0318 	add.w	r3, r7, #24
 8003786:	2248      	movs	r2, #72	; 0x48
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f006 fdaf 	bl	800a2ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800379e:	2000      	movs	r0, #0
 80037a0:	f002 fe12 	bl	80063c8 <HAL_PWREx_ControlVoltageScaling>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80037b4:	f000 f878 	bl	80038a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037b8:	f002 fde8 	bl	800638c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037bc:	4b26      	ldr	r3, [pc, #152]	; (8003858 <_Z18SystemClock_Configv+0xdc>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a25      	ldr	r2, [pc, #148]	; (8003858 <_Z18SystemClock_Configv+0xdc>)
 80037c4:	f023 0318 	bic.w	r3, r3, #24
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80037cc:	2334      	movs	r3, #52	; 0x34
 80037ce:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037d0:	2381      	movs	r3, #129	; 0x81
 80037d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80037d4:	2301      	movs	r3, #1
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80037d8:	2301      	movs	r3, #1
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80037dc:	2300      	movs	r3, #0
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80037e0:	2360      	movs	r3, #96	; 0x60
 80037e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037e4:	2302      	movs	r3, #2
 80037e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80037e8:	2301      	movs	r3, #1
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80037ec:	2301      	movs	r3, #1
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80037f0:	2337      	movs	r3, #55	; 0x37
 80037f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80037f4:	2307      	movs	r3, #7
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037f8:	2302      	movs	r3, #2
 80037fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037fc:	2302      	movs	r3, #2
 80037fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003800:	f107 0318 	add.w	r3, r7, #24
 8003804:	4618      	mov	r0, r3
 8003806:	f002 fe6f 	bl	80064e8 <HAL_RCC_OscConfig>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800381a:	f000 f845 	bl	80038a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800381e:	230f      	movs	r3, #15
 8003820:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003822:	2303      	movs	r3, #3
 8003824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	2105      	movs	r1, #5
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fb2c 	bl	8006e94 <HAL_RCC_ClockConfig>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800384c:	f000 f82c 	bl	80038a8 <Error_Handler>
  }
}
 8003850:	bf00      	nop
 8003852:	3760      	adds	r7, #96	; 0x60
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000

0800385c <_Z8myprintfPKcz>:

/* USER CODE BEGIN 4 */

void myprintf(const char *fmt, ...) {
 800385c:	b40f      	push	{r0, r1, r2, r3}
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003872:	480b      	ldr	r0, [pc, #44]	; (80038a0 <_Z8myprintfPKcz+0x44>)
 8003874:	f006 fea4 	bl	800a5c0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8003878:	4809      	ldr	r0, [pc, #36]	; (80038a0 <_Z8myprintfPKcz+0x44>)
 800387a:	f7fc fcdb 	bl	8000234 <strlen>
 800387e:	4603      	mov	r3, r0
 8003880:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)buffer, len, -1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	b29a      	uxth	r2, r3
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	4905      	ldr	r1, [pc, #20]	; (80038a0 <_Z8myprintfPKcz+0x44>)
 800388c:	4805      	ldr	r0, [pc, #20]	; (80038a4 <_Z8myprintfPKcz+0x48>)
 800388e:	f004 fc85 	bl	800819c <HAL_UART_Transmit>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800389c:	b004      	add	sp, #16
 800389e:	4770      	bx	lr
 80038a0:	20000c34 	.word	0x20000c34
 80038a4:	20000d60 	.word	0x20000d60

080038a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ac:	b672      	cpsid	i
}
 80038ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <Error_Handler+0x8>
	...

080038b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80038ba:	463b      	mov	r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
 80038c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <MX_RTC_Init+0x8c>)
 80038cc:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <MX_RTC_Init+0x90>)
 80038ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <MX_RTC_Init+0x8c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <MX_RTC_Init+0x8c>)
 80038d8:	227f      	movs	r2, #127	; 0x7f
 80038da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <MX_RTC_Init+0x8c>)
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <MX_RTC_Init+0x8c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <MX_RTC_Init+0x8c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <MX_RTC_Init+0x8c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <MX_RTC_Init+0x8c>)
 80038f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <MX_RTC_Init+0x8c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003902:	480f      	ldr	r0, [pc, #60]	; (8003940 <MX_RTC_Init+0x8c>)
 8003904:	f004 fac0 	bl	8007e88 <HAL_RTC_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800390e:	f7ff ffcb 	bl	80038a8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003922:	463b      	mov	r3, r7
 8003924:	4619      	mov	r1, r3
 8003926:	4806      	ldr	r0, [pc, #24]	; (8003940 <MX_RTC_Init+0x8c>)
 8003928:	f004 fbbc 	bl	80080a4 <HAL_RTCEx_PrivilegeModeSet>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003932:	f7ff ffb9 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000d34 	.word	0x20000d34
 8003944:	40002800 	.word	0x40002800

08003948 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0a8      	sub	sp, #160	; 0xa0
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003950:	f107 030c 	add.w	r3, r7, #12
 8003954:	2294      	movs	r2, #148	; 0x94
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f006 fcc8 	bl	800a2ee <memset>
  if(rtcHandle->Instance==RTC)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_RTC_MspInit+0x74>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d124      	bne.n	80039b2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800396c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800396e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	4618      	mov	r0, r3
 800397c:	f003 fd6e 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003986:	f7ff ff8f 	bl	80038a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_RTC_MspInit+0x78>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <HAL_RTC_MspInit+0x78>)
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RTC_MspInit+0x78>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <HAL_RTC_MspInit+0x78>)
 80039a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RTC_MspInit+0x78>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80039b2:	bf00      	nop
 80039b4:	37a0      	adds	r7, #160	; 0xa0
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40002800 	.word	0x40002800
 80039c0:	40021000 	.word	0x40021000

080039c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_MspInit+0x44>)
 80039cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ce:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <HAL_MspInit+0x44>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6613      	str	r3, [r2, #96]	; 0x60
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_MspInit+0x44>)
 80039d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_MspInit+0x44>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_MspInit+0x44>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6593      	str	r3, [r2, #88]	; 0x58
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_MspInit+0x44>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <NMI_Handler+0x4>

08003a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a16:	e7fe      	b.n	8003a16 <HardFault_Handler+0x4>

08003a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <MemManage_Handler+0x4>

08003a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a22:	e7fe      	b.n	8003a22 <BusFault_Handler+0x4>

08003a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <UsageFault_Handler+0x4>

08003a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a58:	f000 fd4e 	bl	80044f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <DMA1_Channel1_IRQHandler+0x10>)
 8003a66:	f002 f819 	bl	8005a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000f1c 	.word	0x20000f1c

08003a74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <DMA1_Channel2_IRQHandler+0x10>)
 8003a7a:	f002 f80f 	bl	8005a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000f84 	.word	0x20000f84

08003a88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <DMA1_Channel3_IRQHandler+0x10>)
 8003a8e:	f002 f805 	bl	8005a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000fec 	.word	0x20000fec

08003a9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <USART2_IRQHandler+0x10>)
 8003aa2:	f004 fd6b 	bl	800857c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000df4 	.word	0x20000df4

08003ab0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <USART3_IRQHandler+0x10>)
 8003ab6:	f004 fd61 	bl	800857c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000e88 	.word	0x20000e88

08003ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return 1;
 8003ac8:	2301      	movs	r3, #1
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <_kill>:

int _kill(int pid, int sig)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ade:	f006 fbaf 	bl	800a240 <__errno>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2216      	movs	r2, #22
 8003ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_exit>:

void _exit (int status)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003afc:	f04f 31ff 	mov.w	r1, #4294967295
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ffe7 	bl	8003ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b06:	e7fe      	b.n	8003b06 <_exit+0x12>

08003b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <_sbrk+0x5c>)
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <_sbrk+0x60>)
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <_sbrk+0x64>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <_sbrk+0x68>)
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <_sbrk+0x64>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d207      	bcs.n	8003b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b38:	f006 fb82 	bl	800a240 <__errno>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	220c      	movs	r2, #12
 8003b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	e009      	b.n	8003b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <_sbrk+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <_sbrk+0x64>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <_sbrk+0x64>)
 8003b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20030000 	.word	0x20030000
 8003b68:	00000400 	.word	0x00000400
 8003b6c:	20000d5c 	.word	0x20000d5c
 8003b70:	20001360 	.word	0x20001360

08003b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <SystemInit+0x20>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <SystemInit+0x20>)
 8003b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003baa:	4b4c      	ldr	r3, [pc, #304]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e005      	b.n	8003bc6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003bba:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003bc6:	4a46      	ldr	r2, [pc, #280]	; (8003ce0 <SystemCoreClockUpdate+0x148>)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd0:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d866      	bhi.n	8003caa <SystemCoreClockUpdate+0x112>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <SystemCoreClockUpdate+0x4c>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003cab 	.word	0x08003cab
 8003bec:	08003cab 	.word	0x08003cab
 8003bf0:	08003cab 	.word	0x08003cab
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003cab 	.word	0x08003cab
 8003bfc:	08003cab 	.word	0x08003cab
 8003c00:	08003cab 	.word	0x08003cab
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003cab 	.word	0x08003cab
 8003c0c:	08003cab 	.word	0x08003cab
 8003c10:	08003cab 	.word	0x08003cab
 8003c14:	08003c31 	.word	0x08003c31
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003c18:	4a32      	ldr	r2, [pc, #200]	; (8003ce4 <SystemCoreClockUpdate+0x14c>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	6013      	str	r3, [r2, #0]
      break;
 8003c1e:	e048      	b.n	8003cb2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <SystemCoreClockUpdate+0x14c>)
 8003c22:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <SystemCoreClockUpdate+0x150>)
 8003c24:	601a      	str	r2, [r3, #0]
      break;
 8003c26:	e044      	b.n	8003cb2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <SystemCoreClockUpdate+0x14c>)
 8003c2a:	4a30      	ldr	r2, [pc, #192]	; (8003cec <SystemCoreClockUpdate+0x154>)
 8003c2c:	601a      	str	r2, [r3, #0]
      break;
 8003c2e:	e040      	b.n	8003cb2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c30:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003c3a:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	3301      	adds	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <SystemCoreClockUpdate+0xbe>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d006      	beq.n	8003c62 <SystemCoreClockUpdate+0xca>
 8003c54:	e00b      	b.n	8003c6e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8003c56:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <SystemCoreClockUpdate+0x150>)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	613b      	str	r3, [r7, #16]
          break;
 8003c60:	e00b      	b.n	8003c7a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8003c62:	4a22      	ldr	r2, [pc, #136]	; (8003cec <SystemCoreClockUpdate+0x154>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	613b      	str	r3, [r7, #16]
          break;
 8003c6c:	e005      	b.n	8003c7a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	613b      	str	r3, [r7, #16]
          break;
 8003c78:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	0e5b      	lsrs	r3, r3, #25
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	3301      	adds	r3, #1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <SystemCoreClockUpdate+0x14c>)
 8003ca6:	6013      	str	r3, [r2, #0]
      break;
 8003ca8:	e003      	b.n	8003cb2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <SystemCoreClockUpdate+0x14c>)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6013      	str	r3, [r2, #0]
      break;
 8003cb0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <SystemCoreClockUpdate+0x144>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <SystemCoreClockUpdate+0x158>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <SystemCoreClockUpdate+0x14c>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <SystemCoreClockUpdate+0x14c>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	0800bc1c 	.word	0x0800bc1c
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	00f42400 	.word	0x00f42400
 8003cec:	007a1200 	.word	0x007a1200
 8003cf0:	0800bc04 	.word	0x0800bc04

08003cf4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d00:	4907      	ldr	r1, [pc, #28]	; (8003d20 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40021000 	.word	0x40021000

08003d24 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <LL_APB1_GRP2_EnableClock+0x2c>)
 8003d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <LL_APB1_GRP2_EnableClock+0x2c>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <LL_APB1_GRP2_EnableClock+0x2c>)
 8003d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40021000 	.word	0x40021000

08003d54 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
 8003d68:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8003d6a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003d6e:	f7ff ffd9 	bl	8003d24 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003d72:	2002      	movs	r0, #2
 8003d74:	f7ff ffbe 	bl	8003cf4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7ff ffbb 	bl	8003cf4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003d84:	2303      	movs	r3, #3
 8003d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4809      	ldr	r0, [pc, #36]	; (8003db8 <MX_UCPD1_Init+0x64>)
 8003d92:	f006 f988 	bl	800a0a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da4:	463b      	mov	r3, r7
 8003da6:	4619      	mov	r1, r3
 8003da8:	4804      	ldr	r0, [pc, #16]	; (8003dbc <MX_UCPD1_Init+0x68>)
 8003daa:	f006 f97c 	bl	800a0a6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	42020400 	.word	0x42020400
 8003dbc:	42020000 	.word	0x42020000

08003dc0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003dc4:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003dc6:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <MX_LPUART1_UART_Init+0x94>)
 8003dc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003dcc:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <MX_LPUART1_UART_Init+0x98>)
 8003dce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003de4:	220c      	movs	r2, #12
 8003de6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dee:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003e06:	4812      	ldr	r0, [pc, #72]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003e08:	f004 f978 	bl	80080fc <HAL_UART_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8003e12:	f7ff fd49 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e16:	2100      	movs	r1, #0
 8003e18:	480d      	ldr	r0, [pc, #52]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003e1a:	f005 feda 	bl	8009bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8003e24:	f7ff fd40 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4809      	ldr	r0, [pc, #36]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003e2c:	f005 ff0f 	bl	8009c4e <HAL_UARTEx_SetRxFifoThreshold>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003e36:	f7ff fd37 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003e3a:	4805      	ldr	r0, [pc, #20]	; (8003e50 <MX_LPUART1_UART_Init+0x90>)
 8003e3c:	f005 fe90 	bl	8009b60 <HAL_UARTEx_DisableFifoMode>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003e46:	f7ff fd2f 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000d60 	.word	0x20000d60
 8003e54:	40008000 	.word	0x40008000
 8003e58:	00033324 	.word	0x00033324

08003e5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e62:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <MX_USART2_UART_Init+0xa8>)
 8003e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <MX_USART2_UART_Init+0xac>)
 8003e6a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8003e74:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e7a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003e7c:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e84:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e86:	220c      	movs	r2, #12
 8003e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8003ea8:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003eb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003eb8:	4811      	ldr	r0, [pc, #68]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003eba:	f004 f91f 	bl	80080fc <HAL_UART_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003ec4:	f7ff fcf0 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ec8:	2100      	movs	r1, #0
 8003eca:	480d      	ldr	r0, [pc, #52]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003ecc:	f005 fe81 	bl	8009bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003ed6:	f7ff fce7 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eda:	2100      	movs	r1, #0
 8003edc:	4808      	ldr	r0, [pc, #32]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003ede:	f005 feb6 	bl	8009c4e <HAL_UARTEx_SetRxFifoThreshold>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003ee8:	f7ff fcde 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003eec:	4804      	ldr	r0, [pc, #16]	; (8003f00 <MX_USART2_UART_Init+0xa4>)
 8003eee:	f005 fe37 	bl	8009b60 <HAL_UARTEx_DisableFifoMode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8003ef8:	f7ff fcd6 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000df4 	.word	0x20000df4
 8003f04:	40004400 	.word	0x40004400
 8003f08:	000186a0 	.word	0x000186a0

08003f0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f12:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <MX_USART3_UART_Init+0x94>)
 8003f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003f16:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f32:	220c      	movs	r2, #12
 8003f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f3c:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f54:	4811      	ldr	r0, [pc, #68]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f56:	f004 f8d1 	bl	80080fc <HAL_UART_Init>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003f60:	f7ff fca2 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f64:	2100      	movs	r1, #0
 8003f66:	480d      	ldr	r0, [pc, #52]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f68:	f005 fe33 	bl	8009bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003f72:	f7ff fc99 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f76:	2100      	movs	r1, #0
 8003f78:	4808      	ldr	r0, [pc, #32]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f7a:	f005 fe68 	bl	8009c4e <HAL_UARTEx_SetRxFifoThreshold>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003f84:	f7ff fc90 	bl	80038a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003f88:	4804      	ldr	r0, [pc, #16]	; (8003f9c <MX_USART3_UART_Init+0x90>)
 8003f8a:	f005 fde9 	bl	8009b60 <HAL_UARTEx_DisableFifoMode>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003f94:	f7ff fc88 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000e88 	.word	0x20000e88
 8003fa0:	40004800 	.word	0x40004800

08003fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b0b2      	sub	sp, #200	; 0xc8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fbc:	f107 0320 	add.w	r3, r7, #32
 8003fc0:	2294      	movs	r2, #148	; 0x94
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f006 f992 	bl	800a2ee <memset>
  if(uartHandle->Instance==LPUART1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a78      	ldr	r2, [pc, #480]	; (80041b0 <HAL_UART_MspInit+0x20c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d13e      	bne.n	8004052 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fdc:	f107 0320 	add.w	r3, r7, #32
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f003 fa3b 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fec:	f7ff fc5c 	bl	80038a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003ff0:	4b70      	ldr	r3, [pc, #448]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	4a6f      	ldr	r2, [pc, #444]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003ffc:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004008:	4b6a      	ldr	r3, [pc, #424]	; (80041b4 <HAL_UART_MspInit+0x210>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	4a69      	ldr	r2, [pc, #420]	; (80041b4 <HAL_UART_MspInit+0x210>)
 800400e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004014:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8004020:	f002 fa2e 	bl	8006480 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8004024:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800403e:	2308      	movs	r3, #8
 8004040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004044:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004048:	4619      	mov	r1, r3
 800404a:	485b      	ldr	r0, [pc, #364]	; (80041b8 <HAL_UART_MspInit+0x214>)
 800404c:	f001 ff02 	bl	8005e54 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004050:	e13c      	b.n	80042cc <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a59      	ldr	r2, [pc, #356]	; (80041bc <HAL_UART_MspInit+0x218>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f040 80bb 	bne.w	80041d4 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800405e:	2302      	movs	r3, #2
 8004060:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004062:	2300      	movs	r3, #0
 8004064:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004066:	f107 0320 	add.w	r3, r7, #32
 800406a:	4618      	mov	r0, r3
 800406c:	f003 f9f6 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8004076:	f7ff fc17 	bl	80038a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800407a:	4b4e      	ldr	r3, [pc, #312]	; (80041b4 <HAL_UART_MspInit+0x210>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	4a4d      	ldr	r2, [pc, #308]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8004080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004084:	6593      	str	r3, [r2, #88]	; 0x58
 8004086:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004092:	4b48      	ldr	r3, [pc, #288]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	4a47      	ldr	r2, [pc, #284]	; (80041b4 <HAL_UART_MspInit+0x210>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800409e:	4b45      	ldr	r3, [pc, #276]	; (80041b4 <HAL_UART_MspInit+0x210>)
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040aa:	230c      	movs	r3, #12
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b0:	2302      	movs	r3, #2
 80040b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040c2:	2307      	movs	r3, #7
 80040c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040cc:	4619      	mov	r1, r3
 80040ce:	483c      	ldr	r0, [pc, #240]	; (80041c0 <HAL_UART_MspInit+0x21c>)
 80040d0:	f001 fec0 	bl	8005e54 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80040d4:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_UART_MspInit+0x220>)
 80040d6:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <HAL_UART_MspInit+0x224>)
 80040d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80040da:	4b3a      	ldr	r3, [pc, #232]	; (80041c4 <HAL_UART_MspInit+0x220>)
 80040dc:	221b      	movs	r2, #27
 80040de:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e0:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_UART_MspInit+0x220>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <HAL_UART_MspInit+0x220>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ec:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <HAL_UART_MspInit+0x220>)
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_UART_MspInit+0x220>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f8:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_UART_MspInit+0x220>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_UART_MspInit+0x220>)
 8004100:	2220      	movs	r2, #32
 8004102:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <HAL_UART_MspInit+0x220>)
 8004106:	2200      	movs	r2, #0
 8004108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800410a:	482e      	ldr	r0, [pc, #184]	; (80041c4 <HAL_UART_MspInit+0x220>)
 800410c:	f001 fae8 	bl	80056e0 <HAL_DMA_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8004116:	f7ff fbc7 	bl	80038a8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800411a:	2110      	movs	r1, #16
 800411c:	4829      	ldr	r0, [pc, #164]	; (80041c4 <HAL_UART_MspInit+0x220>)
 800411e:	f001 fdc9 	bl	8005cb4 <HAL_DMA_ConfigChannelAttributes>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_MspInit+0x188>
      Error_Handler();
 8004128:	f7ff fbbe 	bl	80038a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <HAL_UART_MspInit+0x220>)
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004134:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_UART_MspInit+0x220>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <HAL_UART_MspInit+0x228>)
 800413c:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <HAL_UART_MspInit+0x22c>)
 800413e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004140:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004142:	221c      	movs	r2, #28
 8004144:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004146:	4b21      	ldr	r3, [pc, #132]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004148:	2210      	movs	r2, #16
 800414a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <HAL_UART_MspInit+0x228>)
 800414e:	2200      	movs	r2, #0
 8004150:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004158:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <HAL_UART_MspInit+0x228>)
 800415a:	2200      	movs	r2, #0
 800415c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004166:	2200      	movs	r2, #0
 8004168:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_UART_MspInit+0x228>)
 800416c:	2200      	movs	r2, #0
 800416e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004170:	4816      	ldr	r0, [pc, #88]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004172:	f001 fab5 	bl	80056e0 <HAL_DMA_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 800417c:	f7ff fb94 	bl	80038a8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8004180:	2110      	movs	r1, #16
 8004182:	4812      	ldr	r0, [pc, #72]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004184:	f001 fd96 	bl	8005cb4 <HAL_DMA_ConfigChannelAttributes>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 800418e:	f7ff fb8b 	bl	80038a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a0d      	ldr	r2, [pc, #52]	; (80041cc <HAL_UART_MspInit+0x228>)
 8004196:	67da      	str	r2, [r3, #124]	; 0x7c
 8004198:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <HAL_UART_MspInit+0x228>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800419e:	2200      	movs	r2, #0
 80041a0:	2100      	movs	r1, #0
 80041a2:	203e      	movs	r0, #62	; 0x3e
 80041a4:	f001 fa67 	bl	8005676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041a8:	203e      	movs	r0, #62	; 0x3e
 80041aa:	f001 fa7e 	bl	80056aa <HAL_NVIC_EnableIRQ>
}
 80041ae:	e08d      	b.n	80042cc <HAL_UART_MspInit+0x328>
 80041b0:	40008000 	.word	0x40008000
 80041b4:	40021000 	.word	0x40021000
 80041b8:	42021800 	.word	0x42021800
 80041bc:	40004400 	.word	0x40004400
 80041c0:	42020000 	.word	0x42020000
 80041c4:	20000f1c 	.word	0x20000f1c
 80041c8:	40020008 	.word	0x40020008
 80041cc:	20000f84 	.word	0x20000f84
 80041d0:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART3)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a3e      	ldr	r2, [pc, #248]	; (80042d4 <HAL_UART_MspInit+0x330>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d176      	bne.n	80042cc <HAL_UART_MspInit+0x328>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80041de:	2304      	movs	r3, #4
 80041e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80041e2:	2300      	movs	r3, #0
 80041e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e6:	f107 0320 	add.w	r3, r7, #32
 80041ea:	4618      	mov	r0, r3
 80041ec:	f003 f936 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_UART_MspInit+0x256>
      Error_Handler();
 80041f6:	f7ff fb57 	bl	80038a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_UART_MspInit+0x334>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	4a36      	ldr	r2, [pc, #216]	; (80042d8 <HAL_UART_MspInit+0x334>)
 8004200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004204:	6593      	str	r3, [r2, #88]	; 0x58
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_UART_MspInit+0x334>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_UART_MspInit+0x334>)
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <HAL_UART_MspInit+0x334>)
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HAL_UART_MspInit+0x334>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800422a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800422e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423e:	2300      	movs	r3, #0
 8004240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004244:	2307      	movs	r3, #7
 8004246:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800424e:	4619      	mov	r1, r3
 8004250:	4822      	ldr	r0, [pc, #136]	; (80042dc <HAL_UART_MspInit+0x338>)
 8004252:	f001 fdff 	bl	8005e54 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 8004258:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <HAL_UART_MspInit+0x340>)
 800425a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 800425e:	221d      	movs	r2, #29
 8004260:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004262:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 800426a:	2200      	movs	r2, #0
 800426c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800426e:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 8004276:	2200      	movs	r2, #0
 8004278:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800427a:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004280:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 8004288:	2200      	movs	r2, #0
 800428a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800428c:	4814      	ldr	r0, [pc, #80]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 800428e:	f001 fa27 	bl	80056e0 <HAL_DMA_Init>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_UART_MspInit+0x2f8>
      Error_Handler();
 8004298:	f7ff fb06 	bl	80038a8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800429c:	2110      	movs	r1, #16
 800429e:	4810      	ldr	r0, [pc, #64]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 80042a0:	f001 fd08 	bl	8005cb4 <HAL_DMA_ConfigChannelAttributes>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_UART_MspInit+0x30a>
      Error_Handler();
 80042aa:	f7ff fafd 	bl	80038a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_UART_MspInit+0x33c>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80042bc:	2200      	movs	r2, #0
 80042be:	2100      	movs	r1, #0
 80042c0:	203f      	movs	r0, #63	; 0x3f
 80042c2:	f001 f9d8 	bl	8005676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042c6:	203f      	movs	r0, #63	; 0x3f
 80042c8:	f001 f9ef 	bl	80056aa <HAL_NVIC_EnableIRQ>
}
 80042cc:	bf00      	nop
 80042ce:	37c8      	adds	r7, #200	; 0xc8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40004800 	.word	0x40004800
 80042d8:	40021000 	.word	0x40021000
 80042dc:	42020400 	.word	0x42020400
 80042e0:	20000fec 	.word	0x20000fec
 80042e4:	40020030 	.word	0x40020030

080042e8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <MX_USB_PCD_Init+0x48>)
 80042ee:	4a11      	ldr	r2, [pc, #68]	; (8004334 <MX_USB_PCD_Init+0x4c>)
 80042f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <MX_USB_PCD_Init+0x48>)
 80042f4:	2208      	movs	r2, #8
 80042f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <MX_USB_PCD_Init+0x48>)
 80042fa:	2202      	movs	r2, #2
 80042fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <MX_USB_PCD_Init+0x48>)
 8004300:	2202      	movs	r2, #2
 8004302:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <MX_USB_PCD_Init+0x48>)
 8004306:	2200      	movs	r2, #0
 8004308:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <MX_USB_PCD_Init+0x48>)
 800430c:	2200      	movs	r2, #0
 800430e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <MX_USB_PCD_Init+0x48>)
 8004312:	2200      	movs	r2, #0
 8004314:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <MX_USB_PCD_Init+0x48>)
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800431c:	4804      	ldr	r0, [pc, #16]	; (8004330 <MX_USB_PCD_Init+0x48>)
 800431e:	f001 ff31 	bl	8006184 <HAL_PCD_Init>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8004328:	f7ff fabe 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800432c:	bf00      	nop
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20001054 	.word	0x20001054
 8004334:	4000d400 	.word	0x4000d400

08004338 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b0ae      	sub	sp, #184	; 0xb8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004340:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	2294      	movs	r2, #148	; 0x94
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f005 ffc8 	bl	800a2ee <memset>
  if(pcdHandle->Instance==USB)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a22      	ldr	r2, [pc, #136]	; (80043ec <HAL_PCD_MspInit+0xb4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d13d      	bne.n	80043e4 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800436c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	4618      	mov	r0, r3
 800437a:	f003 f86f 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004384:	f7ff fa90 	bl	80038a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_PCD_MspInit+0xb8>)
 800438a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_PCD_MspInit+0xb8>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_PCD_MspInit+0xb8>)
 8004396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80043a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80043a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80043ba:	230a      	movs	r3, #10
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043c4:	4619      	mov	r1, r3
 80043c6:	480b      	ldr	r0, [pc, #44]	; (80043f4 <HAL_PCD_MspInit+0xbc>)
 80043c8:	f001 fd44 	bl	8005e54 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <HAL_PCD_MspInit+0xb8>)
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <HAL_PCD_MspInit+0xb8>)
 80043d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_PCD_MspInit+0xb8>)
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80043e4:	bf00      	nop
 80043e6:	37b8      	adds	r7, #184	; 0xb8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	4000d400 	.word	0x4000d400
 80043f0:	40021000 	.word	0x40021000
 80043f4:	42020000 	.word	0x42020000

080043f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80043f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004430 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043fc:	f7ff fbba 	bl	8003b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004400:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004402:	e003      	b.n	800440c <LoopCopyDataInit>

08004404 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004406:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004408:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800440a:	3104      	adds	r1, #4

0800440c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800440c:	480a      	ldr	r0, [pc, #40]	; (8004438 <LoopForever+0xa>)
	ldr	r3, =_edata
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004410:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004412:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004414:	d3f6      	bcc.n	8004404 <CopyDataInit>
	ldr	r2, =_sbss
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004418:	e002      	b.n	8004420 <LoopFillZerobss>

0800441a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800441a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800441c:	f842 3b04 	str.w	r3, [r2], #4

08004420 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <LoopForever+0x16>)
	cmp	r2, r3
 8004422:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004424:	d3f9      	bcc.n	800441a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004426:	f005 ff11 	bl	800a24c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800442a:	f7ff f915 	bl	8003658 <main>

0800442e <LoopForever>:

LoopForever:
    b LoopForever
 800442e:	e7fe      	b.n	800442e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004430:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8004434:	0800bcd0 	.word	0x0800bcd0
	ldr	r0, =_sdata
 8004438:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800443c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004440:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004444:	20001360 	.word	0x20001360

08004448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004448:	e7fe      	b.n	8004448 <ADC1_2_IRQHandler>

0800444a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004454:	2004      	movs	r0, #4
 8004456:	f001 f903 	bl	8005660 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800445a:	f7ff fb9d 	bl	8003b98 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800445e:	2000      	movs	r0, #0
 8004460:	f000 f80e 	bl	8004480 <HAL_InitTick>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	71fb      	strb	r3, [r7, #7]
 800446e:	e001      	b.n	8004474 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004470:	f7ff faa8 	bl	80039c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004474:	79fb      	ldrb	r3, [r7, #7]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_InitTick+0x6c>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d023      	beq.n	80044dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <HAL_InitTick+0x70>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_InitTick+0x6c>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	4619      	mov	r1, r3
 800449e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f90b 	bl	80056c6 <HAL_SYSTICK_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10f      	bne.n	80044d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b07      	cmp	r3, #7
 80044ba:	d809      	bhi.n	80044d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044bc:	2200      	movs	r2, #0
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	f001 f8d7 	bl	8005676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_InitTick+0x74>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e007      	b.n	80044e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	e004      	b.n	80044e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
 80044da:	e001      	b.n	80044e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	20000004 	.word	0x20000004
 80044f4:	20000008 	.word	0x20000008

080044f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_IncTick+0x20>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_IncTick+0x24>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4413      	add	r3, r2
 8004508:	4a04      	ldr	r2, [pc, #16]	; (800451c <HAL_IncTick+0x24>)
 800450a:	6013      	str	r3, [r2, #0]
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	2000000c 	.word	0x2000000c
 800451c:	20001348 	.word	0x20001348

08004520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return uwTick;
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <HAL_GetTick+0x14>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20001348 	.word	0x20001348

08004538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004540:	f7ff ffee 	bl	8004520 <HAL_GetTick>
 8004544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d005      	beq.n	800455e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <HAL_Delay+0x44>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800455e:	bf00      	nop
 8004560:	f7ff ffde 	bl	8004520 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d8f7      	bhi.n	8004560 <HAL_Delay+0x28>
  {
  }
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	2000000c 	.word	0x2000000c

08004580 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	609a      	str	r2, [r3, #8]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3360      	adds	r3, #96	; 0x60
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <LL_ADC_SetOffset+0x44>)
 800460a:	4013      	ands	r3, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	03fff000 	.word	0x03fff000

08004630 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3360      	adds	r3, #96	; 0x60
 800463e:	461a      	mov	r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3360      	adds	r3, #96	; 0x60
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	431a      	orrs	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	615a      	str	r2, [r3, #20]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3330      	adds	r3, #48	; 0x30
 80046c8:	461a      	mov	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	4413      	add	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	211f      	movs	r1, #31
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	401a      	ands	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	0e9b      	lsrs	r3, r3, #26
 80046f0:	f003 011f 	and.w	r1, r3, #31
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	431a      	orrs	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3314      	adds	r3, #20
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	0e5b      	lsrs	r3, r3, #25
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	0d1b      	lsrs	r3, r3, #20
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2107      	movs	r1, #7
 800473e:	fa01 f303 	lsl.w	r3, r1, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	401a      	ands	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	0d1b      	lsrs	r3, r3, #20
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	431a      	orrs	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0318 	and.w	r3, r3, #24
 800478a:	4908      	ldr	r1, [pc, #32]	; (80047ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800478c:	40d9      	lsrs	r1, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	400b      	ands	r3, r1
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	431a      	orrs	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	0007ffff 	.word	0x0007ffff

080047b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80047c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6093      	str	r3, [r2, #8]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e8:	d101      	bne.n	80047ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800480c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004810:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004838:	d101      	bne.n	800483e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <LL_ADC_IsEnabled+0x18>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <LL_ADC_IsEnabled+0x1a>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b04      	cmp	r3, #4
 8004884:	d101      	bne.n	800488a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d101      	bne.n	80048b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e12e      	b.n	8004b38 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fe fd8f 	bl	800340c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff67 	bl	80047d4 <LL_ADC_IsDeepPowerDownEnabled>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff4d 	bl	80047b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ff82 	bl	8004824 <LL_ADC_IsInternalRegulatorEnabled>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d115      	bne.n	8004952 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ff66 	bl	80047fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004930:	4b83      	ldr	r3, [pc, #524]	; (8004b40 <HAL_ADC_Init+0x280>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	099b      	lsrs	r3, r3, #6
 8004936:	4a83      	ldr	r2, [pc, #524]	; (8004b44 <HAL_ADC_Init+0x284>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	3301      	adds	r3, #1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004944:	e002      	b.n	800494c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f9      	bne.n	8004946 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff64 	bl	8004824 <LL_ADC_IsInternalRegulatorEnabled>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10d      	bne.n	800497e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	f043 0210 	orr.w	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff ff75 	bl	8004872 <LL_ADC_REG_IsConversionOngoing>
 8004988:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 80c7 	bne.w	8004b26 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 80c3 	bne.w	8004b26 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049a8:	f043 0202 	orr.w	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff49 	bl	800484c <LL_ADC_IsEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d110      	bne.n	80049e2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c0:	4861      	ldr	r0, [pc, #388]	; (8004b48 <HAL_ADC_Init+0x288>)
 80049c2:	f7ff ff43 	bl	800484c <LL_ADC_IsEnabled>
 80049c6:	4604      	mov	r4, r0
 80049c8:	4860      	ldr	r0, [pc, #384]	; (8004b4c <HAL_ADC_Init+0x28c>)
 80049ca:	f7ff ff3f 	bl	800484c <LL_ADC_IsEnabled>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4323      	orrs	r3, r4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4619      	mov	r1, r3
 80049dc:	485c      	ldr	r0, [pc, #368]	; (8004b50 <HAL_ADC_Init+0x290>)
 80049de:	f7ff fdcf 	bl	8004580 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7e5b      	ldrb	r3, [r3, #25]
 80049e6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049ec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80049f2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80049f8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a00:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d106      	bne.n	8004a1e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	3b01      	subs	r3, #1
 8004a16:	045b      	lsls	r3, r3, #17
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4b44      	ldr	r3, [pc, #272]	; (8004b54 <HAL_ADC_Init+0x294>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff ff20 	bl	8004898 <LL_ADC_INJ_IsConversionOngoing>
 8004a58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d140      	bne.n	8004ae2 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d13d      	bne.n	8004ae2 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7e1b      	ldrb	r3, [r3, #24]
 8004a6e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a70:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a78:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a88:	f023 0306 	bic.w	r3, r3, #6
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	430b      	orrs	r3, r1
 8004a94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d118      	bne.n	8004ad2 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004aaa:	f023 0304 	bic.w	r3, r3, #4
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ab6:	4311      	orrs	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004abc:	4311      	orrs	r1, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	611a      	str	r2, [r3, #16]
 8004ad0:	e007      	b.n	8004ae2 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10c      	bne.n	8004b04 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	f023 010f 	bic.w	r1, r3, #15
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	1e5a      	subs	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
 8004b02:	e007      	b.n	8004b14 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 020f 	bic.w	r2, r2, #15
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	f023 0303 	bic.w	r3, r3, #3
 8004b1c:	f043 0201 	orr.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	659a      	str	r2, [r3, #88]	; 0x58
 8004b24:	e007      	b.n	8004b36 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f043 0210 	orr.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3724      	adds	r7, #36	; 0x24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	20000004 	.word	0x20000004
 8004b44:	053e2d63 	.word	0x053e2d63
 8004b48:	42028000 	.word	0x42028000
 8004b4c:	42028100 	.word	0x42028100
 8004b50:	42028300 	.word	0x42028300
 8004b54:	fff0c007 	.word	0xfff0c007

08004b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b0b7      	sub	sp, #220	; 0xdc
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x22>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e3c1      	b.n	80052fe <HAL_ADC_ConfigChannel+0x7a6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fe73 	bl	8004872 <LL_ADC_REG_IsConversionOngoing>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f040 83a6 	bne.w	80052e0 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f7ff fd89 	bl	80046b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fe61 	bl	8004872 <LL_ADC_REG_IsConversionOngoing>
 8004bb0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fe6d 	bl	8004898 <LL_ADC_INJ_IsConversionOngoing>
 8004bbe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 81c1 	bne.w	8004f4e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 81bc 	bne.w	8004f4e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bde:	d10f      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2200      	movs	r2, #0
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7ff fd90 	bl	8004710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fd4a 	bl	8004692 <LL_ADC_SetSamplingTimeCommonConfig>
 8004bfe:	e00e      	b.n	8004c1e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6819      	ldr	r1, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f7ff fd7f 	bl	8004710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fd3a 	bl	8004692 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	08db      	lsrs	r3, r3, #3
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00a      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6919      	ldr	r1, [r3, #16]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c50:	f7ff fcca 	bl	80045e8 <LL_ADC_SetOffset>
 8004c54:	e17b      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fce7 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x12a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fcdc 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	0e9b      	lsrs	r3, r3, #26
 8004c7c:	f003 021f 	and.w	r2, r3, #31
 8004c80:	e01e      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x168>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fcd1 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	e004      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8004cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cb8:	fab3 f383 	clz	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x180>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	e018      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x1b2>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004cf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	e004      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8004d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d04:	fab3 f383 	clz	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d106      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fca0 	bl	800465c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fc84 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x1f0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fc79 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	0e9b      	lsrs	r3, r3, #26
 8004d42:	f003 021f 	and.w	r2, r3, #31
 8004d46:	e01e      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x22e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fc6e 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d5e:	fa93 f3a3 	rbit	r3, r3
 8004d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8004d76:	2320      	movs	r3, #32
 8004d78:	e004      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8004d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x246>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	0e9b      	lsrs	r3, r3, #26
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	e018      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x278>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	e004      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8004dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d106      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fc3d 	bl	800465c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2102      	movs	r1, #2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fc21 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <HAL_ADC_ConfigChannel+0x2b6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fc16 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004e04:	4603      	mov	r3, r0
 8004e06:	0e9b      	lsrs	r3, r3, #26
 8004e08:	f003 021f 	and.w	r2, r3, #31
 8004e0c:	e01e      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x2f4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fc0b 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	e004      	b.n	8004e4a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8004e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e44:	fab3 f383 	clz	r3, r3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d105      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x30c>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0e9b      	lsrs	r3, r3, #26
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	e016      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x33a>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8004e84:	2320      	movs	r3, #32
 8004e86:	e004      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8004e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e8c:	fab3 f383 	clz	r3, r3
 8004e90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d106      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fbdc 	bl	800465c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2103      	movs	r1, #3
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fbc0 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x378>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2103      	movs	r1, #3
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fbb5 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	0e9b      	lsrs	r3, r3, #26
 8004eca:	f003 021f 	and.w	r2, r3, #31
 8004ece:	e017      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x3a8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fbaa 	bl	8004630 <LL_ADC_GetOffsetChannel>
 8004edc:	4603      	mov	r3, r0
 8004ede:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8004ef2:	2320      	movs	r3, #32
 8004ef4:	e003      	b.n	8004efe <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8004ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ef8:	fab3 f383 	clz	r3, r3
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x3c0>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	0e9b      	lsrs	r3, r3, #26
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	e011      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x3e4>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f20:	fa93 f3a3 	rbit	r3, r3
 8004f24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8004f30:	2320      	movs	r3, #32
 8004f32:	e003      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8004f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f36:	fab3 f383 	clz	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d106      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2103      	movs	r1, #3
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fb87 	bl	800465c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fc7a 	bl	800484c <LL_ADC_IsEnabled>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 81c9 	bne.w	80052f2 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6819      	ldr	r1, [r3, #0]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f7ff fbfb 	bl	8004768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4a8f      	ldr	r2, [pc, #572]	; (80051b4 <HAL_ADC_ConfigChannel+0x65c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	f040 8131 	bne.w	80051e0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x44e>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	0e9b      	lsrs	r3, r3, #26
 8004f94:	3301      	adds	r3, #1
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	bf94      	ite	ls
 8004f9e:	2301      	movls	r3, #1
 8004fa0:	2300      	movhi	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e019      	b.n	8004fda <HAL_ADC_ConfigChannel+0x482>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8004fbe:	2320      	movs	r3, #32
 8004fc0:	e003      	b.n	8004fca <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8004fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	3301      	adds	r3, #1
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	2b09      	cmp	r3, #9
 8004fd2:	bf94      	ite	ls
 8004fd4:	2301      	movls	r3, #1
 8004fd6:	2300      	movhi	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d079      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x4a2>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	0e9b      	lsrs	r3, r3, #26
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	069b      	lsls	r3, r3, #26
 8004ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff8:	e015      	b.n	8005026 <HAL_ADC_ConfigChannel+0x4ce>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005002:	fa93 f3a3 	rbit	r3, r3
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800500c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005012:	2320      	movs	r3, #32
 8005014:	e003      	b.n	800501e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005018:	fab3 f383 	clz	r3, r3
 800501c:	b2db      	uxtb	r3, r3
 800501e:	3301      	adds	r3, #1
 8005020:	069b      	lsls	r3, r3, #26
 8005022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x4ee>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	0e9b      	lsrs	r3, r3, #26
 8005038:	3301      	adds	r3, #1
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2101      	movs	r1, #1
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	e017      	b.n	8005076 <HAL_ADC_ConfigChannel+0x51e>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504e:	fa93 f3a3 	rbit	r3, r3
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005056:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800505e:	2320      	movs	r3, #32
 8005060:	e003      	b.n	800506a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005064:	fab3 f383 	clz	r3, r3
 8005068:	b2db      	uxtb	r3, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2101      	movs	r1, #1
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	ea42 0103 	orr.w	r1, r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <HAL_ADC_ConfigChannel+0x544>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	0e9b      	lsrs	r3, r3, #26
 800508c:	3301      	adds	r3, #1
 800508e:	f003 021f 	and.w	r2, r3, #31
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	051b      	lsls	r3, r3, #20
 800509a:	e018      	b.n	80050ce <HAL_ADC_ConfigChannel+0x576>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	fa93 f3a3 	rbit	r3, r3
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80050aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80050ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80050b4:	2320      	movs	r3, #32
 80050b6:	e003      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	fab3 f383 	clz	r3, r3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	3301      	adds	r3, #1
 80050c2:	f003 021f 	and.w	r2, r3, #31
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050ce:	430b      	orrs	r3, r1
 80050d0:	e081      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <HAL_ADC_ConfigChannel+0x596>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	0e9b      	lsrs	r3, r3, #26
 80050e4:	3301      	adds	r3, #1
 80050e6:	069b      	lsls	r3, r3, #26
 80050e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ec:	e015      	b.n	800511a <HAL_ADC_ConfigChannel+0x5c2>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8005106:	2320      	movs	r3, #32
 8005108:	e003      	b.n	8005112 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	fab3 f383 	clz	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	3301      	adds	r3, #1
 8005114:	069b      	lsls	r3, r3, #26
 8005116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_ADC_ConfigChannel+0x5e2>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	0e9b      	lsrs	r3, r3, #26
 800512c:	3301      	adds	r3, #1
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2101      	movs	r1, #1
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	e017      	b.n	800516a <HAL_ADC_ConfigChannel+0x612>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	fa93 f3a3 	rbit	r3, r3
 8005146:	61fb      	str	r3, [r7, #28]
  return result;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8005152:	2320      	movs	r3, #32
 8005154:	e003      	b.n	800515e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	fab3 f383 	clz	r3, r3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	3301      	adds	r3, #1
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	2101      	movs	r1, #1
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	ea42 0103 	orr.w	r1, r2, r3
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10d      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x63e>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	0e9b      	lsrs	r3, r3, #26
 8005180:	3301      	adds	r3, #1
 8005182:	f003 021f 	and.w	r2, r3, #31
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	3b1e      	subs	r3, #30
 800518e:	051b      	lsls	r3, r3, #20
 8005190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005194:	e01e      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x67c>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	613b      	str	r3, [r7, #16]
  return result;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80051ae:	2320      	movs	r3, #32
 80051b0:	e006      	b.n	80051c0 <HAL_ADC_ConfigChannel+0x668>
 80051b2:	bf00      	nop
 80051b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	fab3 f383 	clz	r3, r3
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	3301      	adds	r3, #1
 80051c2:	f003 021f 	and.w	r2, r3, #31
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	3b1e      	subs	r3, #30
 80051ce:	051b      	lsls	r3, r3, #20
 80051d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051d4:	430b      	orrs	r3, r1
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	6892      	ldr	r2, [r2, #8]
 80051da:	4619      	mov	r1, r3
 80051dc:	f7ff fa98 	bl	8004710 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b48      	ldr	r3, [pc, #288]	; (8005308 <HAL_ADC_ConfigChannel+0x7b0>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8082 	beq.w	80052f2 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051ee:	4847      	ldr	r0, [pc, #284]	; (800530c <HAL_ADC_ConfigChannel+0x7b4>)
 80051f0:	f7ff f9ec 	bl	80045cc <LL_ADC_GetCommonPathInternalCh>
 80051f4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051f8:	4845      	ldr	r0, [pc, #276]	; (8005310 <HAL_ADC_ConfigChannel+0x7b8>)
 80051fa:	f7ff fb27 	bl	800484c <LL_ADC_IsEnabled>
 80051fe:	4604      	mov	r4, r0
 8005200:	4844      	ldr	r0, [pc, #272]	; (8005314 <HAL_ADC_ConfigChannel+0x7bc>)
 8005202:	f7ff fb23 	bl	800484c <LL_ADC_IsEnabled>
 8005206:	4603      	mov	r3, r0
 8005208:	4323      	orrs	r3, r4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d15e      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a41      	ldr	r2, [pc, #260]	; (8005318 <HAL_ADC_ConfigChannel+0x7c0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d127      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800521c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d121      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a39      	ldr	r2, [pc, #228]	; (8005310 <HAL_ADC_ConfigChannel+0x7b8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d161      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800522e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005236:	4619      	mov	r1, r3
 8005238:	4834      	ldr	r0, [pc, #208]	; (800530c <HAL_ADC_ConfigChannel+0x7b4>)
 800523a:	f7ff f9b4 	bl	80045a6 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <HAL_ADC_ConfigChannel+0x7c4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	4a36      	ldr	r2, [pc, #216]	; (8005320 <HAL_ADC_ConfigChannel+0x7c8>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8005256:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005258:	e002      	b.n	8005260 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b01      	subs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f9      	bne.n	800525a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005266:	e044      	b.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <HAL_ADC_ConfigChannel+0x7cc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d113      	bne.n	800529a <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10d      	bne.n	800529a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a23      	ldr	r2, [pc, #140]	; (8005310 <HAL_ADC_ConfigChannel+0x7b8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d134      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800528c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005290:	4619      	mov	r1, r3
 8005292:	481e      	ldr	r0, [pc, #120]	; (800530c <HAL_ADC_ConfigChannel+0x7b4>)
 8005294:	f7ff f987 	bl	80045a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005298:	e02b      	b.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a22      	ldr	r2, [pc, #136]	; (8005328 <HAL_ADC_ConfigChannel+0x7d0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d126      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d120      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <HAL_ADC_ConfigChannel+0x7b8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d11b      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052c2:	4619      	mov	r1, r3
 80052c4:	4811      	ldr	r0, [pc, #68]	; (800530c <HAL_ADC_ConfigChannel+0x7b4>)
 80052c6:	f7ff f96e 	bl	80045a6 <LL_ADC_SetCommonPathInternalCh>
 80052ca:	e012      	b.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	f043 0220 	orr.w	r2, r3, #32
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80052de:	e008      	b.n	80052f2 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80052fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80052fe:	4618      	mov	r0, r3
 8005300:	37dc      	adds	r7, #220	; 0xdc
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}
 8005306:	bf00      	nop
 8005308:	80080000 	.word	0x80080000
 800530c:	42028300 	.word	0x42028300
 8005310:	42028000 	.word	0x42028000
 8005314:	42028100 	.word	0x42028100
 8005318:	c7520000 	.word	0xc7520000
 800531c:	20000004 	.word	0x20000004
 8005320:	053e2d63 	.word	0x053e2d63
 8005324:	cb840000 	.word	0xcb840000
 8005328:	80000001 	.word	0x80000001

0800532c <LL_ADC_IsEnabled>:
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <LL_ADC_IsEnabled+0x18>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <LL_ADC_IsEnabled+0x1a>
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LL_ADC_REG_IsConversionOngoing>:
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b04      	cmp	r3, #4
 8005364:	d101      	bne.n	800536a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b0a1      	sub	sp, #132	; 0x84
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005392:	2302      	movs	r3, #2
 8005394:	e089      	b.n	80054aa <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800539e:	2300      	movs	r3, #0
 80053a0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80053a2:	2300      	movs	r3, #0
 80053a4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a42      	ldr	r2, [pc, #264]	; (80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d102      	bne.n	80053b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80053b0:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e001      	b.n	80053ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e068      	b.n	80054aa <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff ffb9 	bl	8005352 <LL_ADC_REG_IsConversionOngoing>
 80053e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff ffb3 	bl	8005352 <LL_ADC_REG_IsConversionOngoing>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d14a      	bne.n	8005488 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80053f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d147      	bne.n	8005488 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053f8:	4b30      	ldr	r3, [pc, #192]	; (80054bc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80053fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d027      	beq.n	8005454 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005416:	035b      	lsls	r3, r3, #13
 8005418:	430b      	orrs	r3, r1
 800541a:	431a      	orrs	r2, r3
 800541c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005420:	4824      	ldr	r0, [pc, #144]	; (80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005422:	f7ff ff83 	bl	800532c <LL_ADC_IsEnabled>
 8005426:	4604      	mov	r4, r0
 8005428:	4823      	ldr	r0, [pc, #140]	; (80054b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800542a:	f7ff ff7f 	bl	800532c <LL_ADC_IsEnabled>
 800542e:	4603      	mov	r3, r0
 8005430:	4323      	orrs	r3, r4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d132      	bne.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800543e:	f023 030f 	bic.w	r3, r3, #15
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	6892      	ldr	r2, [r2, #8]
 800544a:	430a      	orrs	r2, r1
 800544c:	431a      	orrs	r2, r3
 800544e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005450:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005452:	e023      	b.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800545e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005460:	4814      	ldr	r0, [pc, #80]	; (80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005462:	f7ff ff63 	bl	800532c <LL_ADC_IsEnabled>
 8005466:	4604      	mov	r4, r0
 8005468:	4813      	ldr	r0, [pc, #76]	; (80054b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800546a:	f7ff ff5f 	bl	800532c <LL_ADC_IsEnabled>
 800546e:	4603      	mov	r3, r0
 8005470:	4323      	orrs	r3, r4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d112      	bne.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800547e:	f023 030f 	bic.w	r3, r3, #15
 8005482:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005484:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005486:	e009      	b.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800549a:	e000      	b.n	800549e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800549c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80054a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3784      	adds	r7, #132	; 0x84
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd90      	pop	{r4, r7, pc}
 80054b2:	bf00      	nop
 80054b4:	42028000 	.word	0x42028000
 80054b8:	42028100 	.word	0x42028100
 80054bc:	42028300 	.word	0x42028300

080054c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <__NVIC_SetPriorityGrouping+0x44>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054dc:	4013      	ands	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054f2:	4a04      	ldr	r2, [pc, #16]	; (8005504 <__NVIC_SetPriorityGrouping+0x44>)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	60d3      	str	r3, [r2, #12]
}
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	e000ed00 	.word	0xe000ed00

08005508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <__NVIC_GetPriorityGrouping+0x18>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	0a1b      	lsrs	r3, r3, #8
 8005512:	f003 0307 	and.w	r3, r3, #7
}
 8005516:	4618      	mov	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000ed00 	.word	0xe000ed00

08005524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800552e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005532:	2b00      	cmp	r3, #0
 8005534:	db0b      	blt.n	800554e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	f003 021f 	and.w	r2, r3, #31
 800553c:	4907      	ldr	r1, [pc, #28]	; (800555c <__NVIC_EnableIRQ+0x38>)
 800553e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	2001      	movs	r0, #1
 8005546:	fa00 f202 	lsl.w	r2, r0, r2
 800554a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	e000e100 	.word	0xe000e100

08005560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	6039      	str	r1, [r7, #0]
 800556a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800556c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005570:	2b00      	cmp	r3, #0
 8005572:	db0a      	blt.n	800558a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	490c      	ldr	r1, [pc, #48]	; (80055ac <__NVIC_SetPriority+0x4c>)
 800557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557e:	0152      	lsls	r2, r2, #5
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	440b      	add	r3, r1
 8005584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005588:	e00a      	b.n	80055a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	b2da      	uxtb	r2, r3
 800558e:	4908      	ldr	r1, [pc, #32]	; (80055b0 <__NVIC_SetPriority+0x50>)
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	3b04      	subs	r3, #4
 8005598:	0152      	lsls	r2, r2, #5
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	440b      	add	r3, r1
 800559e:	761a      	strb	r2, [r3, #24]
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	e000e100 	.word	0xe000e100
 80055b0:	e000ed00 	.word	0xe000ed00

080055b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b089      	sub	sp, #36	; 0x24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f1c3 0307 	rsb	r3, r3, #7
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	bf28      	it	cs
 80055d2:	2303      	movcs	r3, #3
 80055d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3303      	adds	r3, #3
 80055da:	2b06      	cmp	r3, #6
 80055dc:	d902      	bls.n	80055e4 <NVIC_EncodePriority+0x30>
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3b04      	subs	r3, #4
 80055e2:	e000      	b.n	80055e6 <NVIC_EncodePriority+0x32>
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43da      	mvns	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	401a      	ands	r2, r3
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	43d9      	mvns	r1, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800560c:	4313      	orrs	r3, r2
         );
}
 800560e:	4618      	mov	r0, r3
 8005610:	3724      	adds	r7, #36	; 0x24
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3b01      	subs	r3, #1
 8005628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800562c:	d301      	bcc.n	8005632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800562e:	2301      	movs	r3, #1
 8005630:	e00f      	b.n	8005652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <SysTick_Config+0x40>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3b01      	subs	r3, #1
 8005638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800563a:	2107      	movs	r1, #7
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	f7ff ff8e 	bl	8005560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <SysTick_Config+0x40>)
 8005646:	2200      	movs	r2, #0
 8005648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <SysTick_Config+0x40>)
 800564c:	2207      	movs	r2, #7
 800564e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	e000e010 	.word	0xe000e010

08005660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff29 	bl	80054c0 <__NVIC_SetPriorityGrouping>
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b086      	sub	sp, #24
 800567a:	af00      	add	r7, sp, #0
 800567c:	4603      	mov	r3, r0
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005684:	f7ff ff40 	bl	8005508 <__NVIC_GetPriorityGrouping>
 8005688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7ff ff90 	bl	80055b4 <NVIC_EncodePriority>
 8005694:	4602      	mov	r2, r0
 8005696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569a:	4611      	mov	r1, r2
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ff5f 	bl	8005560 <__NVIC_SetPriority>
}
 80056a2:	bf00      	nop
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	4603      	mov	r3, r0
 80056b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ff33 	bl	8005524 <__NVIC_EnableIRQ>
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ffa4 	bl	800561c <SysTick_Config>
 80056d4:	4603      	mov	r3, r0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e08d      	b.n	800580e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	4b47      	ldr	r3, [pc, #284]	; (8005818 <HAL_DMA_Init+0x138>)
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d80f      	bhi.n	800571e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	4b45      	ldr	r3, [pc, #276]	; (800581c <HAL_DMA_Init+0x13c>)
 8005706:	4413      	add	r3, r2
 8005708:	4a45      	ldr	r2, [pc, #276]	; (8005820 <HAL_DMA_Init+0x140>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	009a      	lsls	r2, r3, #2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a42      	ldr	r2, [pc, #264]	; (8005824 <HAL_DMA_Init+0x144>)
 800571a:	649a      	str	r2, [r3, #72]	; 0x48
 800571c:	e00e      	b.n	800573c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	4b40      	ldr	r3, [pc, #256]	; (8005828 <HAL_DMA_Init+0x148>)
 8005726:	4413      	add	r3, r2
 8005728:	4a3d      	ldr	r2, [pc, #244]	; (8005820 <HAL_DMA_Init+0x140>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	009a      	lsls	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a3c      	ldr	r2, [pc, #240]	; (800582c <HAL_DMA_Init+0x14c>)
 800573a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8005752:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8005756:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800576c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fafe 	bl	8005d90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800579c:	d102      	bne.n	80057a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80057b8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d010      	beq.n	80057e4 <HAL_DMA_Init+0x104>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d80c      	bhi.n	80057e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fb1e 	bl	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	e008      	b.n	80057f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40020407 	.word	0x40020407
 800581c:	bffdfff8 	.word	0xbffdfff8
 8005820:	cccccccd 	.word	0xcccccccd
 8005824:	40020000 	.word	0x40020000
 8005828:	bffdfbf8 	.word	0xbffdfbf8
 800582c:	40020400 	.word	0x40020400

08005830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_DMA_Start_IT+0x20>
 800584c:	2302      	movs	r3, #2
 800584e:	e066      	b.n	800591e <HAL_DMA_Start_IT+0xee>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d155      	bne.n	8005910 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fa43 	bl	8005d14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 020e 	orr.w	r2, r2, #14
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e00f      	b.n	80058c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0204 	bic.w	r2, r2, #4
 80058b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 020a 	orr.w	r2, r2, #10
 80058c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e005      	b.n	800591c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005918:	2302      	movs	r3, #2
 800591a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d008      	beq.n	8005950 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2204      	movs	r2, #4
 8005942:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e040      	b.n	80059d2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 020e 	bic.w	r2, r2, #14
 800595e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800596e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005984:	f003 021c 	and.w	r2, r3, #28
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f202 	lsl.w	r2, r1, r2
 8005992:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800599c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00c      	beq.n	80059c0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80059be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d005      	beq.n	8005a02 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2204      	movs	r2, #4
 80059fa:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
 8005a00:	e047      	b.n	8005a92 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 020e 	bic.w	r2, r2, #14
 8005a10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	f003 021c 	and.w	r2, r3, #28
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3e:	2101      	movs	r1, #1
 8005a40:	fa01 f202 	lsl.w	r2, r1, r2
 8005a44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a4e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00c      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005a70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
    }
  }
  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab8:	f003 031c 	and.w	r3, r3, #28
 8005abc:	2204      	movs	r2, #4
 8005abe:	409a      	lsls	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d053      	beq.n	8005b70 <HAL_DMA_IRQHandler+0xd4>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d04e      	beq.n	8005b70 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d024      	beq.n	8005b2a <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae4:	f003 021c 	and.w	r2, r3, #28
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aec:	2104      	movs	r1, #4
 8005aee:	fa01 f202 	lsl.w	r2, r1, r2
 8005af2:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80c0 	beq.w	8005c8c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005b14:	e0ba      	b.n	8005c8c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80b6 	beq.w	8005c8c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005b28:	e0b0      	b.n	8005c8c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d107      	bne.n	8005b48 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0204 	bic.w	r2, r2, #4
 8005b46:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4c:	f003 021c 	and.w	r2, r3, #28
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b54:	2104      	movs	r1, #4
 8005b56:	fa01 f202 	lsl.w	r2, r1, r2
 8005b5a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 8093 	beq.w	8005c8c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005b6e:	e08d      	b.n	8005c8c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b74:	f003 031c 	and.w	r3, r3, #28
 8005b78:	2202      	movs	r2, #2
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d04e      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x186>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d049      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d06e      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005bba:	e069      	b.n	8005c90 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d065      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005bcc:	e060      	b.n	8005c90 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 020a 	bic.w	r2, r2, #10
 8005bea:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf8:	f003 021c 	and.w	r2, r3, #28
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c00:	2102      	movs	r1, #2
 8005c02:	fa01 f202 	lsl.w	r2, r1, r2
 8005c06:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d03b      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005c20:	e036      	b.n	8005c90 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c26:	f003 031c 	and.w	r3, r3, #28
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d02e      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x1f8>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d029      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 020e 	bic.w	r2, r2, #14
 8005c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c54:	f003 021c 	and.w	r2, r3, #28
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c8a:	e002      	b.n	8005c92 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005c8c:	bf00      	nop
 8005c8e:	e000      	b.n	8005c92 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005c90:	bf00      	nop
  return;
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
}
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	72fb      	strb	r3, [r7, #11]
    return status;
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	e01b      	b.n	8005d08 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e003      	b.n	8005cfe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	601a      	str	r2, [r3, #0]

  return status;
 8005d06:	7afb      	ldrb	r3, [r7, #11]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d2a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	f003 021c 	and.w	r2, r3, #28
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d108      	bne.n	8005d74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8005d72:	e007      	b.n	8005d84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d80a      	bhi.n	8005dba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da8:	089b      	lsrs	r3, r3, #2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005db0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6513      	str	r3, [r2, #80]	; 0x50
 8005db8:	e007      	b.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	089b      	lsrs	r3, r3, #2
 8005dc0:	009a      	lsls	r2, r3, #2
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005dc4:	4413      	add	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	3b08      	subs	r3, #8
 8005dd2:	4a0c      	ldr	r2, [pc, #48]	; (8005e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2201      	movs	r2, #1
 8005dea:	409a      	lsls	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	40020407 	.word	0x40020407
 8005e00:	40020820 	.word	0x40020820
 8005e04:	cccccccd 	.word	0xcccccccd
 8005e08:	40020880 	.word	0x40020880

08005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2201      	movs	r2, #1
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	1000823f 	.word	0x1000823f
 8005e50:	40020940 	.word	0x40020940

08005e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e62:	e158      	b.n	8006116 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	2101      	movs	r1, #1
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 814a 	beq.w	8006110 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d005      	beq.n	8005e94 <HAL_GPIO_Init+0x40>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d130      	bne.n	8005ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eca:	2201      	movs	r2, #1
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 0201 	and.w	r2, r3, #1
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d017      	beq.n	8005f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	43db      	mvns	r3, r3
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d123      	bne.n	8005f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	08da      	lsrs	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3208      	adds	r2, #8
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	220f      	movs	r2, #15
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	08da      	lsrs	r2, r3, #3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3208      	adds	r2, #8
 8005f80:	6939      	ldr	r1, [r7, #16]
 8005f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	2203      	movs	r2, #3
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	43db      	mvns	r3, r3
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f003 0203 	and.w	r2, r3, #3
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80a4 	beq.w	8006110 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8005fc8:	4a5a      	ldr	r2, [pc, #360]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	089b      	lsrs	r3, r3, #2
 8005fce:	3318      	adds	r3, #24
 8005fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	220f      	movs	r2, #15
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a52      	ldr	r2, [pc, #328]	; (8006138 <HAL_GPIO_Init+0x2e4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d025      	beq.n	8006040 <HAL_GPIO_Init+0x1ec>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a51      	ldr	r2, [pc, #324]	; (800613c <HAL_GPIO_Init+0x2e8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d01f      	beq.n	800603c <HAL_GPIO_Init+0x1e8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a50      	ldr	r2, [pc, #320]	; (8006140 <HAL_GPIO_Init+0x2ec>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d019      	beq.n	8006038 <HAL_GPIO_Init+0x1e4>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a4f      	ldr	r2, [pc, #316]	; (8006144 <HAL_GPIO_Init+0x2f0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_GPIO_Init+0x1e0>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a4e      	ldr	r2, [pc, #312]	; (8006148 <HAL_GPIO_Init+0x2f4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00d      	beq.n	8006030 <HAL_GPIO_Init+0x1dc>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a4d      	ldr	r2, [pc, #308]	; (800614c <HAL_GPIO_Init+0x2f8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <HAL_GPIO_Init+0x1d8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a4c      	ldr	r2, [pc, #304]	; (8006150 <HAL_GPIO_Init+0x2fc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d101      	bne.n	8006028 <HAL_GPIO_Init+0x1d4>
 8006024:	2306      	movs	r3, #6
 8006026:	e00c      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006028:	2307      	movs	r3, #7
 800602a:	e00a      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 800602c:	2305      	movs	r3, #5
 800602e:	e008      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006030:	2304      	movs	r3, #4
 8006032:	e006      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006034:	2303      	movs	r3, #3
 8006036:	e004      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006038:	2302      	movs	r3, #2
 800603a:	e002      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006040:	2300      	movs	r3, #0
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	f002 0203 	and.w	r2, r2, #3
 8006048:	00d2      	lsls	r2, r2, #3
 800604a:	4093      	lsls	r3, r2
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8006052:	4938      	ldr	r1, [pc, #224]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	3318      	adds	r3, #24
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006060:	4b34      	ldr	r3, [pc, #208]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	43db      	mvns	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006084:	4a2b      	ldr	r2, [pc, #172]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800608a:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	43db      	mvns	r3, r3
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4013      	ands	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060ae:	4a21      	ldr	r2, [pc, #132]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80060b4:	4b1f      	ldr	r3, [pc, #124]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	43db      	mvns	r3, r3
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4013      	ands	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060da:	4a16      	ldr	r2, [pc, #88]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 80060e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4013      	ands	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006108:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <HAL_GPIO_Init+0x2e0>)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	3301      	adds	r3, #1
 8006114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	f47f ae9f 	bne.w	8005e64 <HAL_GPIO_Init+0x10>
  }
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	4002f400 	.word	0x4002f400
 8006138:	42020000 	.word	0x42020000
 800613c:	42020400 	.word	0x42020400
 8006140:	42020800 	.word	0x42020800
 8006144:	42020c00 	.word	0x42020c00
 8006148:	42021000 	.word	0x42021000
 800614c:	42021400 	.word	0x42021400
 8006150:	42021800 	.word	0x42021800

08006154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	807b      	strh	r3, [r7, #2]
 8006160:	4613      	mov	r3, r2
 8006162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006164:	787b      	ldrb	r3, [r7, #1]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800616a:	887a      	ldrh	r2, [r7, #2]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006170:	e002      	b.n	8006178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006172:	887a      	ldrh	r2, [r7, #2]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006186:	b08b      	sub	sp, #44	; 0x2c
 8006188:	af06      	add	r7, sp, #24
 800618a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e0cb      	b.n	800632e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fe f8c4 	bl	8004338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2203      	movs	r2, #3
 80061b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f003 ffdf 	bl	800a180 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
 80061c6:	e040      	b.n	800624a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	440b      	add	r3, r1
 80061d8:	3301      	adds	r3, #1
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	440b      	add	r3, r1
 80061ee:	7bfa      	ldrb	r2, [r7, #15]
 80061f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	3303      	adds	r3, #3
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	3338      	adds	r3, #56	; 0x38
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800621c:	7bfa      	ldrb	r2, [r7, #15]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	333c      	adds	r3, #60	; 0x3c
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006230:	7bfa      	ldrb	r2, [r7, #15]
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	440b      	add	r3, r1
 800623e:	3340      	adds	r3, #64	; 0x40
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	3301      	adds	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
 800624a:	7bfa      	ldrb	r2, [r7, #15]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d3b9      	bcc.n	80061c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e044      	b.n	80062e4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800625a:	7bfa      	ldrb	r2, [r7, #15]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	f203 1369 	addw	r3, r3, #361	; 0x169
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006270:	7bfa      	ldrb	r2, [r7, #15]
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	440b      	add	r3, r1
 800627e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006282:	7bfa      	ldrb	r2, [r7, #15]
 8006284:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006286:	7bfa      	ldrb	r2, [r7, #15]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	440b      	add	r3, r1
 8006294:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800629c:	7bfa      	ldrb	r2, [r7, #15]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	440b      	add	r3, r1
 80062aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062b2:	7bfa      	ldrb	r2, [r7, #15]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	440b      	add	r3, r1
 80062c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062c8:	7bfa      	ldrb	r2, [r7, #15]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	440b      	add	r3, r1
 80062d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	3301      	adds	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	7bfa      	ldrb	r2, [r7, #15]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d3b5      	bcc.n	800625a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	687e      	ldr	r6, [r7, #4]
 80062f6:	466d      	mov	r5, sp
 80062f8:	f106 0410 	add.w	r4, r6, #16
 80062fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	1d33      	adds	r3, r6, #4
 8006306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006308:	6838      	ldr	r0, [r7, #0]
 800630a:	f003 ff54 	bl	800a1b6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d102      	bne.n	800632c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f805 	bl	8006336 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006336 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800635a:	b29b      	uxth	r3, r3
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800636e:	b29b      	uxth	r3, r3
 8006370:	f043 0302 	orr.w	r3, r3, #2
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006390:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a04      	ldr	r2, [pc, #16]	; (80063a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639a:	6013      	str	r3, [r2, #0]
}
 800639c:	bf00      	nop
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40007000 	.word	0x40007000

080063ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40007000 	.word	0x40007000

080063c8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063d8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80063da:	f000 f861 	bl	80064a0 <HAL_PWREx_SMPS_GetEffectiveMode>
 80063de:	4603      	mov	r3, r0
 80063e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e4:	d101      	bne.n	80063ea <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e03e      	b.n	8006468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80063ea:	4b21      	ldr	r3, [pc, #132]	; (8006470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f6:	d101      	bne.n	80063fc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e035      	b.n	8006468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d101      	bne.n	8006408 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	e02f      	b.n	8006468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006408:	4b19      	ldr	r3, [pc, #100]	; (8006470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006410:	4917      	ldr	r1, [pc, #92]	; (8006470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4313      	orrs	r3, r2
 8006416:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8006418:	4b16      	ldr	r3, [pc, #88]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006420:	fba2 2303 	umull	r2, r3, r2, r3
 8006424:	09db      	lsrs	r3, r3, #7
 8006426:	2232      	movs	r2, #50	; 0x32
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	4a13      	ldr	r2, [pc, #76]	; (800647c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006438:	e002      	b.n	8006440 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3b01      	subs	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644c:	d102      	bne.n	8006454 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f2      	bne.n	800643a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800645c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006460:	d101      	bne.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e000      	b.n	8006468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40007000 	.word	0x40007000
 8006474:	20000004 	.word	0x20000004
 8006478:	0a7c5ac5 	.word	0x0a7c5ac5
 800647c:	cccccccd 	.word	0xcccccccd

08006480 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	4a04      	ldr	r2, [pc, #16]	; (800649c <HAL_PWREx_EnableVddIO2+0x1c>)
 800648a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800648e:	6053      	str	r3, [r2, #4]
}
 8006490:	bf00      	nop
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40007000 	.word	0x40007000

080064a0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80064a6:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80064b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	e00a      	b.n	80064d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80064c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	e001      	b.n	80064d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80064d0:	2300      	movs	r3, #0
 80064d2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80064d4:	687b      	ldr	r3, [r7, #4]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40007000 	.word	0x40007000

080064e8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f000 bcc2 	b.w	8006e80 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064fc:	4b99      	ldr	r3, [pc, #612]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 030c 	and.w	r3, r3, #12
 8006504:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006506:	4b97      	ldr	r3, [pc, #604]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80e9 	beq.w	80066f0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <HAL_RCC_OscConfig+0x4a>
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b0c      	cmp	r3, #12
 8006528:	f040 8083 	bne.w	8006632 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d17f      	bne.n	8006632 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006532:	4b8c      	ldr	r3, [pc, #560]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d006      	beq.n	800654c <HAL_RCC_OscConfig+0x64>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f000 bc9a 	b.w	8006e80 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006550:	4b84      	ldr	r3, [pc, #528]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <HAL_RCC_OscConfig+0x7e>
 800655c:	4b81      	ldr	r3, [pc, #516]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006564:	e005      	b.n	8006572 <HAL_RCC_OscConfig+0x8a>
 8006566:	4b7f      	ldr	r3, [pc, #508]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006572:	4293      	cmp	r3, r2
 8006574:	d224      	bcs.n	80065c0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fe9c 	bl	80072b8 <RCC_SetFlashLatencyFromMSIRange>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f000 bc7a 	b.w	8006e80 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800658c:	4b75      	ldr	r3, [pc, #468]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a74      	ldr	r2, [pc, #464]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	4b72      	ldr	r3, [pc, #456]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	496f      	ldr	r1, [pc, #444]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065aa:	4b6e      	ldr	r3, [pc, #440]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	496a      	ldr	r1, [pc, #424]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	604b      	str	r3, [r1, #4]
 80065be:	e026      	b.n	800660e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065c0:	4b68      	ldr	r3, [pc, #416]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a67      	ldr	r2, [pc, #412]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065c6:	f043 0308 	orr.w	r3, r3, #8
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4b65      	ldr	r3, [pc, #404]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	4962      	ldr	r1, [pc, #392]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065de:	4b61      	ldr	r3, [pc, #388]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	495d      	ldr	r1, [pc, #372]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fe5b 	bl	80072b8 <RCC_SetFlashLatencyFromMSIRange>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f000 bc39 	b.w	8006e80 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800660e:	f000 fe17 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8006612:	4603      	mov	r3, r0
 8006614:	4a54      	ldr	r2, [pc, #336]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006616:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006618:	4b54      	ldr	r3, [pc, #336]	; (800676c <HAL_RCC_OscConfig+0x284>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f7fd ff2f 	bl	8004480 <HAL_InitTick>
 8006622:	4603      	mov	r3, r0
 8006624:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d060      	beq.n	80066ee <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	f000 bc27 	b.w	8006e80 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d039      	beq.n	80066ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800663a:	4b4a      	ldr	r3, [pc, #296]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a49      	ldr	r2, [pc, #292]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006640:	f043 0301 	orr.w	r3, r3, #1
 8006644:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006646:	f7fd ff6b 	bl	8004520 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800664c:	e00f      	b.n	800666e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800664e:	f7fd ff67 	bl	8004520 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d908      	bls.n	800666e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800665c:	4b41      	ldr	r3, [pc, #260]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	f000 bc09 	b.w	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800666e:	4b3d      	ldr	r3, [pc, #244]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0e9      	beq.n	800664e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800667a:	4b3a      	ldr	r3, [pc, #232]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a39      	ldr	r2, [pc, #228]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006680:	f043 0308 	orr.w	r3, r3, #8
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4b37      	ldr	r3, [pc, #220]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	4934      	ldr	r1, [pc, #208]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006698:	4b32      	ldr	r3, [pc, #200]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	492f      	ldr	r1, [pc, #188]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]
 80066ac:	e020      	b.n	80066f0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066ae:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2c      	ldr	r2, [pc, #176]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066ba:	f7fd ff31 	bl	8004520 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066c0:	e00e      	b.n	80066e0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066c2:	f7fd ff2d 	bl	8004520 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d907      	bls.n	80066e0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066d0:	4b24      	ldr	r3, [pc, #144]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e3cf      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1ea      	bne.n	80066c2 <HAL_RCC_OscConfig+0x1da>
 80066ec:	e000      	b.n	80066f0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d07e      	beq.n	80067fa <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d005      	beq.n	800670e <HAL_RCC_OscConfig+0x226>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b0c      	cmp	r3, #12
 8006706:	d10e      	bne.n	8006726 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b03      	cmp	r3, #3
 800670c:	d10b      	bne.n	8006726 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06e      	beq.n	80067f8 <HAL_RCC_OscConfig+0x310>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d16a      	bne.n	80067f8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e3ac      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672e:	d106      	bne.n	800673e <HAL_RCC_OscConfig+0x256>
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a0b      	ldr	r2, [pc, #44]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	e024      	b.n	8006788 <HAL_RCC_OscConfig+0x2a0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006746:	d113      	bne.n	8006770 <HAL_RCC_OscConfig+0x288>
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a05      	ldr	r2, [pc, #20]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800674e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a02      	ldr	r2, [pc, #8]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800675a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	e012      	b.n	8006788 <HAL_RCC_OscConfig+0x2a0>
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	20000004 	.word	0x20000004
 800676c:	20000008 	.word	0x20000008
 8006770:	4b8b      	ldr	r3, [pc, #556]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a8a      	ldr	r2, [pc, #552]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4b88      	ldr	r3, [pc, #544]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a87      	ldr	r2, [pc, #540]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d019      	beq.n	80067c4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fd fec6 	bl	8004520 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006796:	e00e      	b.n	80067b6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006798:	f7fd fec2 	bl	8004520 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b64      	cmp	r3, #100	; 0x64
 80067a4:	d907      	bls.n	80067b6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067a6:	4b7e      	ldr	r3, [pc, #504]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e364      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067b6:	4b7a      	ldr	r3, [pc, #488]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ea      	beq.n	8006798 <HAL_RCC_OscConfig+0x2b0>
 80067c2:	e01a      	b.n	80067fa <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fd feac 	bl	8004520 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067ca:	e00e      	b.n	80067ea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067cc:	f7fd fea8 	bl	8004520 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b64      	cmp	r3, #100	; 0x64
 80067d8:	d907      	bls.n	80067ea <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067da:	4b71      	ldr	r3, [pc, #452]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e34a      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067ea:	4b6d      	ldr	r3, [pc, #436]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1ea      	bne.n	80067cc <HAL_RCC_OscConfig+0x2e4>
 80067f6:	e000      	b.n	80067fa <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d06c      	beq.n	80068e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d005      	beq.n	8006818 <HAL_RCC_OscConfig+0x330>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b0c      	cmp	r3, #12
 8006810:	d119      	bne.n	8006846 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d116      	bne.n	8006846 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006818:	4b61      	ldr	r3, [pc, #388]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_RCC_OscConfig+0x348>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e327      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006830:	4b5b      	ldr	r3, [pc, #364]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	4958      	ldr	r1, [pc, #352]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006840:	4313      	orrs	r3, r2
 8006842:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006844:	e04c      	b.n	80068e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d029      	beq.n	80068a2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800684e:	4b54      	ldr	r3, [pc, #336]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a53      	ldr	r2, [pc, #332]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685a:	f7fd fe61 	bl	8004520 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006860:	e00e      	b.n	8006880 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006862:	f7fd fe5d 	bl	8004520 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d907      	bls.n	8006880 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006870:	4b4b      	ldr	r3, [pc, #300]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e2ff      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006880:	4b47      	ldr	r3, [pc, #284]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0ea      	beq.n	8006862 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800688c:	4b44      	ldr	r3, [pc, #272]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	061b      	lsls	r3, r3, #24
 800689a:	4941      	ldr	r1, [pc, #260]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
 80068a0:	e01e      	b.n	80068e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068a2:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a3e      	ldr	r2, [pc, #248]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80068a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ae:	f7fd fe37 	bl	8004520 <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068b4:	e00e      	b.n	80068d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b6:	f7fd fe33 	bl	8004520 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d907      	bls.n	80068d4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068c4:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e2d5      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068d4:	4b32      	ldr	r3, [pc, #200]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1ea      	bne.n	80068b6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d062      	beq.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d038      	beq.n	8006966 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80068fc:	4b28      	ldr	r3, [pc, #160]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 80068fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006902:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006904:	f023 0310 	bic.w	r3, r3, #16
 8006908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800690c:	e007      	b.n	800691e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006914:	4a22      	ldr	r2, [pc, #136]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006916:	f043 0310 	orr.w	r3, r3, #16
 800691a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006924:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692e:	f7fd fdf7 	bl	8004520 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006934:	e00f      	b.n	8006956 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006936:	f7fd fdf3 	bl	8004520 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b07      	cmp	r3, #7
 8006942:	d908      	bls.n	8006956 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006944:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e294      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0e8      	beq.n	8006936 <HAL_RCC_OscConfig+0x44e>
 8006964:	e025      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 8006968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696c:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006976:	f7fd fdd3 	bl	8004520 <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800697c:	e012      	b.n	80069a4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800697e:	f7fd fdcf 	bl	8004520 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b07      	cmp	r3, #7
 800698a:	d90b      	bls.n	80069a4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800698c:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <HAL_RCC_OscConfig+0x4b8>)
 800698e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e270      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
 800699e:	bf00      	nop
 80069a0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a4:	4ba8      	ldr	r3, [pc, #672]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 80069a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e5      	bne.n	800697e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 812d 	beq.w	8006c1a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069c0:	2300      	movs	r3, #0
 80069c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069c4:	4ba0      	ldr	r3, [pc, #640]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069d0:	4b9d      	ldr	r3, [pc, #628]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 80069d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d4:	4a9c      	ldr	r2, [pc, #624]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 80069d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069da:	6593      	str	r3, [r2, #88]	; 0x58
 80069dc:	4b9a      	ldr	r3, [pc, #616]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e8:	2301      	movs	r3, #1
 80069ea:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ec:	4b97      	ldr	r3, [pc, #604]	; (8006c4c <HAL_RCC_OscConfig+0x764>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d11e      	bne.n	8006a36 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069f8:	4b94      	ldr	r3, [pc, #592]	; (8006c4c <HAL_RCC_OscConfig+0x764>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a93      	ldr	r2, [pc, #588]	; (8006c4c <HAL_RCC_OscConfig+0x764>)
 80069fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a04:	f7fd fd8c 	bl	8004520 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a0a:	e00e      	b.n	8006a2a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a0c:	f7fd fd88 	bl	8004520 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d907      	bls.n	8006a2a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a1a:	4b8c      	ldr	r3, [pc, #560]	; (8006c4c <HAL_RCC_OscConfig+0x764>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e22a      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a2a:	4b88      	ldr	r3, [pc, #544]	; (8006c4c <HAL_RCC_OscConfig+0x764>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0ea      	beq.n	8006a0c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01f      	beq.n	8006a82 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d010      	beq.n	8006a70 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a4e:	4b7e      	ldr	r3, [pc, #504]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	4a7c      	ldr	r2, [pc, #496]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a56:	f043 0304 	orr.w	r3, r3, #4
 8006a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a5e:	4b7a      	ldr	r3, [pc, #488]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a64:	4a78      	ldr	r2, [pc, #480]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a6e:	e018      	b.n	8006aa2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a70:	4b75      	ldr	r3, [pc, #468]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	4a74      	ldr	r2, [pc, #464]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a80:	e00f      	b.n	8006aa2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a82:	4b71      	ldr	r3, [pc, #452]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a88:	4a6f      	ldr	r2, [pc, #444]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a92:	4b6d      	ldr	r3, [pc, #436]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a98:	4a6b      	ldr	r2, [pc, #428]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006a9a:	f023 0304 	bic.w	r3, r3, #4
 8006a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d068      	beq.n	8006b7c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fd fd39 	bl	8004520 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab0:	e011      	b.n	8006ad6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fd fd35 	bl	8004520 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d908      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac4:	4b60      	ldr	r3, [pc, #384]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e1d4      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ad6:	4b5c      	ldr	r3, [pc, #368]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0e6      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d022      	beq.n	8006b36 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006af0:	4b55      	ldr	r3, [pc, #340]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af6:	4a54      	ldr	r2, [pc, #336]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b00:	e011      	b.n	8006b26 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b02:	f7fd fd0d 	bl	8004520 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d908      	bls.n	8006b26 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b14:	4b4c      	ldr	r3, [pc, #304]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e1ac      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b26:	4b48      	ldr	r3, [pc, #288]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0e6      	beq.n	8006b02 <HAL_RCC_OscConfig+0x61a>
 8006b34:	e068      	b.n	8006c08 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b36:	4b44      	ldr	r3, [pc, #272]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	4a42      	ldr	r2, [pc, #264]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b46:	e011      	b.n	8006b6c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b48:	f7fd fcea 	bl	8004520 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d908      	bls.n	8006b6c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e189      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b6c:	4b36      	ldr	r3, [pc, #216]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e6      	bne.n	8006b48 <HAL_RCC_OscConfig+0x660>
 8006b7a:	e045      	b.n	8006c08 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fd fcd0 	bl	8004520 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b82:	e011      	b.n	8006ba8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b84:	f7fd fccc 	bl	8004520 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d908      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b96:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e16b      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e6      	bne.n	8006b84 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006bb6:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d021      	beq.n	8006c08 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bc4:	4b20      	ldr	r3, [pc, #128]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bd4:	e011      	b.n	8006bfa <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fd fca3 	bl	8004520 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d908      	bls.n	8006bfa <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006be8:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e142      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e6      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d105      	bne.n	8006c1a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c12:	4a0d      	ldr	r2, [pc, #52]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d04f      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d028      	beq.n	8006c80 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c2e:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c34:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <HAL_RCC_OscConfig+0x760>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3e:	f7fd fc6f 	bl	8004520 <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c44:	e014      	b.n	8006c70 <HAL_RCC_OscConfig+0x788>
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c50:	f7fd fc66 	bl	8004520 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d908      	bls.n	8006c70 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c5e:	4b8a      	ldr	r3, [pc, #552]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e107      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c70:	4b85      	ldr	r3, [pc, #532]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0e8      	beq.n	8006c50 <HAL_RCC_OscConfig+0x768>
 8006c7e:	e022      	b.n	8006cc6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c80:	4b81      	ldr	r3, [pc, #516]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c86:	4a80      	ldr	r2, [pc, #512]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7fd fc46 	bl	8004520 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c96:	e00f      	b.n	8006cb8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c98:	f7fd fc42 	bl	8004520 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d908      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ca6:	4b78      	ldr	r3, [pc, #480]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e0e3      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cb8:	4b73      	ldr	r3, [pc, #460]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e8      	bne.n	8006c98 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80d7 	beq.w	8006e7e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cd0:	4b6d      	ldr	r3, [pc, #436]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b0c      	cmp	r3, #12
 8006cda:	f000 8091 	beq.w	8006e00 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d166      	bne.n	8006db4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce6:	4b68      	ldr	r3, [pc, #416]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a67      	ldr	r2, [pc, #412]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf2:	f7fd fc15 	bl	8004520 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cf8:	e00e      	b.n	8006d18 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfa:	f7fd fc11 	bl	8004520 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d907      	bls.n	8006d18 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d08:	4b5f      	ldr	r3, [pc, #380]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e0b3      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d18:	4b5b      	ldr	r3, [pc, #364]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ea      	bne.n	8006cfa <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d24:	4b58      	ldr	r3, [pc, #352]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	4b58      	ldr	r3, [pc, #352]	; (8006e8c <HAL_RCC_OscConfig+0x9a4>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d34:	3a01      	subs	r2, #1
 8006d36:	0112      	lsls	r2, r2, #4
 8006d38:	4311      	orrs	r1, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d3e:	0212      	lsls	r2, r2, #8
 8006d40:	4311      	orrs	r1, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d46:	0852      	lsrs	r2, r2, #1
 8006d48:	3a01      	subs	r2, #1
 8006d4a:	0552      	lsls	r2, r2, #21
 8006d4c:	4311      	orrs	r1, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006d52:	0852      	lsrs	r2, r2, #1
 8006d54:	3a01      	subs	r2, #1
 8006d56:	0652      	lsls	r2, r2, #25
 8006d58:	4311      	orrs	r1, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d5e:	06d2      	lsls	r2, r2, #27
 8006d60:	430a      	orrs	r2, r1
 8006d62:	4949      	ldr	r1, [pc, #292]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d68:	4b47      	ldr	r3, [pc, #284]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a46      	ldr	r2, [pc, #280]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d74:	4b44      	ldr	r3, [pc, #272]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4a43      	ldr	r2, [pc, #268]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7fd fbce 	bl	8004520 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d86:	e00e      	b.n	8006da6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d88:	f7fd fbca 	bl	8004520 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d907      	bls.n	8006da6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d96:	4b3c      	ldr	r3, [pc, #240]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e06c      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006da6:	4b38      	ldr	r3, [pc, #224]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ea      	beq.n	8006d88 <HAL_RCC_OscConfig+0x8a0>
 8006db2:	e064      	b.n	8006e7e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006db4:	4b34      	ldr	r3, [pc, #208]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a33      	ldr	r2, [pc, #204]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fd fbae 	bl	8004520 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dc6:	e00e      	b.n	8006de6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc8:	f7fd fbaa 	bl	8004520 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d907      	bls.n	8006de6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dd6:	4b2c      	ldr	r3, [pc, #176]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e04c      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de6:	4b28      	ldr	r3, [pc, #160]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1ea      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006df2:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	4924      	ldr	r1, [pc, #144]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006df8:	4b25      	ldr	r3, [pc, #148]	; (8006e90 <HAL_RCC_OscConfig+0x9a8>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	60cb      	str	r3, [r1, #12]
 8006dfe:	e03e      	b.n	8006e7e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e039      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8006e0c:	4b1e      	ldr	r3, [pc, #120]	; (8006e88 <HAL_RCC_OscConfig+0x9a0>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f003 0203 	and.w	r2, r3, #3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d12c      	bne.n	8006e7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d123      	bne.n	8006e7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d11b      	bne.n	8006e7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d113      	bne.n	8006e7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d109      	bne.n	8006e7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e70:	085b      	lsrs	r3, r3, #1
 8006e72:	3b01      	subs	r3, #1
 8006e74:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d001      	beq.n	8006e7e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	019f800c 	.word	0x019f800c
 8006e90:	feeefffc 	.word	0xfeeefffc

08006e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e11c      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006eac:	4b90      	ldr	r3, [pc, #576]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d910      	bls.n	8006edc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eba:	4b8d      	ldr	r3, [pc, #564]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f023 020f 	bic.w	r2, r3, #15
 8006ec2:	498b      	ldr	r1, [pc, #556]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eca:	4b89      	ldr	r3, [pc, #548]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d001      	beq.n	8006edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e104      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d010      	beq.n	8006f0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	4b81      	ldr	r3, [pc, #516]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d908      	bls.n	8006f0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef8:	4b7e      	ldr	r3, [pc, #504]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	497b      	ldr	r1, [pc, #492]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8085 	beq.w	8007022 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d11f      	bne.n	8006f60 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f20:	4b74      	ldr	r3, [pc, #464]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0da      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f30:	f000 fa26 	bl	8007380 <RCC_GetSysClockFreqFromPLLSource>
 8006f34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4a6f      	ldr	r2, [pc, #444]	; (80070f8 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d947      	bls.n	8006fce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006f3e:	4b6d      	ldr	r3, [pc, #436]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d141      	bne.n	8006fce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f4a:	4b6a      	ldr	r3, [pc, #424]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f52:	4a68      	ldr	r2, [pc, #416]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	e036      	b.n	8006fce <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d107      	bne.n	8006f78 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f68:	4b62      	ldr	r3, [pc, #392]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d115      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e0b6      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d107      	bne.n	8006f90 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f80:	4b5c      	ldr	r3, [pc, #368]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0aa      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f90:	4b58      	ldr	r3, [pc, #352]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e0a2      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fa0:	f000 f8b0 	bl	8007104 <HAL_RCC_GetSysClockFreq>
 8006fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4a53      	ldr	r2, [pc, #332]	; (80070f8 <HAL_RCC_ClockConfig+0x264>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d90f      	bls.n	8006fce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006fae:	4b51      	ldr	r3, [pc, #324]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fba:	4b4e      	ldr	r3, [pc, #312]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fc2:	4a4c      	ldr	r2, [pc, #304]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fce:	4b49      	ldr	r3, [pc, #292]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f023 0203 	bic.w	r2, r3, #3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	4946      	ldr	r1, [pc, #280]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe0:	f7fd fa9e 	bl	8004520 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe6:	e013      	b.n	8007010 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe8:	f7fd fa9a 	bl	8004520 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d90a      	bls.n	8007010 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffa:	4b3e      	ldr	r3, [pc, #248]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 020c 	and.w	r2, r3, #12
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e06a      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007010:	4b38      	ldr	r3, [pc, #224]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 020c 	and.w	r2, r3, #12
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	429a      	cmp	r2, r3
 8007020:	d1e2      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d105      	bne.n	8007034 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007028:	4b32      	ldr	r3, [pc, #200]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	4a31      	ldr	r2, [pc, #196]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 800702e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007032:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d010      	beq.n	8007062 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	4b2b      	ldr	r3, [pc, #172]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800704c:	429a      	cmp	r2, r3
 800704e:	d208      	bcs.n	8007062 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007050:	4b28      	ldr	r3, [pc, #160]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4925      	ldr	r1, [pc, #148]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 800705e:	4313      	orrs	r3, r2
 8007060:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007062:	4b23      	ldr	r3, [pc, #140]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d210      	bcs.n	8007092 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007070:	4b1f      	ldr	r3, [pc, #124]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f023 020f 	bic.w	r2, r3, #15
 8007078:	491d      	ldr	r1, [pc, #116]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <HAL_RCC_ClockConfig+0x25c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d001      	beq.n	8007092 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e029      	b.n	80070e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d008      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	4912      	ldr	r1, [pc, #72]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0308 	and.w	r3, r3, #8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	490a      	ldr	r1, [pc, #40]	; (80070f4 <HAL_RCC_ClockConfig+0x260>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80070d0:	f000 f8b6 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 80070d4:	4603      	mov	r3, r0
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <HAL_RCC_ClockConfig+0x268>)
 80070d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <HAL_RCC_ClockConfig+0x26c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fd f9ce 	bl	8004480 <HAL_InitTick>
 80070e4:	4603      	mov	r3, r0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40022000 	.word	0x40022000
 80070f4:	40021000 	.word	0x40021000
 80070f8:	04c4b400 	.word	0x04c4b400
 80070fc:	20000004 	.word	0x20000004
 8007100:	20000008 	.word	0x20000008

08007104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007104:	b480      	push	{r7}
 8007106:	b089      	sub	sp, #36	; 0x24
 8007108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	2300      	movs	r3, #0
 8007110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007112:	4b47      	ldr	r3, [pc, #284]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 030c 	and.w	r3, r3, #12
 800711a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800711c:	4b44      	ldr	r3, [pc, #272]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_RCC_GetSysClockFreq+0x34>
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b0c      	cmp	r3, #12
 8007130:	d121      	bne.n	8007176 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d11e      	bne.n	8007176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007138:	4b3d      	ldr	r3, [pc, #244]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d107      	bne.n	8007154 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007144:	4b3a      	ldr	r3, [pc, #232]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e005      	b.n	8007160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007154:	4b36      	ldr	r3, [pc, #216]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	091b      	lsrs	r3, r3, #4
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8007160:	4a34      	ldr	r2, [pc, #208]	; (8007234 <HAL_RCC_GetSysClockFreq+0x130>)
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007168:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10d      	bne.n	800718c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007174:	e00a      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d102      	bne.n	8007182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800717c:	4b2e      	ldr	r3, [pc, #184]	; (8007238 <HAL_RCC_GetSysClockFreq+0x134>)
 800717e:	61bb      	str	r3, [r7, #24]
 8007180:	e004      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d101      	bne.n	800718c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007188:	4b2c      	ldr	r3, [pc, #176]	; (800723c <HAL_RCC_GetSysClockFreq+0x138>)
 800718a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b0c      	cmp	r3, #12
 8007190:	d146      	bne.n	8007220 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007192:	4b27      	ldr	r3, [pc, #156]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800719c:	4b24      	ldr	r3, [pc, #144]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	091b      	lsrs	r3, r3, #4
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	3301      	adds	r3, #1
 80071a8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d003      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0xb4>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d00d      	beq.n	80071d2 <HAL_RCC_GetSysClockFreq+0xce>
 80071b6:	e019      	b.n	80071ec <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071b8:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <HAL_RCC_GetSysClockFreq+0x134>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c0:	4a1b      	ldr	r2, [pc, #108]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 80071c2:	68d2      	ldr	r2, [r2, #12]
 80071c4:	0a12      	lsrs	r2, r2, #8
 80071c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	617b      	str	r3, [r7, #20]
        break;
 80071d0:	e019      	b.n	8007206 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071d2:	4a1a      	ldr	r2, [pc, #104]	; (800723c <HAL_RCC_GetSysClockFreq+0x138>)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071da:	4a15      	ldr	r2, [pc, #84]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 80071dc:	68d2      	ldr	r2, [r2, #12]
 80071de:	0a12      	lsrs	r2, r2, #8
 80071e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071e4:	fb02 f303 	mul.w	r3, r2, r3
 80071e8:	617b      	str	r3, [r7, #20]
        break;
 80071ea:	e00c      	b.n	8007206 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ec:	69fa      	ldr	r2, [r7, #28]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	4a0e      	ldr	r2, [pc, #56]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 80071f6:	68d2      	ldr	r2, [r2, #12]
 80071f8:	0a12      	lsrs	r2, r2, #8
 80071fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
 8007202:	617b      	str	r3, [r7, #20]
        break;
 8007204:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	0e5b      	lsrs	r3, r3, #25
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	3301      	adds	r3, #1
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007220:	69bb      	ldr	r3, [r7, #24]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3724      	adds	r7, #36	; 0x24
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40021000 	.word	0x40021000
 8007234:	0800bc1c 	.word	0x0800bc1c
 8007238:	00f42400 	.word	0x00f42400
 800723c:	007a1200 	.word	0x007a1200

08007240 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8007244:	f7ff ff5e 	bl	8007104 <HAL_RCC_GetSysClockFreq>
 8007248:	4602      	mov	r2, r0
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <HAL_RCC_GetHCLKFreq+0x20>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	4903      	ldr	r1, [pc, #12]	; (8007264 <HAL_RCC_GetHCLKFreq+0x24>)
 8007256:	5ccb      	ldrb	r3, [r1, r3]
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800725c:	4618      	mov	r0, r3
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40021000 	.word	0x40021000
 8007264:	0800bc04 	.word	0x0800bc04

08007268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800726c:	f7ff ffe8 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8007270:	4602      	mov	r2, r0
 8007272:	4b05      	ldr	r3, [pc, #20]	; (8007288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	0a1b      	lsrs	r3, r3, #8
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	4903      	ldr	r1, [pc, #12]	; (800728c <HAL_RCC_GetPCLK1Freq+0x24>)
 800727e:	5ccb      	ldrb	r3, [r1, r3]
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007284:	4618      	mov	r0, r3
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40021000 	.word	0x40021000
 800728c:	0800bc14 	.word	0x0800bc14

08007290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007294:	f7ff ffd4 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	0adb      	lsrs	r3, r3, #11
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	4903      	ldr	r1, [pc, #12]	; (80072b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40021000 	.word	0x40021000
 80072b4:	0800bc14 	.word	0x0800bc14

080072b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80072c4:	4b2c      	ldr	r3, [pc, #176]	; (8007378 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80072d0:	f7ff f86c 	bl	80063ac <HAL_PWREx_GetVoltageRange>
 80072d4:	6138      	str	r0, [r7, #16]
 80072d6:	e014      	b.n	8007302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80072d8:	4b27      	ldr	r3, [pc, #156]	; (8007378 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	4a26      	ldr	r2, [pc, #152]	; (8007378 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80072de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e2:	6593      	str	r3, [r2, #88]	; 0x58
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80072e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80072f0:	f7ff f85c 	bl	80063ac <HAL_PWREx_GetVoltageRange>
 80072f4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80072f6:	4b20      	ldr	r3, [pc, #128]	; (8007378 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80072fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007300:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730e:	d10b      	bne.n	8007328 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b80      	cmp	r3, #128	; 0x80
 8007314:	d919      	bls.n	800734a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2ba0      	cmp	r3, #160	; 0xa0
 800731a:	d902      	bls.n	8007322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800731c:	2302      	movs	r3, #2
 800731e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8007320:	e013      	b.n	800734a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007322:	2301      	movs	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8007326:	e010      	b.n	800734a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d902      	bls.n	8007334 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800732e:	2303      	movs	r3, #3
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e00a      	b.n	800734a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b80      	cmp	r3, #128	; 0x80
 8007338:	d102      	bne.n	8007340 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800733a:	2302      	movs	r3, #2
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	e004      	b.n	800734a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b70      	cmp	r3, #112	; 0x70
 8007344:	d101      	bne.n	800734a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007346:	2301      	movs	r3, #1
 8007348:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800734a:	4b0c      	ldr	r3, [pc, #48]	; (800737c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f023 020f 	bic.w	r2, r3, #15
 8007352:	490a      	ldr	r1, [pc, #40]	; (800737c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800735a:	4b08      	ldr	r3, [pc, #32]	; (800737c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	429a      	cmp	r2, r3
 8007366:	d001      	beq.n	800736c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40021000 	.word	0x40021000
 800737c:	40022000 	.word	0x40022000

08007380 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007386:	4b31      	ldr	r3, [pc, #196]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007390:	4b2e      	ldr	r3, [pc, #184]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	091b      	lsrs	r3, r3, #4
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	3301      	adds	r3, #1
 800739c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d015      	beq.n	80073d0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d839      	bhi.n	800741e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d01c      	beq.n	80073ea <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d133      	bne.n	800741e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073b6:	4a26      	ldr	r2, [pc, #152]	; (8007450 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	4a23      	ldr	r2, [pc, #140]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80073c0:	68d2      	ldr	r2, [r2, #12]
 80073c2:	0a12      	lsrs	r2, r2, #8
 80073c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	613b      	str	r3, [r7, #16]
      break;
 80073ce:	e029      	b.n	8007424 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073d0:	4a20      	ldr	r2, [pc, #128]	; (8007454 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	4a1c      	ldr	r2, [pc, #112]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80073da:	68d2      	ldr	r2, [r2, #12]
 80073dc:	0a12      	lsrs	r2, r2, #8
 80073de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	613b      	str	r3, [r7, #16]
      break;
 80073e8:	e01c      	b.n	8007424 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80073ea:	4b18      	ldr	r3, [pc, #96]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d107      	bne.n	8007406 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80073f6:	4b15      	ldr	r3, [pc, #84]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80073f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	e005      	b.n	8007412 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007406:	4b11      	ldr	r3, [pc, #68]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	091b      	lsrs	r3, r3, #4
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8007412:	4a11      	ldr	r2, [pc, #68]	; (8007458 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800741a:	613b      	str	r3, [r7, #16]
        break;
 800741c:	e002      	b.n	8007424 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	613b      	str	r3, [r7, #16]
      break;
 8007422:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8007424:	4b09      	ldr	r3, [pc, #36]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	0e5b      	lsrs	r3, r3, #25
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	3301      	adds	r3, #1
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	fbb2 f3f3 	udiv	r3, r2, r3
 800743c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800743e:	683b      	ldr	r3, [r7, #0]
}
 8007440:	4618      	mov	r0, r3
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40021000 	.word	0x40021000
 8007450:	00f42400 	.word	0x00f42400
 8007454:	007a1200 	.word	0x007a1200
 8007458:	0800bc1c 	.word	0x0800bc1c

0800745c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007464:	2300      	movs	r3, #0
 8007466:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007468:	2300      	movs	r3, #0
 800746a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007474:	2b00      	cmp	r3, #0
 8007476:	d040      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800747c:	2b80      	cmp	r3, #128	; 0x80
 800747e:	d02a      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007480:	2b80      	cmp	r3, #128	; 0x80
 8007482:	d825      	bhi.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007484:	2b60      	cmp	r3, #96	; 0x60
 8007486:	d026      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007488:	2b60      	cmp	r3, #96	; 0x60
 800748a:	d821      	bhi.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d006      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d81d      	bhi.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007498:	2b20      	cmp	r3, #32
 800749a:	d010      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800749c:	e018      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800749e:	4b8f      	ldr	r3, [pc, #572]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	4a8e      	ldr	r2, [pc, #568]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074aa:	e015      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fb56 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074bc:	e00c      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3320      	adds	r3, #32
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fc33 	bl	8007d30 <RCCEx_PLLSAI2_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074ce:	e003      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	77fb      	strb	r3, [r7, #31]
        break;
 80074d4:	e000      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80074d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d8:	7ffb      	ldrb	r3, [r7, #31]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10b      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074de:	4b7f      	ldr	r3, [pc, #508]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074e4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ec:	497b      	ldr	r1, [pc, #492]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80074f4:	e001      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	7ffb      	ldrb	r3, [r7, #31]
 80074f8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d047      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750e:	d030      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007514:	d82a      	bhi.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800751a:	d02a      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800751c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007520:	d824      	bhi.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007526:	d008      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752c:	d81e      	bhi.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007536:	d010      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007538:	e018      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800753a:	4b68      	ldr	r3, [pc, #416]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	4a67      	ldr	r2, [pc, #412]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007544:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007546:	e015      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fb08 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007558:	e00c      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3320      	adds	r3, #32
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fbe5 	bl	8007d30 <RCCEx_PLLSAI2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800756a:	e003      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	77fb      	strb	r3, [r7, #31]
        break;
 8007570:	e000      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8007572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007574:	7ffb      	ldrb	r3, [r7, #31]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800757a:	4b58      	ldr	r3, [pc, #352]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800757c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	4954      	ldr	r1, [pc, #336]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007590:	e001      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007592:	7ffb      	ldrb	r3, [r7, #31]
 8007594:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80ab 	beq.w	80076fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075a8:	4b4c      	ldr	r3, [pc, #304]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10d      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075b4:	4b49      	ldr	r3, [pc, #292]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b8:	4a48      	ldr	r2, [pc, #288]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075be:	6593      	str	r3, [r2, #88]	; 0x58
 80075c0:	4b46      	ldr	r3, [pc, #280]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075d0:	4b43      	ldr	r3, [pc, #268]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a42      	ldr	r2, [pc, #264]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80075d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075dc:	f7fc ffa0 	bl	8004520 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e2:	e00f      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e4:	f7fc ff9c 	bl	8004520 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d908      	bls.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f2:	4b3b      	ldr	r3, [pc, #236]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8007602:	e006      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007604:	4b36      	ldr	r3, [pc, #216]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0e9      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8007610:	e000      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8007612:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8007614:	7ffb      	ldrb	r3, [r7, #31]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d164      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800761a:	4b30      	ldr	r3, [pc, #192]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007624:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01f      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	429a      	cmp	r2, r3
 8007636:	d019      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007638:	4b28      	ldr	r3, [pc, #160]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800763a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007642:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007644:	4b25      	ldr	r3, [pc, #148]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764a:	4a24      	ldr	r2, [pc, #144]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800764c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007654:	4b21      	ldr	r3, [pc, #132]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	4a20      	ldr	r2, [pc, #128]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800765c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007664:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01f      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007676:	f7fc ff53 	bl	8004520 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800767c:	e012      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767e:	f7fc ff4f 	bl	8004520 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	f241 3288 	movw	r2, #5000	; 0x1388
 800768c:	4293      	cmp	r3, r2
 800768e:	d909      	bls.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80076a2:	e007      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076a4:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0e5      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80076b2:	e000      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80076b4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80076b6:	7ffb      	ldrb	r3, [r7, #31]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10c      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076bc:	4b07      	ldr	r3, [pc, #28]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076cc:	4903      	ldr	r1, [pc, #12]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80076d4:	e008      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076d6:	7ffb      	ldrb	r3, [r7, #31]
 80076d8:	77bb      	strb	r3, [r7, #30]
 80076da:	e005      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80076dc:	40021000 	.word	0x40021000
 80076e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e4:	7ffb      	ldrb	r3, [r7, #31]
 80076e6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d105      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ee:	4b9c      	ldr	r3, [pc, #624]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80076f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f2:	4a9b      	ldr	r2, [pc, #620]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80076f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007706:	4b96      	ldr	r3, [pc, #600]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770c:	f023 0203 	bic.w	r2, r3, #3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007714:	4992      	ldr	r1, [pc, #584]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007716:	4313      	orrs	r3, r2
 8007718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00a      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007728:	4b8d      	ldr	r3, [pc, #564]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800772a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772e:	f023 020c 	bic.w	r2, r3, #12
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	498a      	ldr	r1, [pc, #552]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007738:	4313      	orrs	r3, r2
 800773a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0304 	and.w	r3, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800774a:	4b85      	ldr	r3, [pc, #532]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800774c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007758:	4981      	ldr	r1, [pc, #516]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800776c:	4b7c      	ldr	r3, [pc, #496]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4979      	ldr	r1, [pc, #484]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800777c:	4313      	orrs	r3, r2
 800777e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800778e:	4b74      	ldr	r3, [pc, #464]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	4970      	ldr	r1, [pc, #448]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077b0:	4b6b      	ldr	r3, [pc, #428]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077be:	4968      	ldr	r1, [pc, #416]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077d2:	4b63      	ldr	r3, [pc, #396]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	495f      	ldr	r1, [pc, #380]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077f4:	4b5a      	ldr	r3, [pc, #360]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007802:	4957      	ldr	r1, [pc, #348]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007804:	4313      	orrs	r3, r2
 8007806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007816:	4b52      	ldr	r3, [pc, #328]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007824:	494e      	ldr	r1, [pc, #312]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d031      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800783c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007840:	d00e      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007846:	d814      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d015      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800784c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007850:	d10f      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007852:	4b43      	ldr	r3, [pc, #268]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	4a42      	ldr	r2, [pc, #264]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800785c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800785e:	e00c      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3304      	adds	r3, #4
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f000 f97c 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007870:	e003      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	77fb      	strb	r3, [r7, #31]
        break;
 8007876:	e000      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8007878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787a:	7ffb      	ldrb	r3, [r7, #31]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007880:	4b37      	ldr	r3, [pc, #220]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007886:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800788e:	4934      	ldr	r1, [pc, #208]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007896:	e001      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007898:	7ffb      	ldrb	r3, [r7, #31]
 800789a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078a8:	4b2d      	ldr	r3, [pc, #180]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	492a      	ldr	r1, [pc, #168]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078ca:	4b25      	ldr	r3, [pc, #148]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d8:	4921      	ldr	r1, [pc, #132]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078ec:	4b1c      	ldr	r3, [pc, #112]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fa:	4919      	ldr	r1, [pc, #100]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800790e:	4b14      	ldr	r3, [pc, #80]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007914:	f023 0203 	bic.w	r2, r3, #3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791c:	4910      	ldr	r1, [pc, #64]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800791e:	4313      	orrs	r3, r2
 8007920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02b      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	4908      	ldr	r1, [pc, #32]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800794e:	d109      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007950:	4b03      	ldr	r3, [pc, #12]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4a02      	ldr	r2, [pc, #8]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800795a:	60d3      	str	r3, [r2, #12]
 800795c:	e014      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800795e:	bf00      	nop
 8007960:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800796c:	d10c      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	2101      	movs	r1, #1
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f8f5 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800797e:	7ffb      	ldrb	r3, [r7, #31]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8007984:	7ffb      	ldrb	r3, [r7, #31]
 8007986:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d04a      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800799c:	d108      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800799e:	4b70      	ldr	r3, [pc, #448]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80079a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079a4:	4a6e      	ldr	r2, [pc, #440]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80079a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80079ae:	e012      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80079b0:	4b6b      	ldr	r3, [pc, #428]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079be:	4968      	ldr	r1, [pc, #416]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079c6:	4b66      	ldr	r3, [pc, #408]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80079c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079cc:	4a64      	ldr	r2, [pc, #400]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80079ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079de:	d10d      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3304      	adds	r3, #4
 80079e4:	2101      	movs	r1, #1
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f8bc 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80079f0:	7ffb      	ldrb	r3, [r7, #31]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d019      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80079f6:	7ffb      	ldrb	r3, [r7, #31]
 80079f8:	77bb      	strb	r3, [r7, #30]
 80079fa:	e016      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a04:	d106      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a06:	4b56      	ldr	r3, [pc, #344]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	4a55      	ldr	r2, [pc, #340]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a10:	60d3      	str	r3, [r2, #12]
 8007a12:	e00a      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a1c:	d105      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a1e:	4b50      	ldr	r3, [pc, #320]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	4a4f      	ldr	r2, [pc, #316]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a28:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d028      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a36:	4b4a      	ldr	r3, [pc, #296]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a44:	4946      	ldr	r1, [pc, #280]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a54:	d106      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a56:	4b42      	ldr	r3, [pc, #264]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	4a41      	ldr	r2, [pc, #260]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a60:	60d3      	str	r3, [r2, #12]
 8007a62:	e011      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a6c:	d10c      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	2101      	movs	r1, #1
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f875 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007a7e:	7ffb      	ldrb	r3, [r7, #31]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8007a84:	7ffb      	ldrb	r3, [r7, #31]
 8007a86:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01e      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a94:	4b32      	ldr	r3, [pc, #200]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa4:	492e      	ldr	r1, [pc, #184]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab6:	d10c      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	2102      	movs	r1, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f850 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007ac8:	7ffb      	ldrb	r3, [r7, #31]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8007ace:	7ffb      	ldrb	r3, [r7, #31]
 8007ad0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ade:	4b20      	ldr	r3, [pc, #128]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ae4:	f023 0204 	bic.w	r2, r3, #4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aee:	491c      	ldr	r1, [pc, #112]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b08:	f023 0218 	bic.w	r2, r3, #24
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b12:	4913      	ldr	r1, [pc, #76]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d017      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007b26:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b36:	490a      	ldr	r1, [pc, #40]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b48:	d105      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b4a:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	4a04      	ldr	r2, [pc, #16]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b54:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007b56:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	40021000 	.word	0x40021000

08007b64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d018      	beq.n	8007bac <RCCEx_PLLSAI1_Config+0x48>
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d81f      	bhi.n	8007bbe <RCCEx_PLLSAI1_Config+0x5a>
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d002      	beq.n	8007b88 <RCCEx_PLLSAI1_Config+0x24>
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d009      	beq.n	8007b9a <RCCEx_PLLSAI1_Config+0x36>
 8007b86:	e01a      	b.n	8007bbe <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b88:	4b65      	ldr	r3, [pc, #404]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d117      	bne.n	8007bc4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b98:	e014      	b.n	8007bc4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b9a:	4b61      	ldr	r3, [pc, #388]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d110      	bne.n	8007bc8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007baa:	e00d      	b.n	8007bc8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007bac:	4b5c      	ldr	r3, [pc, #368]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bbc:	e006      	b.n	8007bcc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc2:	e004      	b.n	8007bce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007bc4:	bf00      	nop
 8007bc6:	e002      	b.n	8007bce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007bc8:	bf00      	nop
 8007bca:	e000      	b.n	8007bce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007bcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f040 809f 	bne.w	8007d14 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007bd6:	4b52      	ldr	r3, [pc, #328]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a51      	ldr	r2, [pc, #324]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007bdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be2:	f7fc fc9d 	bl	8004520 <HAL_GetTick>
 8007be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007be8:	e00f      	b.n	8007c0a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bea:	f7fc fc99 	bl	8004520 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d908      	bls.n	8007c0a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007bf8:	4b49      	ldr	r3, [pc, #292]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c08:	e006      	b.n	8007c18 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c0a:	4b45      	ldr	r3, [pc, #276]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e9      	bne.n	8007bea <RCCEx_PLLSAI1_Config+0x86>
 8007c16:	e000      	b.n	8007c1a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8007c18:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d179      	bne.n	8007d14 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d116      	bne.n	8007c54 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c26:	4b3e      	ldr	r3, [pc, #248]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	4b3e      	ldr	r3, [pc, #248]	; (8007d24 <RCCEx_PLLSAI1_Config+0x1c0>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6892      	ldr	r2, [r2, #8]
 8007c32:	0211      	lsls	r1, r2, #8
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	68d2      	ldr	r2, [r2, #12]
 8007c38:	06d2      	lsls	r2, r2, #27
 8007c3a:	4311      	orrs	r1, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6852      	ldr	r2, [r2, #4]
 8007c40:	3a01      	subs	r2, #1
 8007c42:	0112      	lsls	r2, r2, #4
 8007c44:	4311      	orrs	r1, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	4934      	ldr	r1, [pc, #208]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	610b      	str	r3, [r1, #16]
 8007c52:	e033      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d118      	bne.n	8007c8c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c5a:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	4b32      	ldr	r3, [pc, #200]	; (8007d28 <RCCEx_PLLSAI1_Config+0x1c4>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6892      	ldr	r2, [r2, #8]
 8007c66:	0211      	lsls	r1, r2, #8
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6912      	ldr	r2, [r2, #16]
 8007c6c:	0852      	lsrs	r2, r2, #1
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	0552      	lsls	r2, r2, #21
 8007c72:	4311      	orrs	r1, r2
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6852      	ldr	r2, [r2, #4]
 8007c78:	3a01      	subs	r2, #1
 8007c7a:	0112      	lsls	r2, r2, #4
 8007c7c:	4311      	orrs	r1, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	4926      	ldr	r1, [pc, #152]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	610b      	str	r3, [r1, #16]
 8007c8a:	e017      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c8c:	4b24      	ldr	r3, [pc, #144]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	4b26      	ldr	r3, [pc, #152]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1c8>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6892      	ldr	r2, [r2, #8]
 8007c98:	0211      	lsls	r1, r2, #8
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6952      	ldr	r2, [r2, #20]
 8007c9e:	0852      	lsrs	r2, r2, #1
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	0652      	lsls	r2, r2, #25
 8007ca4:	4311      	orrs	r1, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6852      	ldr	r2, [r2, #4]
 8007caa:	3a01      	subs	r2, #1
 8007cac:	0112      	lsls	r2, r2, #4
 8007cae:	4311      	orrs	r1, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	491a      	ldr	r1, [pc, #104]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cbc:	4b18      	ldr	r3, [pc, #96]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007cc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc8:	f7fc fc2a 	bl	8004520 <HAL_GetTick>
 8007ccc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cce:	e00f      	b.n	8007cf0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cd0:	f7fc fc26 	bl	8004520 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d908      	bls.n	8007cf0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cde:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8007cee:	e006      	b.n	8007cfe <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0e9      	beq.n	8007cd0 <RCCEx_PLLSAI1_Config+0x16c>
 8007cfc:	e000      	b.n	8007d00 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8007cfe:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8007d06:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007d08:	691a      	ldr	r2, [r3, #16]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	4904      	ldr	r1, [pc, #16]	; (8007d20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40021000 	.word	0x40021000
 8007d24:	07ff800c 	.word	0x07ff800c
 8007d28:	ff9f800c 	.word	0xff9f800c
 8007d2c:	f9ff800c 	.word	0xf9ff800c

08007d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d018      	beq.n	8007d78 <RCCEx_PLLSAI2_Config+0x48>
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d81f      	bhi.n	8007d8a <RCCEx_PLLSAI2_Config+0x5a>
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d002      	beq.n	8007d54 <RCCEx_PLLSAI2_Config+0x24>
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d009      	beq.n	8007d66 <RCCEx_PLLSAI2_Config+0x36>
 8007d52:	e01a      	b.n	8007d8a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d54:	4b4a      	ldr	r3, [pc, #296]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d117      	bne.n	8007d90 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d64:	e014      	b.n	8007d90 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d66:	4b46      	ldr	r3, [pc, #280]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d110      	bne.n	8007d94 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d76:	e00d      	b.n	8007d94 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007d78:	4b41      	ldr	r3, [pc, #260]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d88:	e006      	b.n	8007d98 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d8e:	e004      	b.n	8007d9a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007d98:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d169      	bne.n	8007e74 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007da0:	4b37      	ldr	r3, [pc, #220]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a36      	ldr	r2, [pc, #216]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dac:	f7fc fbb8 	bl	8004520 <HAL_GetTick>
 8007db0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007db2:	e00f      	b.n	8007dd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007db4:	f7fc fbb4 	bl	8004520 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d908      	bls.n	8007dd4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007dc2:	4b2f      	ldr	r3, [pc, #188]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007dd2:	e006      	b.n	8007de2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007dd4:	4b2a      	ldr	r3, [pc, #168]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e9      	bne.n	8007db4 <RCCEx_PLLSAI2_Config+0x84>
 8007de0:	e000      	b.n	8007de4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8007de2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d144      	bne.n	8007e74 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d115      	bne.n	8007e1c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007df0:	4b23      	ldr	r3, [pc, #140]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007df2:	695a      	ldr	r2, [r3, #20]
 8007df4:	4b23      	ldr	r3, [pc, #140]	; (8007e84 <RCCEx_PLLSAI2_Config+0x154>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6892      	ldr	r2, [r2, #8]
 8007dfc:	0211      	lsls	r1, r2, #8
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68d2      	ldr	r2, [r2, #12]
 8007e02:	06d2      	lsls	r2, r2, #27
 8007e04:	4311      	orrs	r1, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6852      	ldr	r2, [r2, #4]
 8007e0a:	3a01      	subs	r2, #1
 8007e0c:	0112      	lsls	r2, r2, #4
 8007e0e:	4311      	orrs	r1, r2
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	491a      	ldr	r1, [pc, #104]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007e1c:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e28:	f7fc fb7a 	bl	8004520 <HAL_GetTick>
 8007e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e2e:	e00f      	b.n	8007e50 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e30:	f7fc fb76 	bl	8004520 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d908      	bls.n	8007e50 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e3e:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8007e4e:	e006      	b.n	8007e5e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0e9      	beq.n	8007e30 <RCCEx_PLLSAI2_Config+0x100>
 8007e5c:	e000      	b.n	8007e60 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8007e5e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8007e66:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007e68:	695a      	ldr	r2, [r3, #20]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	4904      	ldr	r1, [pc, #16]	; (8007e80 <RCCEx_PLLSAI2_Config+0x150>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40021000 	.word	0x40021000
 8007e84:	07ff800c 	.word	0x07ff800c

08007e88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d066      	beq.n	8007f68 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fb fd4a 	bl	8003948 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b10      	cmp	r3, #16
 8007ec8:	d045      	beq.n	8007f56 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eca:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007ecc:	22ca      	movs	r2, #202	; 0xca
 8007ece:	625a      	str	r2, [r3, #36]	; 0x24
 8007ed0:	4b28      	ldr	r3, [pc, #160]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007ed2:	2253      	movs	r2, #83	; 0x53
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f872 	bl	8007fc0 <RTC_EnterInitMode>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d121      	bne.n	8007f2a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007ee6:	4b23      	ldr	r3, [pc, #140]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	4a22      	ldr	r2, [pc, #136]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007eec:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007ef6:	4b1f      	ldr	r3, [pc, #124]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6859      	ldr	r1, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	4319      	orrs	r1, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	491a      	ldr	r1, [pc, #104]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	4916      	ldr	r1, [pc, #88]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f881 	bl	8008028 <RTC_ExitInitMode>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10e      	bne.n	8007f4e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8007f30:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a19      	ldr	r1, [r3, #32]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	4319      	orrs	r1, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	430b      	orrs	r3, r1
 8007f48:	490a      	ldr	r1, [pc, #40]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <HAL_RTC_Init+0xec>)
 8007f50:	22ff      	movs	r2, #255	; 0xff
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24
 8007f54:	e001      	b.n	8007f5a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d103      	bne.n	8007f68 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	40002800 	.word	0x40002800

08007f78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8007f80:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <HAL_RTC_WaitForSynchro+0x40>)
 8007f82:	4a0e      	ldr	r2, [pc, #56]	; (8007fbc <HAL_RTC_WaitForSynchro+0x44>)
 8007f84:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007f86:	f7fc facb 	bl	8004520 <HAL_GetTick>
 8007f8a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007f8c:	e009      	b.n	8007fa2 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f8e:	f7fc fac7 	bl	8004520 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e006      	b.n	8007fb0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <HAL_RTC_WaitForSynchro+0x40>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0ef      	beq.n	8007f8e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	40002800 	.word	0x40002800
 8007fbc:	0001005c 	.word	0x0001005c

08007fc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007fcc:	4b15      	ldr	r3, [pc, #84]	; (8008024 <RTC_EnterInitMode+0x64>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d120      	bne.n	800801a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007fd8:	4b12      	ldr	r3, [pc, #72]	; (8008024 <RTC_EnterInitMode+0x64>)
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	4a11      	ldr	r2, [pc, #68]	; (8008024 <RTC_EnterInitMode+0x64>)
 8007fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007fe4:	f7fc fa9c 	bl	8004520 <HAL_GetTick>
 8007fe8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007fea:	e00d      	b.n	8008008 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007fec:	f7fc fa98 	bl	8004520 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ffa:	d905      	bls.n	8008008 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2203      	movs	r2, #3
 8008004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <RTC_EnterInitMode+0x64>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d102      	bne.n	800801a <RTC_EnterInitMode+0x5a>
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	2b03      	cmp	r3, #3
 8008018:	d1e8      	bne.n	8007fec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40002800 	.word	0x40002800

08008028 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008034:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <RTC_ExitInitMode+0x78>)
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	4a19      	ldr	r2, [pc, #100]	; (80080a0 <RTC_ExitInitMode+0x78>)
 800803a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800803e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008040:	4b17      	ldr	r3, [pc, #92]	; (80080a0 <RTC_ExitInitMode+0x78>)
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10c      	bne.n	8008066 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ff93 	bl	8007f78 <HAL_RTC_WaitForSynchro>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01e      	beq.n	8008096 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2203      	movs	r2, #3
 800805c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	73fb      	strb	r3, [r7, #15]
 8008064:	e017      	b.n	8008096 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008066:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <RTC_ExitInitMode+0x78>)
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	4a0d      	ldr	r2, [pc, #52]	; (80080a0 <RTC_ExitInitMode+0x78>)
 800806c:	f023 0320 	bic.w	r3, r3, #32
 8008070:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff ff80 	bl	8007f78 <HAL_RTC_WaitForSynchro>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2203      	movs	r2, #3
 8008082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800808a:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <RTC_ExitInitMode+0x78>)
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	4a04      	ldr	r2, [pc, #16]	; (80080a0 <RTC_ExitInitMode+0x78>)
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	40002800 	.word	0x40002800

080080a4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	490f      	ldr	r1, [pc, #60]	; (80080f4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	490c      	ldr	r1, [pc, #48]	; (80080f8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80080ca:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	6919      	ldr	r1, [r3, #16]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	041b      	lsls	r3, r3, #16
 80080dc:	430b      	orrs	r3, r1
 80080de:	4906      	ldr	r1, [pc, #24]	; (80080f8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40002800 	.word	0x40002800
 80080f8:	40003400 	.word	0x40003400

080080fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e042      	b.n	8008194 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fb ff3f 	bl	8003fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2224      	movs	r2, #36	; 0x24
 800812a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0201 	bic.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fd5e 	bl	8008c00 <UART_SetConfig>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d101      	bne.n	800814e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e022      	b.n	8008194 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 f852 	bl	8009200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800816a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800817a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 f8d9 	bl	8009344 <UART_CheckIdleState>
 8008192:	4603      	mov	r3, r0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08a      	sub	sp, #40	; 0x28
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	4613      	mov	r3, r2
 80081aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b2:	2b20      	cmp	r3, #32
 80081b4:	d17b      	bne.n	80082ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <HAL_UART_Transmit+0x26>
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e074      	b.n	80082b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2221      	movs	r2, #33	; 0x21
 80081d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081d6:	f7fc f9a3 	bl	8004520 <HAL_GetTick>
 80081da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	88fa      	ldrh	r2, [r7, #6]
 80081e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f4:	d108      	bne.n	8008208 <HAL_UART_Transmit+0x6c>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	61bb      	str	r3, [r7, #24]
 8008206:	e003      	b.n	8008210 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008210:	e030      	b.n	8008274 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2200      	movs	r2, #0
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f001 f93b 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2220      	movs	r2, #32
 800822c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e03d      	b.n	80082b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10b      	bne.n	8008252 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008248:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	3302      	adds	r3, #2
 800824e:	61bb      	str	r3, [r7, #24]
 8008250:	e007      	b.n	8008262 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	781a      	ldrb	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	3301      	adds	r3, #1
 8008260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008268:	b29b      	uxth	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1c8      	bne.n	8008212 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2200      	movs	r2, #0
 8008288:	2140      	movs	r1, #64	; 0x40
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f001 f904 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e006      	b.n	80082b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3720      	adds	r7, #32
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	; 0x28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d167      	bne.n	80083a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <HAL_UART_Transmit_DMA+0x24>
 80082d6:	88fb      	ldrh	r3, [r7, #6]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e060      	b.n	80083a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	88fa      	ldrh	r2, [r7, #6]
 80082f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2221      	movs	r2, #33	; 0x21
 8008302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d028      	beq.n	8008360 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008312:	4a26      	ldr	r2, [pc, #152]	; (80083ac <HAL_UART_Transmit_DMA+0xf4>)
 8008314:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831a:	4a25      	ldr	r2, [pc, #148]	; (80083b0 <HAL_UART_Transmit_DMA+0xf8>)
 800831c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008322:	4a24      	ldr	r2, [pc, #144]	; (80083b4 <HAL_UART_Transmit_DMA+0xfc>)
 8008324:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	2200      	movs	r2, #0
 800832c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008336:	4619      	mov	r1, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3328      	adds	r3, #40	; 0x28
 800833e:	461a      	mov	r2, r3
 8008340:	88fb      	ldrh	r3, [r7, #6]
 8008342:	f7fd fa75 	bl	8005830 <HAL_DMA_Start_IT>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2210      	movs	r2, #16
 8008350:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2220      	movs	r2, #32
 8008358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e020      	b.n	80083a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2240      	movs	r2, #64	; 0x40
 8008366:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	613b      	str	r3, [r7, #16]
   return(result);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008388:	623a      	str	r2, [r7, #32]
 800838a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	69f9      	ldr	r1, [r7, #28]
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	61bb      	str	r3, [r7, #24]
   return(result);
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e5      	bne.n	8008368 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3728      	adds	r7, #40	; 0x28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	08009803 	.word	0x08009803
 80083b0:	0800989d 	.word	0x0800989d
 80083b4:	08009a23 	.word	0x08009a23

080083b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d137      	bne.n	8008440 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_UART_Receive_DMA+0x24>
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e030      	b.n	8008442 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a18      	ldr	r2, [pc, #96]	; (800844c <HAL_UART_Receive_DMA+0x94>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d01f      	beq.n	8008430 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d018      	beq.n	8008430 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	613b      	str	r3, [r7, #16]
   return(result);
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	623b      	str	r3, [r7, #32]
 800841e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	69f9      	ldr	r1, [r7, #28]
 8008422:	6a3a      	ldr	r2, [r7, #32]
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	61bb      	str	r3, [r7, #24]
   return(result);
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e6      	bne.n	80083fe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	461a      	mov	r2, r3
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f001 f896 	bl	8009568 <UART_Start_Receive_DMA>
 800843c:	4603      	mov	r3, r0
 800843e:	e000      	b.n	8008442 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3728      	adds	r7, #40	; 0x28
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40008000 	.word	0x40008000

08008450 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b090      	sub	sp, #64	; 0x40
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008466:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008472:	2b80      	cmp	r3, #128	; 0x80
 8008474:	d139      	bne.n	80084ea <HAL_UART_DMAStop+0x9a>
 8008476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008478:	2b21      	cmp	r3, #33	; 0x21
 800847a:	d136      	bne.n	80084ea <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	61fb      	str	r3, [r7, #28]
   return(result);
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008492:	637b      	str	r3, [r7, #52]	; 0x34
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3308      	adds	r3, #8
 800849a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800849c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e5      	bne.n	800847c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d015      	beq.n	80084e4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fd fa32 	bl	8005926 <HAL_DMA_Abort>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00d      	beq.n	80084e4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fd fbe5 	bl	8005c9c <HAL_DMA_GetError>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d105      	bne.n	80084e4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2210      	movs	r2, #16
 80084dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e047      	b.n	8008574 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f8e5 	bl	80096b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d13c      	bne.n	8008572 <HAL_UART_DMAStop+0x122>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	2b22      	cmp	r3, #34	; 0x22
 80084fc:	d139      	bne.n	8008572 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	60bb      	str	r3, [r7, #8]
   return(result);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008514:	633b      	str	r3, [r7, #48]	; 0x30
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800851e:	61ba      	str	r2, [r7, #24]
 8008520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	613b      	str	r3, [r7, #16]
   return(result);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e5      	bne.n	80084fe <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008538:	2b00      	cmp	r3, #0
 800853a:	d017      	beq.n	800856c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008542:	4618      	mov	r0, r3
 8008544:	f7fd f9ef 	bl	8005926 <HAL_DMA_Abort>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00e      	beq.n	800856c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008554:	4618      	mov	r0, r3
 8008556:	f7fd fba1 	bl	8005c9c <HAL_DMA_GetError>
 800855a:	4603      	mov	r3, r0
 800855c:	2b20      	cmp	r3, #32
 800855e:	d105      	bne.n	800856c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2210      	movs	r2, #16
 8008564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e003      	b.n	8008574 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 f8e2 	bl	8009736 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3740      	adds	r7, #64	; 0x40
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b0ba      	sub	sp, #232	; 0xe8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80085aa:	4013      	ands	r3, r2
 80085ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80085b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d11b      	bne.n	80085f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d015      	beq.n	80085f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d105      	bne.n	80085dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d009      	beq.n	80085f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 82e3 	beq.w	8008bac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
      }
      return;
 80085ee:	e2dd      	b.n	8008bac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 8123 	beq.w	8008840 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80085fe:	4b8d      	ldr	r3, [pc, #564]	; (8008834 <HAL_UART_IRQHandler+0x2b8>)
 8008600:	4013      	ands	r3, r2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d106      	bne.n	8008614 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008606:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800860a:	4b8b      	ldr	r3, [pc, #556]	; (8008838 <HAL_UART_IRQHandler+0x2bc>)
 800860c:	4013      	ands	r3, r2
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8116 	beq.w	8008840 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d011      	beq.n	8008644 <HAL_UART_IRQHandler+0xc8>
 8008620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2201      	movs	r2, #1
 8008632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863a:	f043 0201 	orr.w	r2, r3, #1
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d011      	beq.n	8008674 <HAL_UART_IRQHandler+0xf8>
 8008650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2202      	movs	r2, #2
 8008662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	f043 0204 	orr.w	r2, r3, #4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d011      	beq.n	80086a4 <HAL_UART_IRQHandler+0x128>
 8008680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2204      	movs	r2, #4
 8008692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869a:	f043 0202 	orr.w	r2, r3, #2
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d017      	beq.n	80086e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d105      	bne.n	80086c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80086bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80086c0:	4b5c      	ldr	r3, [pc, #368]	; (8008834 <HAL_UART_IRQHandler+0x2b8>)
 80086c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2208      	movs	r2, #8
 80086ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	f043 0208 	orr.w	r2, r3, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d012      	beq.n	8008712 <HAL_UART_IRQHandler+0x196>
 80086ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00c      	beq.n	8008712 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008708:	f043 0220 	orr.w	r2, r3, #32
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 8249 	beq.w	8008bb0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800871e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d013      	beq.n	8008752 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800872a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d105      	bne.n	8008742 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800873a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d005      	beq.n	8008776 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800876a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800876e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008772:	2b00      	cmp	r3, #0
 8008774:	d054      	beq.n	8008820 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 ffdd 	bl	8009736 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008786:	2b40      	cmp	r3, #64	; 0x40
 8008788:	d146      	bne.n	8008818 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3308      	adds	r3, #8
 80087b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1d9      	bne.n	800878a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d017      	beq.n	8008810 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087e6:	4a15      	ldr	r2, [pc, #84]	; (800883c <HAL_UART_IRQHandler+0x2c0>)
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd f8f4 	bl	80059de <HAL_DMA_Abort_IT>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d019      	beq.n	8008830 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800880a:	4610      	mov	r0, r2
 800880c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880e:	e00f      	b.n	8008830 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7f8 f807 	bl	8000824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008816:	e00b      	b.n	8008830 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7f8 f803 	bl	8000824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800881e:	e007      	b.n	8008830 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7f7 ffff 	bl	8000824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800882e:	e1bf      	b.n	8008bb0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	bf00      	nop
    return;
 8008832:	e1bd      	b.n	8008bb0 <HAL_UART_IRQHandler+0x634>
 8008834:	10000001 	.word	0x10000001
 8008838:	04000120 	.word	0x04000120
 800883c:	08009aa3 	.word	0x08009aa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008844:	2b01      	cmp	r3, #1
 8008846:	f040 8153 	bne.w	8008af0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 814c 	beq.w	8008af0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800885c:	f003 0310 	and.w	r3, r3, #16
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8145 	beq.w	8008af0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2210      	movs	r2, #16
 800886c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	2b40      	cmp	r3, #64	; 0x40
 800887a:	f040 80bb 	bne.w	80089f4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800888c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 818f 	beq.w	8008bb4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800889c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088a0:	429a      	cmp	r2, r3
 80088a2:	f080 8187 	bcs.w	8008bb4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 8087 	bne.w	80089d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1da      	bne.n	80088c4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800891e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3308      	adds	r3, #8
 800892e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008932:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008936:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800893a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e1      	bne.n	800890e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3308      	adds	r3, #8
 8008950:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800895a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800895c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3308      	adds	r3, #8
 800896a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800896e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008970:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800897c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e3      	bne.n	800894a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800899e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089a0:	f023 0310 	bic.w	r3, r3, #16
 80089a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e4      	bne.n	8008990 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fc ffaa 	bl	8005926 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7f7 fe71 	bl	80006d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089f2:	e0df      	b.n	8008bb4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 80d1 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008a16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80cc 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a42:	647b      	str	r3, [r7, #68]	; 0x44
 8008a44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e4      	bne.n	8008a20 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	623b      	str	r3, [r7, #32]
   return(result);
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e1      	bne.n	8008a56 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0310 	bic.w	r3, r3, #16
 8008aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ac8:	61fb      	str	r3, [r7, #28]
 8008aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	69b9      	ldr	r1, [r7, #24]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e4      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7f7 fdf3 	bl	80006d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008aee:	e063      	b.n	8008bb8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00e      	beq.n	8008b1a <HAL_UART_IRQHandler+0x59e>
 8008afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 f806 	bl	8009b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b18:	e051      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d014      	beq.n	8008b50 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d105      	bne.n	8008b3e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d008      	beq.n	8008b50 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d03a      	beq.n	8008bbc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
    }
    return;
 8008b4e:	e035      	b.n	8008bbc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <HAL_UART_IRQHandler+0x5f4>
 8008b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 ffb0 	bl	8009ace <UART_EndTransmit_IT>
    return;
 8008b6e:	e026      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d009      	beq.n	8008b90 <HAL_UART_IRQHandler+0x614>
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 ffdf 	bl	8009b4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b8e:	e016      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d010      	beq.n	8008bbe <HAL_UART_IRQHandler+0x642>
 8008b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da0c      	bge.n	8008bbe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 ffc7 	bl	8009b38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008baa:	e008      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
      return;
 8008bac:	bf00      	nop
 8008bae:	e006      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
    return;
 8008bb0:	bf00      	nop
 8008bb2:	e004      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
      return;
 8008bb4:	bf00      	nop
 8008bb6:	e002      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
      return;
 8008bb8:	bf00      	nop
 8008bba:	e000      	b.n	8008bbe <HAL_UART_IRQHandler+0x642>
    return;
 8008bbc:	bf00      	nop
  }
}
 8008bbe:	37e8      	adds	r7, #232	; 0xe8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c04:	b08c      	sub	sp, #48	; 0x30
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4baa      	ldr	r3, [pc, #680]	; (8008ed8 <UART_SetConfig+0x2d8>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a9f      	ldr	r2, [pc, #636]	; (8008edc <UART_SetConfig+0x2dc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d004      	beq.n	8008c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	6812      	ldr	r2, [r2, #0]
 8008c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c80:	430b      	orrs	r3, r1
 8008c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	f023 010f 	bic.w	r1, r3, #15
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a90      	ldr	r2, [pc, #576]	; (8008ee0 <UART_SetConfig+0x2e0>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d125      	bne.n	8008cf0 <UART_SetConfig+0xf0>
 8008ca4:	4b8f      	ldr	r3, [pc, #572]	; (8008ee4 <UART_SetConfig+0x2e4>)
 8008ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d81a      	bhi.n	8008ce8 <UART_SetConfig+0xe8>
 8008cb2:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <UART_SetConfig+0xb8>)
 8008cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb8:	08008cc9 	.word	0x08008cc9
 8008cbc:	08008cd9 	.word	0x08008cd9
 8008cc0:	08008cd1 	.word	0x08008cd1
 8008cc4:	08008ce1 	.word	0x08008ce1
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cce:	e116      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cd6:	e112      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cde:	e10e      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ce6:	e10a      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cee:	e106      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a7c      	ldr	r2, [pc, #496]	; (8008ee8 <UART_SetConfig+0x2e8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d138      	bne.n	8008d6c <UART_SetConfig+0x16c>
 8008cfa:	4b7a      	ldr	r3, [pc, #488]	; (8008ee4 <UART_SetConfig+0x2e4>)
 8008cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d00:	f003 030c 	and.w	r3, r3, #12
 8008d04:	2b0c      	cmp	r3, #12
 8008d06:	d82d      	bhi.n	8008d64 <UART_SetConfig+0x164>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <UART_SetConfig+0x110>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d45 	.word	0x08008d45
 8008d14:	08008d65 	.word	0x08008d65
 8008d18:	08008d65 	.word	0x08008d65
 8008d1c:	08008d65 	.word	0x08008d65
 8008d20:	08008d55 	.word	0x08008d55
 8008d24:	08008d65 	.word	0x08008d65
 8008d28:	08008d65 	.word	0x08008d65
 8008d2c:	08008d65 	.word	0x08008d65
 8008d30:	08008d4d 	.word	0x08008d4d
 8008d34:	08008d65 	.word	0x08008d65
 8008d38:	08008d65 	.word	0x08008d65
 8008d3c:	08008d65 	.word	0x08008d65
 8008d40:	08008d5d 	.word	0x08008d5d
 8008d44:	2300      	movs	r3, #0
 8008d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4a:	e0d8      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d52:	e0d4      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008d54:	2304      	movs	r3, #4
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5a:	e0d0      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d62:	e0cc      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008d64:	2310      	movs	r3, #16
 8008d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6a:	e0c8      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a5e      	ldr	r2, [pc, #376]	; (8008eec <UART_SetConfig+0x2ec>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d125      	bne.n	8008dc2 <UART_SetConfig+0x1c2>
 8008d76:	4b5b      	ldr	r3, [pc, #364]	; (8008ee4 <UART_SetConfig+0x2e4>)
 8008d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d80:	2b30      	cmp	r3, #48	; 0x30
 8008d82:	d016      	beq.n	8008db2 <UART_SetConfig+0x1b2>
 8008d84:	2b30      	cmp	r3, #48	; 0x30
 8008d86:	d818      	bhi.n	8008dba <UART_SetConfig+0x1ba>
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d00a      	beq.n	8008da2 <UART_SetConfig+0x1a2>
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d814      	bhi.n	8008dba <UART_SetConfig+0x1ba>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <UART_SetConfig+0x19a>
 8008d94:	2b10      	cmp	r3, #16
 8008d96:	d008      	beq.n	8008daa <UART_SetConfig+0x1aa>
 8008d98:	e00f      	b.n	8008dba <UART_SetConfig+0x1ba>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da0:	e0ad      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008da2:	2302      	movs	r3, #2
 8008da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da8:	e0a9      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008daa:	2304      	movs	r3, #4
 8008dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db0:	e0a5      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008db2:	2308      	movs	r3, #8
 8008db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db8:	e0a1      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008dba:	2310      	movs	r3, #16
 8008dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc0:	e09d      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a4a      	ldr	r2, [pc, #296]	; (8008ef0 <UART_SetConfig+0x2f0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d125      	bne.n	8008e18 <UART_SetConfig+0x218>
 8008dcc:	4b45      	ldr	r3, [pc, #276]	; (8008ee4 <UART_SetConfig+0x2e4>)
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8008dd8:	d016      	beq.n	8008e08 <UART_SetConfig+0x208>
 8008dda:	2bc0      	cmp	r3, #192	; 0xc0
 8008ddc:	d818      	bhi.n	8008e10 <UART_SetConfig+0x210>
 8008dde:	2b80      	cmp	r3, #128	; 0x80
 8008de0:	d00a      	beq.n	8008df8 <UART_SetConfig+0x1f8>
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d814      	bhi.n	8008e10 <UART_SetConfig+0x210>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <UART_SetConfig+0x1f0>
 8008dea:	2b40      	cmp	r3, #64	; 0x40
 8008dec:	d008      	beq.n	8008e00 <UART_SetConfig+0x200>
 8008dee:	e00f      	b.n	8008e10 <UART_SetConfig+0x210>
 8008df0:	2300      	movs	r3, #0
 8008df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008df6:	e082      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dfe:	e07e      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e00:	2304      	movs	r3, #4
 8008e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e06:	e07a      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e08:	2308      	movs	r3, #8
 8008e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e0e:	e076      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e10:	2310      	movs	r3, #16
 8008e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e16:	e072      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a35      	ldr	r2, [pc, #212]	; (8008ef4 <UART_SetConfig+0x2f4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d12a      	bne.n	8008e78 <UART_SetConfig+0x278>
 8008e22:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <UART_SetConfig+0x2e4>)
 8008e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e30:	d01a      	beq.n	8008e68 <UART_SetConfig+0x268>
 8008e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e36:	d81b      	bhi.n	8008e70 <UART_SetConfig+0x270>
 8008e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e3c:	d00c      	beq.n	8008e58 <UART_SetConfig+0x258>
 8008e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e42:	d815      	bhi.n	8008e70 <UART_SetConfig+0x270>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <UART_SetConfig+0x250>
 8008e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e4c:	d008      	beq.n	8008e60 <UART_SetConfig+0x260>
 8008e4e:	e00f      	b.n	8008e70 <UART_SetConfig+0x270>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e56:	e052      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e5e:	e04e      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e60:	2304      	movs	r3, #4
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e66:	e04a      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e68:	2308      	movs	r3, #8
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6e:	e046      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e70:	2310      	movs	r3, #16
 8008e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e76:	e042      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a17      	ldr	r2, [pc, #92]	; (8008edc <UART_SetConfig+0x2dc>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d13a      	bne.n	8008ef8 <UART_SetConfig+0x2f8>
 8008e82:	4b18      	ldr	r3, [pc, #96]	; (8008ee4 <UART_SetConfig+0x2e4>)
 8008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e90:	d01a      	beq.n	8008ec8 <UART_SetConfig+0x2c8>
 8008e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e96:	d81b      	bhi.n	8008ed0 <UART_SetConfig+0x2d0>
 8008e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e9c:	d00c      	beq.n	8008eb8 <UART_SetConfig+0x2b8>
 8008e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea2:	d815      	bhi.n	8008ed0 <UART_SetConfig+0x2d0>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <UART_SetConfig+0x2b0>
 8008ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eac:	d008      	beq.n	8008ec0 <UART_SetConfig+0x2c0>
 8008eae:	e00f      	b.n	8008ed0 <UART_SetConfig+0x2d0>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eb6:	e022      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ebe:	e01e      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec6:	e01a      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ece:	e016      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ed6:	e012      	b.n	8008efe <UART_SetConfig+0x2fe>
 8008ed8:	cfff69f3 	.word	0xcfff69f3
 8008edc:	40008000 	.word	0x40008000
 8008ee0:	40013800 	.word	0x40013800
 8008ee4:	40021000 	.word	0x40021000
 8008ee8:	40004400 	.word	0x40004400
 8008eec:	40004800 	.word	0x40004800
 8008ef0:	40004c00 	.word	0x40004c00
 8008ef4:	40005000 	.word	0x40005000
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4ab0      	ldr	r2, [pc, #704]	; (80091c4 <UART_SetConfig+0x5c4>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	f040 809b 	bne.w	8009040 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d827      	bhi.n	8008f62 <UART_SetConfig+0x362>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <UART_SetConfig+0x318>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008f3d 	.word	0x08008f3d
 8008f1c:	08008f45 	.word	0x08008f45
 8008f20:	08008f4d 	.word	0x08008f4d
 8008f24:	08008f63 	.word	0x08008f63
 8008f28:	08008f53 	.word	0x08008f53
 8008f2c:	08008f63 	.word	0x08008f63
 8008f30:	08008f63 	.word	0x08008f63
 8008f34:	08008f63 	.word	0x08008f63
 8008f38:	08008f5b 	.word	0x08008f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f3c:	f7fe f994 	bl	8007268 <HAL_RCC_GetPCLK1Freq>
 8008f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f42:	e014      	b.n	8008f6e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f44:	f7fe f9a4 	bl	8007290 <HAL_RCC_GetPCLK2Freq>
 8008f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f4a:	e010      	b.n	8008f6e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f4c:	4b9e      	ldr	r3, [pc, #632]	; (80091c8 <UART_SetConfig+0x5c8>)
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f50:	e00d      	b.n	8008f6e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f52:	f7fe f8d7 	bl	8007104 <HAL_RCC_GetSysClockFreq>
 8008f56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f58:	e009      	b.n	8008f6e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f60:	e005      	b.n	8008f6e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 8130 	beq.w	80091d6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	4a94      	ldr	r2, [pc, #592]	; (80091cc <UART_SetConfig+0x5cc>)
 8008f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	4413      	add	r3, r2
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d305      	bcc.n	8008fa6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d903      	bls.n	8008fae <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fac:	e113      	b.n	80091d6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	60bb      	str	r3, [r7, #8]
 8008fb4:	60fa      	str	r2, [r7, #12]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	4a84      	ldr	r2, [pc, #528]	; (80091cc <UART_SetConfig+0x5cc>)
 8008fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	603b      	str	r3, [r7, #0]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fd0:	f7f7 f938 	bl	8000244 <__aeabi_uldivmod>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4619      	mov	r1, r3
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	020b      	lsls	r3, r1, #8
 8008fe6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fea:	0202      	lsls	r2, r0, #8
 8008fec:	6979      	ldr	r1, [r7, #20]
 8008fee:	6849      	ldr	r1, [r1, #4]
 8008ff0:	0849      	lsrs	r1, r1, #1
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	eb12 0804 	adds.w	r8, r2, r4
 8008ffc:	eb43 0905 	adc.w	r9, r3, r5
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	469a      	mov	sl, r3
 8009008:	4693      	mov	fp, r2
 800900a:	4652      	mov	r2, sl
 800900c:	465b      	mov	r3, fp
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 f917 	bl	8000244 <__aeabi_uldivmod>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4613      	mov	r3, r2
 800901c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009024:	d308      	bcc.n	8009038 <UART_SetConfig+0x438>
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902c:	d204      	bcs.n	8009038 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6a3a      	ldr	r2, [r7, #32]
 8009034:	60da      	str	r2, [r3, #12]
 8009036:	e0ce      	b.n	80091d6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800903e:	e0ca      	b.n	80091d6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009048:	d166      	bne.n	8009118 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800904a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800904e:	2b08      	cmp	r3, #8
 8009050:	d827      	bhi.n	80090a2 <UART_SetConfig+0x4a2>
 8009052:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <UART_SetConfig+0x458>)
 8009054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009058:	0800907d 	.word	0x0800907d
 800905c:	08009085 	.word	0x08009085
 8009060:	0800908d 	.word	0x0800908d
 8009064:	080090a3 	.word	0x080090a3
 8009068:	08009093 	.word	0x08009093
 800906c:	080090a3 	.word	0x080090a3
 8009070:	080090a3 	.word	0x080090a3
 8009074:	080090a3 	.word	0x080090a3
 8009078:	0800909b 	.word	0x0800909b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800907c:	f7fe f8f4 	bl	8007268 <HAL_RCC_GetPCLK1Freq>
 8009080:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009082:	e014      	b.n	80090ae <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009084:	f7fe f904 	bl	8007290 <HAL_RCC_GetPCLK2Freq>
 8009088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800908a:	e010      	b.n	80090ae <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800908c:	4b4e      	ldr	r3, [pc, #312]	; (80091c8 <UART_SetConfig+0x5c8>)
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009090:	e00d      	b.n	80090ae <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009092:	f7fe f837 	bl	8007104 <HAL_RCC_GetSysClockFreq>
 8009096:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009098:	e009      	b.n	80090ae <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800909a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090a0:	e005      	b.n	80090ae <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80090ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8090 	beq.w	80091d6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	4a44      	ldr	r2, [pc, #272]	; (80091cc <UART_SetConfig+0x5cc>)
 80090bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c0:	461a      	mov	r2, r3
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80090c8:	005a      	lsls	r2, r3, #1
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	085b      	lsrs	r3, r3, #1
 80090d0:	441a      	add	r2, r3
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	2b0f      	cmp	r3, #15
 80090e0:	d916      	bls.n	8009110 <UART_SetConfig+0x510>
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e8:	d212      	bcs.n	8009110 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	f023 030f 	bic.w	r3, r3, #15
 80090f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	085b      	lsrs	r3, r3, #1
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	b29a      	uxth	r2, r3
 8009100:	8bfb      	ldrh	r3, [r7, #30]
 8009102:	4313      	orrs	r3, r2
 8009104:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	8bfa      	ldrh	r2, [r7, #30]
 800910c:	60da      	str	r2, [r3, #12]
 800910e:	e062      	b.n	80091d6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009116:	e05e      	b.n	80091d6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009118:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800911c:	2b08      	cmp	r3, #8
 800911e:	d828      	bhi.n	8009172 <UART_SetConfig+0x572>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <UART_SetConfig+0x528>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009155 	.word	0x08009155
 8009130:	0800915d 	.word	0x0800915d
 8009134:	08009173 	.word	0x08009173
 8009138:	08009163 	.word	0x08009163
 800913c:	08009173 	.word	0x08009173
 8009140:	08009173 	.word	0x08009173
 8009144:	08009173 	.word	0x08009173
 8009148:	0800916b 	.word	0x0800916b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800914c:	f7fe f88c 	bl	8007268 <HAL_RCC_GetPCLK1Freq>
 8009150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009152:	e014      	b.n	800917e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009154:	f7fe f89c 	bl	8007290 <HAL_RCC_GetPCLK2Freq>
 8009158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800915a:	e010      	b.n	800917e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800915c:	4b1a      	ldr	r3, [pc, #104]	; (80091c8 <UART_SetConfig+0x5c8>)
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009160:	e00d      	b.n	800917e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009162:	f7fd ffcf 	bl	8007104 <HAL_RCC_GetSysClockFreq>
 8009166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009168:	e009      	b.n	800917e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800916a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009170:	e005      	b.n	800917e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800917c:	bf00      	nop
    }

    if (pclk != 0U)
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	d028      	beq.n	80091d6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	4a10      	ldr	r2, [pc, #64]	; (80091cc <UART_SetConfig+0x5cc>)
 800918a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800918e:	461a      	mov	r2, r3
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	fbb3 f2f2 	udiv	r2, r3, r2
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	085b      	lsrs	r3, r3, #1
 800919c:	441a      	add	r2, r3
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	2b0f      	cmp	r3, #15
 80091ac:	d910      	bls.n	80091d0 <UART_SetConfig+0x5d0>
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b4:	d20c      	bcs.n	80091d0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60da      	str	r2, [r3, #12]
 80091c0:	e009      	b.n	80091d6 <UART_SetConfig+0x5d6>
 80091c2:	bf00      	nop
 80091c4:	40008000 	.word	0x40008000
 80091c8:	00f42400 	.word	0x00f42400
 80091cc:	0800bc5c 	.word	0x0800bc5c
      }
      else
      {
        ret = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2201      	movs	r2, #1
 80091da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2200      	movs	r2, #0
 80091ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2200      	movs	r2, #0
 80091f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80091f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3730      	adds	r7, #48	; 0x30
 80091fa:	46bd      	mov	sp, r7
 80091fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f003 0310 	and.w	r3, r3, #16
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01a      	beq.n	8009316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fe:	d10a      	bne.n	8009316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b098      	sub	sp, #96	; 0x60
 8009348:	af02      	add	r7, sp, #8
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009354:	f7fb f8e4 	bl	8004520 <HAL_GetTick>
 8009358:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b08      	cmp	r3, #8
 8009366:	d12f      	bne.n	80093c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009370:	2200      	movs	r2, #0
 8009372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f88e 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d022      	beq.n	80093c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009396:	653b      	str	r3, [r7, #80]	; 0x50
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	461a      	mov	r2, r3
 800939e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a0:	647b      	str	r3, [r7, #68]	; 0x44
 80093a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e6      	bne.n	8009382 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e063      	b.n	8009490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0304 	and.w	r3, r3, #4
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d149      	bne.n	800946a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093de:	2200      	movs	r2, #0
 80093e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f857 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d03c      	beq.n	800946a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	e853 3f00 	ldrex	r3, [r3]
 80093fc:	623b      	str	r3, [r7, #32]
   return(result);
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800940e:	633b      	str	r3, [r7, #48]	; 0x30
 8009410:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1e6      	bne.n	80093f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	60fb      	str	r3, [r7, #12]
   return(result);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	64bb      	str	r3, [r7, #72]	; 0x48
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009442:	61fa      	str	r2, [r7, #28]
 8009444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	69b9      	ldr	r1, [r7, #24]
 8009448:	69fa      	ldr	r2, [r7, #28]
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	617b      	str	r3, [r7, #20]
   return(result);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e5      	bne.n	8009422 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e012      	b.n	8009490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2220      	movs	r2, #32
 800946e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3758      	adds	r7, #88	; 0x58
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094a8:	e049      	b.n	800953e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b0:	d045      	beq.n	800953e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b2:	f7fb f835 	bl	8004520 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d302      	bcc.n	80094c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e048      	b.n	800955e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0304 	and.w	r3, r3, #4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d031      	beq.n	800953e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d110      	bne.n	800950a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2208      	movs	r2, #8
 80094ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f920 	bl	8009736 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2208      	movs	r2, #8
 80094fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e029      	b.n	800955e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009518:	d111      	bne.n	800953e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f906 	bl	8009736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e00f      	b.n	800955e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	4013      	ands	r3, r2
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	429a      	cmp	r2, r3
 800954c:	bf0c      	ite	eq
 800954e:	2301      	moveq	r3, #1
 8009550:	2300      	movne	r3, #0
 8009552:	b2db      	uxtb	r3, r3
 8009554:	461a      	mov	r2, r3
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	429a      	cmp	r2, r3
 800955a:	d0a6      	beq.n	80094aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b096      	sub	sp, #88	; 0x58
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	88fa      	ldrh	r2, [r7, #6]
 8009580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2222      	movs	r2, #34	; 0x22
 8009590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800959a:	2b00      	cmp	r3, #0
 800959c:	d02d      	beq.n	80095fa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095a4:	4a40      	ldr	r2, [pc, #256]	; (80096a8 <UART_Start_Receive_DMA+0x140>)
 80095a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ae:	4a3f      	ldr	r2, [pc, #252]	; (80096ac <UART_Start_Receive_DMA+0x144>)
 80095b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b8:	4a3d      	ldr	r2, [pc, #244]	; (80096b0 <UART_Start_Receive_DMA+0x148>)
 80095ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c2:	2200      	movs	r2, #0
 80095c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3324      	adds	r3, #36	; 0x24
 80095d2:	4619      	mov	r1, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d8:	461a      	mov	r2, r3
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	f7fc f928 	bl	8005830 <HAL_DMA_Start_IT>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2210      	movs	r2, #16
 80095ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e051      	b.n	800969e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d018      	beq.n	8009634 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009616:	657b      	str	r3, [r7, #84]	; 0x54
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	461a      	mov	r2, r3
 800961e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009620:	64bb      	str	r3, [r7, #72]	; 0x48
 8009622:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800962e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e6      	bne.n	8009602 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3308      	adds	r3, #8
 800963a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	653b      	str	r3, [r7, #80]	; 0x50
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009654:	637a      	str	r2, [r7, #52]	; 0x34
 8009656:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800965a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e5      	bne.n	8009634 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3308      	adds	r3, #8
 800966e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	613b      	str	r3, [r7, #16]
   return(result);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800967e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3308      	adds	r3, #8
 8009686:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009688:	623a      	str	r2, [r7, #32]
 800968a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	69f9      	ldr	r1, [r7, #28]
 800968e:	6a3a      	ldr	r2, [r7, #32]
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	61bb      	str	r3, [r7, #24]
   return(result);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e5      	bne.n	8009668 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3758      	adds	r7, #88	; 0x58
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	080098b9 	.word	0x080098b9
 80096ac:	080099e5 	.word	0x080099e5
 80096b0:	08009a23 	.word	0x08009a23

080096b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b08f      	sub	sp, #60	; 0x3c
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096dc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e6      	bne.n	80096bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009704:	633b      	str	r3, [r7, #48]	; 0x30
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800970e:	61ba      	str	r2, [r7, #24]
 8009710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6979      	ldr	r1, [r7, #20]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	613b      	str	r3, [r7, #16]
   return(result);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e5      	bne.n	80096ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2220      	movs	r2, #32
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800972a:	bf00      	nop
 800972c:	373c      	adds	r7, #60	; 0x3c
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009736:	b480      	push	{r7}
 8009738:	b095      	sub	sp, #84	; 0x54
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
 800975e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e6      	bne.n	800973e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009786:	f023 0301 	bic.w	r3, r3, #1
 800978a:	64bb      	str	r3, [r7, #72]	; 0x48
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3308      	adds	r3, #8
 8009792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800979a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e3      	bne.n	8009770 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d118      	bne.n	80097e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f023 0310 	bic.w	r3, r3, #16
 80097c4:	647b      	str	r3, [r7, #68]	; 0x44
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6979      	ldr	r1, [r7, #20]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	613b      	str	r3, [r7, #16]
   return(result);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e6      	bne.n	80097b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80097f6:	bf00      	nop
 80097f8:	3754      	adds	r7, #84	; 0x54
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b090      	sub	sp, #64	; 0x40
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b00      	cmp	r3, #0
 800981c:	d137      	bne.n	800988e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800981e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009820:	2200      	movs	r2, #0
 8009822:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3308      	adds	r3, #8
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	623b      	str	r3, [r7, #32]
   return(result);
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800983c:	63bb      	str	r3, [r7, #56]	; 0x38
 800983e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009846:	633a      	str	r2, [r7, #48]	; 0x30
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800984c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e5      	bne.n	8009826 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800985a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	e853 3f00 	ldrex	r3, [r3]
 8009866:	60fb      	str	r3, [r7, #12]
   return(result);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800986e:	637b      	str	r3, [r7, #52]	; 0x34
 8009870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	69b9      	ldr	r1, [r7, #24]
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	e841 2300 	strex	r3, r2, [r1]
 8009884:	617b      	str	r3, [r7, #20]
   return(result);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e6      	bne.n	800985a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800988c:	e002      	b.n	8009894 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800988e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009890:	f7ff f998 	bl	8008bc4 <HAL_UART_TxCpltCallback>
}
 8009894:	bf00      	nop
 8009896:	3740      	adds	r7, #64	; 0x40
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f7ff f994 	bl	8008bd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b09c      	sub	sp, #112	; 0x70
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d171      	bne.n	80099b8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80098d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d6:	2200      	movs	r2, #0
 80098d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80098f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80098fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e6      	bne.n	80098dc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3308      	adds	r3, #8
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	f023 0301 	bic.w	r3, r3, #1
 8009924:	667b      	str	r3, [r7, #100]	; 0x64
 8009926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3308      	adds	r3, #8
 800992c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800992e:	647a      	str	r2, [r7, #68]	; 0x44
 8009930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800993c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e5      	bne.n	800990e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	623b      	str	r3, [r7, #32]
   return(result);
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009958:	663b      	str	r3, [r7, #96]	; 0x60
 800995a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3308      	adds	r3, #8
 8009960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009962:	633a      	str	r2, [r7, #48]	; 0x30
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e5      	bne.n	8009942 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009978:	2220      	movs	r2, #32
 800997a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800997e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009982:	2b01      	cmp	r3, #1
 8009984:	d118      	bne.n	80099b8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	e853 3f00 	ldrex	r3, [r3]
 8009992:	60fb      	str	r3, [r7, #12]
   return(result);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0310 	bic.w	r3, r3, #16
 800999a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800999c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a4:	61fb      	str	r3, [r7, #28]
 80099a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	69b9      	ldr	r1, [r7, #24]
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	617b      	str	r3, [r7, #20]
   return(result);
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e6      	bne.n	8009986 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ba:	2200      	movs	r2, #0
 80099bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d107      	bne.n	80099d6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099cc:	4619      	mov	r1, r3
 80099ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80099d0:	f7f6 fe80 	bl	80006d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099d4:	e002      	b.n	80099dc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80099d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80099d8:	f7f6 fed0 	bl	800077c <HAL_UART_RxCpltCallback>
}
 80099dc:	bf00      	nop
 80099de:	3770      	adds	r7, #112	; 0x70
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d109      	bne.n	8009a14 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a06:	085b      	lsrs	r3, r3, #1
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7f6 fe61 	bl	80006d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a12:	e002      	b.n	8009a1a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f7ff f8e9 	bl	8008bec <HAL_UART_RxHalfCpltCallback>
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b086      	sub	sp, #24
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4a:	2b80      	cmp	r3, #128	; 0x80
 8009a4c:	d109      	bne.n	8009a62 <UART_DMAError+0x40>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2b21      	cmp	r3, #33	; 0x21
 8009a52:	d106      	bne.n	8009a62 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009a5c:	6978      	ldr	r0, [r7, #20]
 8009a5e:	f7ff fe29 	bl	80096b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6c:	2b40      	cmp	r3, #64	; 0x40
 8009a6e:	d109      	bne.n	8009a84 <UART_DMAError+0x62>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b22      	cmp	r3, #34	; 0x22
 8009a74:	d106      	bne.n	8009a84 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009a7e:	6978      	ldr	r0, [r7, #20]
 8009a80:	f7ff fe59 	bl	8009736 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a8a:	f043 0210 	orr.w	r2, r3, #16
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a94:	6978      	ldr	r0, [r7, #20]
 8009a96:	f7f6 fec5 	bl	8000824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a9a:	bf00      	nop
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7f6 feaf 	bl	8000824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b088      	sub	sp, #32
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aea:	61fb      	str	r3, [r7, #28]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6979      	ldr	r1, [r7, #20]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	613b      	str	r3, [r7, #16]
   return(result);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e6      	bne.n	8009ad6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff f854 	bl	8008bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b1c:	bf00      	nop
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d101      	bne.n	8009b76 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b72:	2302      	movs	r3, #2
 8009b74:	e027      	b.n	8009bc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2224      	movs	r2, #36	; 0x24
 8009b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0201 	bic.w	r2, r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e02d      	b.n	8009c46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2224      	movs	r2, #36	; 0x24
 8009bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f8a4 	bl	8009d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e02d      	b.n	8009cc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2224      	movs	r2, #36	; 0x24
 8009c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f866 	bl	8009d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b08c      	sub	sp, #48	; 0x30
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	d142      	bne.n	8009d68 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009ce8:	88fb      	ldrh	r3, [r7, #6]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e03b      	b.n	8009d6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	461a      	mov	r2, r3
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7ff fc2f 	bl	8009568 <UART_Start_Receive_DMA>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d124      	bne.n	8009d62 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d11d      	bne.n	8009d5c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2210      	movs	r2, #16
 8009d26:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	e853 3f00 	ldrex	r3, [r3]
 8009d34:	617b      	str	r3, [r7, #20]
   return(result);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f043 0310 	orr.w	r3, r3, #16
 8009d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
 8009d48:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4a:	6a39      	ldr	r1, [r7, #32]
 8009d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1e6      	bne.n	8009d28 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009d5a:	e002      	b.n	8009d62 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d66:	e000      	b.n	8009d6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009d68:	2302      	movs	r3, #2
  }
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3730      	adds	r7, #48	; 0x30
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d108      	bne.n	8009d96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d94:	e031      	b.n	8009dfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d96:	2308      	movs	r3, #8
 8009d98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	0e5b      	lsrs	r3, r3, #25
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	f003 0307 	and.w	r3, r3, #7
 8009dac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	0f5b      	lsrs	r3, r3, #29
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	7b3a      	ldrb	r2, [r7, #12]
 8009dc2:	4911      	ldr	r1, [pc, #68]	; (8009e08 <UARTEx_SetNbDataToProcess+0x94>)
 8009dc4:	5c8a      	ldrb	r2, [r1, r2]
 8009dc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dca:	7b3a      	ldrb	r2, [r7, #12]
 8009dcc:	490f      	ldr	r1, [pc, #60]	; (8009e0c <UARTEx_SetNbDataToProcess+0x98>)
 8009dce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	7b7a      	ldrb	r2, [r7, #13]
 8009de0:	4909      	ldr	r1, [pc, #36]	; (8009e08 <UARTEx_SetNbDataToProcess+0x94>)
 8009de2:	5c8a      	ldrb	r2, [r1, r2]
 8009de4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009de8:	7b7a      	ldrb	r2, [r7, #13]
 8009dea:	4908      	ldr	r1, [pc, #32]	; (8009e0c <UARTEx_SetNbDataToProcess+0x98>)
 8009dec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dee:	fb93 f3f2 	sdiv	r3, r3, r2
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	0800bc74 	.word	0x0800bc74
 8009e0c:	0800bc7c 	.word	0x0800bc7c

08009e10 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b08b      	sub	sp, #44	; 0x2c
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	fa93 f3a3 	rbit	r3, r3
 8009e2a:	613b      	str	r3, [r7, #16]
  return result;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009e36:	2320      	movs	r3, #32
 8009e38:	e003      	b.n	8009e42 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	fab3 f383 	clz	r3, r3
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	2103      	movs	r1, #3
 8009e46:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4a:	43db      	mvns	r3, r3
 8009e4c:	401a      	ands	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	fa93 f3a3 	rbit	r3, r3
 8009e58:	61fb      	str	r3, [r7, #28]
  return result;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009e64:	2320      	movs	r3, #32
 8009e66:	e003      	b.n	8009e70 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	fab3 f383 	clz	r3, r3
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	fa01 f303 	lsl.w	r3, r1, r3
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]
}
 8009e7e:	bf00      	nop
 8009e80:	372c      	adds	r7, #44	; 0x2c
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b085      	sub	sp, #20
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	401a      	ands	r2, r3
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	fb01 f303 	mul.w	r3, r1, r3
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	605a      	str	r2, [r3, #4]
}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b08b      	sub	sp, #44	; 0x2c
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	fa93 f3a3 	rbit	r3, r3
 8009ed4:	613b      	str	r3, [r7, #16]
  return result;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	e003      	b.n	8009eec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	fab3 f383 	clz	r3, r3
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	2103      	movs	r1, #3
 8009ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	401a      	ands	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	fa93 f3a3 	rbit	r3, r3
 8009f02:	61fb      	str	r3, [r7, #28]
  return result;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009f0e:	2320      	movs	r3, #32
 8009f10:	e003      	b.n	8009f1a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	fab3 f383 	clz	r3, r3
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f22:	431a      	orrs	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009f28:	bf00      	nop
 8009f2a:	372c      	adds	r7, #44	; 0x2c
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b08b      	sub	sp, #44	; 0x2c
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	fa93 f3a3 	rbit	r3, r3
 8009f4e:	613b      	str	r3, [r7, #16]
  return result;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009f5a:	2320      	movs	r3, #32
 8009f5c:	e003      	b.n	8009f66 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	fab3 f383 	clz	r3, r3
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	2103      	movs	r1, #3
 8009f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6e:	43db      	mvns	r3, r3
 8009f70:	401a      	ands	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	fa93 f3a3 	rbit	r3, r3
 8009f7c:	61fb      	str	r3, [r7, #28]
  return result;
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009f88:	2320      	movs	r3, #32
 8009f8a:	e003      	b.n	8009f94 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	fab3 f383 	clz	r3, r3
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	60da      	str	r2, [r3, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	372c      	adds	r7, #44	; 0x2c
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b08b      	sub	sp, #44	; 0x2c
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a1a      	ldr	r2, [r3, #32]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	fa93 f3a3 	rbit	r3, r3
 8009fc8:	613b      	str	r3, [r7, #16]
  return result;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009fd4:	2320      	movs	r3, #32
 8009fd6:	e003      	b.n	8009fe0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	fab3 f383 	clz	r3, r3
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	210f      	movs	r1, #15
 8009fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe8:	43db      	mvns	r3, r3
 8009fea:	401a      	ands	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	fa93 f3a3 	rbit	r3, r3
 8009ff6:	61fb      	str	r3, [r7, #28]
  return result;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a002:	2320      	movs	r3, #32
 800a004:	e003      	b.n	800a00e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	fab3 f383 	clz	r3, r3
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	fa01 f303 	lsl.w	r3, r1, r3
 800a016:	431a      	orrs	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a01c:	bf00      	nop
 800a01e:	372c      	adds	r7, #44	; 0x2c
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a028:	b480      	push	{r7}
 800a02a:	b08b      	sub	sp, #44	; 0x2c
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	0a1b      	lsrs	r3, r3, #8
 800a03c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	fa93 f3a3 	rbit	r3, r3
 800a044:	613b      	str	r3, [r7, #16]
  return result;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a050:	2320      	movs	r3, #32
 800a052:	e003      	b.n	800a05c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	fab3 f383 	clz	r3, r3
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	210f      	movs	r1, #15
 800a060:	fa01 f303 	lsl.w	r3, r1, r3
 800a064:	43db      	mvns	r3, r3
 800a066:	401a      	ands	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	0a1b      	lsrs	r3, r3, #8
 800a06c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	fa93 f3a3 	rbit	r3, r3
 800a074:	61fb      	str	r3, [r7, #28]
  return result;
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a080:	2320      	movs	r3, #32
 800a082:	e003      	b.n	800a08c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	fab3 f383 	clz	r3, r3
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	fa01 f303 	lsl.w	r3, r1, r3
 800a094:	431a      	orrs	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a09a:	bf00      	nop
 800a09c:	372c      	adds	r7, #44	; 0x2c
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b088      	sub	sp, #32
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	fa93 f3a3 	rbit	r3, r3
 800a0bc:	60fb      	str	r3, [r7, #12]
  return result;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <LL_GPIO_Init+0x26>
    return 32U;
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	e003      	b.n	800a0d4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	fab3 f383 	clz	r3, r3
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a0d6:	e047      	b.n	800a168 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	2101      	movs	r1, #1
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d039      	beq.n	800a162 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d003      	beq.n	800a0fe <LL_GPIO_Init+0x58>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d10d      	bne.n	800a11a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	461a      	mov	r2, r3
 800a104:	69b9      	ldr	r1, [r7, #24]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff fed7 	bl	8009eba <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	461a      	mov	r2, r3
 800a112:	69b9      	ldr	r1, [r7, #24]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff feb8 	bl	8009e8a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	461a      	mov	r2, r3
 800a120:	69b9      	ldr	r1, [r7, #24]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff ff06 	bl	8009f34 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d111      	bne.n	800a154 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2bff      	cmp	r3, #255	; 0xff
 800a134:	d807      	bhi.n	800a146 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	461a      	mov	r2, r3
 800a13c:	69b9      	ldr	r1, [r7, #24]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff ff35 	bl	8009fae <LL_GPIO_SetAFPin_0_7>
 800a144:	e006      	b.n	800a154 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	461a      	mov	r2, r3
 800a14c:	69b9      	ldr	r1, [r7, #24]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7ff ff6a 	bl	800a028 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	461a      	mov	r2, r3
 800a15a:	69b9      	ldr	r1, [r7, #24]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fe57 	bl	8009e10 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	3301      	adds	r3, #1
 800a166:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1b0      	bne.n	800a0d8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3720      	adds	r7, #32
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a188:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a18c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a194:	b29a      	uxth	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	43db      	mvns	r3, r3
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	4013      	ands	r3, r2
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	f107 0014 	add.w	r0, r7, #20
 800a1c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	b004      	add	sp, #16
 800a1f6:	4770      	bx	lr

0800a1f8 <_ZdlPvj>:
 800a1f8:	f000 b811 	b.w	800a21e <_ZdlPv>

0800a1fc <_Znwj>:
 800a1fc:	2801      	cmp	r0, #1
 800a1fe:	bf38      	it	cc
 800a200:	2001      	movcc	r0, #1
 800a202:	b510      	push	{r4, lr}
 800a204:	4604      	mov	r4, r0
 800a206:	4620      	mov	r0, r4
 800a208:	f000 f844 	bl	800a294 <malloc>
 800a20c:	b930      	cbnz	r0, 800a21c <_Znwj+0x20>
 800a20e:	f000 f809 	bl	800a224 <_ZSt15get_new_handlerv>
 800a212:	b908      	cbnz	r0, 800a218 <_Znwj+0x1c>
 800a214:	f000 f80c 	bl	800a230 <abort>
 800a218:	4780      	blx	r0
 800a21a:	e7f4      	b.n	800a206 <_Znwj+0xa>
 800a21c:	bd10      	pop	{r4, pc}

0800a21e <_ZdlPv>:
 800a21e:	f000 b841 	b.w	800a2a4 <free>
	...

0800a224 <_ZSt15get_new_handlerv>:
 800a224:	4b01      	ldr	r3, [pc, #4]	; (800a22c <_ZSt15get_new_handlerv+0x8>)
 800a226:	e8d3 0faf 	lda	r0, [r3]
 800a22a:	4770      	bx	lr
 800a22c:	2000134c 	.word	0x2000134c

0800a230 <abort>:
 800a230:	2006      	movs	r0, #6
 800a232:	b508      	push	{r3, lr}
 800a234:	f000 f97c 	bl	800a530 <raise>
 800a238:	2001      	movs	r0, #1
 800a23a:	f7f9 fc5b 	bl	8003af4 <_exit>
	...

0800a240 <__errno>:
 800a240:	4b01      	ldr	r3, [pc, #4]	; (800a248 <__errno+0x8>)
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	20000010 	.word	0x20000010

0800a24c <__libc_init_array>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	4d0d      	ldr	r5, [pc, #52]	; (800a284 <__libc_init_array+0x38>)
 800a250:	2600      	movs	r6, #0
 800a252:	4c0d      	ldr	r4, [pc, #52]	; (800a288 <__libc_init_array+0x3c>)
 800a254:	1b64      	subs	r4, r4, r5
 800a256:	10a4      	asrs	r4, r4, #2
 800a258:	42a6      	cmp	r6, r4
 800a25a:	d109      	bne.n	800a270 <__libc_init_array+0x24>
 800a25c:	4d0b      	ldr	r5, [pc, #44]	; (800a28c <__libc_init_array+0x40>)
 800a25e:	2600      	movs	r6, #0
 800a260:	4c0b      	ldr	r4, [pc, #44]	; (800a290 <__libc_init_array+0x44>)
 800a262:	f000 fd1b 	bl	800ac9c <_init>
 800a266:	1b64      	subs	r4, r4, r5
 800a268:	10a4      	asrs	r4, r4, #2
 800a26a:	42a6      	cmp	r6, r4
 800a26c:	d105      	bne.n	800a27a <__libc_init_array+0x2e>
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	f855 3b04 	ldr.w	r3, [r5], #4
 800a274:	3601      	adds	r6, #1
 800a276:	4798      	blx	r3
 800a278:	e7ee      	b.n	800a258 <__libc_init_array+0xc>
 800a27a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a27e:	3601      	adds	r6, #1
 800a280:	4798      	blx	r3
 800a282:	e7f2      	b.n	800a26a <__libc_init_array+0x1e>
 800a284:	0800bcc0 	.word	0x0800bcc0
 800a288:	0800bcc0 	.word	0x0800bcc0
 800a28c:	0800bcc0 	.word	0x0800bcc0
 800a290:	0800bcc8 	.word	0x0800bcc8

0800a294 <malloc>:
 800a294:	4b02      	ldr	r3, [pc, #8]	; (800a2a0 <malloc+0xc>)
 800a296:	4601      	mov	r1, r0
 800a298:	6818      	ldr	r0, [r3, #0]
 800a29a:	f000 b89d 	b.w	800a3d8 <_malloc_r>
 800a29e:	bf00      	nop
 800a2a0:	20000010 	.word	0x20000010

0800a2a4 <free>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	; (800a2b0 <free+0xc>)
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f000 b829 	b.w	800a300 <_free_r>
 800a2ae:	bf00      	nop
 800a2b0:	20000010 	.word	0x20000010

0800a2b4 <memcmp>:
 800a2b4:	3901      	subs	r1, #1
 800a2b6:	4402      	add	r2, r0
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	4290      	cmp	r0, r2
 800a2bc:	d101      	bne.n	800a2c2 <memcmp+0xe>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e005      	b.n	800a2ce <memcmp+0x1a>
 800a2c2:	7803      	ldrb	r3, [r0, #0]
 800a2c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	d001      	beq.n	800a2d0 <memcmp+0x1c>
 800a2cc:	1b18      	subs	r0, r3, r4
 800a2ce:	bd10      	pop	{r4, pc}
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	e7f2      	b.n	800a2ba <memcmp+0x6>

0800a2d4 <memcpy>:
 800a2d4:	440a      	add	r2, r1
 800a2d6:	1e43      	subs	r3, r0, #1
 800a2d8:	4291      	cmp	r1, r2
 800a2da:	d100      	bne.n	800a2de <memcpy+0xa>
 800a2dc:	4770      	bx	lr
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2e4:	4291      	cmp	r1, r2
 800a2e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ea:	d1f9      	bne.n	800a2e0 <memcpy+0xc>
 800a2ec:	bd10      	pop	{r4, pc}

0800a2ee <memset>:
 800a2ee:	4402      	add	r2, r0
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d100      	bne.n	800a2f8 <memset+0xa>
 800a2f6:	4770      	bx	lr
 800a2f8:	f803 1b01 	strb.w	r1, [r3], #1
 800a2fc:	e7f9      	b.n	800a2f2 <memset+0x4>
	...

0800a300 <_free_r>:
 800a300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a302:	2900      	cmp	r1, #0
 800a304:	d043      	beq.n	800a38e <_free_r+0x8e>
 800a306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a30a:	1f0c      	subs	r4, r1, #4
 800a30c:	9001      	str	r0, [sp, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bfb8      	it	lt
 800a312:	18e4      	addlt	r4, r4, r3
 800a314:	f000 f962 	bl	800a5dc <__malloc_lock>
 800a318:	4a1e      	ldr	r2, [pc, #120]	; (800a394 <_free_r+0x94>)
 800a31a:	9801      	ldr	r0, [sp, #4]
 800a31c:	6813      	ldr	r3, [r2, #0]
 800a31e:	b933      	cbnz	r3, 800a32e <_free_r+0x2e>
 800a320:	6063      	str	r3, [r4, #4]
 800a322:	6014      	str	r4, [r2, #0]
 800a324:	b003      	add	sp, #12
 800a326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a32a:	f000 b95d 	b.w	800a5e8 <__malloc_unlock>
 800a32e:	42a3      	cmp	r3, r4
 800a330:	d908      	bls.n	800a344 <_free_r+0x44>
 800a332:	6825      	ldr	r5, [r4, #0]
 800a334:	1961      	adds	r1, r4, r5
 800a336:	428b      	cmp	r3, r1
 800a338:	bf01      	itttt	eq
 800a33a:	6819      	ldreq	r1, [r3, #0]
 800a33c:	685b      	ldreq	r3, [r3, #4]
 800a33e:	1949      	addeq	r1, r1, r5
 800a340:	6021      	streq	r1, [r4, #0]
 800a342:	e7ed      	b.n	800a320 <_free_r+0x20>
 800a344:	461a      	mov	r2, r3
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	b10b      	cbz	r3, 800a34e <_free_r+0x4e>
 800a34a:	42a3      	cmp	r3, r4
 800a34c:	d9fa      	bls.n	800a344 <_free_r+0x44>
 800a34e:	6811      	ldr	r1, [r2, #0]
 800a350:	1855      	adds	r5, r2, r1
 800a352:	42a5      	cmp	r5, r4
 800a354:	d10b      	bne.n	800a36e <_free_r+0x6e>
 800a356:	6824      	ldr	r4, [r4, #0]
 800a358:	4421      	add	r1, r4
 800a35a:	1854      	adds	r4, r2, r1
 800a35c:	6011      	str	r1, [r2, #0]
 800a35e:	42a3      	cmp	r3, r4
 800a360:	d1e0      	bne.n	800a324 <_free_r+0x24>
 800a362:	681c      	ldr	r4, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	4421      	add	r1, r4
 800a368:	6053      	str	r3, [r2, #4]
 800a36a:	6011      	str	r1, [r2, #0]
 800a36c:	e7da      	b.n	800a324 <_free_r+0x24>
 800a36e:	d902      	bls.n	800a376 <_free_r+0x76>
 800a370:	230c      	movs	r3, #12
 800a372:	6003      	str	r3, [r0, #0]
 800a374:	e7d6      	b.n	800a324 <_free_r+0x24>
 800a376:	6825      	ldr	r5, [r4, #0]
 800a378:	1961      	adds	r1, r4, r5
 800a37a:	428b      	cmp	r3, r1
 800a37c:	bf02      	ittt	eq
 800a37e:	6819      	ldreq	r1, [r3, #0]
 800a380:	685b      	ldreq	r3, [r3, #4]
 800a382:	1949      	addeq	r1, r1, r5
 800a384:	6063      	str	r3, [r4, #4]
 800a386:	bf08      	it	eq
 800a388:	6021      	streq	r1, [r4, #0]
 800a38a:	6054      	str	r4, [r2, #4]
 800a38c:	e7ca      	b.n	800a324 <_free_r+0x24>
 800a38e:	b003      	add	sp, #12
 800a390:	bd30      	pop	{r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	20001350 	.word	0x20001350

0800a398 <sbrk_aligned>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	4e0e      	ldr	r6, [pc, #56]	; (800a3d4 <sbrk_aligned+0x3c>)
 800a39c:	460c      	mov	r4, r1
 800a39e:	4605      	mov	r5, r0
 800a3a0:	6831      	ldr	r1, [r6, #0]
 800a3a2:	b911      	cbnz	r1, 800a3aa <sbrk_aligned+0x12>
 800a3a4:	f000 f88c 	bl	800a4c0 <_sbrk_r>
 800a3a8:	6030      	str	r0, [r6, #0]
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 f887 	bl	800a4c0 <_sbrk_r>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d00a      	beq.n	800a3cc <sbrk_aligned+0x34>
 800a3b6:	1cc4      	adds	r4, r0, #3
 800a3b8:	f024 0403 	bic.w	r4, r4, #3
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d007      	beq.n	800a3d0 <sbrk_aligned+0x38>
 800a3c0:	1a21      	subs	r1, r4, r0
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 f87c 	bl	800a4c0 <_sbrk_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d101      	bne.n	800a3d0 <sbrk_aligned+0x38>
 800a3cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	20001354 	.word	0x20001354

0800a3d8 <_malloc_r>:
 800a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3dc:	1ccd      	adds	r5, r1, #3
 800a3de:	4607      	mov	r7, r0
 800a3e0:	f025 0503 	bic.w	r5, r5, #3
 800a3e4:	3508      	adds	r5, #8
 800a3e6:	2d0c      	cmp	r5, #12
 800a3e8:	bf38      	it	cc
 800a3ea:	250c      	movcc	r5, #12
 800a3ec:	2d00      	cmp	r5, #0
 800a3ee:	db01      	blt.n	800a3f4 <_malloc_r+0x1c>
 800a3f0:	42a9      	cmp	r1, r5
 800a3f2:	d905      	bls.n	800a400 <_malloc_r+0x28>
 800a3f4:	230c      	movs	r3, #12
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	603b      	str	r3, [r7, #0]
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a400:	4e2e      	ldr	r6, [pc, #184]	; (800a4bc <_malloc_r+0xe4>)
 800a402:	f000 f8eb 	bl	800a5dc <__malloc_lock>
 800a406:	6833      	ldr	r3, [r6, #0]
 800a408:	461c      	mov	r4, r3
 800a40a:	bb34      	cbnz	r4, 800a45a <_malloc_r+0x82>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4638      	mov	r0, r7
 800a410:	f7ff ffc2 	bl	800a398 <sbrk_aligned>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	4604      	mov	r4, r0
 800a418:	d14d      	bne.n	800a4b6 <_malloc_r+0xde>
 800a41a:	6834      	ldr	r4, [r6, #0]
 800a41c:	4626      	mov	r6, r4
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d140      	bne.n	800a4a4 <_malloc_r+0xcc>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	4631      	mov	r1, r6
 800a426:	4638      	mov	r0, r7
 800a428:	eb04 0803 	add.w	r8, r4, r3
 800a42c:	f000 f848 	bl	800a4c0 <_sbrk_r>
 800a430:	4580      	cmp	r8, r0
 800a432:	d13a      	bne.n	800a4aa <_malloc_r+0xd2>
 800a434:	6821      	ldr	r1, [r4, #0]
 800a436:	3503      	adds	r5, #3
 800a438:	4638      	mov	r0, r7
 800a43a:	1a6d      	subs	r5, r5, r1
 800a43c:	f025 0503 	bic.w	r5, r5, #3
 800a440:	3508      	adds	r5, #8
 800a442:	2d0c      	cmp	r5, #12
 800a444:	bf38      	it	cc
 800a446:	250c      	movcc	r5, #12
 800a448:	4629      	mov	r1, r5
 800a44a:	f7ff ffa5 	bl	800a398 <sbrk_aligned>
 800a44e:	3001      	adds	r0, #1
 800a450:	d02b      	beq.n	800a4aa <_malloc_r+0xd2>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	442b      	add	r3, r5
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	e00e      	b.n	800a478 <_malloc_r+0xa0>
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	1b52      	subs	r2, r2, r5
 800a45e:	d41e      	bmi.n	800a49e <_malloc_r+0xc6>
 800a460:	2a0b      	cmp	r2, #11
 800a462:	d916      	bls.n	800a492 <_malloc_r+0xba>
 800a464:	1961      	adds	r1, r4, r5
 800a466:	42a3      	cmp	r3, r4
 800a468:	6025      	str	r5, [r4, #0]
 800a46a:	bf18      	it	ne
 800a46c:	6059      	strne	r1, [r3, #4]
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	bf08      	it	eq
 800a472:	6031      	streq	r1, [r6, #0]
 800a474:	5162      	str	r2, [r4, r5]
 800a476:	604b      	str	r3, [r1, #4]
 800a478:	f104 060b 	add.w	r6, r4, #11
 800a47c:	4638      	mov	r0, r7
 800a47e:	f000 f8b3 	bl	800a5e8 <__malloc_unlock>
 800a482:	1d23      	adds	r3, r4, #4
 800a484:	f026 0607 	bic.w	r6, r6, #7
 800a488:	1af2      	subs	r2, r6, r3
 800a48a:	d0b6      	beq.n	800a3fa <_malloc_r+0x22>
 800a48c:	1b9b      	subs	r3, r3, r6
 800a48e:	50a3      	str	r3, [r4, r2]
 800a490:	e7b3      	b.n	800a3fa <_malloc_r+0x22>
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	42a3      	cmp	r3, r4
 800a496:	bf0c      	ite	eq
 800a498:	6032      	streq	r2, [r6, #0]
 800a49a:	605a      	strne	r2, [r3, #4]
 800a49c:	e7ec      	b.n	800a478 <_malloc_r+0xa0>
 800a49e:	4623      	mov	r3, r4
 800a4a0:	6864      	ldr	r4, [r4, #4]
 800a4a2:	e7b2      	b.n	800a40a <_malloc_r+0x32>
 800a4a4:	4634      	mov	r4, r6
 800a4a6:	6876      	ldr	r6, [r6, #4]
 800a4a8:	e7b9      	b.n	800a41e <_malloc_r+0x46>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	f000 f89a 	bl	800a5e8 <__malloc_unlock>
 800a4b4:	e7a1      	b.n	800a3fa <_malloc_r+0x22>
 800a4b6:	6025      	str	r5, [r4, #0]
 800a4b8:	e7de      	b.n	800a478 <_malloc_r+0xa0>
 800a4ba:	bf00      	nop
 800a4bc:	20001350 	.word	0x20001350

0800a4c0 <_sbrk_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	4d05      	ldr	r5, [pc, #20]	; (800a4dc <_sbrk_r+0x1c>)
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f9 fb1c 	bl	8003b08 <_sbrk>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_sbrk_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_sbrk_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	20001358 	.word	0x20001358

0800a4e0 <_raise_r>:
 800a4e0:	291f      	cmp	r1, #31
 800a4e2:	b538      	push	{r3, r4, r5, lr}
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	460d      	mov	r5, r1
 800a4e8:	d904      	bls.n	800a4f4 <_raise_r+0x14>
 800a4ea:	2316      	movs	r3, #22
 800a4ec:	6003      	str	r3, [r0, #0]
 800a4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4f6:	b112      	cbz	r2, 800a4fe <_raise_r+0x1e>
 800a4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4fc:	b94b      	cbnz	r3, 800a512 <_raise_r+0x32>
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 f830 	bl	800a564 <_getpid_r>
 800a504:	462a      	mov	r2, r5
 800a506:	4601      	mov	r1, r0
 800a508:	4620      	mov	r0, r4
 800a50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a50e:	f000 b817 	b.w	800a540 <_kill_r>
 800a512:	2b01      	cmp	r3, #1
 800a514:	d00a      	beq.n	800a52c <_raise_r+0x4c>
 800a516:	1c59      	adds	r1, r3, #1
 800a518:	d103      	bne.n	800a522 <_raise_r+0x42>
 800a51a:	2316      	movs	r3, #22
 800a51c:	6003      	str	r3, [r0, #0]
 800a51e:	2001      	movs	r0, #1
 800a520:	e7e7      	b.n	800a4f2 <_raise_r+0x12>
 800a522:	2400      	movs	r4, #0
 800a524:	4628      	mov	r0, r5
 800a526:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a52a:	4798      	blx	r3
 800a52c:	2000      	movs	r0, #0
 800a52e:	e7e0      	b.n	800a4f2 <_raise_r+0x12>

0800a530 <raise>:
 800a530:	4b02      	ldr	r3, [pc, #8]	; (800a53c <raise+0xc>)
 800a532:	4601      	mov	r1, r0
 800a534:	6818      	ldr	r0, [r3, #0]
 800a536:	f7ff bfd3 	b.w	800a4e0 <_raise_r>
 800a53a:	bf00      	nop
 800a53c:	20000010 	.word	0x20000010

0800a540 <_kill_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	2300      	movs	r3, #0
 800a544:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_kill_r+0x20>)
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	4611      	mov	r1, r2
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	f7f9 fac1 	bl	8003ad4 <_kill>
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	d102      	bne.n	800a55c <_kill_r+0x1c>
 800a556:	682b      	ldr	r3, [r5, #0]
 800a558:	b103      	cbz	r3, 800a55c <_kill_r+0x1c>
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	bd38      	pop	{r3, r4, r5, pc}
 800a55e:	bf00      	nop
 800a560:	20001358 	.word	0x20001358

0800a564 <_getpid_r>:
 800a564:	f7f9 baae 	b.w	8003ac4 <_getpid>

0800a568 <_vsniprintf_r>:
 800a568:	b530      	push	{r4, r5, lr}
 800a56a:	4614      	mov	r4, r2
 800a56c:	b09b      	sub	sp, #108	; 0x6c
 800a56e:	4605      	mov	r5, r0
 800a570:	461a      	mov	r2, r3
 800a572:	2c00      	cmp	r4, #0
 800a574:	da05      	bge.n	800a582 <_vsniprintf_r+0x1a>
 800a576:	238b      	movs	r3, #139	; 0x8b
 800a578:	6003      	str	r3, [r0, #0]
 800a57a:	f04f 30ff 	mov.w	r0, #4294967295
 800a57e:	b01b      	add	sp, #108	; 0x6c
 800a580:	bd30      	pop	{r4, r5, pc}
 800a582:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a586:	9100      	str	r1, [sp, #0]
 800a588:	9104      	str	r1, [sp, #16]
 800a58a:	4669      	mov	r1, sp
 800a58c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a590:	bf14      	ite	ne
 800a592:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a596:	4623      	moveq	r3, r4
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	9305      	str	r3, [sp, #20]
 800a59c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a5a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5a6:	f000 f881 	bl	800a6ac <_svfiprintf_r>
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	bfbc      	itt	lt
 800a5ae:	238b      	movlt	r3, #139	; 0x8b
 800a5b0:	602b      	strlt	r3, [r5, #0]
 800a5b2:	2c00      	cmp	r4, #0
 800a5b4:	d0e3      	beq.n	800a57e <_vsniprintf_r+0x16>
 800a5b6:	9b00      	ldr	r3, [sp, #0]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	e7df      	b.n	800a57e <_vsniprintf_r+0x16>
	...

0800a5c0 <vsniprintf>:
 800a5c0:	b507      	push	{r0, r1, r2, lr}
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	460a      	mov	r2, r1
 800a5c8:	4601      	mov	r1, r0
 800a5ca:	4803      	ldr	r0, [pc, #12]	; (800a5d8 <vsniprintf+0x18>)
 800a5cc:	6800      	ldr	r0, [r0, #0]
 800a5ce:	f7ff ffcb 	bl	800a568 <_vsniprintf_r>
 800a5d2:	b003      	add	sp, #12
 800a5d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5d8:	20000010 	.word	0x20000010

0800a5dc <__malloc_lock>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	; (800a5e4 <__malloc_lock+0x8>)
 800a5de:	f000 bafb 	b.w	800abd8 <__retarget_lock_acquire_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	2000135c 	.word	0x2000135c

0800a5e8 <__malloc_unlock>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__malloc_unlock+0x8>)
 800a5ea:	f000 baf6 	b.w	800abda <__retarget_lock_release_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	2000135c 	.word	0x2000135c

0800a5f4 <__ssputs_r>:
 800a5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	688e      	ldr	r6, [r1, #8]
 800a5fa:	4682      	mov	sl, r0
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	4690      	mov	r8, r2
 800a600:	429e      	cmp	r6, r3
 800a602:	461f      	mov	r7, r3
 800a604:	d838      	bhi.n	800a678 <__ssputs_r+0x84>
 800a606:	898a      	ldrh	r2, [r1, #12]
 800a608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a60c:	d032      	beq.n	800a674 <__ssputs_r+0x80>
 800a60e:	6825      	ldr	r5, [r4, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	6909      	ldr	r1, [r1, #16]
 800a614:	eba5 0901 	sub.w	r9, r5, r1
 800a618:	6965      	ldr	r5, [r4, #20]
 800a61a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a61e:	444b      	add	r3, r9
 800a620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a624:	106d      	asrs	r5, r5, #1
 800a626:	429d      	cmp	r5, r3
 800a628:	bf38      	it	cc
 800a62a:	461d      	movcc	r5, r3
 800a62c:	0553      	lsls	r3, r2, #21
 800a62e:	d531      	bpl.n	800a694 <__ssputs_r+0xa0>
 800a630:	4629      	mov	r1, r5
 800a632:	f7ff fed1 	bl	800a3d8 <_malloc_r>
 800a636:	4606      	mov	r6, r0
 800a638:	b950      	cbnz	r0, 800a650 <__ssputs_r+0x5c>
 800a63a:	230c      	movs	r3, #12
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295
 800a640:	f8ca 3000 	str.w	r3, [sl]
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a64a:	81a3      	strh	r3, [r4, #12]
 800a64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a650:	464a      	mov	r2, r9
 800a652:	6921      	ldr	r1, [r4, #16]
 800a654:	f7ff fe3e 	bl	800a2d4 <memcpy>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a65e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	6126      	str	r6, [r4, #16]
 800a666:	444e      	add	r6, r9
 800a668:	6165      	str	r5, [r4, #20]
 800a66a:	eba5 0509 	sub.w	r5, r5, r9
 800a66e:	6026      	str	r6, [r4, #0]
 800a670:	463e      	mov	r6, r7
 800a672:	60a5      	str	r5, [r4, #8]
 800a674:	42be      	cmp	r6, r7
 800a676:	d900      	bls.n	800a67a <__ssputs_r+0x86>
 800a678:	463e      	mov	r6, r7
 800a67a:	4632      	mov	r2, r6
 800a67c:	4641      	mov	r1, r8
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	f000 faba 	bl	800abf8 <memmove>
 800a684:	68a3      	ldr	r3, [r4, #8]
 800a686:	2000      	movs	r0, #0
 800a688:	1b9b      	subs	r3, r3, r6
 800a68a:	60a3      	str	r3, [r4, #8]
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	4433      	add	r3, r6
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	e7db      	b.n	800a64c <__ssputs_r+0x58>
 800a694:	462a      	mov	r2, r5
 800a696:	f000 fac9 	bl	800ac2c <_realloc_r>
 800a69a:	4606      	mov	r6, r0
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d1e1      	bne.n	800a664 <__ssputs_r+0x70>
 800a6a0:	6921      	ldr	r1, [r4, #16]
 800a6a2:	4650      	mov	r0, sl
 800a6a4:	f7ff fe2c 	bl	800a300 <_free_r>
 800a6a8:	e7c7      	b.n	800a63a <__ssputs_r+0x46>
	...

0800a6ac <_svfiprintf_r>:
 800a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	4698      	mov	r8, r3
 800a6b2:	898b      	ldrh	r3, [r1, #12]
 800a6b4:	b09d      	sub	sp, #116	; 0x74
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	061b      	lsls	r3, r3, #24
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	4614      	mov	r4, r2
 800a6be:	d50e      	bpl.n	800a6de <_svfiprintf_r+0x32>
 800a6c0:	690b      	ldr	r3, [r1, #16]
 800a6c2:	b963      	cbnz	r3, 800a6de <_svfiprintf_r+0x32>
 800a6c4:	2140      	movs	r1, #64	; 0x40
 800a6c6:	f7ff fe87 	bl	800a3d8 <_malloc_r>
 800a6ca:	6028      	str	r0, [r5, #0]
 800a6cc:	6128      	str	r0, [r5, #16]
 800a6ce:	b920      	cbnz	r0, 800a6da <_svfiprintf_r+0x2e>
 800a6d0:	230c      	movs	r3, #12
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d8:	e0d1      	b.n	800a87e <_svfiprintf_r+0x1d2>
 800a6da:	2340      	movs	r3, #64	; 0x40
 800a6dc:	616b      	str	r3, [r5, #20]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6e4:	f04f 0901 	mov.w	r9, #1
 800a6e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a898 <_svfiprintf_r+0x1ec>
 800a6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f4:	2330      	movs	r3, #48	; 0x30
 800a6f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6fa:	4623      	mov	r3, r4
 800a6fc:	469a      	mov	sl, r3
 800a6fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a702:	b10a      	cbz	r2, 800a708 <_svfiprintf_r+0x5c>
 800a704:	2a25      	cmp	r2, #37	; 0x25
 800a706:	d1f9      	bne.n	800a6fc <_svfiprintf_r+0x50>
 800a708:	ebba 0b04 	subs.w	fp, sl, r4
 800a70c:	d00b      	beq.n	800a726 <_svfiprintf_r+0x7a>
 800a70e:	465b      	mov	r3, fp
 800a710:	4622      	mov	r2, r4
 800a712:	4629      	mov	r1, r5
 800a714:	4638      	mov	r0, r7
 800a716:	f7ff ff6d 	bl	800a5f4 <__ssputs_r>
 800a71a:	3001      	adds	r0, #1
 800a71c:	f000 80aa 	beq.w	800a874 <_svfiprintf_r+0x1c8>
 800a720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a722:	445a      	add	r2, fp
 800a724:	9209      	str	r2, [sp, #36]	; 0x24
 800a726:	f89a 3000 	ldrb.w	r3, [sl]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 80a2 	beq.w	800a874 <_svfiprintf_r+0x1c8>
 800a730:	2300      	movs	r3, #0
 800a732:	f04f 32ff 	mov.w	r2, #4294967295
 800a736:	f10a 0a01 	add.w	sl, sl, #1
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	9307      	str	r3, [sp, #28]
 800a73e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a742:	931a      	str	r3, [sp, #104]	; 0x68
 800a744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a748:	4654      	mov	r4, sl
 800a74a:	2205      	movs	r2, #5
 800a74c:	4852      	ldr	r0, [pc, #328]	; (800a898 <_svfiprintf_r+0x1ec>)
 800a74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a752:	f000 fa43 	bl	800abdc <memchr>
 800a756:	9a04      	ldr	r2, [sp, #16]
 800a758:	b9d8      	cbnz	r0, 800a792 <_svfiprintf_r+0xe6>
 800a75a:	06d0      	lsls	r0, r2, #27
 800a75c:	bf44      	itt	mi
 800a75e:	2320      	movmi	r3, #32
 800a760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a764:	0711      	lsls	r1, r2, #28
 800a766:	bf44      	itt	mi
 800a768:	232b      	movmi	r3, #43	; 0x2b
 800a76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a76e:	f89a 3000 	ldrb.w	r3, [sl]
 800a772:	2b2a      	cmp	r3, #42	; 0x2a
 800a774:	d015      	beq.n	800a7a2 <_svfiprintf_r+0xf6>
 800a776:	9a07      	ldr	r2, [sp, #28]
 800a778:	4654      	mov	r4, sl
 800a77a:	2000      	movs	r0, #0
 800a77c:	f04f 0c0a 	mov.w	ip, #10
 800a780:	4621      	mov	r1, r4
 800a782:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a786:	3b30      	subs	r3, #48	; 0x30
 800a788:	2b09      	cmp	r3, #9
 800a78a:	d94e      	bls.n	800a82a <_svfiprintf_r+0x17e>
 800a78c:	b1b0      	cbz	r0, 800a7bc <_svfiprintf_r+0x110>
 800a78e:	9207      	str	r2, [sp, #28]
 800a790:	e014      	b.n	800a7bc <_svfiprintf_r+0x110>
 800a792:	eba0 0308 	sub.w	r3, r0, r8
 800a796:	46a2      	mov	sl, r4
 800a798:	fa09 f303 	lsl.w	r3, r9, r3
 800a79c:	4313      	orrs	r3, r2
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	e7d2      	b.n	800a748 <_svfiprintf_r+0x9c>
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	1d19      	adds	r1, r3, #4
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	9103      	str	r1, [sp, #12]
 800a7ac:	bfbb      	ittet	lt
 800a7ae:	425b      	neglt	r3, r3
 800a7b0:	f042 0202 	orrlt.w	r2, r2, #2
 800a7b4:	9307      	strge	r3, [sp, #28]
 800a7b6:	9307      	strlt	r3, [sp, #28]
 800a7b8:	bfb8      	it	lt
 800a7ba:	9204      	strlt	r2, [sp, #16]
 800a7bc:	7823      	ldrb	r3, [r4, #0]
 800a7be:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c0:	d10c      	bne.n	800a7dc <_svfiprintf_r+0x130>
 800a7c2:	7863      	ldrb	r3, [r4, #1]
 800a7c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c6:	d135      	bne.n	800a834 <_svfiprintf_r+0x188>
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	3402      	adds	r4, #2
 800a7cc:	1d1a      	adds	r2, r3, #4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	9203      	str	r2, [sp, #12]
 800a7d4:	bfb8      	it	lt
 800a7d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8a8 <_svfiprintf_r+0x1fc>
 800a7e0:	2203      	movs	r2, #3
 800a7e2:	7821      	ldrb	r1, [r4, #0]
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	f000 f9f9 	bl	800abdc <memchr>
 800a7ea:	b140      	cbz	r0, 800a7fe <_svfiprintf_r+0x152>
 800a7ec:	2340      	movs	r3, #64	; 0x40
 800a7ee:	eba0 000a 	sub.w	r0, r0, sl
 800a7f2:	3401      	adds	r4, #1
 800a7f4:	fa03 f000 	lsl.w	r0, r3, r0
 800a7f8:	9b04      	ldr	r3, [sp, #16]
 800a7fa:	4303      	orrs	r3, r0
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a802:	2206      	movs	r2, #6
 800a804:	4825      	ldr	r0, [pc, #148]	; (800a89c <_svfiprintf_r+0x1f0>)
 800a806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a80a:	f000 f9e7 	bl	800abdc <memchr>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d038      	beq.n	800a884 <_svfiprintf_r+0x1d8>
 800a812:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <_svfiprintf_r+0x1f4>)
 800a814:	bb1b      	cbnz	r3, 800a85e <_svfiprintf_r+0x1b2>
 800a816:	9b03      	ldr	r3, [sp, #12]
 800a818:	3307      	adds	r3, #7
 800a81a:	f023 0307 	bic.w	r3, r3, #7
 800a81e:	3308      	adds	r3, #8
 800a820:	9303      	str	r3, [sp, #12]
 800a822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a824:	4433      	add	r3, r6
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	e767      	b.n	800a6fa <_svfiprintf_r+0x4e>
 800a82a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a82e:	460c      	mov	r4, r1
 800a830:	2001      	movs	r0, #1
 800a832:	e7a5      	b.n	800a780 <_svfiprintf_r+0xd4>
 800a834:	2300      	movs	r3, #0
 800a836:	3401      	adds	r4, #1
 800a838:	f04f 0c0a 	mov.w	ip, #10
 800a83c:	4619      	mov	r1, r3
 800a83e:	9305      	str	r3, [sp, #20]
 800a840:	4620      	mov	r0, r4
 800a842:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a846:	3a30      	subs	r2, #48	; 0x30
 800a848:	2a09      	cmp	r2, #9
 800a84a:	d903      	bls.n	800a854 <_svfiprintf_r+0x1a8>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0c5      	beq.n	800a7dc <_svfiprintf_r+0x130>
 800a850:	9105      	str	r1, [sp, #20]
 800a852:	e7c3      	b.n	800a7dc <_svfiprintf_r+0x130>
 800a854:	fb0c 2101 	mla	r1, ip, r1, r2
 800a858:	4604      	mov	r4, r0
 800a85a:	2301      	movs	r3, #1
 800a85c:	e7f0      	b.n	800a840 <_svfiprintf_r+0x194>
 800a85e:	ab03      	add	r3, sp, #12
 800a860:	462a      	mov	r2, r5
 800a862:	a904      	add	r1, sp, #16
 800a864:	4638      	mov	r0, r7
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	4b0e      	ldr	r3, [pc, #56]	; (800a8a4 <_svfiprintf_r+0x1f8>)
 800a86a:	e000      	b.n	800a86e <_svfiprintf_r+0x1c2>
 800a86c:	bf00      	nop
 800a86e:	1c42      	adds	r2, r0, #1
 800a870:	4606      	mov	r6, r0
 800a872:	d1d6      	bne.n	800a822 <_svfiprintf_r+0x176>
 800a874:	89ab      	ldrh	r3, [r5, #12]
 800a876:	065b      	lsls	r3, r3, #25
 800a878:	f53f af2c 	bmi.w	800a6d4 <_svfiprintf_r+0x28>
 800a87c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a87e:	b01d      	add	sp, #116	; 0x74
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a884:	ab03      	add	r3, sp, #12
 800a886:	462a      	mov	r2, r5
 800a888:	a904      	add	r1, sp, #16
 800a88a:	4638      	mov	r0, r7
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <_svfiprintf_r+0x1f8>)
 800a890:	f000 f87c 	bl	800a98c <_printf_i>
 800a894:	e7eb      	b.n	800a86e <_svfiprintf_r+0x1c2>
 800a896:	bf00      	nop
 800a898:	0800bc84 	.word	0x0800bc84
 800a89c:	0800bc8e 	.word	0x0800bc8e
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	0800a5f5 	.word	0x0800a5f5
 800a8a8:	0800bc8a 	.word	0x0800bc8a

0800a8ac <_printf_common>:
 800a8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	4699      	mov	r9, r3
 800a8b4:	688a      	ldr	r2, [r1, #8]
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	690b      	ldr	r3, [r1, #16]
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	bfb8      	it	lt
 800a8c4:	4613      	movlt	r3, r2
 800a8c6:	6033      	str	r3, [r6, #0]
 800a8c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8cc:	b10a      	cbz	r2, 800a8d2 <_printf_common+0x26>
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	6033      	str	r3, [r6, #0]
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	0699      	lsls	r1, r3, #26
 800a8d6:	bf42      	ittt	mi
 800a8d8:	6833      	ldrmi	r3, [r6, #0]
 800a8da:	3302      	addmi	r3, #2
 800a8dc:	6033      	strmi	r3, [r6, #0]
 800a8de:	6825      	ldr	r5, [r4, #0]
 800a8e0:	f015 0506 	ands.w	r5, r5, #6
 800a8e4:	d106      	bne.n	800a8f4 <_printf_common+0x48>
 800a8e6:	f104 0a19 	add.w	sl, r4, #25
 800a8ea:	68e3      	ldr	r3, [r4, #12]
 800a8ec:	6832      	ldr	r2, [r6, #0]
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	42ab      	cmp	r3, r5
 800a8f2:	dc29      	bgt.n	800a948 <_printf_common+0x9c>
 800a8f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8f8:	1e13      	subs	r3, r2, #0
 800a8fa:	6822      	ldr	r2, [r4, #0]
 800a8fc:	bf18      	it	ne
 800a8fe:	2301      	movne	r3, #1
 800a900:	0692      	lsls	r2, r2, #26
 800a902:	d42e      	bmi.n	800a962 <_printf_common+0xb6>
 800a904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a908:	4649      	mov	r1, r9
 800a90a:	4638      	mov	r0, r7
 800a90c:	47c0      	blx	r8
 800a90e:	3001      	adds	r0, #1
 800a910:	d021      	beq.n	800a956 <_printf_common+0xaa>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	341a      	adds	r4, #26
 800a916:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800a91a:	f003 0306 	and.w	r3, r3, #6
 800a91e:	6832      	ldr	r2, [r6, #0]
 800a920:	2600      	movs	r6, #0
 800a922:	2b04      	cmp	r3, #4
 800a924:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a928:	bf08      	it	eq
 800a92a:	1aad      	subeq	r5, r5, r2
 800a92c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a930:	bf14      	ite	ne
 800a932:	2500      	movne	r5, #0
 800a934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a938:	4293      	cmp	r3, r2
 800a93a:	bfc4      	itt	gt
 800a93c:	1a9b      	subgt	r3, r3, r2
 800a93e:	18ed      	addgt	r5, r5, r3
 800a940:	42b5      	cmp	r5, r6
 800a942:	d11a      	bne.n	800a97a <_printf_common+0xce>
 800a944:	2000      	movs	r0, #0
 800a946:	e008      	b.n	800a95a <_printf_common+0xae>
 800a948:	2301      	movs	r3, #1
 800a94a:	4652      	mov	r2, sl
 800a94c:	4649      	mov	r1, r9
 800a94e:	4638      	mov	r0, r7
 800a950:	47c0      	blx	r8
 800a952:	3001      	adds	r0, #1
 800a954:	d103      	bne.n	800a95e <_printf_common+0xb2>
 800a956:	f04f 30ff 	mov.w	r0, #4294967295
 800a95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95e:	3501      	adds	r5, #1
 800a960:	e7c3      	b.n	800a8ea <_printf_common+0x3e>
 800a962:	18e1      	adds	r1, r4, r3
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	2030      	movs	r0, #48	; 0x30
 800a968:	3302      	adds	r3, #2
 800a96a:	4422      	add	r2, r4
 800a96c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a978:	e7c4      	b.n	800a904 <_printf_common+0x58>
 800a97a:	2301      	movs	r3, #1
 800a97c:	4622      	mov	r2, r4
 800a97e:	4649      	mov	r1, r9
 800a980:	4638      	mov	r0, r7
 800a982:	47c0      	blx	r8
 800a984:	3001      	adds	r0, #1
 800a986:	d0e6      	beq.n	800a956 <_printf_common+0xaa>
 800a988:	3601      	adds	r6, #1
 800a98a:	e7d9      	b.n	800a940 <_printf_common+0x94>

0800a98c <_printf_i>:
 800a98c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	7e0f      	ldrb	r7, [r1, #24]
 800a992:	4691      	mov	r9, r2
 800a994:	4680      	mov	r8, r0
 800a996:	460c      	mov	r4, r1
 800a998:	2f78      	cmp	r7, #120	; 0x78
 800a99a:	469a      	mov	sl, r3
 800a99c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a99e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9a2:	d807      	bhi.n	800a9b4 <_printf_i+0x28>
 800a9a4:	2f62      	cmp	r7, #98	; 0x62
 800a9a6:	d80a      	bhi.n	800a9be <_printf_i+0x32>
 800a9a8:	2f00      	cmp	r7, #0
 800a9aa:	f000 80d8 	beq.w	800ab5e <_printf_i+0x1d2>
 800a9ae:	2f58      	cmp	r7, #88	; 0x58
 800a9b0:	f000 80a3 	beq.w	800aafa <_printf_i+0x16e>
 800a9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9bc:	e03a      	b.n	800aa34 <_printf_i+0xa8>
 800a9be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9c2:	2b15      	cmp	r3, #21
 800a9c4:	d8f6      	bhi.n	800a9b4 <_printf_i+0x28>
 800a9c6:	a101      	add	r1, pc, #4	; (adr r1, 800a9cc <_printf_i+0x40>)
 800a9c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9cc:	0800aa25 	.word	0x0800aa25
 800a9d0:	0800aa39 	.word	0x0800aa39
 800a9d4:	0800a9b5 	.word	0x0800a9b5
 800a9d8:	0800a9b5 	.word	0x0800a9b5
 800a9dc:	0800a9b5 	.word	0x0800a9b5
 800a9e0:	0800a9b5 	.word	0x0800a9b5
 800a9e4:	0800aa39 	.word	0x0800aa39
 800a9e8:	0800a9b5 	.word	0x0800a9b5
 800a9ec:	0800a9b5 	.word	0x0800a9b5
 800a9f0:	0800a9b5 	.word	0x0800a9b5
 800a9f4:	0800a9b5 	.word	0x0800a9b5
 800a9f8:	0800ab45 	.word	0x0800ab45
 800a9fc:	0800aa69 	.word	0x0800aa69
 800aa00:	0800ab27 	.word	0x0800ab27
 800aa04:	0800a9b5 	.word	0x0800a9b5
 800aa08:	0800a9b5 	.word	0x0800a9b5
 800aa0c:	0800ab67 	.word	0x0800ab67
 800aa10:	0800a9b5 	.word	0x0800a9b5
 800aa14:	0800aa69 	.word	0x0800aa69
 800aa18:	0800a9b5 	.word	0x0800a9b5
 800aa1c:	0800a9b5 	.word	0x0800a9b5
 800aa20:	0800ab2f 	.word	0x0800ab2f
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	602a      	str	r2, [r5, #0]
 800aa2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa34:	2301      	movs	r3, #1
 800aa36:	e0a3      	b.n	800ab80 <_printf_i+0x1f4>
 800aa38:	6820      	ldr	r0, [r4, #0]
 800aa3a:	6829      	ldr	r1, [r5, #0]
 800aa3c:	0606      	lsls	r6, r0, #24
 800aa3e:	f101 0304 	add.w	r3, r1, #4
 800aa42:	d50a      	bpl.n	800aa5a <_printf_i+0xce>
 800aa44:	680e      	ldr	r6, [r1, #0]
 800aa46:	602b      	str	r3, [r5, #0]
 800aa48:	2e00      	cmp	r6, #0
 800aa4a:	da03      	bge.n	800aa54 <_printf_i+0xc8>
 800aa4c:	232d      	movs	r3, #45	; 0x2d
 800aa4e:	4276      	negs	r6, r6
 800aa50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa54:	485e      	ldr	r0, [pc, #376]	; (800abd0 <_printf_i+0x244>)
 800aa56:	230a      	movs	r3, #10
 800aa58:	e019      	b.n	800aa8e <_printf_i+0x102>
 800aa5a:	680e      	ldr	r6, [r1, #0]
 800aa5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	bf18      	it	ne
 800aa64:	b236      	sxthne	r6, r6
 800aa66:	e7ef      	b.n	800aa48 <_printf_i+0xbc>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	6820      	ldr	r0, [r4, #0]
 800aa6c:	1d19      	adds	r1, r3, #4
 800aa6e:	6029      	str	r1, [r5, #0]
 800aa70:	0601      	lsls	r1, r0, #24
 800aa72:	d501      	bpl.n	800aa78 <_printf_i+0xec>
 800aa74:	681e      	ldr	r6, [r3, #0]
 800aa76:	e002      	b.n	800aa7e <_printf_i+0xf2>
 800aa78:	0646      	lsls	r6, r0, #25
 800aa7a:	d5fb      	bpl.n	800aa74 <_printf_i+0xe8>
 800aa7c:	881e      	ldrh	r6, [r3, #0]
 800aa7e:	2f6f      	cmp	r7, #111	; 0x6f
 800aa80:	4853      	ldr	r0, [pc, #332]	; (800abd0 <_printf_i+0x244>)
 800aa82:	bf0c      	ite	eq
 800aa84:	2308      	moveq	r3, #8
 800aa86:	230a      	movne	r3, #10
 800aa88:	2100      	movs	r1, #0
 800aa8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa8e:	6865      	ldr	r5, [r4, #4]
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	60a5      	str	r5, [r4, #8]
 800aa94:	bfa2      	ittt	ge
 800aa96:	6821      	ldrge	r1, [r4, #0]
 800aa98:	f021 0104 	bicge.w	r1, r1, #4
 800aa9c:	6021      	strge	r1, [r4, #0]
 800aa9e:	b90e      	cbnz	r6, 800aaa4 <_printf_i+0x118>
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	d04d      	beq.n	800ab40 <_printf_i+0x1b4>
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaaa:	fb03 6711 	mls	r7, r3, r1, r6
 800aaae:	5dc7      	ldrb	r7, [r0, r7]
 800aab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aab4:	4637      	mov	r7, r6
 800aab6:	460e      	mov	r6, r1
 800aab8:	42bb      	cmp	r3, r7
 800aaba:	d9f4      	bls.n	800aaa6 <_printf_i+0x11a>
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d10b      	bne.n	800aad8 <_printf_i+0x14c>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	07de      	lsls	r6, r3, #31
 800aac4:	d508      	bpl.n	800aad8 <_printf_i+0x14c>
 800aac6:	6923      	ldr	r3, [r4, #16]
 800aac8:	6861      	ldr	r1, [r4, #4]
 800aaca:	4299      	cmp	r1, r3
 800aacc:	bfde      	ittt	le
 800aace:	2330      	movle	r3, #48	; 0x30
 800aad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aad8:	1b52      	subs	r2, r2, r5
 800aada:	6122      	str	r2, [r4, #16]
 800aadc:	464b      	mov	r3, r9
 800aade:	aa03      	add	r2, sp, #12
 800aae0:	4621      	mov	r1, r4
 800aae2:	4640      	mov	r0, r8
 800aae4:	f8cd a000 	str.w	sl, [sp]
 800aae8:	f7ff fee0 	bl	800a8ac <_printf_common>
 800aaec:	3001      	adds	r0, #1
 800aaee:	d14c      	bne.n	800ab8a <_printf_i+0x1fe>
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	b004      	add	sp, #16
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	4835      	ldr	r0, [pc, #212]	; (800abd0 <_printf_i+0x244>)
 800aafc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab00:	6829      	ldr	r1, [r5, #0]
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab08:	6029      	str	r1, [r5, #0]
 800ab0a:	061d      	lsls	r5, r3, #24
 800ab0c:	d514      	bpl.n	800ab38 <_printf_i+0x1ac>
 800ab0e:	07df      	lsls	r7, r3, #31
 800ab10:	bf44      	itt	mi
 800ab12:	f043 0320 	orrmi.w	r3, r3, #32
 800ab16:	6023      	strmi	r3, [r4, #0]
 800ab18:	b91e      	cbnz	r6, 800ab22 <_printf_i+0x196>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	f023 0320 	bic.w	r3, r3, #32
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	2310      	movs	r3, #16
 800ab24:	e7b0      	b.n	800aa88 <_printf_i+0xfc>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	f043 0320 	orr.w	r3, r3, #32
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	2378      	movs	r3, #120	; 0x78
 800ab30:	4828      	ldr	r0, [pc, #160]	; (800abd4 <_printf_i+0x248>)
 800ab32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab36:	e7e3      	b.n	800ab00 <_printf_i+0x174>
 800ab38:	0659      	lsls	r1, r3, #25
 800ab3a:	bf48      	it	mi
 800ab3c:	b2b6      	uxthmi	r6, r6
 800ab3e:	e7e6      	b.n	800ab0e <_printf_i+0x182>
 800ab40:	4615      	mov	r5, r2
 800ab42:	e7bb      	b.n	800aabc <_printf_i+0x130>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	6826      	ldr	r6, [r4, #0]
 800ab48:	1d18      	adds	r0, r3, #4
 800ab4a:	6961      	ldr	r1, [r4, #20]
 800ab4c:	6028      	str	r0, [r5, #0]
 800ab4e:	0635      	lsls	r5, r6, #24
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	d501      	bpl.n	800ab58 <_printf_i+0x1cc>
 800ab54:	6019      	str	r1, [r3, #0]
 800ab56:	e002      	b.n	800ab5e <_printf_i+0x1d2>
 800ab58:	0670      	lsls	r0, r6, #25
 800ab5a:	d5fb      	bpl.n	800ab54 <_printf_i+0x1c8>
 800ab5c:	8019      	strh	r1, [r3, #0]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	4615      	mov	r5, r2
 800ab62:	6123      	str	r3, [r4, #16]
 800ab64:	e7ba      	b.n	800aadc <_printf_i+0x150>
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	1d1a      	adds	r2, r3, #4
 800ab6c:	602a      	str	r2, [r5, #0]
 800ab6e:	681d      	ldr	r5, [r3, #0]
 800ab70:	6862      	ldr	r2, [r4, #4]
 800ab72:	4628      	mov	r0, r5
 800ab74:	f000 f832 	bl	800abdc <memchr>
 800ab78:	b108      	cbz	r0, 800ab7e <_printf_i+0x1f2>
 800ab7a:	1b40      	subs	r0, r0, r5
 800ab7c:	6060      	str	r0, [r4, #4]
 800ab7e:	6863      	ldr	r3, [r4, #4]
 800ab80:	6123      	str	r3, [r4, #16]
 800ab82:	2300      	movs	r3, #0
 800ab84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab88:	e7a8      	b.n	800aadc <_printf_i+0x150>
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4649      	mov	r1, r9
 800ab90:	4640      	mov	r0, r8
 800ab92:	47d0      	blx	sl
 800ab94:	3001      	adds	r0, #1
 800ab96:	d0ab      	beq.n	800aaf0 <_printf_i+0x164>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	079b      	lsls	r3, r3, #30
 800ab9c:	d413      	bmi.n	800abc6 <_printf_i+0x23a>
 800ab9e:	68e0      	ldr	r0, [r4, #12]
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	4298      	cmp	r0, r3
 800aba4:	bfb8      	it	lt
 800aba6:	4618      	movlt	r0, r3
 800aba8:	e7a4      	b.n	800aaf4 <_printf_i+0x168>
 800abaa:	2301      	movs	r3, #1
 800abac:	4632      	mov	r2, r6
 800abae:	4649      	mov	r1, r9
 800abb0:	4640      	mov	r0, r8
 800abb2:	47d0      	blx	sl
 800abb4:	3001      	adds	r0, #1
 800abb6:	d09b      	beq.n	800aaf0 <_printf_i+0x164>
 800abb8:	3501      	adds	r5, #1
 800abba:	68e3      	ldr	r3, [r4, #12]
 800abbc:	9903      	ldr	r1, [sp, #12]
 800abbe:	1a5b      	subs	r3, r3, r1
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dcf2      	bgt.n	800abaa <_printf_i+0x21e>
 800abc4:	e7eb      	b.n	800ab9e <_printf_i+0x212>
 800abc6:	2500      	movs	r5, #0
 800abc8:	f104 0619 	add.w	r6, r4, #25
 800abcc:	e7f5      	b.n	800abba <_printf_i+0x22e>
 800abce:	bf00      	nop
 800abd0:	0800bc95 	.word	0x0800bc95
 800abd4:	0800bca6 	.word	0x0800bca6

0800abd8 <__retarget_lock_acquire_recursive>:
 800abd8:	4770      	bx	lr

0800abda <__retarget_lock_release_recursive>:
 800abda:	4770      	bx	lr

0800abdc <memchr>:
 800abdc:	b2c9      	uxtb	r1, r1
 800abde:	4402      	add	r2, r0
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4290      	cmp	r0, r2
 800abe4:	4603      	mov	r3, r0
 800abe6:	d101      	bne.n	800abec <memchr+0x10>
 800abe8:	2300      	movs	r3, #0
 800abea:	e003      	b.n	800abf4 <memchr+0x18>
 800abec:	781c      	ldrb	r4, [r3, #0]
 800abee:	3001      	adds	r0, #1
 800abf0:	428c      	cmp	r4, r1
 800abf2:	d1f6      	bne.n	800abe2 <memchr+0x6>
 800abf4:	4618      	mov	r0, r3
 800abf6:	bd10      	pop	{r4, pc}

0800abf8 <memmove>:
 800abf8:	4288      	cmp	r0, r1
 800abfa:	b510      	push	{r4, lr}
 800abfc:	eb01 0402 	add.w	r4, r1, r2
 800ac00:	d902      	bls.n	800ac08 <memmove+0x10>
 800ac02:	4284      	cmp	r4, r0
 800ac04:	4623      	mov	r3, r4
 800ac06:	d807      	bhi.n	800ac18 <memmove+0x20>
 800ac08:	1e43      	subs	r3, r0, #1
 800ac0a:	42a1      	cmp	r1, r4
 800ac0c:	d008      	beq.n	800ac20 <memmove+0x28>
 800ac0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac16:	e7f8      	b.n	800ac0a <memmove+0x12>
 800ac18:	4402      	add	r2, r0
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	428a      	cmp	r2, r1
 800ac1e:	d100      	bne.n	800ac22 <memmove+0x2a>
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac2a:	e7f7      	b.n	800ac1c <memmove+0x24>

0800ac2c <_realloc_r>:
 800ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac30:	4680      	mov	r8, r0
 800ac32:	4614      	mov	r4, r2
 800ac34:	460e      	mov	r6, r1
 800ac36:	b921      	cbnz	r1, 800ac42 <_realloc_r+0x16>
 800ac38:	4611      	mov	r1, r2
 800ac3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3e:	f7ff bbcb 	b.w	800a3d8 <_malloc_r>
 800ac42:	b92a      	cbnz	r2, 800ac50 <_realloc_r+0x24>
 800ac44:	4625      	mov	r5, r4
 800ac46:	f7ff fb5b 	bl	800a300 <_free_r>
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	f000 f81b 	bl	800ac8a <_malloc_usable_size_r>
 800ac54:	4284      	cmp	r4, r0
 800ac56:	4607      	mov	r7, r0
 800ac58:	d802      	bhi.n	800ac60 <_realloc_r+0x34>
 800ac5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac5e:	d812      	bhi.n	800ac86 <_realloc_r+0x5a>
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7ff fbb8 	bl	800a3d8 <_malloc_r>
 800ac68:	4605      	mov	r5, r0
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d0ed      	beq.n	800ac4a <_realloc_r+0x1e>
 800ac6e:	42bc      	cmp	r4, r7
 800ac70:	4622      	mov	r2, r4
 800ac72:	4631      	mov	r1, r6
 800ac74:	bf28      	it	cs
 800ac76:	463a      	movcs	r2, r7
 800ac78:	f7ff fb2c 	bl	800a2d4 <memcpy>
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4640      	mov	r0, r8
 800ac80:	f7ff fb3e 	bl	800a300 <_free_r>
 800ac84:	e7e1      	b.n	800ac4a <_realloc_r+0x1e>
 800ac86:	4635      	mov	r5, r6
 800ac88:	e7df      	b.n	800ac4a <_realloc_r+0x1e>

0800ac8a <_malloc_usable_size_r>:
 800ac8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac8e:	1f18      	subs	r0, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	bfbc      	itt	lt
 800ac94:	580b      	ldrlt	r3, [r1, r0]
 800ac96:	18c0      	addlt	r0, r0, r3
 800ac98:	4770      	bx	lr
	...

0800ac9c <_init>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr

0800aca8 <_fini>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	bf00      	nop
 800acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acae:	bc08      	pop	{r3}
 800acb0:	469e      	mov	lr, r3
 800acb2:	4770      	bx	lr
