
SimpleSystemManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e4  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b58  08007b58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b60  08007b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b64  08007b64  00017b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000070  08007bd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08007bd8  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024076  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b67  00000000  00000000  0004411c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00048c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  0004a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032ea0  00000000  00000000  0004ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f27c  00000000  00000000  0007e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f751  00000000  00000000  0009db7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cd2cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  001cd320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	08007ac0 	.word	0x08007ac0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	08007ac0 	.word	0x08007ac0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN9RCControlC1Ev>:
    };

    float &operator[] (int i) { return ControlSignals[i]; }

    /*  initial values*/
    RCControl()
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    {
        ControlSignals[0] = 50.0f;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000560:	601a      	str	r2, [r3, #0]
        ControlSignals[1] = 50.0f;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000566:	605a      	str	r2, [r3, #4]
        ControlSignals[2] = 0.0f;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
        ControlSignals[3] = 50.0f;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <_ZN9RCControlC1Ev+0x90>)
 8000574:	60da      	str	r2, [r3, #12]
        ControlSignals[4] = 0.0f;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
        ControlSignals[5] = 0.0f;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f04f 0200 	mov.w	r2, #0
 8000584:	615a      	str	r2, [r3, #20]
        ControlSignals[6] = 0.0f;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
        ControlSignals[7] = 0.0f;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f04f 0200 	mov.w	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
        ControlSignals[8] = 0.0f;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
        ControlSignals[9] = 0.0f;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
        ControlSignals[10] = 0.0f;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
        ControlSignals[11] = 0.0f;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
        ControlSignals[12] = 0.0f;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
        ControlSignals[13] = 0.0f;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f04f 0200 	mov.w	r2, #0
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
        ControlSignals[14] = 0.0f;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	639a      	str	r2, [r3, #56]	; 0x38
        ControlSignals[15] = 0.0f;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f04f 0200 	mov.w	r2, #0
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	42480000 	.word	0x42480000

080005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSReceiver.hpp"

SBUSReceiver* SBUSReceiver::singleton_ = NULL;

SBUSReceiver* SBUSReceiver::getInstance(UART_HandleTypeDef* uart){
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    if (singleton_ == NULL)
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10a      	bne.n	800060e <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x26>
    	singleton_ = new SBUSReceiver(uart);
 80005f8:	2088      	movs	r0, #136	; 0x88
 80005fa:	f007 f911 	bl	8007820 <_Znwj>
 80005fe:	4603      	mov	r3, r0
 8000600:	461c      	mov	r4, r3
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4620      	mov	r0, r4
 8000606:	f000 f80b 	bl	8000620 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 800060c:	601c      	str	r4, [r3, #0]

    // returning the instance pointer
    return singleton_;
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000610:	681b      	ldr	r3, [r3, #0]
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	bf00      	nop
 800061c:	2000008c 	.word	0x2000008c

08000620 <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef>:

SBUSReceiver::SBUSReceiver(UART_HandleTypeDef* uart) : uart_(uart)
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	61da      	str	r2, [r3, #28]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3348      	adds	r3, #72	; 0x48
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff8d 	bl	8000554 <_ZN9RCControlC1Ev>
{
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	dc0a      	bgt.n	800065a <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x3a>
    {
        received_sbus_.ch[i] = 1000;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	3210      	adds	r2, #16
 800064a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800064e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e7f1      	b.n	800063e <_ZN12SBUSReceiverC1EP20__UART_HandleTypeDef+0x1e>
    }
    received_sbus_.ch17 = false;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    received_sbus_.ch18 = false;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    received_sbus_.failsafe = false;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    received_sbus_.lost_frame = false;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    received_sbus_.new_data = false;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    HAL_UART_Receive_DMA (uart_, raw_sbus_, SBUS_FRAME_SIZE);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	2219      	movs	r2, #25
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fa86 	bl	8005b9c <HAL_UART_Receive_DMA>
}
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN12SBUSReceiver7GetSBUSEv>:

SBus SBUSReceiver::GetSBUS(){
 800069a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
    return received_sbus_;
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	f103 0420 	add.w	r4, r3, #32
 80006ac:	4694      	mov	ip, r2
 80006ae:	f104 0e20 	add.w	lr, r4, #32
 80006b2:	4665      	mov	r5, ip
 80006b4:	4626      	mov	r6, r4
 80006b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80006b8:	6028      	str	r0, [r5, #0]
 80006ba:	6069      	str	r1, [r5, #4]
 80006bc:	60aa      	str	r2, [r5, #8]
 80006be:	60eb      	str	r3, [r5, #12]
 80006c0:	3410      	adds	r4, #16
 80006c2:	f10c 0c10 	add.w	ip, ip, #16
 80006c6:	4574      	cmp	r4, lr
 80006c8:	d1f3      	bne.n	80006b2 <_ZN12SBUSReceiver7GetSBUSEv+0x18>
 80006ca:	4663      	mov	r3, ip
 80006cc:	4622      	mov	r2, r4
 80006ce:	6810      	ldr	r0, [r2, #0]
 80006d0:	6018      	str	r0, [r3, #0]
 80006d2:	8892      	ldrh	r2, [r2, #4]
 80006d4:	809a      	strh	r2, [r3, #4]
}
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006de <_ZN12SBUSReceiver12GetRCControlEv>:

RCControl SBUSReceiver::GetRCControl(){
 80006de:	b5b0      	push	{r4, r5, r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
    cast_rccontrol();
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f000 f985 	bl	80009f8 <_ZN12SBUSReceiver14cast_rccontrolEv>
    return received_rccontrol_;
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4615      	mov	r5, r2
 80006f4:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000708:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bdb0      	pop	{r4, r5, r7, pc}

08000714 <_ZN12SBUSReceiver5parseEv>:

void SBUSReceiver::parse()
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    if ((raw_sbus_[0] == HEADER_) && (raw_sbus_[24] == FOOTER_)) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	f040 815e 	bne.w	80009e2 <_ZN12SBUSReceiver5parseEv+0x2ce>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7e1b      	ldrb	r3, [r3, #24]
 800072a:	2b00      	cmp	r3, #0
 800072c:	f040 8159 	bne.w	80009e2 <_ZN12SBUSReceiver5parseEv+0x2ce>

        //exactal parsing
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[2] << 8) & 0x07FF));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000742:	b21b      	sxth	r3, r3
        received_sbus_.ch[0]  = static_cast<int16_t>(raw_sbus_[1] |
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	841a      	strh	r2, [r3, #32]
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[3] << 5) & 0x07FF));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	015b      	lsls	r3, r3, #5
 800075e:	b21b      	sxth	r3, r3
 8000760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000764:	b21b      	sxth	r3, r3
        received_sbus_.ch[1]  = static_cast<int16_t>((raw_sbus_[2] >> 3) |
 8000766:	4313      	orrs	r3, r2
 8000768:	b21b      	sxth	r3, r3
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	845a      	strh	r2, [r3, #34]	; 0x22
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	099b      	lsrs	r3, r3, #6
 8000776:	b2db      	uxtb	r3, r3
 8000778:	b21a      	sxth	r2, r3
                                            (raw_sbus_[4] << 2) |
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[5] << 10) & 0x07FF));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	b21b      	sxth	r3, r3
 800078e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000792:	b21b      	sxth	r3, r3
                                            (raw_sbus_[4] << 2) |
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
        received_sbus_.ch[2]  = static_cast<int16_t>((raw_sbus_[3] >> 6) |
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	849a      	strh	r2, [r3, #36]	; 0x24
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	085b      	lsrs	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[6] << 7) & 0x07FF));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	799b      	ldrb	r3, [r3, #6]
 80007ac:	01db      	lsls	r3, r3, #7
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007b4:	b21b      	sxth	r3, r3
        received_sbus_.ch[3]  = static_cast<int16_t>((raw_sbus_[5] >> 1) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	84da      	strh	r2, [r3, #38]	; 0x26
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	799b      	ldrb	r3, [r3, #6]
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[7] << 4) & 0x07FF));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	79db      	ldrb	r3, [r3, #7]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007d6:	b21b      	sxth	r3, r3
        received_sbus_.ch[4]  = static_cast<int16_t>((raw_sbus_[6] >> 4) |
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	b29a      	uxth	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	851a      	strh	r2, [r3, #40]	; 0x28
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	79db      	ldrb	r3, [r3, #7]
 80007e6:	09db      	lsrs	r3, r3, #7
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	b21a      	sxth	r2, r3
                                            (raw_sbus_[8] << 1) |
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a1b      	ldrb	r3, [r3, #8]
 80007f0:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[9] << 9) & 0x07FF));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7a5b      	ldrb	r3, [r3, #9]
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	b21b      	sxth	r3, r3
 8000800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000804:	b21b      	sxth	r3, r3
                                            (raw_sbus_[8] << 1) |
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
        received_sbus_.ch[5]  = static_cast<int16_t>((raw_sbus_[7] >> 7) |
 800080a:	b29a      	uxth	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	855a      	strh	r2, [r3, #42]	; 0x2a
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7a5b      	ldrb	r3, [r3, #9]
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[10] << 6) & 0x07FF));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7a9b      	ldrb	r3, [r3, #10]
 800081e:	019b      	lsls	r3, r3, #6
 8000820:	b21b      	sxth	r3, r3
 8000822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000826:	b21b      	sxth	r3, r3
        received_sbus_.ch[6]  = static_cast<int16_t>((raw_sbus_[9] >> 2) |
 8000828:	4313      	orrs	r3, r2
 800082a:	b21b      	sxth	r3, r3
 800082c:	b29a      	uxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	859a      	strh	r2, [r3, #44]	; 0x2c
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a9b      	ldrb	r3, [r3, #10]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[11] << 3) & 0x07FF));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7adb      	ldrb	r3, [r3, #11]
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	b21b      	sxth	r3, r3
 8000844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000848:	b21b      	sxth	r3, r3
        received_sbus_.ch[7]  = static_cast<int16_t>((raw_sbus_[10] >> 5) |
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	85da      	strh	r2, [r3, #46]	; 0x2e
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b1b      	ldrb	r3, [r3, #12]
 8000858:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[13] << 8) & 0x07FF));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7b5b      	ldrb	r3, [r3, #13]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21b      	sxth	r3, r3
 8000862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000866:	b21b      	sxth	r3, r3
        received_sbus_.ch[8]  = static_cast<int16_t>(raw_sbus_[12] |
 8000868:	4313      	orrs	r3, r2
 800086a:	b21b      	sxth	r3, r3
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	861a      	strh	r2, [r3, #48]	; 0x30
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7b5b      	ldrb	r3, [r3, #13]
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[14] << 5) & 0x07FF));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7b9b      	ldrb	r3, [r3, #14]
 8000880:	015b      	lsls	r3, r3, #5
 8000882:	b21b      	sxth	r3, r3
 8000884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000888:	b21b      	sxth	r3, r3
        received_sbus_.ch[9]  = static_cast<int16_t>((raw_sbus_[13] >> 3) |
 800088a:	4313      	orrs	r3, r2
 800088c:	b21b      	sxth	r3, r3
 800088e:	b29a      	uxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	865a      	strh	r2, [r3, #50]	; 0x32
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7b9b      	ldrb	r3, [r3, #14]
 8000898:	099b      	lsrs	r3, r3, #6
 800089a:	b2db      	uxtb	r3, r3
 800089c:	b21a      	sxth	r2, r3
                                            (raw_sbus_[15] << 2) |
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7bdb      	ldrb	r3, [r3, #15]
 80008a2:	009b      	lsls	r3, r3, #2
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[16] << 10) & 0x07FF));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7c1b      	ldrb	r3, [r3, #16]
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008b6:	b21b      	sxth	r3, r3
                                            (raw_sbus_[15] << 2) |
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21b      	sxth	r3, r3
        received_sbus_.ch[10] = static_cast<int16_t>((raw_sbus_[14] >> 6) |
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	869a      	strh	r2, [r3, #52]	; 0x34
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7c1b      	ldrb	r3, [r3, #16]
 80008c6:	085b      	lsrs	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[17] << 7) & 0x07FF));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7c5b      	ldrb	r3, [r3, #17]
 80008d0:	01db      	lsls	r3, r3, #7
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d8:	b21b      	sxth	r3, r3
        received_sbus_.ch[11] = static_cast<int16_t>((raw_sbus_[16] >> 1) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b29a      	uxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	86da      	strh	r2, [r3, #54]	; 0x36
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7c5b      	ldrb	r3, [r3, #17]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[18] << 4) & 0x07FF));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7c9b      	ldrb	r3, [r3, #18]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008fa:	b21b      	sxth	r3, r3
        received_sbus_.ch[12] = static_cast<int16_t>((raw_sbus_[17] >> 4) |
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	b29a      	uxth	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	871a      	strh	r2, [r3, #56]	; 0x38
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7c9b      	ldrb	r3, [r3, #18]
 800090a:	09db      	lsrs	r3, r3, #7
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b21a      	sxth	r2, r3
                                            (raw_sbus_[19] << 1) |
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7cdb      	ldrb	r3, [r3, #19]
 8000914:	005b      	lsls	r3, r3, #1
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 8000916:	b21b      	sxth	r3, r3
 8000918:	4313      	orrs	r3, r2
 800091a:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[20] << 9) & 0x07FF));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7d1b      	ldrb	r3, [r3, #20]
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	b21b      	sxth	r3, r3
 8000924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000928:	b21b      	sxth	r3, r3
                                            (raw_sbus_[19] << 1) |
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
        received_sbus_.ch[13] = static_cast<int16_t>((raw_sbus_[18] >> 7) |
 800092e:	b29a      	uxth	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	875a      	strh	r2, [r3, #58]	; 0x3a
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7d1b      	ldrb	r3, [r3, #20]
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	b2db      	uxtb	r3, r3
 800093c:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[21] << 6) & 0x07FF));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7d5b      	ldrb	r3, [r3, #21]
 8000942:	019b      	lsls	r3, r3, #6
 8000944:	b21b      	sxth	r3, r3
 8000946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800094a:	b21b      	sxth	r3, r3
        received_sbus_.ch[14] = static_cast<int16_t>((raw_sbus_[20] >> 2) |
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	879a      	strh	r2, [r3, #60]	; 0x3c
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7d5b      	ldrb	r3, [r3, #21]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b21a      	sxth	r2, r3
                                            ((raw_sbus_[22] << 3) & 0x07FF));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7d9b      	ldrb	r3, [r3, #22]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	b21b      	sxth	r3, r3
 8000968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800096c:	b21b      	sxth	r3, r3
        received_sbus_.ch[15] = static_cast<int16_t>((raw_sbus_[21] >> 5) |
 800096e:	4313      	orrs	r3, r2
 8000970:	b21b      	sxth	r3, r3
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* CH 17 */
        received_sbus_.ch17 = raw_sbus_[23] & CH17_MASK_;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7ddb      	ldrb	r3, [r3, #23]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        /* CH 18 */
        received_sbus_.ch18 = raw_sbus_[23] & CH18_MASK_;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7ddb      	ldrb	r3, [r3, #23]
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        /* Grab the lost frame */
        received_sbus_.lost_frame = raw_sbus_[23] & LOST_FRAME_MASK_;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7ddb      	ldrb	r3, [r3, #23]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        /* Grab the failsafe */
        received_sbus_.failsafe = raw_sbus_[23] & FAILSAFE_MASK_;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7ddb      	ldrb	r3, [r3, #23]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        received_sbus_.new_data = true;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009e0:	e004      	b.n	80009ec <_ZN12SBUSReceiver5parseEv+0x2d8>

    }else{
    	received_sbus_.new_data = false;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_ZN12SBUSReceiver14cast_rccontrolEv>:

void SBUSReceiver::cast_rccontrol()
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < 16; i++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d816      	bhi.n	8000a38 <_ZN12SBUSReceiver14cast_rccontrolEv+0x40>
        received_rccontrol_.ControlSignals[i] = sbus_to_rccontrol(received_sbus_.ch[i]);
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3210      	adds	r2, #16
 8000a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a14:	7bfc      	ldrb	r4, [r7, #15]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f811 	bl	8000a40 <_ZN12SBUSReceiver17sbus_to_rccontrolEt>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	f104 0312 	add.w	r3, r4, #18
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	edc3 7a00 	vstr	s15, [r3]
    for(uint8_t i = 0; i < 16; i++){
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3301      	adds	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e7e5      	b.n	8000a04 <_ZN12SBUSReceiver14cast_rccontrolEv+0xc>
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <_ZN12SBUSReceiver17sbus_to_rccontrolEt>:

 float SBUSReceiver::sbus_to_rccontrol(uint16_t channel_value)
 {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
    if(channel_value < SBUS_RANGE_MIN)
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	2bbf      	cmp	r3, #191	; 0xbf
 8000a50:	d801      	bhi.n	8000a56 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x16>
        channel_value = SBUS_RANGE_MIN;
 8000a52:	23c0      	movs	r3, #192	; 0xc0
 8000a54:	807b      	strh	r3, [r7, #2]
    if(channel_value > SBUS_RANGE_MAX)
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000a5c:	d902      	bls.n	8000a64 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x24>
        channel_value = SBUS_RANGE_MAX;
 8000a5e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a62:	807b      	strh	r3, [r7, #2]
    return static_cast<float>((channel_value - SBUS_RANGE_MIN) * (100.0f / SBUS_RANGE_RANGE));
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	3bc0      	subs	r3, #192	; 0xc0
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a70:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a88 <_ZN12SBUSReceiver17sbus_to_rccontrolEt+0x48>
 8000a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 }
 8000a78:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	3d800000 	.word	0x3d800000

08000a8c <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	 SBUSReceiver::getInstance(huart)->parse();
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fda7 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe39 	bl	8000714 <_ZN12SBUSReceiver5parseEv>
	 HAL_UART_Receive_DMA (huart, SBUSReceiver::getInstance(huart)->raw_sbus_, SBUS_FRAME_SIZE);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fda0 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2219      	movs	r2, #25
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f005 f874 	bl	8005b9c <HAL_UART_Receive_DMA>
 }
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>:
#include "../Inc/LOS_D_SBUSSender.hpp"

SBUSSender* SBUSSender::singleton_ = NULL;

SBUSSender* SBUSSender::getInstance(UART_HandleTypeDef* uart){
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    if (singleton_ == nullptr)
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10a      	bne.n	8000ae2 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x26>
      singleton_ = new SBUSSender(uart);
 8000acc:	2048      	movs	r0, #72	; 0x48
 8000ace:	f006 fea7 	bl	8007820 <_Znwj>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461c      	mov	r4, r3
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f000 f80b 	bl	8000af4 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000ae0:	601c      	str	r4, [r3, #0]
       
    // returning the instance pointer
    return singleton_;
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef+0x34>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000090 	.word	0x20000090

08000af4 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef>:

SBUSSender::SBUSSender(UART_HandleTypeDef* uart) : uart_(uart){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	dc0a      	bgt.n	8000b24 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x30>
	{
		send_sbus_.ch[i] = 1000;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	3210      	adds	r2, #16
 8000b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < SBUS_INPUT_CHANNELS; i++)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e7f1      	b.n	8000b08 <_ZN10SBUSSenderC1EP20__UART_HandleTypeDef+0x14>
	}
	send_sbus_.ch17 = false;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	send_sbus_.ch18 = false;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	send_sbus_.failsafe = false;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	send_sbus_.lost_frame = false;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	send_sbus_.new_data = false;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit_DMA(uart_, send_buf_, SBUS_FRAME_SIZE);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	2219      	movs	r2, #25
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 ffa1 	bl	8005a9c <HAL_UART_Transmit_DMA>
}
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZN10SBUSSender12SetSBusValueE4SBus>:

void SBUSSender::SetChannelValue(uint8_t channel, float value){
	send_sbus_.ch[channel] = rccontrol_to_sbus(value);
}

void SBUSSender::SetSBusValue(SBus values){
 8000b64:	b084      	sub	sp, #16
 8000b66:	b4b0      	push	{r4, r5, r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	f107 001c 	add.w	r0, r7, #28
 8000b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    send_sbus_ = values;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f103 0420 	add.w	r4, r3, #32
 8000b7c:	f107 051c 	add.w	r5, r7, #28
 8000b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b8c:	6020      	str	r0, [r4, #0]
 8000b8e:	3404      	adds	r4, #4
 8000b90:	8021      	strh	r1, [r4, #0]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bcb0      	pop	{r4, r5, r7}
 8000b9a:	b004      	add	sp, #16
 8000b9c:	4770      	bx	lr

08000b9e <_ZN10SBUSSender15assemble_packetEv>:
      send_sbus_.ch[i] = rccontrol_to_sbus(values.ControlSignals[i]);
    }
}

void SBUSSender::assemble_packet()
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  send_buf_[0] = HEADER_;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	220f      	movs	r2, #15
 8000baa:	701a      	strb	r2, [r3, #0]
  send_buf_[1] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	8c1b      	ldrh	r3, [r3, #32]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	705a      	strb	r2, [r3, #1]
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	8c1b      	ldrh	r3, [r3, #32]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[1] & 0x07FF) << 3);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	f023 0307 	bic.w	r3, r3, #7
 8000bd2:	b25b      	sxtb	r3, r3
  send_buf_[2] = static_cast<uint8_t>((send_sbus_.ch[0] & 0x07FF) >> 8 |
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	709a      	strb	r2, [r3, #2]
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bec:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[2] & 0x07FF) << 6);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000bf2:	019b      	lsls	r3, r3, #6
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bfa:	b25b      	sxtb	r3, r3
  send_buf_[3] = static_cast<uint8_t>((send_sbus_.ch[1] & 0x07FF) >> 5 |
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	70da      	strb	r2, [r3, #3]
  send_buf_[4] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 2);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	711a      	strb	r2, [r3, #4]
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c18:	0a9b      	lsrs	r3, r3, #10
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[3] & 0x07FF) << 1);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	f023 0301 	bic.w	r3, r3, #1
 8000c30:	b25b      	sxtb	r3, r3
  send_buf_[5] = static_cast<uint8_t>((send_sbus_.ch[2] & 0x07FF) >> 10 |
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	715a      	strb	r2, [r3, #5]
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c40:	09db      	lsrs	r3, r3, #7
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[4] & 0x07FF) << 4);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	f023 030f 	bic.w	r3, r3, #15
 8000c58:	b25b      	sxtb	r3, r3
  send_buf_[6] = static_cast<uint8_t>((send_sbus_.ch[3] & 0x07FF) >> 7 |
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	719a      	strb	r2, [r3, #6]
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c72:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[5] & 0x07FF) << 7);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c78:	01db      	lsls	r3, r3, #7
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c80:	b25b      	sxtb	r3, r3
  send_buf_[7] = static_cast<uint8_t>((send_sbus_.ch[4] & 0x07FF) >> 4 |
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	71da      	strb	r2, [r3, #7]
  send_buf_[8] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c90:	085b      	lsrs	r3, r3, #1
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	721a      	strb	r2, [r3, #8]
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c9e:	0a5b      	lsrs	r3, r3, #9
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	b25a      	sxtb	r2, r3
            (send_sbus_.ch[6] & 0x07FF) << 2);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	b25b      	sxtb	r3, r3
  send_buf_[9] = static_cast<uint8_t>((send_sbus_.ch[5] & 0x07FF) >> 9  |
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	725a      	strb	r2, [r3, #9]
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000cc6:	099b      	lsrs	r3, r3, #6
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[7] & 0x07FF) << 5);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000cd6:	015b      	lsls	r3, r3, #5
  send_buf_[10] = static_cast<uint8_t>((send_sbus_.ch[6] & 0x07FF) >> 6  |
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	729a      	strb	r2, [r3, #10]
  send_buf_[11] = static_cast<uint8_t>((send_sbus_.ch[7] & 0x07FF) >> 3);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	72da      	strb	r2, [r3, #11]
  send_buf_[12] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	731a      	strb	r2, [r3, #12]
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[9]  & 0x07FF) << 3);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	f023 0307 	bic.w	r3, r3, #7
 8000d18:	b25b      	sxtb	r3, r3
  send_buf_[13] = static_cast<uint8_t>((send_sbus_.ch[8] & 0x07FF) >> 8 |
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	735a      	strb	r2, [r3, #13]
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d28:	095b      	lsrs	r3, r3, #5
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d32:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[10] & 0x07FF) << 6);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d40:	b25b      	sxtb	r3, r3
  send_buf_[14] = static_cast<uint8_t>((send_sbus_.ch[9] & 0x07FF) >> 5 |
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	739a      	strb	r2, [r3, #14]
  send_buf_[15] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 2);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	73da      	strb	r2, [r3, #15]
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d5e:	0a9b      	lsrs	r3, r3, #10
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[11] & 0x07FF) << 1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	f023 0301 	bic.w	r3, r3, #1
 8000d76:	b25b      	sxtb	r3, r3
  send_buf_[16] = static_cast<uint8_t>((send_sbus_.ch[10] & 0x07FF) >> 10 |
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	741a      	strb	r2, [r3, #16]
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d86:	09db      	lsrs	r3, r3, #7
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	f003 030f 	and.w	r3, r3, #15
 8000d90:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[12] & 0x07FF) << 4);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	f023 030f 	bic.w	r3, r3, #15
 8000d9e:	b25b      	sxtb	r3, r3
  send_buf_[17] = static_cast<uint8_t>((send_sbus_.ch[11] & 0x07FF) >> 7  |
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	745a      	strb	r2, [r3, #17]
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000db8:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[13] & 0x07FF) << 7);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000dbe:	01db      	lsls	r3, r3, #7
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000dc6:	b25b      	sxtb	r3, r3
  send_buf_[18] = static_cast<uint8_t>((send_sbus_.ch[12] & 0x07FF) >> 4  |
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	749a      	strb	r2, [r3, #18]
  send_buf_[19] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 1);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	74da      	strb	r2, [r3, #19]
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000de4:	0a5b      	lsrs	r3, r3, #9
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[14] & 0x07FF) << 2);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	f023 0303 	bic.w	r3, r3, #3
 8000dfc:	b25b      	sxtb	r3, r3
  send_buf_[20] = static_cast<uint8_t>((send_sbus_.ch[13] & 0x07FF) >> 9  |
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	751a      	strb	r2, [r3, #20]
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000e0c:	099b      	lsrs	r3, r3, #6
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	b25a      	sxtb	r2, r3
             (send_sbus_.ch[15] & 0x07FF) << 5);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e1c:	015b      	lsls	r3, r3, #5
  send_buf_[21] = static_cast<uint8_t>((send_sbus_.ch[14] & 0x07FF) >> 6  |
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	755a      	strb	r2, [r3, #21]
  send_buf_[22] = static_cast<uint8_t>((send_sbus_.ch[15] & 0x07FF) >> 3);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	759a      	strb	r2, [r3, #22]
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e3e:	b25a      	sxtb	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b25a      	sxtb	r2, r3
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25a      	sxtb	r2, r3
             (send_sbus_.lost_frame * LOST_FRAME_MASK_);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
             (send_sbus_.failsafe * FAILSAFE_MASK_) |
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	b2da      	uxtb	r2, r3
  send_buf_[23] = 0x00 | (send_sbus_.ch17 * CH17_MASK_) | (send_sbus_.ch18 * CH18_MASK_) |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	75da      	strb	r2, [r3, #23]
  send_buf_[24] = FOOTER_;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_UART_TxCpltCallback>:
      rccontrol = 100;
    return static_cast<uint16_t>(SBUS_RANGE_MIN + (rccontrol * SBUS_RANGE_RANGE / 100.0f));
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	SBUSSender::getInstance(huart)->assemble_packet();
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fe13 	bl	8000abc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe80 	bl	8000b9e <_ZN10SBUSSender15assemble_packetEv>
	HAL_UART_Transmit_DMA (huart, SBUSSender::getInstance(huart)->send_buf_, SBUS_FRAME_SIZE);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fe0c 	bl	8000abc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2219      	movs	r2, #25
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f004 fdf6 	bl	8005a9c <HAL_UART_Transmit_DMA>
	HAL_Delay(5);
 8000eb0:	2005      	movs	r0, #5
 8000eb2:	f000 ffcd 	bl	8001e50 <HAL_Delay>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000ee4:	4a2f      	ldr	r2, [pc, #188]	; (8000fa4 <MX_ADC1_Init+0xe4>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f44:	f001 f948 	bl	80021d8 <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f4e:	f000 fa25 	bl	800139c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f5e:	f001 fe97 	bl	8002c90 <HAL_ADCEx_MultiModeConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f68:	f000 fa18 	bl	800139c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_ADC1_Init+0xe8>)
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	2306      	movs	r3, #6
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f78:	237f      	movs	r3, #127	; 0x7f
 8000f7a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_ADC1_Init+0xe0>)
 8000f8a:	f001 fa71 	bl	8002470 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f94:	f000 fa02 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000094 	.word	0x20000094
 8000fa4:	42028000 	.word	0x42028000
 8000fa8:	0c900008 	.word	0x0c900008

08000fac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0ae      	sub	sp, #184	; 0xb8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2294      	movs	r2, #148	; 0x94
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 fc79 	bl	80078c4 <memset>
  if(adcHandle->Instance==ADC1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <HAL_ADC_MspInit+0xa8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d137      	bne.n	800104c <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fe2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 feb4 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000ffa:	f000 f9cf 	bl	800139c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_ADC_MspInit+0xac>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <HAL_ADC_MspInit+0xac>)
 8001004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_ADC_MspInit+0xac>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_ADC_MspInit+0xac>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_ADC_MspInit+0xac>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_ADC_MspInit+0xac>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800102e:	2304      	movs	r3, #4
 8001030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_ADC_MspInit+0xb0>)
 8001048:	f002 fb84 	bl	8003754 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104c:	bf00      	nop
 800104e:	37b8      	adds	r7, #184	; 0xb8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	42028000 	.word	0x42028000
 8001058:	40021000 	.word	0x40021000
 800105c:	42020800 	.word	0x42020800

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_DMA_Init+0x60>)
 8001068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <MX_DMA_Init+0x60>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6493      	str	r3, [r2, #72]	; 0x48
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_DMA_Init+0x60>)
 8001074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_DMA_Init+0x60>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <MX_DMA_Init+0x60>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6493      	str	r3, [r2, #72]	; 0x48
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_DMA_Init+0x60>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	201d      	movs	r0, #29
 800109c:	f001 ff77 	bl	8002f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a0:	201d      	movs	r0, #29
 80010a2:	f001 ff8e 	bl	8002fc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	201e      	movs	r0, #30
 80010ac:	f001 ff6f 	bl	8002f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010b0:	201e      	movs	r0, #30
 80010b2:	f001 ff86 	bl	8002fc2 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <MX_GPIO_Init+0x114>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a3e      	ldr	r2, [pc, #248]	; (80011d8 <MX_GPIO_Init+0x114>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <MX_GPIO_Init+0x114>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <MX_GPIO_Init+0x114>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <MX_GPIO_Init+0x114>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <MX_GPIO_Init+0x114>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <MX_GPIO_Init+0x114>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <MX_GPIO_Init+0x114>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <MX_GPIO_Init+0x114>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <MX_GPIO_Init+0x114>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <MX_GPIO_Init+0x114>)
 8001128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_GPIO_Init+0x114>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800113a:	f002 fe21 	bl	8003d80 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	4826      	ldr	r0, [pc, #152]	; (80011dc <MX_GPIO_Init+0x118>)
 8001144:	f002 fc86 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114e:	4824      	ldr	r0, [pc, #144]	; (80011e0 <MX_GPIO_Init+0x11c>)
 8001150:	f002 fc80 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	21a0      	movs	r1, #160	; 0xa0
 8001158:	4822      	ldr	r0, [pc, #136]	; (80011e4 <MX_GPIO_Init+0x120>)
 800115a:	f002 fc7b 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800115e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001164:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	481b      	ldr	r0, [pc, #108]	; (80011e4 <MX_GPIO_Init+0x120>)
 8001176:	f002 faed 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4812      	ldr	r0, [pc, #72]	; (80011dc <MX_GPIO_Init+0x118>)
 8001192:	f002 fadf 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_GPIO_Init+0x11c>)
 80011b0:	f002 fad0 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80011b4:	23a0      	movs	r3, #160	; 0xa0
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_GPIO_Init+0x120>)
 80011cc:	f002 fac2 	bl	8003754 <HAL_GPIO_Init>

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	42020800 	.word	0x42020800
 80011e0:	42020000 	.word	0x42020000
 80011e4:	42020400 	.word	0x42020400

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b0bd      	sub	sp, #244	; 0xf4
 80011ec:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f000 fdb8 	bl	8001d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f863 	bl	80012bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f7ff ff65 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fa:	f7ff ff31 	bl	8001060 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80011fe:	f000 fb45 	bl	800188c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8001202:	f000 f8d1 	bl	80013a8 <MX_RTC_Init>
  MX_UCPD1_Init();
 8001206:	f000 fb0b 	bl	8001820 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800120a:	f000 fcf9 	bl	8001c00 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800120e:	f7ff fe57 	bl	8000ec0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001212:	f000 fb89 	bl	8001928 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SBus sbus_data;
  RCControl control_data;
 8001216:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f99a 	bl	8000554 <_ZN9RCControlC1Ev>
  while (1)
  {
    /* USER CODE END WHILE */
    
    /* USER CODE BEGIN 3 */
    sbus_data = SBUSReceiver::getInstance(&huart2)->GetSBUS();
 8001220:	4825      	ldr	r0, [pc, #148]	; (80012b8 <main+0xd0>)
 8001222:	f7ff f9e1 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8001226:	4602      	mov	r2, r0
 8001228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fa33 	bl	800069a <_ZN12SBUSReceiver7GetSBUSEv>
 8001234:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001238:	f107 06a8 	add.w	r6, r7, #168	; 0xa8
 800123c:	f104 0c20 	add.w	ip, r4, #32
 8001240:	4635      	mov	r5, r6
 8001242:	4623      	mov	r3, r4
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	3410      	adds	r4, #16
 8001250:	3610      	adds	r6, #16
 8001252:	4564      	cmp	r4, ip
 8001254:	d1f4      	bne.n	8001240 <main+0x58>
 8001256:	4633      	mov	r3, r6
 8001258:	4622      	mov	r2, r4
 800125a:	6810      	ldr	r0, [r2, #0]
 800125c:	6018      	str	r0, [r3, #0]
 800125e:	8892      	ldrh	r2, [r2, #4]
 8001260:	809a      	strh	r2, [r3, #4]
    control_data = SBUSReceiver::getInstance(&huart2)->GetRCControl();
 8001262:	4815      	ldr	r0, [pc, #84]	; (80012b8 <main+0xd0>)
 8001264:	f7ff f9c0 	bl	80005e8 <_ZN12SBUSReceiver11getInstanceEP20__UART_HandleTypeDef>
 8001268:	4602      	mov	r2, r0
 800126a:	463b      	mov	r3, r7
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa35 	bl	80006de <_ZN12SBUSReceiver12GetRCControlEv>
 8001274:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001278:	463d      	mov	r5, r7
 800127a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001286:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800128a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    SBUSSender::getInstance(&huart2)->SetSBusValue(sbus_data);
 800128e:	480a      	ldr	r0, [pc, #40]	; (80012b8 <main+0xd0>)
 8001290:	f7ff fc14 	bl	8000abc <_ZN10SBUSSender11getInstanceEP20__UART_HandleTypeDef>
 8001294:	4606      	mov	r6, r0
 8001296:	466c      	mov	r4, sp
 8001298:	f107 05b4 	add.w	r5, r7, #180	; 0xb4
 800129c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a4:	c403      	stmia	r4!, {r0, r1}
 80012a6:	8022      	strh	r2, [r4, #0]
 80012a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff fc58 	bl	8000b64 <_ZN10SBUSSender12SetSBusValueE4SBus>
    sbus_data = SBUSReceiver::getInstance(&huart2)->GetSBUS();
 80012b4:	e7b4      	b.n	8001220 <main+0x38>
 80012b6:	bf00      	nop
 80012b8:	200001bc 	.word	0x200001bc

080012bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b098      	sub	sp, #96	; 0x60
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	2248      	movs	r2, #72	; 0x48
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f006 fafa 	bl	80078c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80012de:	2000      	movs	r0, #0
 80012e0:	f002 fcf2 	bl	8003cc8 <HAL_PWREx_ControlVoltageScaling>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80012f4:	f000 f852 	bl	800139c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012f8:	f002 fcc8 	bl	8003c8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <_Z18SystemClock_Configv+0xdc>)
 80012fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001302:	4a25      	ldr	r2, [pc, #148]	; (8001398 <_Z18SystemClock_Configv+0xdc>)
 8001304:	f023 0318 	bic.w	r3, r3, #24
 8001308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 800130c:	2334      	movs	r3, #52	; 0x34
 800130e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001310:	2381      	movs	r3, #129	; 0x81
 8001312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800131c:	2300      	movs	r3, #0
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001320:	2360      	movs	r3, #96	; 0x60
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001328:	2301      	movs	r3, #1
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001330:	2337      	movs	r3, #55	; 0x37
 8001332:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001334:	2307      	movs	r3, #7
 8001336:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fd4f 	bl	8003de8 <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf14      	ite	ne
 8001350:	2301      	movne	r3, #1
 8001352:	2300      	moveq	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800135a:	f000 f81f 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135e:	230f      	movs	r3, #15
 8001360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001362:	2303      	movs	r3, #3
 8001364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2105      	movs	r1, #5
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fa0c 	bl	8004794 <HAL_RCC_ClockConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	bf14      	ite	ne
 8001382:	2301      	movne	r3, #1
 8001384:	2300      	moveq	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800138c:	f000 f806 	bl	800139c <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3760      	adds	r7, #96	; 0x60
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_RTC_Init+0x8c>)
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <MX_RTC_Init+0x90>)
 80013c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_RTC_Init+0x8c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_RTC_Init+0x8c>)
 80013cc:	227f      	movs	r2, #127	; 0x7f
 80013ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_RTC_Init+0x8c>)
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_RTC_Init+0x8c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_RTC_Init+0x8c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_RTC_Init+0x8c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_RTC_Init+0x8c>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_RTC_Init+0x8c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013f6:	480f      	ldr	r0, [pc, #60]	; (8001434 <MX_RTC_Init+0x8c>)
 80013f8:	f004 f9c6 	bl	8005788 <HAL_RTC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001402:	f7ff ffcb 	bl	800139c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_RTC_Init+0x8c>)
 800141c:	f004 fac2 	bl	80059a4 <HAL_RTCEx_PrivilegeModeSet>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001426:	f7ff ffb9 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000fc 	.word	0x200000fc
 8001438:	40002800 	.word	0x40002800

0800143c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0a8      	sub	sp, #160	; 0xa0
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2294      	movs	r2, #148	; 0x94
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f006 fa39 	bl	80078c4 <memset>
  if(rtcHandle->Instance==RTC)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_RTC_MspInit+0x74>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d124      	bne.n	80014a6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800145c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001460:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fc74 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800147a:	f7ff ff8f 	bl	800139c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_RTC_MspInit+0x78>)
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_RTC_MspInit+0x78>)
 8001486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RTC_MspInit+0x78>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_RTC_MspInit+0x78>)
 8001494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001498:	6593      	str	r3, [r2, #88]	; 0x58
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RTC_MspInit+0x78>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014a6:	bf00      	nop
 80014a8:	37a0      	adds	r7, #160	; 0xa0
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40002800 	.word	0x40002800
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6593      	str	r3, [r2, #88]	; 0x58
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 fc60 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA1_Channel1_IRQHandler+0x10>)
 800155a:	f001 ff2b 	bl	80033b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000250 	.word	0x20000250

08001568 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <DMA1_Channel2_IRQHandler+0x10>)
 800156e:	f001 ff21 	bl	80033b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002b8 	.word	0x200002b8

0800157c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USART2_IRQHandler+0x10>)
 8001582:	f004 fb57 	bl	8005c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001bc 	.word	0x200001bc

08001590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_kill>:

int _kill(int pid, int sig)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015aa:	f006 f959 	bl	8007860 <__errno>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2216      	movs	r2, #22
 80015b2:	601a      	str	r2, [r3, #0]
  return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_exit>:

void _exit (int status)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe7 	bl	80015a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d2:	e7fe      	b.n	80015d2 <_exit+0x12>

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f006 f92c 	bl	8007860 <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20030000 	.word	0x20030000
 8001634:	00000400 	.word	0x00000400
 8001638:	20000124 	.word	0x20000124
 800163c:	20000630 	.word	0x20000630

08001640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800166a:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d107      	bne.n	8001686 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001676:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 8001678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e005      	b.n	8001692 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001686:	4b48      	ldr	r3, [pc, #288]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001692:	4a46      	ldr	r2, [pc, #280]	; (80017ac <SystemCoreClockUpdate+0x148>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d866      	bhi.n	8001776 <SystemCoreClockUpdate+0x112>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <SystemCoreClockUpdate+0x4c>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	080016e5 	.word	0x080016e5
 80016b4:	08001777 	.word	0x08001777
 80016b8:	08001777 	.word	0x08001777
 80016bc:	08001777 	.word	0x08001777
 80016c0:	080016ed 	.word	0x080016ed
 80016c4:	08001777 	.word	0x08001777
 80016c8:	08001777 	.word	0x08001777
 80016cc:	08001777 	.word	0x08001777
 80016d0:	080016f5 	.word	0x080016f5
 80016d4:	08001777 	.word	0x08001777
 80016d8:	08001777 	.word	0x08001777
 80016dc:	08001777 	.word	0x08001777
 80016e0:	080016fd 	.word	0x080016fd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80016e4:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <SystemCoreClockUpdate+0x14c>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	6013      	str	r3, [r2, #0]
      break;
 80016ea:	e048      	b.n	800177e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <SystemCoreClockUpdate+0x14c>)
 80016ee:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <SystemCoreClockUpdate+0x150>)
 80016f0:	601a      	str	r2, [r3, #0]
      break;
 80016f2:	e044      	b.n	800177e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80016f4:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <SystemCoreClockUpdate+0x14c>)
 80016f6:	4a30      	ldr	r2, [pc, #192]	; (80017b8 <SystemCoreClockUpdate+0x154>)
 80016f8:	601a      	str	r2, [r3, #0]
      break;
 80016fa:	e040      	b.n	800177e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	3301      	adds	r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <SystemCoreClockUpdate+0xbe>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d006      	beq.n	800172e <SystemCoreClockUpdate+0xca>
 8001720:	e00b      	b.n	800173a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001722:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <SystemCoreClockUpdate+0x150>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	613b      	str	r3, [r7, #16]
          break;
 800172c:	e00b      	b.n	8001746 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800172e:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <SystemCoreClockUpdate+0x154>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	613b      	str	r3, [r7, #16]
          break;
 8001738:	e005      	b.n	8001746 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	613b      	str	r3, [r7, #16]
          break;
 8001744:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0e5b      	lsrs	r3, r3, #25
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <SystemCoreClockUpdate+0x14c>)
 8001772:	6013      	str	r3, [r2, #0]
      break;
 8001774:	e003      	b.n	800177e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <SystemCoreClockUpdate+0x14c>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	6013      	str	r3, [r2, #0]
      break;
 800177c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <SystemCoreClockUpdate+0x144>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <SystemCoreClockUpdate+0x158>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <SystemCoreClockUpdate+0x14c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemCoreClockUpdate+0x14c>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08007af0 	.word	0x08007af0
 80017b0:	20000000 	.word	0x20000000
 80017b4:	00f42400 	.word	0x00f42400
 80017b8:	007a1200 	.word	0x007a1200
 80017bc:	08007ad8 	.word	0x08007ad8

080017c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <LL_APB1_GRP2_EnableClock+0x2c>)
 80017fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <LL_APB1_GRP2_EnableClock+0x2c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <LL_APB1_GRP2_EnableClock+0x2c>)
 8001806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40021000 	.word	0x40021000

08001820 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001836:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800183a:	f7ff ffd9 	bl	80017f0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800183e:	2002      	movs	r0, #2
 8001840:	f7ff ffbe 	bl	80017c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff ffbb 	bl	80017c0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800184a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001850:	2303      	movs	r3, #3
 8001852:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	463b      	mov	r3, r7
 800185a:	4619      	mov	r1, r3
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <MX_UCPD1_Init+0x64>)
 800185e:	f005 ff36 	bl	80076ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001866:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001868:	2303      	movs	r3, #3
 800186a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_UCPD1_Init+0x68>)
 8001876:	f005 ff2a 	bl	80076ce <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	42020400 	.word	0x42020400
 8001888:	42020000 	.word	0x42020000

0800188c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <MX_LPUART1_UART_Init+0x94>)
 8001894:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 8001898:	4a22      	ldr	r2, [pc, #136]	; (8001924 <MX_LPUART1_UART_Init+0x98>)
 800189a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018b0:	220c      	movs	r2, #12
 80018b2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018d2:	4812      	ldr	r0, [pc, #72]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018d4:	f004 f892 	bl	80059fc <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80018de:	f7ff fd5d 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e2:	2100      	movs	r1, #0
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018e6:	f005 fcdc 	bl	80072a2 <HAL_UARTEx_SetTxFifoThreshold>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80018f0:	f7ff fd54 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 80018f8:	f005 fd11 	bl	800731e <HAL_UARTEx_SetRxFifoThreshold>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001902:	f7ff fd4b 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_LPUART1_UART_Init+0x90>)
 8001908:	f005 fc92 	bl	8007230 <HAL_UARTEx_DisableFifoMode>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001912:	f7ff fd43 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000128 	.word	0x20000128
 8001920:	40008000 	.word	0x40008000
 8001924:	00033324 	.word	0x00033324

08001928 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <MX_USART2_UART_Init+0x94>)
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <MX_USART2_UART_Init+0x98>)
 8001930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001934:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <MX_USART2_UART_Init+0x9c>)
 8001936:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_USART2_UART_Init+0x94>)
 800193a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800193e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <MX_USART2_UART_Init+0x94>)
 800194a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_USART2_UART_Init+0x94>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_USART2_UART_Init+0x94>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001974:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001976:	f004 f841 	bl	80059fc <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001980:	f7ff fd0c 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001984:	2100      	movs	r1, #0
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_USART2_UART_Init+0x94>)
 8001988:	f005 fc8b 	bl	80072a2 <HAL_UARTEx_SetTxFifoThreshold>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001992:	f7ff fd03 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <MX_USART2_UART_Init+0x94>)
 800199a:	f005 fcc0 	bl	800731e <HAL_UARTEx_SetRxFifoThreshold>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80019a4:	f7ff fcfa 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_USART2_UART_Init+0x94>)
 80019aa:	f005 fc41 	bl	8007230 <HAL_UARTEx_DisableFifoMode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80019b4:	f7ff fcf2 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200001bc 	.word	0x200001bc
 80019c0:	40004400 	.word	0x40004400
 80019c4:	000186a0 	.word	0x000186a0

080019c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0b0      	sub	sp, #192	; 0xc0
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	2294      	movs	r2, #148	; 0x94
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f005 ff6b 	bl	80078c4 <memset>
  if(uartHandle->Instance==LPUART1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7a      	ldr	r2, [pc, #488]	; (8001bdc <HAL_UART_MspInit+0x214>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d13e      	bne.n	8001a76 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019f8:	2320      	movs	r3, #32
 80019fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 f9a9 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a10:	f7ff fcc4 	bl	800139c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a14:	4b72      	ldr	r3, [pc, #456]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	4a71      	ldr	r2, [pc, #452]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a20:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	4a6b      	ldr	r2, [pc, #428]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a38:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001a44:	f002 f99c 	bl	8003d80 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001a48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a62:	2308      	movs	r3, #8
 8001a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	485d      	ldr	r0, [pc, #372]	; (8001be4 <HAL_UART_MspInit+0x21c>)
 8001a70:	f001 fe70 	bl	8003754 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a74:	e0ad      	b.n	8001bd2 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5b      	ldr	r2, [pc, #364]	; (8001be8 <HAL_UART_MspInit+0x220>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	f040 80a8 	bne.w	8001bd2 <HAL_UART_MspInit+0x20a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8a:	f107 0318 	add.w	r3, r7, #24
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f964 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001a9a:	f7ff fc7f 	bl	800139c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a4f      	ldr	r2, [pc, #316]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_UART_MspInit+0x218>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001af0:	4619      	mov	r1, r3
 8001af2:	483e      	ldr	r0, [pc, #248]	; (8001bec <HAL_UART_MspInit+0x224>)
 8001af4:	f001 fe2e 	bl	8003754 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001afa:	4a3e      	ldr	r2, [pc, #248]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001afc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001afe:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b00:	221b      	movs	r2, #27
 8001b02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b24:	2220      	movs	r2, #32
 8001b26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b2e:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b30:	f001 fa62 	bl	8002ff8 <HAL_DMA_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001b3a:	f7ff fc2f 	bl	800139c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b3e:	2110      	movs	r1, #16
 8001b40:	482b      	ldr	r0, [pc, #172]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b42:	f001 fd37 	bl	80035b4 <HAL_DMA_ConfigChannelAttributes>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001b4c:	f7ff fc26 	bl	800139c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001b62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b66:	221c      	movs	r2, #28
 8001b68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b94:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001b96:	f001 fa2f 	bl	8002ff8 <HAL_DMA_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001ba0:	f7ff fbfc 	bl	800139c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	4814      	ldr	r0, [pc, #80]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001ba8:	f001 fd04 	bl	80035b4 <HAL_DMA_ConfigChannelAttributes>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8001bb2:	f7ff fbf3 	bl	800139c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001bba:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	203e      	movs	r0, #62	; 0x3e
 8001bc8:	f001 f9e1 	bl	8002f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bcc:	203e      	movs	r0, #62	; 0x3e
 8001bce:	f001 f9f8 	bl	8002fc2 <HAL_NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	37c0      	adds	r7, #192	; 0xc0
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40008000 	.word	0x40008000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	42021800 	.word	0x42021800
 8001be8:	40004400 	.word	0x40004400
 8001bec:	42020000 	.word	0x42020000
 8001bf0:	20000250 	.word	0x20000250
 8001bf4:	40020008 	.word	0x40020008
 8001bf8:	200002b8 	.word	0x200002b8
 8001bfc:	4002001c 	.word	0x4002001c

08001c00 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <MX_USB_PCD_Init+0x4c>)
 8001c08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c12:	2202      	movs	r2, #2
 8001c14:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <MX_USB_PCD_Init+0x48>)
 8001c36:	f001 ff25 	bl	8003a84 <HAL_PCD_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001c40:	f7ff fbac 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000320 	.word	0x20000320
 8001c4c:	4000d400 	.word	0x4000d400

08001c50 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0ae      	sub	sp, #184	; 0xb8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2294      	movs	r2, #148	; 0x94
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f005 fe27 	bl	80078c4 <memset>
  if(pcdHandle->Instance==USB)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <HAL_PCD_MspInit+0xb4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d13d      	bne.n	8001cfc <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 f863 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c9c:	f7ff fb7e 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_PCD_MspInit+0xb8>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_PCD_MspInit+0xb8>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_PCD_MspInit+0xb8>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <HAL_PCD_MspInit+0xbc>)
 8001ce0:	f001 fd38 	bl	8003754 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_PCD_MspInit+0xb8>)
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_PCD_MspInit+0xb8>)
 8001cea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cee:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_PCD_MspInit+0xb8>)
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	37b8      	adds	r7, #184	; 0xb8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	4000d400 	.word	0x4000d400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	42020000 	.word	0x42020000

08001d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d14:	f7ff fc94 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d1a:	e003      	b.n	8001d24 <LoopCopyDataInit>

08001d1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d22:	3104      	adds	r1, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d2c:	d3f6      	bcc.n	8001d1c <CopyDataInit>
	ldr	r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d30:	e002      	b.n	8001d38 <LoopFillZerobss>

08001d32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d34:	f842 3b04 	str.w	r3, [r2], #4

08001d38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <LoopForever+0x16>)
	cmp	r2, r3
 8001d3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d3c:	d3f9      	bcc.n	8001d32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d3e:	f005 fd95 	bl	800786c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d42:	f7ff fa51 	bl	80011e8 <main>

08001d46 <LoopForever>:

LoopForever:
    b LoopForever
 8001d46:	e7fe      	b.n	8001d46 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d48:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001d4c:	08007b68 	.word	0x08007b68
	ldr	r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d54:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001d58:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001d5c:	2000062c 	.word	0x2000062c

08001d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>

08001d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001d6c:	2004      	movs	r0, #4
 8001d6e:	f001 f903 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001d72:	f7ff fc77 	bl	8001664 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f80e 	bl	8001d98 <HAL_InitTick>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	e001      	b.n	8001d8c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d88:	f7ff fb96 	bl	80014b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_InitTick+0x6c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d023      	beq.n	8001df4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_InitTick+0x70>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_InitTick+0x6c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 f90b 	bl	8002fde <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	d809      	bhi.n	8001de8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f001 f8d7 	bl	8002f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_InitTick+0x74>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e007      	b.n	8001df8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e004      	b.n	8001df8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e001      	b.n	8001df8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000614 	.word	0x20000614

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000614 	.word	0x20000614

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008

08001e98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3360      	adds	r3, #96	; 0x60
 8001f12:	461a      	mov	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <LL_ADC_SetOffset+0x44>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	03fff000 	.word	0x03fff000

08001f48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3360      	adds	r3, #96	; 0x60
 8001f56:	461a      	mov	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3360      	adds	r3, #96	; 0x60
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	615a      	str	r2, [r3, #20]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3330      	adds	r3, #48	; 0x30
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	4413      	add	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	211f      	movs	r1, #31
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 011f 	and.w	r1, r3, #31
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	431a      	orrs	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3314      	adds	r3, #20
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0e5b      	lsrs	r3, r3, #25
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	4413      	add	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	0d1b      	lsrs	r3, r3, #20
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2107      	movs	r1, #7
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	401a      	ands	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	0d1b      	lsrs	r3, r3, #20
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0318 	and.w	r3, r3, #24
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020a4:	40d9      	lsrs	r1, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	400b      	ands	r3, r1
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	431a      	orrs	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	0007ffff 	.word	0x0007ffff

080020c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6093      	str	r3, [r2, #8]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002100:	d101      	bne.n	8002106 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002128:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002150:	d101      	bne.n	8002156 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <LL_ADC_IsEnabled+0x18>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <LL_ADC_IsEnabled+0x1a>
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b04      	cmp	r3, #4
 800219c:	d101      	bne.n	80021a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d101      	bne.n	80021c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e12e      	b.n	8002450 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7fe fed3 	bl	8000fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff67 	bl	80020ec <LL_ADC_IsDeepPowerDownEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff4d 	bl	80020c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff82 	bl	800213c <LL_ADC_IsInternalRegulatorEnabled>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d115      	bne.n	800226a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff66 	bl	8002114 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002248:	4b83      	ldr	r3, [pc, #524]	; (8002458 <HAL_ADC_Init+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	4a83      	ldr	r2, [pc, #524]	; (800245c <HAL_ADC_Init+0x284>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	3301      	adds	r3, #1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800225c:	e002      	b.n	8002264 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3b01      	subs	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff64 	bl	800213c <LL_ADC_IsInternalRegulatorEnabled>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff75 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 80022a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80c7 	bne.w	800243e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 80c3 	bne.w	800243e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022c0:	f043 0202 	orr.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff49 	bl	8002164 <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d110      	bne.n	80022fa <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d8:	4861      	ldr	r0, [pc, #388]	; (8002460 <HAL_ADC_Init+0x288>)
 80022da:	f7ff ff43 	bl	8002164 <LL_ADC_IsEnabled>
 80022de:	4604      	mov	r4, r0
 80022e0:	4860      	ldr	r0, [pc, #384]	; (8002464 <HAL_ADC_Init+0x28c>)
 80022e2:	f7ff ff3f 	bl	8002164 <LL_ADC_IsEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4323      	orrs	r3, r4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4619      	mov	r1, r3
 80022f4:	485c      	ldr	r0, [pc, #368]	; (8002468 <HAL_ADC_Init+0x290>)
 80022f6:	f7ff fdcf 	bl	8001e98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7e5b      	ldrb	r3, [r3, #25]
 80022fe:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002304:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800230a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002310:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002318:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	3b01      	subs	r3, #1
 800232e:	045b      	lsls	r3, r3, #17
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b44      	ldr	r3, [pc, #272]	; (800246c <HAL_ADC_Init+0x294>)
 800235a:	4013      	ands	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	430b      	orrs	r3, r1
 8002364:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff20 	bl	80021b0 <LL_ADC_INJ_IsConversionOngoing>
 8002370:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d140      	bne.n	80023fa <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d13d      	bne.n	80023fa <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e1b      	ldrb	r3, [r3, #24]
 8002386:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002388:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002390:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023a0:	f023 0306 	bic.w	r3, r3, #6
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	69b9      	ldr	r1, [r7, #24]
 80023aa:	430b      	orrs	r3, r1
 80023ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d118      	bne.n	80023ea <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023da:	430a      	orrs	r2, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	e007      	b.n	80023fa <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10c      	bne.n	800241c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	f023 010f 	bic.w	r1, r3, #15
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
 800241a:	e007      	b.n	800242c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 020f 	bic.w	r2, r2, #15
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f023 0303 	bic.w	r3, r3, #3
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	; 0x58
 800243c:	e007      	b.n	800244e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800244e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	20000000 	.word	0x20000000
 800245c:	053e2d63 	.word	0x053e2d63
 8002460:	42028000 	.word	0x42028000
 8002464:	42028100 	.word	0x42028100
 8002468:	42028300 	.word	0x42028300
 800246c:	fff0c007 	.word	0xfff0c007

08002470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b0b7      	sub	sp, #220	; 0xdc
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x22>
 800248e:	2302      	movs	r3, #2
 8002490:	e3c1      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x7a6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fe73 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 83a6 	bne.w	8002bf8 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f7ff fd89 	bl	8001fd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fe61 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 80024c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe6d 	bl	80021b0 <LL_ADC_INJ_IsConversionOngoing>
 80024d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 81c1 	bne.w	8002866 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 81bc 	bne.w	8002866 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024f6:	d10f      	bne.n	8002518 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	f7ff fd90 	bl	8002028 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fd4a 	bl	8001faa <LL_ADC_SetSamplingTimeCommonConfig>
 8002516:	e00e      	b.n	8002536 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	461a      	mov	r2, r3
 8002526:	f7ff fd7f 	bl	8002028 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd3a 	bl	8001faa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d00a      	beq.n	800256e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6919      	ldr	r1, [r3, #16]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002568:	f7ff fcca 	bl	8001f00 <LL_ADC_SetOffset>
 800256c:	e17b      	b.n	8002866 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fce7 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 800257a:	4603      	mov	r3, r0
 800257c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <HAL_ADC_ConfigChannel+0x12a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fcdc 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	0e9b      	lsrs	r3, r3, #26
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	e01e      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x168>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fcd1 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e004      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80025cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x180>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	e018      	b.n	8002622 <HAL_ADC_ConfigChannel+0x1b2>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800260c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e004      	b.n	8002622 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002618:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002622:	429a      	cmp	r2, r3
 8002624:	d106      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fca0 	bl	8001f74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc84 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1f0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fc79 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	f003 021f 	and.w	r2, r3, #31
 800265e:	e01e      	b.n	800269e <HAL_ADC_ConfigChannel+0x22e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fc6e 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 800266c:	4603      	mov	r3, r0
 800266e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800267e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002682:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e004      	b.n	800269c <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x246>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	e018      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x278>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e004      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80026de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d106      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2101      	movs	r1, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fc3d 	bl	8001f74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2102      	movs	r1, #2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fc21 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x2b6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2102      	movs	r1, #2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fc16 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	e01e      	b.n	8002764 <HAL_ADC_ConfigChannel+0x2f4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2102      	movs	r1, #2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fc0b 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800274c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_ADC_ConfigChannel+0x30c>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	e016      	b.n	80027aa <HAL_ADC_ConfigChannel+0x33a>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800278e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e004      	b.n	80027aa <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80027a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d106      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2102      	movs	r1, #2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fbdc 	bl	8001f74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2103      	movs	r1, #3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fbc0 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x378>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2103      	movs	r1, #3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fbb5 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	e017      	b.n	8002818 <HAL_ADC_ConfigChannel+0x3a8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2103      	movs	r1, #3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fbaa 	bl	8001f48 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002802:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800280e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x3c0>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	e011      	b.n	8002854 <HAL_ADC_ConfigChannel+0x3e4>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800283e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002840:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e003      	b.n	8002854 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002854:	429a      	cmp	r2, r3
 8002856:	d106      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2200      	movs	r2, #0
 800285e:	2103      	movs	r1, #3
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fb87 	bl	8001f74 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fc7a 	bl	8002164 <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 81c9 	bne.w	8002c0a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	461a      	mov	r2, r3
 8002886:	f7ff fbfb 	bl	8002080 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	4a8f      	ldr	r2, [pc, #572]	; (8002acc <HAL_ADC_ConfigChannel+0x65c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	f040 8131 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10b      	bne.n	80028be <HAL_ADC_ConfigChannel+0x44e>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	bf94      	ite	ls
 80028b6:	2301      	movls	r3, #1
 80028b8:	2300      	movhi	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	e019      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x482>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e003      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80028da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2b09      	cmp	r3, #9
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d079      	beq.n	80029ea <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x4a2>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	3301      	adds	r3, #1
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002910:	e015      	b.n	800293e <HAL_ADC_ConfigChannel+0x4ce>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002922:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800292e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	069b      	lsls	r3, r3, #26
 800293a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_ADC_ConfigChannel+0x4ee>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	0e9b      	lsrs	r3, r3, #26
 8002950:	3301      	adds	r3, #1
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	e017      	b.n	800298e <HAL_ADC_ConfigChannel+0x51e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800296c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800297a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	ea42 0103 	orr.w	r1, r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x544>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e9b      	lsrs	r3, r3, #26
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 021f 	and.w	r2, r3, #31
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	051b      	lsls	r3, r3, #20
 80029b2:	e018      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x576>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e003      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80029d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 021f 	and.w	r2, r3, #31
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e6:	430b      	orrs	r3, r1
 80029e8:	e081      	b.n	8002aee <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x596>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	3301      	adds	r3, #1
 80029fe:	069b      	lsls	r3, r3, #26
 8002a00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a04:	e015      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x5c2>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	e003      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	069b      	lsls	r3, r3, #26
 8002a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x5e2>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	3301      	adds	r3, #1
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	e017      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x612>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	ea42 0103 	orr.w	r1, r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x63e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 021f 	and.w	r2, r3, #31
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b1e      	subs	r3, #30
 8002aa6:	051b      	lsls	r3, r3, #20
 8002aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aac:	e01e      	b.n	8002aec <HAL_ADC_ConfigChannel+0x67c>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	613b      	str	r3, [r7, #16]
  return result;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e006      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x668>
 8002aca:	bf00      	nop
 8002acc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b1e      	subs	r3, #30
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	430b      	orrs	r3, r1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	6892      	ldr	r2, [r2, #8]
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7ff fa98 	bl	8002028 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <HAL_ADC_ConfigChannel+0x7b0>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8082 	beq.w	8002c0a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b06:	4847      	ldr	r0, [pc, #284]	; (8002c24 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b08:	f7ff f9ec 	bl	8001ee4 <LL_ADC_GetCommonPathInternalCh>
 8002b0c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b10:	4845      	ldr	r0, [pc, #276]	; (8002c28 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b12:	f7ff fb27 	bl	8002164 <LL_ADC_IsEnabled>
 8002b16:	4604      	mov	r4, r0
 8002b18:	4844      	ldr	r0, [pc, #272]	; (8002c2c <HAL_ADC_ConfigChannel+0x7bc>)
 8002b1a:	f7ff fb23 	bl	8002164 <LL_ADC_IsEnabled>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4323      	orrs	r3, r4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d15e      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a41      	ldr	r2, [pc, #260]	; (8002c30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d127      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d121      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a39      	ldr	r2, [pc, #228]	; (8002c28 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d161      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4834      	ldr	r0, [pc, #208]	; (8002c24 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b52:	f7ff f9b4 	bl	8001ebe <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	4a36      	ldr	r2, [pc, #216]	; (8002c38 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002b6e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b7e:	e044      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <HAL_ADC_ConfigChannel+0x7cc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10d      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d134      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481e      	ldr	r0, [pc, #120]	; (8002c24 <HAL_ADC_ConfigChannel+0x7b4>)
 8002bac:	f7ff f987 	bl	8001ebe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb0:	e02b      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d126      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d120      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d11b      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4811      	ldr	r0, [pc, #68]	; (8002c24 <HAL_ADC_ConfigChannel+0x7b4>)
 8002bde:	f7ff f96e 	bl	8001ebe <LL_ADC_SetCommonPathInternalCh>
 8002be2:	e012      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bf6:	e008      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	37dc      	adds	r7, #220	; 0xdc
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	80080000 	.word	0x80080000
 8002c24:	42028300 	.word	0x42028300
 8002c28:	42028000 	.word	0x42028000
 8002c2c:	42028100 	.word	0x42028100
 8002c30:	c7520000 	.word	0xc7520000
 8002c34:	20000000 	.word	0x20000000
 8002c38:	053e2d63 	.word	0x053e2d63
 8002c3c:	cb840000 	.word	0xcb840000
 8002c40:	80000001 	.word	0x80000001

08002c44 <LL_ADC_IsEnabled>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <LL_ADC_IsEnabled+0x18>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_ADC_IsEnabled+0x1a>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_REG_IsConversionOngoing>:
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d101      	bne.n	8002c82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b0a1      	sub	sp, #132	; 0x84
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e089      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a42      	ldr	r2, [pc, #264]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e001      	b.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e068      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ffb9 	bl	8002c6a <LL_ADC_REG_IsConversionOngoing>
 8002cf8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ffb3 	bl	8002c6a <LL_ADC_REG_IsConversionOngoing>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d14a      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d147      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d10:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002d12:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d027      	beq.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d2e:	035b      	lsls	r3, r3, #13
 8002d30:	430b      	orrs	r3, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d38:	4824      	ldr	r0, [pc, #144]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d3a:	f7ff ff83 	bl	8002c44 <LL_ADC_IsEnabled>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	4823      	ldr	r0, [pc, #140]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d42:	f7ff ff7f 	bl	8002c44 <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4323      	orrs	r3, r4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d132      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d56:	f023 030f 	bic.w	r3, r3, #15
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	6811      	ldr	r1, [r2, #0]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d68:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6a:	e023      	b.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d78:	4814      	ldr	r0, [pc, #80]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d7a:	f7ff ff63 	bl	8002c44 <LL_ADC_IsEnabled>
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d82:	f7ff ff5f 	bl	8002c44 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4323      	orrs	r3, r4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d112      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d96:	f023 030f 	bic.w	r3, r3, #15
 8002d9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d9c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d9e:	e009      	b.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002db2:	e000      	b.n	8002db6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3784      	adds	r7, #132	; 0x84
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	42028000 	.word	0x42028000
 8002dd0:	42028100 	.word	0x42028100
 8002dd4:	42028300 	.word	0x42028300

08002dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0a:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60d3      	str	r3, [r2, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <__NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db0b      	blt.n	8002e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4907      	ldr	r1, [pc, #28]	; (8002e74 <__NVIC_EnableIRQ+0x38>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000e100 	.word	0xe000e100

08002e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0152      	lsls	r2, r2, #5
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0152      	lsls	r2, r2, #5
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	bf28      	it	cs
 8002eea:	2303      	movcs	r3, #3
 8002eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3303      	adds	r3, #3
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b04      	subs	r3, #4
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	4313      	orrs	r3, r2
         );
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f44:	d301      	bcc.n	8002f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <SysTick_Config+0x40>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f52:	2107      	movs	r1, #7
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	f7ff ff8e 	bl	8002e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <SysTick_Config+0x40>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <SysTick_Config+0x40>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff29 	bl	8002dd8 <__NVIC_SetPriorityGrouping>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f9c:	f7ff ff40 	bl	8002e20 <__NVIC_GetPriorityGrouping>
 8002fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	6978      	ldr	r0, [r7, #20]
 8002fa8:	f7ff ff90 	bl	8002ecc <NVIC_EncodePriority>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff5f 	bl	8002e78 <__NVIC_SetPriority>
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff33 	bl	8002e3c <__NVIC_EnableIRQ>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ffa4 	bl	8002f34 <SysTick_Config>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e08d      	b.n	8003126 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_DMA_Init+0x138>)
 8003012:	429a      	cmp	r2, r3
 8003014:	d80f      	bhi.n	8003036 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	4b45      	ldr	r3, [pc, #276]	; (8003134 <HAL_DMA_Init+0x13c>)
 800301e:	4413      	add	r3, r2
 8003020:	4a45      	ldr	r2, [pc, #276]	; (8003138 <HAL_DMA_Init+0x140>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	009a      	lsls	r2, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a42      	ldr	r2, [pc, #264]	; (800313c <HAL_DMA_Init+0x144>)
 8003032:	649a      	str	r2, [r3, #72]	; 0x48
 8003034:	e00e      	b.n	8003054 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_DMA_Init+0x148>)
 800303e:	4413      	add	r3, r2
 8003040:	4a3d      	ldr	r2, [pc, #244]	; (8003138 <HAL_DMA_Init+0x140>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	009a      	lsls	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_DMA_Init+0x14c>)
 8003052:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800306a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800306e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 faf2 	bl	8003690 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b4:	d102      	bne.n	80030bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80030d0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <HAL_DMA_Init+0x104>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d80c      	bhi.n	80030fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fb12 	bl	800370c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e008      	b.n	800310e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40020407 	.word	0x40020407
 8003134:	bffdfff8 	.word	0xbffdfff8
 8003138:	cccccccd 	.word	0xcccccccd
 800313c:	40020000 	.word	0x40020000
 8003140:	bffdfbf8 	.word	0xbffdfbf8
 8003144:	40020400 	.word	0x40020400

08003148 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Start_IT+0x20>
 8003164:	2302      	movs	r3, #2
 8003166:	e066      	b.n	8003236 <HAL_DMA_Start_IT+0xee>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d155      	bne.n	8003228 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0201 	bic.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fa37 	bl	8003614 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 020e 	orr.w	r2, r2, #14
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e00f      	b.n	80031e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 020a 	orr.w	r2, r2, #10
 80031de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fc:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003214:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e005      	b.n	8003234 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003230:	2302      	movs	r3, #2
 8003232:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003234:	7dfb      	ldrb	r3, [r7, #23]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d008      	beq.n	8003268 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2204      	movs	r2, #4
 800325a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e040      	b.n	80032ea <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 020e 	bic.w	r2, r2, #14
 8003276:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003286:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	f003 021c 	and.w	r2, r3, #28
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80032b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80032d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d005      	beq.n	800331a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2204      	movs	r2, #4
 8003312:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e047      	b.n	80033aa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 020e 	bic.w	r2, r2, #14
 8003328:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003348:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	f003 021c 	and.w	r2, r3, #28
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003366:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800337e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003388:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
    }
  }
  return status;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d0:	f003 031c 	and.w	r3, r3, #28
 80033d4:	2204      	movs	r2, #4
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d053      	beq.n	8003488 <HAL_DMA_IRQHandler+0xd4>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04e      	beq.n	8003488 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d024      	beq.n	8003442 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fc:	f003 021c 	and.w	r2, r3, #28
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	2104      	movs	r1, #4
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80c0 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800342c:	e0ba      	b.n	80035a4 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80b6 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003440:	e0b0      	b.n	80035a4 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0204 	bic.w	r2, r2, #4
 800345e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	f003 021c 	and.w	r2, r3, #28
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	2104      	movs	r1, #4
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8093 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003486:	e08d      	b.n	80035a4 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348c:	f003 031c 	and.w	r3, r3, #28
 8003490:	2202      	movs	r2, #2
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d04e      	beq.n	800353a <HAL_DMA_IRQHandler+0x186>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d049      	beq.n	800353a <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d06e      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80034d2:	e069      	b.n	80035a8 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d065      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80034e4:	e060      	b.n	80035a8 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 020a 	bic.w	r2, r2, #10
 8003502:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	f003 021c 	and.w	r2, r3, #28
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003518:	2102      	movs	r1, #2
 800351a:	fa01 f202 	lsl.w	r2, r1, r2
 800351e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d03b      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003538:	e036      	b.n	80035a8 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	f003 031c 	and.w	r3, r3, #28
 8003542:	2208      	movs	r2, #8
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <HAL_DMA_IRQHandler+0x1f8>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d029      	beq.n	80035ac <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 020e 	bic.w	r2, r2, #14
 8003566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356c:	f003 021c 	and.w	r2, r3, #28
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f202 	lsl.w	r2, r1, r2
 800357a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035a2:	e002      	b.n	80035aa <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80035a8:	bf00      	nop
  return;
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
}
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	72fb      	strb	r3, [r7, #11]
    return status;
 80035cc:	7afb      	ldrb	r3, [r7, #11]
 80035ce:	e01b      	b.n	8003608 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e003      	b.n	80035fe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035fc:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	601a      	str	r2, [r3, #0]

  return status;
 8003606:	7afb      	ldrb	r3, [r7, #11]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800362a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800363c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	f003 021c 	and.w	r2, r3, #28
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b10      	cmp	r3, #16
 8003660:	d108      	bne.n	8003674 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8003672:	e007      	b.n	8003684 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d80a      	bhi.n	80036ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6513      	str	r3, [r2, #80]	; 0x50
 80036b8:	e007      	b.n	80036ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	009a      	lsls	r2, r3, #2
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80036c4:	4413      	add	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3b08      	subs	r3, #8
 80036d2:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	659a      	str	r2, [r3, #88]	; 0x58
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40020407 	.word	0x40020407
 8003700:	40020820 	.word	0x40020820
 8003704:	cccccccd 	.word	0xcccccccd
 8003708:	40020880 	.word	0x40020880

0800370c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800372e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3b01      	subs	r3, #1
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2201      	movs	r2, #1
 800373a:	409a      	lsls	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	1000823f 	.word	0x1000823f
 8003750:	40020940 	.word	0x40020940

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003762:	e158      	b.n	8003a16 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 814a 	beq.w	8003a10 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d005      	beq.n	8003794 <HAL_GPIO_Init+0x40>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d130      	bne.n	80037f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ca:	2201      	movs	r2, #1
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f003 0201 	and.w	r2, r3, #1
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d017      	beq.n	8003832 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d123      	bne.n	8003886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	08da      	lsrs	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3208      	adds	r2, #8
 8003846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	220f      	movs	r2, #15
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	08da      	lsrs	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3208      	adds	r2, #8
 8003880:	6939      	ldr	r1, [r7, #16]
 8003882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80a4 	beq.w	8003a10 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80038c8:	4a5a      	ldr	r2, [pc, #360]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3318      	adds	r3, #24
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_GPIO_Init+0x2e4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d025      	beq.n	8003940 <HAL_GPIO_Init+0x1ec>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a51      	ldr	r2, [pc, #324]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01f      	beq.n	800393c <HAL_GPIO_Init+0x1e8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a50      	ldr	r2, [pc, #320]	; (8003a40 <HAL_GPIO_Init+0x2ec>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d019      	beq.n	8003938 <HAL_GPIO_Init+0x1e4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a4f      	ldr	r2, [pc, #316]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_GPIO_Init+0x1e0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a4e      	ldr	r2, [pc, #312]	; (8003a48 <HAL_GPIO_Init+0x2f4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00d      	beq.n	8003930 <HAL_GPIO_Init+0x1dc>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4d      	ldr	r2, [pc, #308]	; (8003a4c <HAL_GPIO_Init+0x2f8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <HAL_GPIO_Init+0x1d8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4c      	ldr	r2, [pc, #304]	; (8003a50 <HAL_GPIO_Init+0x2fc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_GPIO_Init+0x1d4>
 8003924:	2306      	movs	r3, #6
 8003926:	e00c      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003928:	2307      	movs	r3, #7
 800392a:	e00a      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 800392c:	2305      	movs	r3, #5
 800392e:	e008      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003930:	2304      	movs	r3, #4
 8003932:	e006      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003934:	2303      	movs	r3, #3
 8003936:	e004      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003938:	2302      	movs	r3, #2
 800393a:	e002      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003940:	2300      	movs	r3, #0
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	f002 0203 	and.w	r2, r2, #3
 8003948:	00d2      	lsls	r2, r2, #3
 800394a:	4093      	lsls	r3, r2
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003952:	4938      	ldr	r1, [pc, #224]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3318      	adds	r3, #24
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003984:	4a2b      	ldr	r2, [pc, #172]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ae:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 80039b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 80039e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f47f ae9f 	bne.w	8003764 <HAL_GPIO_Init+0x10>
  }
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	4002f400 	.word	0x4002f400
 8003a38:	42020000 	.word	0x42020000
 8003a3c:	42020400 	.word	0x42020400
 8003a40:	42020800 	.word	0x42020800
 8003a44:	42020c00 	.word	0x42020c00
 8003a48:	42021000 	.word	0x42021000
 8003a4c:	42021400 	.word	0x42021400
 8003a50:	42021800 	.word	0x42021800

08003a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a64:	787b      	ldrb	r3, [r7, #1]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	b08b      	sub	sp, #44	; 0x2c
 8003a88:	af06      	add	r7, sp, #24
 8003a8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0cb      	b.n	8003c2e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe f8d0 	bl	8001c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 fe73 	bl	80077a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e040      	b.n	8003b4a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3301      	adds	r3, #1
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	3303      	adds	r3, #3
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3338      	adds	r3, #56	; 0x38
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	333c      	adds	r3, #60	; 0x3c
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3340      	adds	r3, #64	; 0x40
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	3301      	adds	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d3b9      	bcc.n	8003ac8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	e044      	b.n	8003be4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	3301      	adds	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
 8003be4:	7bfa      	ldrb	r2, [r7, #15]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3b5      	bcc.n	8003b5a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	687e      	ldr	r6, [r7, #4]
 8003bf6:	466d      	mov	r5, sp
 8003bf8:	f106 0410 	add.w	r4, r6, #16
 8003bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	1d33      	adds	r3, r6, #4
 8003c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c08:	6838      	ldr	r0, [r7, #0]
 8003c0a:	f003 fde8 	bl	80077de <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f805 	bl	8003c36 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c36 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40007000 	.word	0x40007000

08003cc8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cd8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003cda:	f000 f861 	bl	8003da0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce4:	d101      	bne.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e03e      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf6:	d101      	bne.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e035      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d101      	bne.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e02f      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003d10:	4917      	ldr	r1, [pc, #92]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	09db      	lsrs	r3, r3, #7
 8003d26:	2232      	movs	r2, #50	; 0x32
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	08db      	lsrs	r3, r3, #3
 8003d34:	3301      	adds	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d38:	e002      	b.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4c:	d102      	bne.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f2      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d101      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e000      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40007000 	.word	0x40007000
 8003d74:	20000000 	.word	0x20000000
 8003d78:	0a7c5ac5 	.word	0x0a7c5ac5
 8003d7c:	cccccccd 	.word	0xcccccccd

08003d80 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d8e:	6053      	str	r3, [r2, #4]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40007000 	.word	0x40007000

08003da0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	e00a      	b.n	8003dd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	e001      	b.n	8003dd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40007000 	.word	0x40007000

08003de8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f000 bcc2 	b.w	8004780 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfc:	4b99      	ldr	r3, [pc, #612]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e06:	4b97      	ldr	r3, [pc, #604]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80e9 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d006      	beq.n	8003e32 <HAL_RCC_OscConfig+0x4a>
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	f040 8083 	bne.w	8003f32 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d17f      	bne.n	8003f32 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e32:	4b8c      	ldr	r3, [pc, #560]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d006      	beq.n	8003e4c <HAL_RCC_OscConfig+0x64>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f000 bc9a 	b.w	8004780 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e50:	4b84      	ldr	r3, [pc, #528]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_RCC_OscConfig+0x7e>
 8003e5c:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e64:	e005      	b.n	8003e72 <HAL_RCC_OscConfig+0x8a>
 8003e66:	4b7f      	ldr	r3, [pc, #508]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d224      	bcs.n	8003ec0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fe9c 	bl	8004bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f000 bc7a 	b.w	8004780 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e8c:	4b75      	ldr	r3, [pc, #468]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a74      	ldr	r2, [pc, #464]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e92:	f043 0308 	orr.w	r3, r3, #8
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b72      	ldr	r3, [pc, #456]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	496f      	ldr	r1, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eaa:	4b6e      	ldr	r3, [pc, #440]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	496a      	ldr	r1, [pc, #424]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
 8003ebe:	e026      	b.n	8003f0e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec0:	4b68      	ldr	r3, [pc, #416]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a67      	ldr	r2, [pc, #412]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003ec6:	f043 0308 	orr.w	r3, r3, #8
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	4962      	ldr	r1, [pc, #392]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ede:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	495d      	ldr	r1, [pc, #372]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fe5b 	bl	8004bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f000 bc39 	b.w	8004780 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f0e:	f000 fe17 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4a54      	ldr	r2, [pc, #336]	; (8004068 <HAL_RCC_OscConfig+0x280>)
 8003f16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f18:	4b54      	ldr	r3, [pc, #336]	; (800406c <HAL_RCC_OscConfig+0x284>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fd ff3b 	bl	8001d98 <HAL_InitTick>
 8003f22:	4603      	mov	r3, r0
 8003f24:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d060      	beq.n	8003fee <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	f000 bc27 	b.w	8004780 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d039      	beq.n	8003fae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a49      	ldr	r2, [pc, #292]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f46:	f7fd ff77 	bl	8001e38 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4c:	e00f      	b.n	8003f6e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f4e:	f7fd ff73 	bl	8001e38 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d908      	bls.n	8003f6e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f5c:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	f000 bc09 	b.w	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0e9      	beq.n	8003f4e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f7a:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	f043 0308 	orr.w	r3, r3, #8
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	4934      	ldr	r1, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	492f      	ldr	r1, [pc, #188]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]
 8003fac:	e020      	b.n	8003ff0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fae:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fba:	f7fd ff3d 	bl	8001e38 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fc0:	e00e      	b.n	8003fe0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fc2:	f7fd ff39 	bl	8001e38 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d907      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e3cf      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe0:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ea      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x1da>
 8003fec:	e000      	b.n	8003ff0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d07e      	beq.n	80040fa <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d005      	beq.n	800400e <HAL_RCC_OscConfig+0x226>
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d10e      	bne.n	8004026 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d10b      	bne.n	8004026 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d06e      	beq.n	80040f8 <HAL_RCC_OscConfig+0x310>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d16a      	bne.n	80040f8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e3ac      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x256>
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	e024      	b.n	8004088 <HAL_RCC_OscConfig+0x2a0>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004046:	d113      	bne.n	8004070 <HAL_RCC_OscConfig+0x288>
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a05      	ldr	r2, [pc, #20]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 800404e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a02      	ldr	r2, [pc, #8]	; (8004064 <HAL_RCC_OscConfig+0x27c>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	e012      	b.n	8004088 <HAL_RCC_OscConfig+0x2a0>
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004
 8004070:	4b8b      	ldr	r3, [pc, #556]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a8a      	ldr	r2, [pc, #552]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a87      	ldr	r2, [pc, #540]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d019      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fed2 	bl	8001e38 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004096:	e00e      	b.n	80040b6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fd fece 	bl	8001e38 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d907      	bls.n	80040b6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a6:	4b7e      	ldr	r3, [pc, #504]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e364      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b6:	4b7a      	ldr	r3, [pc, #488]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0ea      	beq.n	8004098 <HAL_RCC_OscConfig+0x2b0>
 80040c2:	e01a      	b.n	80040fa <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd feb8 	bl	8001e38 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ca:	e00e      	b.n	80040ea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd feb4 	bl	8001e38 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d907      	bls.n	80040ea <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040da:	4b71      	ldr	r3, [pc, #452]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e34a      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ea:	4b6d      	ldr	r3, [pc, #436]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ea      	bne.n	80040cc <HAL_RCC_OscConfig+0x2e4>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d06c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x330>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d119      	bne.n	8004146 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d116      	bne.n	8004146 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004118:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_OscConfig+0x348>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e327      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b5b      	ldr	r3, [pc, #364]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	4958      	ldr	r1, [pc, #352]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	e04c      	b.n	80041e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d029      	beq.n	80041a2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414e:	4b54      	ldr	r3, [pc, #336]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a53      	ldr	r2, [pc, #332]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fd fe6d 	bl	8001e38 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004160:	e00e      	b.n	8004180 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004162:	f7fd fe69 	bl	8001e38 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d907      	bls.n	8004180 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004170:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e2ff      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004180:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ea      	beq.n	8004162 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b44      	ldr	r3, [pc, #272]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	4941      	ldr	r1, [pc, #260]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]
 80041a0:	e01e      	b.n	80041e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3e      	ldr	r2, [pc, #248]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80041a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fd fe43 	bl	8001e38 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b4:	e00e      	b.n	80041d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fd fe3f 	bl	8001e38 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d907      	bls.n	80041d4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c4:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e2d5      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d4:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1ea      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d062      	beq.n	80042b2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d038      	beq.n	8004266 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d108      	bne.n	800420e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80041fc:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004202:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004204:	f023 0310 	bic.w	r3, r3, #16
 8004208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800420c:	e007      	b.n	800421e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800420e:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004216:	f043 0310 	orr.w	r3, r3, #16
 800421a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fd fe03 	bl	8001e38 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004234:	e00f      	b.n	8004256 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004236:	f7fd fdff 	bl	8001e38 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b07      	cmp	r3, #7
 8004242:	d908      	bls.n	8004256 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004244:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e294      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0e8      	beq.n	8004236 <HAL_RCC_OscConfig+0x44e>
 8004264:	e025      	b.n	80042b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426c:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd fddf 	bl	8001e38 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800427c:	e012      	b.n	80042a4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd fddb 	bl	8001e38 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b07      	cmp	r3, #7
 800428a:	d90b      	bls.n	80042a4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCC_OscConfig+0x4b8>)
 800428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e270      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a4:	4ba8      	ldr	r3, [pc, #672]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 812d 	beq.w	800451a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042c4:	4ba0      	ldr	r3, [pc, #640]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10d      	bne.n	80042ec <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d0:	4b9d      	ldr	r3, [pc, #628]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	4a9c      	ldr	r2, [pc, #624]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6593      	str	r3, [r2, #88]	; 0x58
 80042dc:	4b9a      	ldr	r3, [pc, #616]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e8:	2301      	movs	r3, #1
 80042ea:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ec:	4b97      	ldr	r3, [pc, #604]	; (800454c <HAL_RCC_OscConfig+0x764>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d11e      	bne.n	8004336 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f8:	4b94      	ldr	r3, [pc, #592]	; (800454c <HAL_RCC_OscConfig+0x764>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a93      	ldr	r2, [pc, #588]	; (800454c <HAL_RCC_OscConfig+0x764>)
 80042fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004304:	f7fd fd98 	bl	8001e38 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430a:	e00e      	b.n	800432a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430c:	f7fd fd94 	bl	8001e38 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d907      	bls.n	800432a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431a:	4b8c      	ldr	r3, [pc, #560]	; (800454c <HAL_RCC_OscConfig+0x764>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e22a      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432a:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x764>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ea      	beq.n	800430c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01f      	beq.n	8004382 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800434e:	4b7e      	ldr	r3, [pc, #504]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	4a7c      	ldr	r2, [pc, #496]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800435e:	4b7a      	ldr	r3, [pc, #488]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	4a78      	ldr	r2, [pc, #480]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800436e:	e018      	b.n	80043a2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004370:	4b75      	ldr	r3, [pc, #468]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	4a74      	ldr	r2, [pc, #464]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004380:	e00f      	b.n	80043a2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004382:	4b71      	ldr	r3, [pc, #452]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	4a6f      	ldr	r2, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004392:	4b6d      	ldr	r3, [pc, #436]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	4a6b      	ldr	r2, [pc, #428]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 800439a:	f023 0304 	bic.w	r3, r3, #4
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d068      	beq.n	800447c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fd fd45 	bl	8001e38 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b0:	e011      	b.n	80043d6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fd fd41 	bl	8001e38 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d908      	bls.n	80043d6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c4:	4b60      	ldr	r3, [pc, #384]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1d4      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d6:	4b5c      	ldr	r3, [pc, #368]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0e6      	beq.n	80043b2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d022      	beq.n	8004436 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043f0:	4b55      	ldr	r3, [pc, #340]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	4a54      	ldr	r2, [pc, #336]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80043f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004400:	e011      	b.n	8004426 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fd fd19 	bl	8001e38 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d908      	bls.n	8004426 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004414:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1ac      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004426:	4b48      	ldr	r3, [pc, #288]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0e6      	beq.n	8004402 <HAL_RCC_OscConfig+0x61a>
 8004434:	e068      	b.n	8004508 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004436:	4b44      	ldr	r3, [pc, #272]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	4a42      	ldr	r2, [pc, #264]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 800443e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004446:	e011      	b.n	800446c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fd fcf6 	bl	8001e38 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d908      	bls.n	800446c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800445a:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e189      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800446c:	4b36      	ldr	r3, [pc, #216]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <HAL_RCC_OscConfig+0x660>
 800447a:	e045      	b.n	8004508 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd fcdc 	bl	8001e38 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004482:	e011      	b.n	80044a8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fd fcd8 	bl	8001e38 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d908      	bls.n	80044a8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004496:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e16b      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e6      	bne.n	8004484 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d021      	beq.n	8004508 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80044cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044d4:	e011      	b.n	80044fa <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fd fcaf 	bl	8001e38 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d908      	bls.n	80044fa <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e142      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e6      	bne.n	80044d6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004508:	7ffb      	ldrb	r3, [r7, #31]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d105      	bne.n	800451a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	4a0d      	ldr	r2, [pc, #52]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04f      	beq.n	80045c6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d028      	beq.n	8004580 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <HAL_RCC_OscConfig+0x760>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fd fc7b 	bl	8001e38 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004544:	e014      	b.n	8004570 <HAL_RCC_OscConfig+0x788>
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004550:	f7fd fc72 	bl	8001e38 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d908      	bls.n	8004570 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455e:	4b8a      	ldr	r3, [pc, #552]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e107      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004570:	4b85      	ldr	r3, [pc, #532]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0e8      	beq.n	8004550 <HAL_RCC_OscConfig+0x768>
 800457e:	e022      	b.n	80045c6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004580:	4b81      	ldr	r3, [pc, #516]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004586:	4a80      	ldr	r2, [pc, #512]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fd fc52 	bl	8001e38 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004596:	e00f      	b.n	80045b8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004598:	f7fd fc4e 	bl	8001e38 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d908      	bls.n	80045b8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045a6:	4b78      	ldr	r3, [pc, #480]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e0e3      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045b8:	4b73      	ldr	r3, [pc, #460]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80045ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e8      	bne.n	8004598 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80d7 	beq.w	800477e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d0:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	f000 8091 	beq.w	8004700 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d166      	bne.n	80046b4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	4b68      	ldr	r3, [pc, #416]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a67      	ldr	r2, [pc, #412]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80045ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd fc21 	bl	8001e38 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f8:	e00e      	b.n	8004618 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fd fc1d 	bl	8001e38 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d907      	bls.n	8004618 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004608:	4b5f      	ldr	r3, [pc, #380]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e0b3      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004618:	4b5b      	ldr	r3, [pc, #364]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ea      	bne.n	80045fa <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004624:	4b58      	ldr	r3, [pc, #352]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	4b58      	ldr	r3, [pc, #352]	; (800478c <HAL_RCC_OscConfig+0x9a4>)
 800462a:	4013      	ands	r3, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004634:	3a01      	subs	r2, #1
 8004636:	0112      	lsls	r2, r2, #4
 8004638:	4311      	orrs	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800463e:	0212      	lsls	r2, r2, #8
 8004640:	4311      	orrs	r1, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004646:	0852      	lsrs	r2, r2, #1
 8004648:	3a01      	subs	r2, #1
 800464a:	0552      	lsls	r2, r2, #21
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004652:	0852      	lsrs	r2, r2, #1
 8004654:	3a01      	subs	r2, #1
 8004656:	0652      	lsls	r2, r2, #25
 8004658:	4311      	orrs	r1, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800465e:	06d2      	lsls	r2, r2, #27
 8004660:	430a      	orrs	r2, r1
 8004662:	4949      	ldr	r1, [pc, #292]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004668:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a46      	ldr	r2, [pc, #280]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 800466e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004672:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004674:	4b44      	ldr	r3, [pc, #272]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a43      	ldr	r2, [pc, #268]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd fbda 	bl	8001e38 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004686:	e00e      	b.n	80046a6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fd fbd6 	bl	8001e38 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d907      	bls.n	80046a6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004696:	4b3c      	ldr	r3, [pc, #240]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e06c      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	4b38      	ldr	r3, [pc, #224]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ea      	beq.n	8004688 <HAL_RCC_OscConfig+0x8a0>
 80046b2:	e064      	b.n	800477e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a33      	ldr	r2, [pc, #204]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd fbba 	bl	8001e38 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c6:	e00e      	b.n	80046e6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd fbb6 	bl	8001e38 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d907      	bls.n	80046e6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e04c      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e6:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ea      	bne.n	80046c8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046f2:	4b25      	ldr	r3, [pc, #148]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	4924      	ldr	r1, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 80046f8:	4b25      	ldr	r3, [pc, #148]	; (8004790 <HAL_RCC_OscConfig+0x9a8>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	60cb      	str	r3, [r1, #12]
 80046fe:	e03e      	b.n	800477e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e039      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <HAL_RCC_OscConfig+0x9a0>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0203 	and.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	429a      	cmp	r2, r3
 800471e:	d12c      	bne.n	800477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	3b01      	subs	r3, #1
 800472c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d123      	bne.n	800477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d11b      	bne.n	800477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d113      	bne.n	800477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d109      	bne.n	800477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3720      	adds	r7, #32
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000
 800478c:	019f800c 	.word	0x019f800c
 8004790:	feeefffc 	.word	0xfeeefffc

08004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e11c      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b90      	ldr	r3, [pc, #576]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d910      	bls.n	80047dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b8d      	ldr	r3, [pc, #564]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 020f 	bic.w	r2, r3, #15
 80047c2:	498b      	ldr	r1, [pc, #556]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b89      	ldr	r3, [pc, #548]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e104      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	4b81      	ldr	r3, [pc, #516]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d908      	bls.n	800480a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f8:	4b7e      	ldr	r3, [pc, #504]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	497b      	ldr	r1, [pc, #492]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8085 	beq.w	8004922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d11f      	bne.n	8004860 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004820:	4b74      	ldr	r3, [pc, #464]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0da      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004830:	f000 fa26 	bl	8004c80 <RCC_GetSysClockFreqFromPLLSource>
 8004834:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4a6f      	ldr	r2, [pc, #444]	; (80049f8 <HAL_RCC_ClockConfig+0x264>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d947      	bls.n	80048ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800483e:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d141      	bne.n	80048ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800484a:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004852:	4a68      	ldr	r2, [pc, #416]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e036      	b.n	80048ce <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d107      	bne.n	8004878 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004868:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d115      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0b6      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d107      	bne.n	8004890 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004880:	4b5c      	ldr	r3, [pc, #368]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0aa      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004890:	4b58      	ldr	r3, [pc, #352]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0a2      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048a0:	f000 f8b0 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4a53      	ldr	r2, [pc, #332]	; (80049f8 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d90f      	bls.n	80048ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048ae:	4b51      	ldr	r3, [pc, #324]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ba:	4b4e      	ldr	r3, [pc, #312]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c2:	4a4c      	ldr	r2, [pc, #304]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ce:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 0203 	bic.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4946      	ldr	r1, [pc, #280]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fd faaa 	bl	8001e38 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	e013      	b.n	8004910 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fd faa6 	bl	8001e38 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d90a      	bls.n	8004910 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	4b3e      	ldr	r3, [pc, #248]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 020c 	and.w	r2, r3, #12
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e06a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004910:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 020c 	and.w	r2, r3, #12
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	429a      	cmp	r2, r3
 8004920:	d1e2      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d105      	bne.n	8004934 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004928:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a31      	ldr	r2, [pc, #196]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 800492e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004932:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494c:	429a      	cmp	r2, r3
 800494e:	d208      	bcs.n	8004962 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4925      	ldr	r1, [pc, #148]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004962:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d210      	bcs.n	8004992 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004970:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 020f 	bic.w	r2, r3, #15
 8004978:	491d      	ldr	r1, [pc, #116]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e029      	b.n	80049e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4912      	ldr	r1, [pc, #72]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	490a      	ldr	r1, [pc, #40]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049d0:	f000 f8b6 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <HAL_RCC_ClockConfig+0x268>)
 80049d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd f9da 	bl	8001d98 <HAL_InitTick>
 80049e4:	4603      	mov	r3, r0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40022000 	.word	0x40022000
 80049f4:	40021000 	.word	0x40021000
 80049f8:	04c4b400 	.word	0x04c4b400
 80049fc:	20000000 	.word	0x20000000
 8004a00:	20000004 	.word	0x20000004

08004a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a12:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a1c:	4b44      	ldr	r3, [pc, #272]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x34>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	d121      	bne.n	8004a76 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d11e      	bne.n	8004a76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a38:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a44:	4b3a      	ldr	r3, [pc, #232]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e005      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a54:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004a60:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a68:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a7c:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	e004      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a88:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x138>)
 8004a8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d146      	bne.n	8004b20 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a9c:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xb4>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xce>
 8004ab6:	e019      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x134>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	4a1b      	ldr	r2, [pc, #108]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ac2:	68d2      	ldr	r2, [r2, #12]
 8004ac4:	0a12      	lsrs	r2, r2, #8
 8004ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	617b      	str	r3, [r7, #20]
        break;
 8004ad0:	e019      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x138>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	0a12      	lsrs	r2, r2, #8
 8004ae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ae4:	fb02 f303 	mul.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]
        break;
 8004aea:	e00c      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004af6:	68d2      	ldr	r2, [r2, #12]
 8004af8:	0a12      	lsrs	r2, r2, #8
 8004afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
        break;
 8004b04:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	0e5b      	lsrs	r3, r3, #25
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	3301      	adds	r3, #1
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b20:	69bb      	ldr	r3, [r7, #24]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3724      	adds	r7, #36	; 0x24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
 8004b34:	08007af0 	.word	0x08007af0
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	007a1200 	.word	0x007a1200

08004b40 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004b44:	f7ff ff5e 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetHCLKFreq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	08007ad8 	.word	0x08007ad8

08004b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b6c:	f7ff ffe8 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	08007ae8 	.word	0x08007ae8

08004b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b94:	f7ff ffd4 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0adb      	lsrs	r3, r3, #11
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	; (8004bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	08007ae8 	.word	0x08007ae8

08004bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bd0:	f7ff f86c 	bl	8003cac <HAL_PWREx_GetVoltageRange>
 8004bd4:	6138      	str	r0, [r7, #16]
 8004bd6:	e014      	b.n	8004c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be2:	6593      	str	r3, [r2, #88]	; 0x58
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bf0:	f7ff f85c 	bl	8003cac <HAL_PWREx_GetVoltageRange>
 8004bf4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0e:	d10b      	bne.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d919      	bls.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2ba0      	cmp	r3, #160	; 0xa0
 8004c1a:	d902      	bls.n	8004c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c20:	e013      	b.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c22:	2301      	movs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c26:	e010      	b.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d902      	bls.n	8004c34 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c2e:	2303      	movs	r3, #3
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e00a      	b.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b80      	cmp	r3, #128	; 0x80
 8004c38:	d102      	bne.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e004      	b.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b70      	cmp	r3, #112	; 0x70
 8004c44:	d101      	bne.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c46:	2301      	movs	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 020f 	bic.w	r2, r3, #15
 8004c52:	490a      	ldr	r1, [pc, #40]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40022000 	.word	0x40022000

08004c80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c86:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c90:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d015      	beq.n	8004cd0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d839      	bhi.n	8004d1e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d01c      	beq.n	8004cea <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d133      	bne.n	8004d1e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb6:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	4a23      	ldr	r2, [pc, #140]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cc0:	68d2      	ldr	r2, [r2, #12]
 8004cc2:	0a12      	lsrs	r2, r2, #8
 8004cc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	613b      	str	r3, [r7, #16]
      break;
 8004cce:	e029      	b.n	8004d24 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cd0:	4a20      	ldr	r2, [pc, #128]	; (8004d54 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cda:	68d2      	ldr	r2, [r2, #12]
 8004cdc:	0a12      	lsrs	r2, r2, #8
 8004cde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	613b      	str	r3, [r7, #16]
      break;
 8004ce8:	e01c      	b.n	8004d24 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cea:	4b18      	ldr	r3, [pc, #96]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cf6:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e005      	b.n	8004d12 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d06:	4b11      	ldr	r3, [pc, #68]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004d12:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1a:	613b      	str	r3, [r7, #16]
        break;
 8004d1c:	e002      	b.n	8004d24 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
      break;
 8004d22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	0e5b      	lsrs	r3, r3, #25
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d3e:	683b      	ldr	r3, [r7, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	007a1200 	.word	0x007a1200
 8004d58:	08007af0 	.word	0x08007af0

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d64:	2300      	movs	r3, #0
 8004d66:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d040      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d02a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d825      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d84:	2b60      	cmp	r3, #96	; 0x60
 8004d86:	d026      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d88:	2b60      	cmp	r3, #96	; 0x60
 8004d8a:	d821      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d006      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d81d      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d010      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d9e:	4b8f      	ldr	r3, [pc, #572]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4a8e      	ldr	r2, [pc, #568]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004daa:	e015      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fb56 	bl	8005464 <RCCEx_PLLSAI1_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dbc:	e00c      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3320      	adds	r3, #32
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fc33 	bl	8005630 <RCCEx_PLLSAI2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	77fb      	strb	r3, [r7, #31]
        break;
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd8:	7ffb      	ldrb	r3, [r7, #31]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dde:	4b7f      	ldr	r3, [pc, #508]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dec:	497b      	ldr	r1, [pc, #492]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004df4:	e001      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df6:	7ffb      	ldrb	r3, [r7, #31]
 8004df8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d047      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0e:	d030      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e14:	d82a      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1a:	d02a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e20:	d824      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e26:	d008      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d81e      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e36:	d010      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e38:	e018      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e3a:	4b68      	ldr	r3, [pc, #416]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	4a67      	ldr	r2, [pc, #412]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e44:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e46:	e015      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fb08 	bl	8005464 <RCCEx_PLLSAI1_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e58:	e00c      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3320      	adds	r3, #32
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fbe5 	bl	8005630 <RCCEx_PLLSAI2_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e6a:	e003      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	77fb      	strb	r3, [r7, #31]
        break;
 8004e70:	e000      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e74:	7ffb      	ldrb	r3, [r7, #31]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e7a:	4b58      	ldr	r3, [pc, #352]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4954      	ldr	r1, [pc, #336]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e90:	e001      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e92:	7ffb      	ldrb	r3, [r7, #31]
 8004e94:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 80ab 	beq.w	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea8:	4b4c      	ldr	r3, [pc, #304]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b49      	ldr	r3, [pc, #292]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4a48      	ldr	r2, [pc, #288]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec0:	4b46      	ldr	r3, [pc, #280]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a42      	ldr	r2, [pc, #264]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004edc:	f7fc ffac 	bl	8001e38 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee2:	e00f      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee4:	f7fc ffa8 	bl	8001e38 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d908      	bls.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004f02:	e006      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f04:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0e9      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004f12:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004f14:	7ffb      	ldrb	r3, [r7, #31]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d164      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f1a:	4b30      	ldr	r3, [pc, #192]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f24:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01f      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d019      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f38:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f42:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f44:	4b25      	ldr	r3, [pc, #148]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	4a24      	ldr	r2, [pc, #144]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f54:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01f      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fc ff5f 	bl	8001e38 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f7c:	e012      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fc ff5b 	bl	8001e38 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d909      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004fa2:	e007      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa4:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0e5      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004fb4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004fb6:	7ffb      	ldrb	r3, [r7, #31]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	4903      	ldr	r1, [pc, #12]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fd6:	7ffb      	ldrb	r3, [r7, #31]
 8004fd8:	77bb      	strb	r3, [r7, #30]
 8004fda:	e005      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	7ffb      	ldrb	r3, [r7, #31]
 8004fe6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fee:	4b9c      	ldr	r3, [pc, #624]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	4a9b      	ldr	r2, [pc, #620]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005006:	4b96      	ldr	r3, [pc, #600]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	f023 0203 	bic.w	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	4992      	ldr	r1, [pc, #584]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005028:	4b8d      	ldr	r3, [pc, #564]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f023 020c 	bic.w	r2, r3, #12
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	498a      	ldr	r1, [pc, #552]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800504a:	4b85      	ldr	r3, [pc, #532]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	4981      	ldr	r1, [pc, #516]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800506c:	4b7c      	ldr	r3, [pc, #496]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4979      	ldr	r1, [pc, #484]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800508e:	4b74      	ldr	r3, [pc, #464]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	4970      	ldr	r1, [pc, #448]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050b0:	4b6b      	ldr	r3, [pc, #428]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050be:	4968      	ldr	r1, [pc, #416]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050d2:	4b63      	ldr	r3, [pc, #396]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e0:	495f      	ldr	r1, [pc, #380]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050f4:	4b5a      	ldr	r3, [pc, #360]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005102:	4957      	ldr	r1, [pc, #348]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005116:	4b52      	ldr	r3, [pc, #328]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005124:	494e      	ldr	r1, [pc, #312]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d031      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005140:	d00e      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005146:	d814      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800514c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005150:	d10f      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005152:	4b43      	ldr	r3, [pc, #268]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4a42      	ldr	r2, [pc, #264]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800515e:	e00c      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f97c 	bl	8005464 <RCCEx_PLLSAI1_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005170:	e003      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	77fb      	strb	r3, [r7, #31]
        break;
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517a:	7ffb      	ldrb	r3, [r7, #31]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005180:	4b37      	ldr	r3, [pc, #220]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518e:	4934      	ldr	r1, [pc, #208]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005196:	e001      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	7ffb      	ldrb	r3, [r7, #31]
 800519a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a8:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	492a      	ldr	r1, [pc, #168]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ca:	4b25      	ldr	r3, [pc, #148]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	4921      	ldr	r1, [pc, #132]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051ec:	4b1c      	ldr	r3, [pc, #112]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	4919      	ldr	r1, [pc, #100]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005214:	f023 0203 	bic.w	r2, r3, #3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	4910      	ldr	r1, [pc, #64]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02b      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523e:	4908      	ldr	r1, [pc, #32]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800524e:	d109      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a02      	ldr	r2, [pc, #8]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800525a:	60d3      	str	r3, [r2, #12]
 800525c:	e014      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800526c:	d10c      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	2101      	movs	r1, #1
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f8f5 	bl	8005464 <RCCEx_PLLSAI1_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005284:	7ffb      	ldrb	r3, [r7, #31]
 8005286:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d04a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529c:	d108      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800529e:	4b70      	ldr	r3, [pc, #448]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a4:	4a6e      	ldr	r2, [pc, #440]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052ae:	e012      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80052b0:	4b6b      	ldr	r3, [pc, #428]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052be:	4968      	ldr	r1, [pc, #416]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052c6:	4b66      	ldr	r3, [pc, #408]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052cc:	4a64      	ldr	r2, [pc, #400]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052de:	d10d      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	2101      	movs	r1, #1
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f8bc 	bl	8005464 <RCCEx_PLLSAI1_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052f0:	7ffb      	ldrb	r3, [r7, #31]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d019      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	77bb      	strb	r3, [r7, #30]
 80052fa:	e016      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005304:	d106      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005306:	4b56      	ldr	r3, [pc, #344]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	4a55      	ldr	r2, [pc, #340]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800530c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005310:	60d3      	str	r3, [r2, #12]
 8005312:	e00a      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531c:	d105      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800531e:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4a4f      	ldr	r2, [pc, #316]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d028      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005336:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005344:	4946      	ldr	r1, [pc, #280]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005354:	d106      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005356:	4b42      	ldr	r3, [pc, #264]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4a41      	ldr	r2, [pc, #260]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800535c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005360:	60d3      	str	r3, [r2, #12]
 8005362:	e011      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800536c:	d10c      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
 8005372:	2101      	movs	r1, #1
 8005374:	4618      	mov	r0, r3
 8005376:	f000 f875 	bl	8005464 <RCCEx_PLLSAI1_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800537e:	7ffb      	ldrb	r3, [r7, #31]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005384:	7ffb      	ldrb	r3, [r7, #31]
 8005386:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01e      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005394:	4b32      	ldr	r3, [pc, #200]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a4:	492e      	ldr	r1, [pc, #184]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b6:	d10c      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	2102      	movs	r1, #2
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f850 	bl	8005464 <RCCEx_PLLSAI1_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053c8:	7ffb      	ldrb	r3, [r7, #31]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053de:	4b20      	ldr	r3, [pc, #128]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053e4:	f023 0204 	bic.w	r2, r3, #4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ee:	491c      	ldr	r1, [pc, #112]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005402:	4b17      	ldr	r3, [pc, #92]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005408:	f023 0218 	bic.w	r2, r3, #24
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	4913      	ldr	r1, [pc, #76]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d017      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005426:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800542c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005436:	490a      	ldr	r1, [pc, #40]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005448:	d105      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4a04      	ldr	r2, [pc, #16]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005454:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005456:	7fbb      	ldrb	r3, [r7, #30]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000

08005464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b03      	cmp	r3, #3
 8005478:	d018      	beq.n	80054ac <RCCEx_PLLSAI1_Config+0x48>
 800547a:	2b03      	cmp	r3, #3
 800547c:	d81f      	bhi.n	80054be <RCCEx_PLLSAI1_Config+0x5a>
 800547e:	2b01      	cmp	r3, #1
 8005480:	d002      	beq.n	8005488 <RCCEx_PLLSAI1_Config+0x24>
 8005482:	2b02      	cmp	r3, #2
 8005484:	d009      	beq.n	800549a <RCCEx_PLLSAI1_Config+0x36>
 8005486:	e01a      	b.n	80054be <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005488:	4b65      	ldr	r3, [pc, #404]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d117      	bne.n	80054c4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005498:	e014      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800549a:	4b61      	ldr	r3, [pc, #388]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d110      	bne.n	80054c8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054aa:	e00d      	b.n	80054c8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80054ac:	4b5c      	ldr	r3, [pc, #368]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054bc:	e006      	b.n	80054cc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
      break;
 80054c2:	e004      	b.n	80054ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80054c4:	bf00      	nop
 80054c6:	e002      	b.n	80054ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80054c8:	bf00      	nop
 80054ca:	e000      	b.n	80054ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80054cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 809f 	bne.w	8005614 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054d6:	4b52      	ldr	r3, [pc, #328]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a51      	ldr	r2, [pc, #324]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e2:	f7fc fca9 	bl	8001e38 <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054e8:	e00f      	b.n	800550a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ea:	f7fc fca5 	bl	8001e38 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d908      	bls.n	800550a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054f8:	4b49      	ldr	r3, [pc, #292]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005508:	e006      	b.n	8005518 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800550a:	4b45      	ldr	r3, [pc, #276]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e9      	bne.n	80054ea <RCCEx_PLLSAI1_Config+0x86>
 8005516:	e000      	b.n	800551a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005518:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d179      	bne.n	8005614 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d116      	bne.n	8005554 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005526:	4b3e      	ldr	r3, [pc, #248]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	4b3e      	ldr	r3, [pc, #248]	; (8005624 <RCCEx_PLLSAI1_Config+0x1c0>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6892      	ldr	r2, [r2, #8]
 8005532:	0211      	lsls	r1, r2, #8
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68d2      	ldr	r2, [r2, #12]
 8005538:	06d2      	lsls	r2, r2, #27
 800553a:	4311      	orrs	r1, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6852      	ldr	r2, [r2, #4]
 8005540:	3a01      	subs	r2, #1
 8005542:	0112      	lsls	r2, r2, #4
 8005544:	4311      	orrs	r1, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	4934      	ldr	r1, [pc, #208]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	610b      	str	r3, [r1, #16]
 8005552:	e033      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d118      	bne.n	800558c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800555a:	4b31      	ldr	r3, [pc, #196]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	4b32      	ldr	r3, [pc, #200]	; (8005628 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005560:	4013      	ands	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6892      	ldr	r2, [r2, #8]
 8005566:	0211      	lsls	r1, r2, #8
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6912      	ldr	r2, [r2, #16]
 800556c:	0852      	lsrs	r2, r2, #1
 800556e:	3a01      	subs	r2, #1
 8005570:	0552      	lsls	r2, r2, #21
 8005572:	4311      	orrs	r1, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6852      	ldr	r2, [r2, #4]
 8005578:	3a01      	subs	r2, #1
 800557a:	0112      	lsls	r2, r2, #4
 800557c:	4311      	orrs	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	4926      	ldr	r1, [pc, #152]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
 800558a:	e017      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800558c:	4b24      	ldr	r3, [pc, #144]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	4b26      	ldr	r3, [pc, #152]	; (800562c <RCCEx_PLLSAI1_Config+0x1c8>)
 8005592:	4013      	ands	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6892      	ldr	r2, [r2, #8]
 8005598:	0211      	lsls	r1, r2, #8
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6952      	ldr	r2, [r2, #20]
 800559e:	0852      	lsrs	r2, r2, #1
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0652      	lsls	r2, r2, #25
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6852      	ldr	r2, [r2, #4]
 80055aa:	3a01      	subs	r2, #1
 80055ac:	0112      	lsls	r2, r2, #4
 80055ae:	4311      	orrs	r1, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	491a      	ldr	r1, [pc, #104]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055bc:	4b18      	ldr	r3, [pc, #96]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a17      	ldr	r2, [pc, #92]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fc fc36 	bl	8001e38 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055ce:	e00f      	b.n	80055f0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055d0:	f7fc fc32 	bl	8001e38 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d908      	bls.n	80055f0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80055ee:	e006      	b.n	80055fe <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0e9      	beq.n	80055d0 <RCCEx_PLLSAI1_Config+0x16c>
 80055fc:	e000      	b.n	8005600 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80055fe:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	4904      	ldr	r1, [pc, #16]	; (8005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005610:	4313      	orrs	r3, r2
 8005612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	07ff800c 	.word	0x07ff800c
 8005628:	ff9f800c 	.word	0xff9f800c
 800562c:	f9ff800c 	.word	0xf9ff800c

08005630 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d018      	beq.n	8005678 <RCCEx_PLLSAI2_Config+0x48>
 8005646:	2b03      	cmp	r3, #3
 8005648:	d81f      	bhi.n	800568a <RCCEx_PLLSAI2_Config+0x5a>
 800564a:	2b01      	cmp	r3, #1
 800564c:	d002      	beq.n	8005654 <RCCEx_PLLSAI2_Config+0x24>
 800564e:	2b02      	cmp	r3, #2
 8005650:	d009      	beq.n	8005666 <RCCEx_PLLSAI2_Config+0x36>
 8005652:	e01a      	b.n	800568a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005654:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d117      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005664:	e014      	b.n	8005690 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566e:	2b00      	cmp	r3, #0
 8005670:	d110      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005676:	e00d      	b.n	8005694 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005678:	4b41      	ldr	r3, [pc, #260]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005688:	e006      	b.n	8005698 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
      break;
 800568e:	e004      	b.n	800569a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005690:	bf00      	nop
 8005692:	e002      	b.n	800569a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005694:	bf00      	nop
 8005696:	e000      	b.n	800569a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005698:	bf00      	nop
  }

  if (status == HAL_OK)
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d169      	bne.n	8005774 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056a0:	4b37      	ldr	r3, [pc, #220]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a36      	ldr	r2, [pc, #216]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 80056a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ac:	f7fc fbc4 	bl	8001e38 <HAL_GetTick>
 80056b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056b2:	e00f      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056b4:	f7fc fbc0 	bl	8001e38 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d908      	bls.n	80056d4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056c2:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056d2:	e006      	b.n	80056e2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056d4:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e9      	bne.n	80056b4 <RCCEx_PLLSAI2_Config+0x84>
 80056e0:	e000      	b.n	80056e4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80056e2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d144      	bne.n	8005774 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d115      	bne.n	800571c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056f0:	4b23      	ldr	r3, [pc, #140]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	4b23      	ldr	r3, [pc, #140]	; (8005784 <RCCEx_PLLSAI2_Config+0x154>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6892      	ldr	r2, [r2, #8]
 80056fc:	0211      	lsls	r1, r2, #8
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	68d2      	ldr	r2, [r2, #12]
 8005702:	06d2      	lsls	r2, r2, #27
 8005704:	4311      	orrs	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6852      	ldr	r2, [r2, #4]
 800570a:	3a01      	subs	r2, #1
 800570c:	0112      	lsls	r2, r2, #4
 800570e:	4311      	orrs	r1, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	491a      	ldr	r1, [pc, #104]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005718:	4313      	orrs	r3, r2
 800571a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800571c:	4b18      	ldr	r3, [pc, #96]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fc fb86 	bl	8001e38 <HAL_GetTick>
 800572c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800572e:	e00f      	b.n	8005750 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005730:	f7fc fb82 	bl	8001e38 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d908      	bls.n	8005750 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800573e:	4b10      	ldr	r3, [pc, #64]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800574e:	e006      	b.n	800575e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0e9      	beq.n	8005730 <RCCEx_PLLSAI2_Config+0x100>
 800575c:	e000      	b.n	8005760 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800575e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	4904      	ldr	r1, [pc, #16]	; (8005780 <RCCEx_PLLSAI2_Config+0x150>)
 8005770:	4313      	orrs	r3, r2
 8005772:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	07ff800c 	.word	0x07ff800c

08005788 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d066      	beq.n	8005868 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fb fe44 	bl	800143c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d045      	beq.n	8005856 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ca:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <HAL_RTC_Init+0xec>)
 80057cc:	22ca      	movs	r2, #202	; 0xca
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <HAL_RTC_Init+0xec>)
 80057d2:	2253      	movs	r2, #83	; 0x53
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f872 	bl	80058c0 <RTC_EnterInitMode>
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d121      	bne.n	800582a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80057e6:	4b23      	ldr	r3, [pc, #140]	; (8005874 <HAL_RTC_Init+0xec>)
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	4a22      	ldr	r2, [pc, #136]	; (8005874 <HAL_RTC_Init+0xec>)
 80057ec:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80057f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80057f6:	4b1f      	ldr	r3, [pc, #124]	; (8005874 <HAL_RTC_Init+0xec>)
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6859      	ldr	r1, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	4319      	orrs	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	430b      	orrs	r3, r1
 800580a:	491a      	ldr	r1, [pc, #104]	; (8005874 <HAL_RTC_Init+0xec>)
 800580c:	4313      	orrs	r3, r2
 800580e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	4916      	ldr	r1, [pc, #88]	; (8005874 <HAL_RTC_Init+0xec>)
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f881 	bl	8005928 <RTC_ExitInitMode>
 8005826:	4603      	mov	r3, r0
 8005828:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10e      	bne.n	800584e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8005830:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_RTC_Init+0xec>)
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a19      	ldr	r1, [r3, #32]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	4319      	orrs	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	430b      	orrs	r3, r1
 8005848:	490a      	ldr	r1, [pc, #40]	; (8005874 <HAL_RTC_Init+0xec>)
 800584a:	4313      	orrs	r3, r2
 800584c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <HAL_RTC_Init+0xec>)
 8005850:	22ff      	movs	r2, #255	; 0xff
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
 8005854:	e001      	b.n	800585a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d103      	bne.n	8005868 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40002800 	.word	0x40002800

08005878 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_RTC_WaitForSynchro+0x40>)
 8005882:	4a0e      	ldr	r2, [pc, #56]	; (80058bc <HAL_RTC_WaitForSynchro+0x44>)
 8005884:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005886:	f7fc fad7 	bl	8001e38 <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800588c:	e009      	b.n	80058a2 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800588e:	f7fc fad3 	bl	8001e38 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589c:	d901      	bls.n	80058a2 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e006      	b.n	80058b0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <HAL_RTC_WaitForSynchro+0x40>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ef      	beq.n	800588e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40002800 	.word	0x40002800
 80058bc:	0001005c 	.word	0x0001005c

080058c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80058cc:	4b15      	ldr	r3, [pc, #84]	; (8005924 <RTC_EnterInitMode+0x64>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d120      	bne.n	800591a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <RTC_EnterInitMode+0x64>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4a11      	ldr	r2, [pc, #68]	; (8005924 <RTC_EnterInitMode+0x64>)
 80058de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80058e4:	f7fc faa8 	bl	8001e38 <HAL_GetTick>
 80058e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058ea:	e00d      	b.n	8005908 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058ec:	f7fc faa4 	bl	8001e38 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058fa:	d905      	bls.n	8005908 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2203      	movs	r2, #3
 8005904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <RTC_EnterInitMode+0x64>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <RTC_EnterInitMode+0x5a>
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d1e8      	bne.n	80058ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40002800 	.word	0x40002800

08005928 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <RTC_ExitInitMode+0x78>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <RTC_ExitInitMode+0x78>)
 800593a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005940:	4b17      	ldr	r3, [pc, #92]	; (80059a0 <RTC_ExitInitMode+0x78>)
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff93 	bl	8005878 <HAL_RTC_WaitForSynchro>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01e      	beq.n	8005996 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2203      	movs	r2, #3
 800595c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	e017      	b.n	8005996 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <RTC_ExitInitMode+0x78>)
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	4a0d      	ldr	r2, [pc, #52]	; (80059a0 <RTC_ExitInitMode+0x78>)
 800596c:	f023 0320 	bic.w	r3, r3, #32
 8005970:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff ff80 	bl	8005878 <HAL_RTC_WaitForSynchro>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2203      	movs	r2, #3
 8005982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <RTC_ExitInitMode+0x78>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <RTC_ExitInitMode+0x78>)
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40002800 	.word	0x40002800

080059a4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	490f      	ldr	r1, [pc, #60]	; (80059f4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	490c      	ldr	r1, [pc, #48]	; (80059f8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6919      	ldr	r1, [r3, #16]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	430b      	orrs	r3, r1
 80059de:	4906      	ldr	r1, [pc, #24]	; (80059f8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40002800 	.word	0x40002800
 80059f8:	40003400 	.word	0x40003400

080059fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e042      	b.n	8005a94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fb ffd1 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2224      	movs	r2, #36	; 0x24
 8005a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fc46 	bl	80062d0 <UART_SetConfig>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e022      	b.n	8005a94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 ff3a 	bl	80068d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 ffc1 	bl	8006a14 <UART_CheckIdleState>
 8005a92:	4603      	mov	r3, r0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d167      	bne.n	8005b84 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_UART_Transmit_DMA+0x24>
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e060      	b.n	8005b86 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d028      	beq.n	8005b44 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af6:	4a26      	ldr	r2, [pc, #152]	; (8005b90 <HAL_UART_Transmit_DMA+0xf4>)
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afe:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <HAL_UART_Transmit_DMA+0xf8>)
 8005b00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <HAL_UART_Transmit_DMA+0xfc>)
 8005b08:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3328      	adds	r3, #40	; 0x28
 8005b22:	461a      	mov	r2, r3
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	f7fd fb0f 	bl	8003148 <HAL_DMA_Start_IT>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2210      	movs	r2, #16
 8005b34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e020      	b.n	8005b86 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3308      	adds	r3, #8
 8005b52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	623a      	str	r2, [r7, #32]
 8005b6e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	6a3a      	ldr	r2, [r7, #32]
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e5      	bne.n	8005b4c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3728      	adds	r7, #40	; 0x28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	08006ed3 	.word	0x08006ed3
 8005b94:	08006f6d 	.word	0x08006f6d
 8005b98:	080070f3 	.word	0x080070f3

08005b9c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d137      	bne.n	8005c24 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Receive_DMA+0x24>
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e030      	b.n	8005c26 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <HAL_UART_Receive_DMA+0x94>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d01f      	beq.n	8005c14 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e6      	bne.n	8005be2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f001 f80c 	bl	8006c38 <UART_Start_Receive_DMA>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3728      	adds	r7, #40	; 0x28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40008000 	.word	0x40008000

08005c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b0ba      	sub	sp, #232	; 0xe8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c62:	4013      	ands	r3, r2
 8005c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d015      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 82e3 	beq.w	8006264 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	4798      	blx	r3
      }
      return;
 8005ca6:	e2dd      	b.n	8006264 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8123 	beq.w	8005ef8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005cb2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005cb6:	4b8d      	ldr	r3, [pc, #564]	; (8005eec <HAL_UART_IRQHandler+0x2b8>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005cbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ef0 <HAL_UART_IRQHandler+0x2bc>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8116 	beq.w	8005ef8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d011      	beq.n	8005cfc <HAL_UART_IRQHandler+0xc8>
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f043 0201 	orr.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d011      	beq.n	8005d2c <HAL_UART_IRQHandler+0xf8>
 8005d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f043 0204 	orr.w	r2, r3, #4
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d011      	beq.n	8005d5c <HAL_UART_IRQHandler+0x128>
 8005d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f043 0202 	orr.w	r2, r3, #2
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d017      	beq.n	8005d98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d78:	4b5c      	ldr	r3, [pc, #368]	; (8005eec <HAL_UART_IRQHandler+0x2b8>)
 8005d7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2208      	movs	r2, #8
 8005d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f043 0208 	orr.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d012      	beq.n	8005dca <HAL_UART_IRQHandler+0x196>
 8005da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00c      	beq.n	8005dca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc0:	f043 0220 	orr.w	r2, r3, #32
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8249 	beq.w	8006268 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d013      	beq.n	8005e0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d005      	beq.n	8005e2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d054      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 ffe9 	bl	8006e06 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d146      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d9      	bne.n	8005e42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d017      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e9e:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_UART_IRQHandler+0x2c0>)
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fd fa24 	bl	80032f6 <HAL_DMA_Abort_IT>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d019      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec6:	e00f      	b.n	8005ee8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f9eb 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ece:	e00b      	b.n	8005ee8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f9e7 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed6:	e007      	b.n	8005ee8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f9e3 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005ee6:	e1bf      	b.n	8006268 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	bf00      	nop
    return;
 8005eea:	e1bd      	b.n	8006268 <HAL_UART_IRQHandler+0x634>
 8005eec:	10000001 	.word	0x10000001
 8005ef0:	04000120 	.word	0x04000120
 8005ef4:	08007173 	.word	0x08007173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	f040 8153 	bne.w	80061a8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 814c 	beq.w	80061a8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8145 	beq.w	80061a8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2210      	movs	r2, #16
 8005f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	f040 80bb 	bne.w	80060ac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 818f 	beq.w	800626c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	f080 8187 	bcs.w	800626c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 8087 	bne.w	800608a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005faa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1da      	bne.n	8005f7c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ff2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e1      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006026:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006028:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800602c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e3      	bne.n	8006002 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800606a:	65bb      	str	r3, [r7, #88]	; 0x58
 800606c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e4      	bne.n	8006048 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006084:	4618      	mov	r0, r3
 8006086:	f7fd f8da 	bl	800323e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800609c:	b29b      	uxth	r3, r3
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f907 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060aa:	e0df      	b.n	800626c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80d1 	beq.w	8006270 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80060ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80cc 	beq.w	8006270 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060fa:	647b      	str	r3, [r7, #68]	; 0x44
 80060fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e4      	bne.n	80060d8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3308      	adds	r3, #8
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	623b      	str	r3, [r7, #32]
   return(result);
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006136:	633a      	str	r2, [r7, #48]	; 0x30
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800613c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e1      	bne.n	800610e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	60fb      	str	r3, [r7, #12]
   return(result);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0310 	bic.w	r3, r3, #16
 8006172:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	617b      	str	r3, [r7, #20]
   return(result);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e4      	bne.n	800615e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800619a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f889 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061a6:	e063      	b.n	8006270 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_UART_IRQHandler+0x59e>
 80061b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 f812 	bl	80071f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061d0:	e051      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d014      	beq.n	8006208 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d105      	bne.n	80061f6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d03a      	beq.n	8006274 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
    }
    return;
 8006206:	e035      	b.n	8006274 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <HAL_UART_IRQHandler+0x5f4>
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 ffbc 	bl	800719e <UART_EndTransmit_IT>
    return;
 8006226:	e026      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <HAL_UART_IRQHandler+0x614>
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 ffeb 	bl	800721c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006246:	e016      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d010      	beq.n	8006276 <HAL_UART_IRQHandler+0x642>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	2b00      	cmp	r3, #0
 800625a:	da0c      	bge.n	8006276 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 ffd3 	bl	8007208 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006262:	e008      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
      return;
 8006264:	bf00      	nop
 8006266:	e006      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
    return;
 8006268:	bf00      	nop
 800626a:	e004      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
      return;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
      return;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <HAL_UART_IRQHandler+0x642>
    return;
 8006274:	bf00      	nop
  }
}
 8006276:	37e8      	adds	r7, #232	; 0xe8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d4:	b08c      	sub	sp, #48	; 0x30
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4baa      	ldr	r3, [pc, #680]	; (80065a8 <UART_SetConfig+0x2d8>)
 8006300:	4013      	ands	r3, r2
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006308:	430b      	orrs	r3, r1
 800630a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a9f      	ldr	r2, [pc, #636]	; (80065ac <UART_SetConfig+0x2dc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006338:	4313      	orrs	r3, r2
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006346:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006350:	430b      	orrs	r3, r1
 8006352:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	f023 010f 	bic.w	r1, r3, #15
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a90      	ldr	r2, [pc, #576]	; (80065b0 <UART_SetConfig+0x2e0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d125      	bne.n	80063c0 <UART_SetConfig+0xf0>
 8006374:	4b8f      	ldr	r3, [pc, #572]	; (80065b4 <UART_SetConfig+0x2e4>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d81a      	bhi.n	80063b8 <UART_SetConfig+0xe8>
 8006382:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <UART_SetConfig+0xb8>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	08006399 	.word	0x08006399
 800638c:	080063a9 	.word	0x080063a9
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063b1 	.word	0x080063b1
 8006398:	2301      	movs	r3, #1
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e116      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e112      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063a8:	2304      	movs	r3, #4
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ae:	e10e      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b6:	e10a      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063be:	e106      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a7c      	ldr	r2, [pc, #496]	; (80065b8 <UART_SetConfig+0x2e8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d138      	bne.n	800643c <UART_SetConfig+0x16c>
 80063ca:	4b7a      	ldr	r3, [pc, #488]	; (80065b4 <UART_SetConfig+0x2e4>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f003 030c 	and.w	r3, r3, #12
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d82d      	bhi.n	8006434 <UART_SetConfig+0x164>
 80063d8:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0x110>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	08006415 	.word	0x08006415
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	08006435 	.word	0x08006435
 80063f0:	08006425 	.word	0x08006425
 80063f4:	08006435 	.word	0x08006435
 80063f8:	08006435 	.word	0x08006435
 80063fc:	08006435 	.word	0x08006435
 8006400:	0800641d 	.word	0x0800641d
 8006404:	08006435 	.word	0x08006435
 8006408:	08006435 	.word	0x08006435
 800640c:	08006435 	.word	0x08006435
 8006410:	0800642d 	.word	0x0800642d
 8006414:	2300      	movs	r3, #0
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641a:	e0d8      	b.n	80065ce <UART_SetConfig+0x2fe>
 800641c:	2302      	movs	r3, #2
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e0d4      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006424:	2304      	movs	r3, #4
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e0d0      	b.n	80065ce <UART_SetConfig+0x2fe>
 800642c:	2308      	movs	r3, #8
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e0cc      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006434:	2310      	movs	r3, #16
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e0c8      	b.n	80065ce <UART_SetConfig+0x2fe>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5e      	ldr	r2, [pc, #376]	; (80065bc <UART_SetConfig+0x2ec>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d125      	bne.n	8006492 <UART_SetConfig+0x1c2>
 8006446:	4b5b      	ldr	r3, [pc, #364]	; (80065b4 <UART_SetConfig+0x2e4>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006450:	2b30      	cmp	r3, #48	; 0x30
 8006452:	d016      	beq.n	8006482 <UART_SetConfig+0x1b2>
 8006454:	2b30      	cmp	r3, #48	; 0x30
 8006456:	d818      	bhi.n	800648a <UART_SetConfig+0x1ba>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d00a      	beq.n	8006472 <UART_SetConfig+0x1a2>
 800645c:	2b20      	cmp	r3, #32
 800645e:	d814      	bhi.n	800648a <UART_SetConfig+0x1ba>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <UART_SetConfig+0x19a>
 8006464:	2b10      	cmp	r3, #16
 8006466:	d008      	beq.n	800647a <UART_SetConfig+0x1aa>
 8006468:	e00f      	b.n	800648a <UART_SetConfig+0x1ba>
 800646a:	2300      	movs	r3, #0
 800646c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006470:	e0ad      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006472:	2302      	movs	r3, #2
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006478:	e0a9      	b.n	80065ce <UART_SetConfig+0x2fe>
 800647a:	2304      	movs	r3, #4
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006480:	e0a5      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006482:	2308      	movs	r3, #8
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006488:	e0a1      	b.n	80065ce <UART_SetConfig+0x2fe>
 800648a:	2310      	movs	r3, #16
 800648c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006490:	e09d      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4a      	ldr	r2, [pc, #296]	; (80065c0 <UART_SetConfig+0x2f0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d125      	bne.n	80064e8 <UART_SetConfig+0x218>
 800649c:	4b45      	ldr	r3, [pc, #276]	; (80065b4 <UART_SetConfig+0x2e4>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a6:	2bc0      	cmp	r3, #192	; 0xc0
 80064a8:	d016      	beq.n	80064d8 <UART_SetConfig+0x208>
 80064aa:	2bc0      	cmp	r3, #192	; 0xc0
 80064ac:	d818      	bhi.n	80064e0 <UART_SetConfig+0x210>
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d00a      	beq.n	80064c8 <UART_SetConfig+0x1f8>
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d814      	bhi.n	80064e0 <UART_SetConfig+0x210>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <UART_SetConfig+0x1f0>
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d008      	beq.n	80064d0 <UART_SetConfig+0x200>
 80064be:	e00f      	b.n	80064e0 <UART_SetConfig+0x210>
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c6:	e082      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064c8:	2302      	movs	r3, #2
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ce:	e07e      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d6:	e07a      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064de:	e076      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e6:	e072      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a35      	ldr	r2, [pc, #212]	; (80065c4 <UART_SetConfig+0x2f4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d12a      	bne.n	8006548 <UART_SetConfig+0x278>
 80064f2:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <UART_SetConfig+0x2e4>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006500:	d01a      	beq.n	8006538 <UART_SetConfig+0x268>
 8006502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006506:	d81b      	bhi.n	8006540 <UART_SetConfig+0x270>
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d00c      	beq.n	8006528 <UART_SetConfig+0x258>
 800650e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006512:	d815      	bhi.n	8006540 <UART_SetConfig+0x270>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <UART_SetConfig+0x250>
 8006518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651c:	d008      	beq.n	8006530 <UART_SetConfig+0x260>
 800651e:	e00f      	b.n	8006540 <UART_SetConfig+0x270>
 8006520:	2300      	movs	r3, #0
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e052      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006528:	2302      	movs	r3, #2
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e04e      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006530:	2304      	movs	r3, #4
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e04a      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006538:	2308      	movs	r3, #8
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653e:	e046      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006540:	2310      	movs	r3, #16
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006546:	e042      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a17      	ldr	r2, [pc, #92]	; (80065ac <UART_SetConfig+0x2dc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d13a      	bne.n	80065c8 <UART_SetConfig+0x2f8>
 8006552:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <UART_SetConfig+0x2e4>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800655c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006560:	d01a      	beq.n	8006598 <UART_SetConfig+0x2c8>
 8006562:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006566:	d81b      	bhi.n	80065a0 <UART_SetConfig+0x2d0>
 8006568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656c:	d00c      	beq.n	8006588 <UART_SetConfig+0x2b8>
 800656e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006572:	d815      	bhi.n	80065a0 <UART_SetConfig+0x2d0>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <UART_SetConfig+0x2b0>
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d008      	beq.n	8006590 <UART_SetConfig+0x2c0>
 800657e:	e00f      	b.n	80065a0 <UART_SetConfig+0x2d0>
 8006580:	2300      	movs	r3, #0
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006586:	e022      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006588:	2302      	movs	r3, #2
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658e:	e01e      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e01a      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e016      	b.n	80065ce <UART_SetConfig+0x2fe>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e012      	b.n	80065ce <UART_SetConfig+0x2fe>
 80065a8:	cfff69f3 	.word	0xcfff69f3
 80065ac:	40008000 	.word	0x40008000
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40004400 	.word	0x40004400
 80065bc:	40004800 	.word	0x40004800
 80065c0:	40004c00 	.word	0x40004c00
 80065c4:	40005000 	.word	0x40005000
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4ab0      	ldr	r2, [pc, #704]	; (8006894 <UART_SetConfig+0x5c4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	f040 809b 	bne.w	8006710 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d827      	bhi.n	8006632 <UART_SetConfig+0x362>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <UART_SetConfig+0x318>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	08006615 	.word	0x08006615
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	08006633 	.word	0x08006633
 80065f8:	08006623 	.word	0x08006623
 80065fc:	08006633 	.word	0x08006633
 8006600:	08006633 	.word	0x08006633
 8006604:	08006633 	.word	0x08006633
 8006608:	0800662b 	.word	0x0800662b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800660c:	f7fe faac 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006612:	e014      	b.n	800663e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006614:	f7fe fabc 	bl	8004b90 <HAL_RCC_GetPCLK2Freq>
 8006618:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800661a:	e010      	b.n	800663e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800661c:	4b9e      	ldr	r3, [pc, #632]	; (8006898 <UART_SetConfig+0x5c8>)
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006620:	e00d      	b.n	800663e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006622:	f7fe f9ef 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 8006626:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006628:	e009      	b.n	800663e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006630:	e005      	b.n	800663e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800663c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8130 	beq.w	80068a6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	4a94      	ldr	r2, [pc, #592]	; (800689c <UART_SetConfig+0x5cc>)
 800664c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006650:	461a      	mov	r2, r3
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	fbb3 f3f2 	udiv	r3, r3, r2
 8006658:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	4413      	add	r3, r2
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	429a      	cmp	r2, r3
 8006668:	d305      	bcc.n	8006676 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	429a      	cmp	r2, r3
 8006674:	d903      	bls.n	800667e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800667c:	e113      	b.n	80068a6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	2200      	movs	r2, #0
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	60fa      	str	r2, [r7, #12]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	4a84      	ldr	r2, [pc, #528]	; (800689c <UART_SetConfig+0x5cc>)
 800668c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006690:	b29b      	uxth	r3, r3
 8006692:	2200      	movs	r2, #0
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800669c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066a0:	f7f9 fdc8 	bl	8000234 <__aeabi_uldivmod>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	020b      	lsls	r3, r1, #8
 80066b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066ba:	0202      	lsls	r2, r0, #8
 80066bc:	6979      	ldr	r1, [r7, #20]
 80066be:	6849      	ldr	r1, [r1, #4]
 80066c0:	0849      	lsrs	r1, r1, #1
 80066c2:	2000      	movs	r0, #0
 80066c4:	460c      	mov	r4, r1
 80066c6:	4605      	mov	r5, r0
 80066c8:	eb12 0804 	adds.w	r8, r2, r4
 80066cc:	eb43 0905 	adc.w	r9, r3, r5
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	469a      	mov	sl, r3
 80066d8:	4693      	mov	fp, r2
 80066da:	4652      	mov	r2, sl
 80066dc:	465b      	mov	r3, fp
 80066de:	4640      	mov	r0, r8
 80066e0:	4649      	mov	r1, r9
 80066e2:	f7f9 fda7 	bl	8000234 <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4613      	mov	r3, r2
 80066ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066f4:	d308      	bcc.n	8006708 <UART_SetConfig+0x438>
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fc:	d204      	bcs.n	8006708 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	e0ce      	b.n	80068a6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800670e:	e0ca      	b.n	80068a6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006718:	d166      	bne.n	80067e8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800671a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800671e:	2b08      	cmp	r3, #8
 8006720:	d827      	bhi.n	8006772 <UART_SetConfig+0x4a2>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x458>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006773 	.word	0x08006773
 8006738:	08006763 	.word	0x08006763
 800673c:	08006773 	.word	0x08006773
 8006740:	08006773 	.word	0x08006773
 8006744:	08006773 	.word	0x08006773
 8006748:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fe fa0c 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006752:	e014      	b.n	800677e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fe fa1c 	bl	8004b90 <HAL_RCC_GetPCLK2Freq>
 8006758:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800675a:	e010      	b.n	800677e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b4e      	ldr	r3, [pc, #312]	; (8006898 <UART_SetConfig+0x5c8>)
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006760:	e00d      	b.n	800677e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe f94f 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006768:	e009      	b.n	800677e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006770:	e005      	b.n	800677e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800677c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8090 	beq.w	80068a6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	4a44      	ldr	r2, [pc, #272]	; (800689c <UART_SetConfig+0x5cc>)
 800678c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006790:	461a      	mov	r2, r3
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	fbb3 f3f2 	udiv	r3, r3, r2
 8006798:	005a      	lsls	r2, r3, #1
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	441a      	add	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2b0f      	cmp	r3, #15
 80067b0:	d916      	bls.n	80067e0 <UART_SetConfig+0x510>
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b8:	d212      	bcs.n	80067e0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f023 030f 	bic.w	r3, r3, #15
 80067c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	8bfb      	ldrh	r3, [r7, #30]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	8bfa      	ldrh	r2, [r7, #30]
 80067dc:	60da      	str	r2, [r3, #12]
 80067de:	e062      	b.n	80068a6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067e6:	e05e      	b.n	80068a6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d828      	bhi.n	8006842 <UART_SetConfig+0x572>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0x528>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006825 	.word	0x08006825
 8006800:	0800682d 	.word	0x0800682d
 8006804:	08006843 	.word	0x08006843
 8006808:	08006833 	.word	0x08006833
 800680c:	08006843 	.word	0x08006843
 8006810:	08006843 	.word	0x08006843
 8006814:	08006843 	.word	0x08006843
 8006818:	0800683b 	.word	0x0800683b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800681c:	f7fe f9a4 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8006820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006822:	e014      	b.n	800684e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006824:	f7fe f9b4 	bl	8004b90 <HAL_RCC_GetPCLK2Freq>
 8006828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800682a:	e010      	b.n	800684e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800682c:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <UART_SetConfig+0x5c8>)
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006830:	e00d      	b.n	800684e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006832:	f7fe f8e7 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 8006836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006838:	e009      	b.n	800684e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800683a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006840:	e005      	b.n	800684e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800684c:	bf00      	nop
    }

    if (pclk != 0U)
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d028      	beq.n	80068a6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	4a10      	ldr	r2, [pc, #64]	; (800689c <UART_SetConfig+0x5cc>)
 800685a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800685e:	461a      	mov	r2, r3
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	fbb3 f2f2 	udiv	r2, r3, r2
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	441a      	add	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	fbb2 f3f3 	udiv	r3, r2, r3
 8006876:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	2b0f      	cmp	r3, #15
 800687c:	d910      	bls.n	80068a0 <UART_SetConfig+0x5d0>
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006884:	d20c      	bcs.n	80068a0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	b29a      	uxth	r2, r3
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60da      	str	r2, [r3, #12]
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x5d6>
 8006892:	bf00      	nop
 8006894:	40008000 	.word	0x40008000
 8006898:	00f42400 	.word	0x00f42400
 800689c:	08007b30 	.word	0x08007b30
      }
      else
      {
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2200      	movs	r2, #0
 80068ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2200      	movs	r2, #0
 80068c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3730      	adds	r7, #48	; 0x30
 80068ca:	46bd      	mov	sp, r7
 80068cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ce:	d10a      	bne.n	80069e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b098      	sub	sp, #96	; 0x60
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a24:	f7fb fa08 	bl	8001e38 <HAL_GetTick>
 8006a28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d12f      	bne.n	8006a98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a40:	2200      	movs	r2, #0
 8006a42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f88e 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d022      	beq.n	8006a98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a66:	653b      	str	r3, [r7, #80]	; 0x50
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a70:	647b      	str	r3, [r7, #68]	; 0x44
 8006a72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e063      	b.n	8006b60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d149      	bne.n	8006b3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f857 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d03c      	beq.n	8006b3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ade:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e6      	bne.n	8006ac0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3308      	adds	r3, #8
 8006af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b12:	61fa      	str	r2, [r7, #28]
 8006b14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	69b9      	ldr	r1, [r7, #24]
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e5      	bne.n	8006af2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e012      	b.n	8006b60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3758      	adds	r7, #88	; 0x58
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b78:	e049      	b.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d045      	beq.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fb f959 	bl	8001e38 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e048      	b.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d031      	beq.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d110      	bne.n	8006bda <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f920 	bl	8006e06 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e029      	b.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be8:	d111      	bne.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f906 	bl	8006e06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e00f      	b.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4013      	ands	r3, r2
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	bf0c      	ite	eq
 8006c1e:	2301      	moveq	r3, #1
 8006c20:	2300      	movne	r3, #0
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d0a6      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b096      	sub	sp, #88	; 0x58
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2222      	movs	r2, #34	; 0x22
 8006c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02d      	beq.n	8006cca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c74:	4a40      	ldr	r2, [pc, #256]	; (8006d78 <UART_Start_Receive_DMA+0x140>)
 8006c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7e:	4a3f      	ldr	r2, [pc, #252]	; (8006d7c <UART_Start_Receive_DMA+0x144>)
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c88:	4a3d      	ldr	r2, [pc, #244]	; (8006d80 <UART_Start_Receive_DMA+0x148>)
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c92:	2200      	movs	r2, #0
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3324      	adds	r3, #36	; 0x24
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	461a      	mov	r2, r3
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	f7fc fa4c 	bl	8003148 <HAL_DMA_Start_IT>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2210      	movs	r2, #16
 8006cba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e051      	b.n	8006d6e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d018      	beq.n	8006d04 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e6      	bne.n	8006cd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d24:	637a      	str	r2, [r7, #52]	; 0x34
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e5      	bne.n	8006d04 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	613b      	str	r3, [r7, #16]
   return(result);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d58:	623a      	str	r2, [r7, #32]
 8006d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	69f9      	ldr	r1, [r7, #28]
 8006d5e:	6a3a      	ldr	r2, [r7, #32]
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e5      	bne.n	8006d38 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3758      	adds	r7, #88	; 0x58
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	08006f89 	.word	0x08006f89
 8006d7c:	080070b5 	.word	0x080070b5
 8006d80:	080070f3 	.word	0x080070f3

08006d84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b08f      	sub	sp, #60	; 0x3c
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e6      	bne.n	8006d8c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dde:	61ba      	str	r2, [r7, #24]
 8006de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6979      	ldr	r1, [r7, #20]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	613b      	str	r3, [r7, #16]
   return(result);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006dfa:	bf00      	nop
 8006dfc:	373c      	adds	r7, #60	; 0x3c
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b095      	sub	sp, #84	; 0x54
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e6      	bne.n	8006e0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e3      	bne.n	8006e40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d118      	bne.n	8006eb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f023 0310 	bic.w	r3, r3, #16
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6979      	ldr	r1, [r7, #20]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e6      	bne.n	8006e80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ec6:	bf00      	nop
 8006ec8:	3754      	adds	r7, #84	; 0x54
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b090      	sub	sp, #64	; 0x40
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d137      	bne.n	8006f5e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	623b      	str	r3, [r7, #32]
   return(result);
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f16:	633a      	str	r2, [r7, #48]	; 0x30
 8006f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e5      	bne.n	8006ef6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f48:	61fb      	str	r3, [r7, #28]
 8006f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	69b9      	ldr	r1, [r7, #24]
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	617b      	str	r3, [r7, #20]
   return(result);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f5c:	e002      	b.n	8006f64 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f60:	f7f9 ff92 	bl	8000e88 <HAL_UART_TxCpltCallback>
}
 8006f64:	bf00      	nop
 8006f66:	3740      	adds	r7, #64	; 0x40
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff f97e 	bl	800627c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b09c      	sub	sp, #112	; 0x70
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d171      	bne.n	8007088 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fcc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e6      	bne.n	8006fac <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ffe:	647a      	str	r2, [r7, #68]	; 0x44
 8007000:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800700c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e5      	bne.n	8006fde <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	623b      	str	r3, [r7, #32]
   return(result);
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007028:	663b      	str	r3, [r7, #96]	; 0x60
 800702a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007032:	633a      	str	r2, [r7, #48]	; 0x30
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d118      	bne.n	8007088 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	60fb      	str	r3, [r7, #12]
   return(result);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0310 	bic.w	r3, r3, #16
 800706a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007074:	61fb      	str	r3, [r7, #28]
 8007076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	69b9      	ldr	r1, [r7, #24]
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	617b      	str	r3, [r7, #20]
   return(result);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e6      	bne.n	8007056 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708a:	2200      	movs	r2, #0
 800708c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007092:	2b01      	cmp	r3, #1
 8007094:	d107      	bne.n	80070a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800709c:	4619      	mov	r1, r3
 800709e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070a0:	f7ff f90a 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070a4:	e002      	b.n	80070ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070a8:	f7f9 fcf0 	bl	8000a8c <HAL_UART_RxCpltCallback>
}
 80070ac:	bf00      	nop
 80070ae:	3770      	adds	r7, #112	; 0x70
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d109      	bne.n	80070e4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7ff f8eb 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070e2:	e002      	b.n	80070ea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff f8d3 	bl	8006290 <HAL_UART_RxHalfCpltCallback>
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800710e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	2b80      	cmp	r3, #128	; 0x80
 800711c:	d109      	bne.n	8007132 <UART_DMAError+0x40>
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b21      	cmp	r3, #33	; 0x21
 8007122:	d106      	bne.n	8007132 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2200      	movs	r2, #0
 8007128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800712c:	6978      	ldr	r0, [r7, #20]
 800712e:	f7ff fe29 	bl	8006d84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d109      	bne.n	8007154 <UART_DMAError+0x62>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b22      	cmp	r3, #34	; 0x22
 8007144:	d106      	bne.n	8007154 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2200      	movs	r2, #0
 800714a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800714e:	6978      	ldr	r0, [r7, #20]
 8007150:	f7ff fe59 	bl	8006e06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f043 0210 	orr.w	r2, r3, #16
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007164:	6978      	ldr	r0, [r7, #20]
 8007166:	f7ff f89d 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716a:	bf00      	nop
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff f887 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b088      	sub	sp, #32
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6979      	ldr	r1, [r7, #20]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	613b      	str	r3, [r7, #16]
   return(result);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e6      	bne.n	80071a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7f9 fe4e 	bl	8000e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ec:	bf00      	nop
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_UARTEx_DisableFifoMode+0x16>
 8007242:	2302      	movs	r3, #2
 8007244:	e027      	b.n	8007296 <HAL_UARTEx_DisableFifoMode+0x66>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2224      	movs	r2, #36	; 0x24
 8007252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0201 	bic.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007274:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e02d      	b.n	8007316 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2224      	movs	r2, #36	; 0x24
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f850 	bl	800739c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007332:	2302      	movs	r3, #2
 8007334:	e02d      	b.n	8007392 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2224      	movs	r2, #36	; 0x24
 8007342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f812 	bl	800739c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d108      	bne.n	80073be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073bc:	e031      	b.n	8007422 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073be:	2308      	movs	r3, #8
 80073c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073c2:	2308      	movs	r3, #8
 80073c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	0e5b      	lsrs	r3, r3, #25
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	0f5b      	lsrs	r3, r3, #29
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	7b3a      	ldrb	r2, [r7, #12]
 80073ea:	4911      	ldr	r1, [pc, #68]	; (8007430 <UARTEx_SetNbDataToProcess+0x94>)
 80073ec:	5c8a      	ldrb	r2, [r1, r2]
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073f2:	7b3a      	ldrb	r2, [r7, #12]
 80073f4:	490f      	ldr	r1, [pc, #60]	; (8007434 <UARTEx_SetNbDataToProcess+0x98>)
 80073f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	7b7a      	ldrb	r2, [r7, #13]
 8007408:	4909      	ldr	r1, [pc, #36]	; (8007430 <UARTEx_SetNbDataToProcess+0x94>)
 800740a:	5c8a      	ldrb	r2, [r1, r2]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007410:	7b7a      	ldrb	r2, [r7, #13]
 8007412:	4908      	ldr	r1, [pc, #32]	; (8007434 <UARTEx_SetNbDataToProcess+0x98>)
 8007414:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007416:	fb93 f3f2 	sdiv	r3, r3, r2
 800741a:	b29a      	uxth	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007422:	bf00      	nop
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	08007b48 	.word	0x08007b48
 8007434:	08007b50 	.word	0x08007b50

08007438 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007438:	b480      	push	{r7}
 800743a:	b08b      	sub	sp, #44	; 0x2c
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	fa93 f3a3 	rbit	r3, r3
 8007452:	613b      	str	r3, [r7, #16]
  return result;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800745e:	2320      	movs	r3, #32
 8007460:	e003      	b.n	800746a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	fab3 f383 	clz	r3, r3
 8007468:	b2db      	uxtb	r3, r3
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	2103      	movs	r1, #3
 800746e:	fa01 f303 	lsl.w	r3, r1, r3
 8007472:	43db      	mvns	r3, r3
 8007474:	401a      	ands	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	fa93 f3a3 	rbit	r3, r3
 8007480:	61fb      	str	r3, [r7, #28]
  return result;
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800748c:	2320      	movs	r3, #32
 800748e:	e003      	b.n	8007498 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	fab3 f383 	clz	r3, r3
 8007496:	b2db      	uxtb	r3, r3
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	431a      	orrs	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	372c      	adds	r7, #44	; 0x2c
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	43db      	mvns	r3, r3
 80074c6:	401a      	ands	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	fb01 f303 	mul.w	r3, r1, r3
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]
}
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b08b      	sub	sp, #44	; 0x2c
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	fa93 f3a3 	rbit	r3, r3
 80074fc:	613b      	str	r3, [r7, #16]
  return result;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007508:	2320      	movs	r3, #32
 800750a:	e003      	b.n	8007514 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	fab3 f383 	clz	r3, r3
 8007512:	b2db      	uxtb	r3, r3
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	2103      	movs	r1, #3
 8007518:	fa01 f303 	lsl.w	r3, r1, r3
 800751c:	43db      	mvns	r3, r3
 800751e:	401a      	ands	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	fa93 f3a3 	rbit	r3, r3
 800752a:	61fb      	str	r3, [r7, #28]
  return result;
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007536:	2320      	movs	r3, #32
 8007538:	e003      	b.n	8007542 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	fab3 f383 	clz	r3, r3
 8007540:	b2db      	uxtb	r3, r3
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	fa01 f303 	lsl.w	r3, r1, r3
 800754a:	431a      	orrs	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007550:	bf00      	nop
 8007552:	372c      	adds	r7, #44	; 0x2c
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800755c:	b480      	push	{r7}
 800755e:	b08b      	sub	sp, #44	; 0x2c
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	fa93 f3a3 	rbit	r3, r3
 8007576:	613b      	str	r3, [r7, #16]
  return result;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007582:	2320      	movs	r3, #32
 8007584:	e003      	b.n	800758e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	fab3 f383 	clz	r3, r3
 800758c:	b2db      	uxtb	r3, r3
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	2103      	movs	r1, #3
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	43db      	mvns	r3, r3
 8007598:	401a      	ands	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	fa93 f3a3 	rbit	r3, r3
 80075a4:	61fb      	str	r3, [r7, #28]
  return result;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80075b0:	2320      	movs	r3, #32
 80075b2:	e003      	b.n	80075bc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	fab3 f383 	clz	r3, r3
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	fa01 f303 	lsl.w	r3, r1, r3
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	60da      	str	r2, [r3, #12]
}
 80075ca:	bf00      	nop
 80075cc:	372c      	adds	r7, #44	; 0x2c
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b08b      	sub	sp, #44	; 0x2c
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a1a      	ldr	r2, [r3, #32]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	fa93 f3a3 	rbit	r3, r3
 80075f0:	613b      	str	r3, [r7, #16]
  return result;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80075fc:	2320      	movs	r3, #32
 80075fe:	e003      	b.n	8007608 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	fab3 f383 	clz	r3, r3
 8007606:	b2db      	uxtb	r3, r3
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	210f      	movs	r1, #15
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	43db      	mvns	r3, r3
 8007612:	401a      	ands	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	fa93 f3a3 	rbit	r3, r3
 800761e:	61fb      	str	r3, [r7, #28]
  return result;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800762a:	2320      	movs	r3, #32
 800762c:	e003      	b.n	8007636 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	fab3 f383 	clz	r3, r3
 8007634:	b2db      	uxtb	r3, r3
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	fa01 f303 	lsl.w	r3, r1, r3
 800763e:	431a      	orrs	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007644:	bf00      	nop
 8007646:	372c      	adds	r7, #44	; 0x2c
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007650:	b480      	push	{r7}
 8007652:	b08b      	sub	sp, #44	; 0x2c
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	0a1b      	lsrs	r3, r3, #8
 8007664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	fa93 f3a3 	rbit	r3, r3
 800766c:	613b      	str	r3, [r7, #16]
  return result;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007678:	2320      	movs	r3, #32
 800767a:	e003      	b.n	8007684 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	fab3 f383 	clz	r3, r3
 8007682:	b2db      	uxtb	r3, r3
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	210f      	movs	r1, #15
 8007688:	fa01 f303 	lsl.w	r3, r1, r3
 800768c:	43db      	mvns	r3, r3
 800768e:	401a      	ands	r2, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	0a1b      	lsrs	r3, r3, #8
 8007694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	fa93 f3a3 	rbit	r3, r3
 800769c:	61fb      	str	r3, [r7, #28]
  return result;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80076a8:	2320      	movs	r3, #32
 80076aa:	e003      	b.n	80076b4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	fab3 f383 	clz	r3, r3
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	fa01 f303 	lsl.w	r3, r1, r3
 80076bc:	431a      	orrs	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80076c2:	bf00      	nop
 80076c4:	372c      	adds	r7, #44	; 0x2c
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b088      	sub	sp, #32
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	fa93 f3a3 	rbit	r3, r3
 80076e4:	60fb      	str	r3, [r7, #12]
  return result;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <LL_GPIO_Init+0x26>
    return 32U;
 80076f0:	2320      	movs	r3, #32
 80076f2:	e003      	b.n	80076fc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	fab3 f383 	clz	r3, r3
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80076fe:	e047      	b.n	8007790 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	2101      	movs	r1, #1
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	4013      	ands	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d039      	beq.n	800778a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d003      	beq.n	8007726 <LL_GPIO_Init+0x58>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d10d      	bne.n	8007742 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	461a      	mov	r2, r3
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fed7 	bl	80074e2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	461a      	mov	r2, r3
 800773a:	69b9      	ldr	r1, [r7, #24]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff feb8 	bl	80074b2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	461a      	mov	r2, r3
 8007748:	69b9      	ldr	r1, [r7, #24]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff ff06 	bl	800755c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d111      	bne.n	800777c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2bff      	cmp	r3, #255	; 0xff
 800775c:	d807      	bhi.n	800776e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	461a      	mov	r2, r3
 8007764:	69b9      	ldr	r1, [r7, #24]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff ff35 	bl	80075d6 <LL_GPIO_SetAFPin_0_7>
 800776c:	e006      	b.n	800777c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	461a      	mov	r2, r3
 8007774:	69b9      	ldr	r1, [r7, #24]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff ff6a 	bl	8007650 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	461a      	mov	r2, r3
 8007782:	69b9      	ldr	r1, [r7, #24]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff fe57 	bl	8007438 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	3301      	adds	r3, #1
 800778e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	fa22 f303 	lsr.w	r3, r2, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1b0      	bne.n	8007700 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80077b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	43db      	mvns	r3, r3
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	4013      	ands	r3, r2
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077de:	b084      	sub	sp, #16
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	f107 0014 	add.w	r0, r7, #20
 80077ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	b004      	add	sp, #16
 800781e:	4770      	bx	lr

08007820 <_Znwj>:
 8007820:	2801      	cmp	r0, #1
 8007822:	bf38      	it	cc
 8007824:	2001      	movcc	r0, #1
 8007826:	b510      	push	{r4, lr}
 8007828:	4604      	mov	r4, r0
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f842 	bl	80078b4 <malloc>
 8007830:	b930      	cbnz	r0, 8007840 <_Znwj+0x20>
 8007832:	f000 f807 	bl	8007844 <_ZSt15get_new_handlerv>
 8007836:	b908      	cbnz	r0, 800783c <_Znwj+0x1c>
 8007838:	f000 f80a 	bl	8007850 <abort>
 800783c:	4780      	blx	r0
 800783e:	e7f4      	b.n	800782a <_Znwj+0xa>
 8007840:	bd10      	pop	{r4, pc}
	...

08007844 <_ZSt15get_new_handlerv>:
 8007844:	4b01      	ldr	r3, [pc, #4]	; (800784c <_ZSt15get_new_handlerv+0x8>)
 8007846:	e8d3 0faf 	lda	r0, [r3]
 800784a:	4770      	bx	lr
 800784c:	20000618 	.word	0x20000618

08007850 <abort>:
 8007850:	2006      	movs	r0, #6
 8007852:	b508      	push	{r3, lr}
 8007854:	f000 f90a 	bl	8007a6c <raise>
 8007858:	2001      	movs	r0, #1
 800785a:	f7f9 feb1 	bl	80015c0 <_exit>
	...

08007860 <__errno>:
 8007860:	4b01      	ldr	r3, [pc, #4]	; (8007868 <__errno+0x8>)
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	2000000c 	.word	0x2000000c

0800786c <__libc_init_array>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4d0d      	ldr	r5, [pc, #52]	; (80078a4 <__libc_init_array+0x38>)
 8007870:	2600      	movs	r6, #0
 8007872:	4c0d      	ldr	r4, [pc, #52]	; (80078a8 <__libc_init_array+0x3c>)
 8007874:	1b64      	subs	r4, r4, r5
 8007876:	10a4      	asrs	r4, r4, #2
 8007878:	42a6      	cmp	r6, r4
 800787a:	d109      	bne.n	8007890 <__libc_init_array+0x24>
 800787c:	4d0b      	ldr	r5, [pc, #44]	; (80078ac <__libc_init_array+0x40>)
 800787e:	2600      	movs	r6, #0
 8007880:	4c0b      	ldr	r4, [pc, #44]	; (80078b0 <__libc_init_array+0x44>)
 8007882:	f000 f91d 	bl	8007ac0 <_init>
 8007886:	1b64      	subs	r4, r4, r5
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	42a6      	cmp	r6, r4
 800788c:	d105      	bne.n	800789a <__libc_init_array+0x2e>
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	f855 3b04 	ldr.w	r3, [r5], #4
 8007894:	3601      	adds	r6, #1
 8007896:	4798      	blx	r3
 8007898:	e7ee      	b.n	8007878 <__libc_init_array+0xc>
 800789a:	f855 3b04 	ldr.w	r3, [r5], #4
 800789e:	3601      	adds	r6, #1
 80078a0:	4798      	blx	r3
 80078a2:	e7f2      	b.n	800788a <__libc_init_array+0x1e>
 80078a4:	08007b60 	.word	0x08007b60
 80078a8:	08007b60 	.word	0x08007b60
 80078ac:	08007b60 	.word	0x08007b60
 80078b0:	08007b64 	.word	0x08007b64

080078b4 <malloc>:
 80078b4:	4b02      	ldr	r3, [pc, #8]	; (80078c0 <malloc+0xc>)
 80078b6:	4601      	mov	r1, r0
 80078b8:	6818      	ldr	r0, [r3, #0]
 80078ba:	f000 b82b 	b.w	8007914 <_malloc_r>
 80078be:	bf00      	nop
 80078c0:	2000000c 	.word	0x2000000c

080078c4 <memset>:
 80078c4:	4402      	add	r2, r0
 80078c6:	4603      	mov	r3, r0
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d100      	bne.n	80078ce <memset+0xa>
 80078cc:	4770      	bx	lr
 80078ce:	f803 1b01 	strb.w	r1, [r3], #1
 80078d2:	e7f9      	b.n	80078c8 <memset+0x4>

080078d4 <sbrk_aligned>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	4e0e      	ldr	r6, [pc, #56]	; (8007910 <sbrk_aligned+0x3c>)
 80078d8:	460c      	mov	r4, r1
 80078da:	4605      	mov	r5, r0
 80078dc:	6831      	ldr	r1, [r6, #0]
 80078de:	b911      	cbnz	r1, 80078e6 <sbrk_aligned+0x12>
 80078e0:	f000 f88c 	bl	80079fc <_sbrk_r>
 80078e4:	6030      	str	r0, [r6, #0]
 80078e6:	4621      	mov	r1, r4
 80078e8:	4628      	mov	r0, r5
 80078ea:	f000 f887 	bl	80079fc <_sbrk_r>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d00a      	beq.n	8007908 <sbrk_aligned+0x34>
 80078f2:	1cc4      	adds	r4, r0, #3
 80078f4:	f024 0403 	bic.w	r4, r4, #3
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d007      	beq.n	800790c <sbrk_aligned+0x38>
 80078fc:	1a21      	subs	r1, r4, r0
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f87c 	bl	80079fc <_sbrk_r>
 8007904:	3001      	adds	r0, #1
 8007906:	d101      	bne.n	800790c <sbrk_aligned+0x38>
 8007908:	f04f 34ff 	mov.w	r4, #4294967295
 800790c:	4620      	mov	r0, r4
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	20000620 	.word	0x20000620

08007914 <_malloc_r>:
 8007914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	1ccd      	adds	r5, r1, #3
 800791a:	4607      	mov	r7, r0
 800791c:	f025 0503 	bic.w	r5, r5, #3
 8007920:	3508      	adds	r5, #8
 8007922:	2d0c      	cmp	r5, #12
 8007924:	bf38      	it	cc
 8007926:	250c      	movcc	r5, #12
 8007928:	2d00      	cmp	r5, #0
 800792a:	db01      	blt.n	8007930 <_malloc_r+0x1c>
 800792c:	42a9      	cmp	r1, r5
 800792e:	d905      	bls.n	800793c <_malloc_r+0x28>
 8007930:	230c      	movs	r3, #12
 8007932:	2600      	movs	r6, #0
 8007934:	603b      	str	r3, [r7, #0]
 8007936:	4630      	mov	r0, r6
 8007938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793c:	4e2e      	ldr	r6, [pc, #184]	; (80079f8 <_malloc_r+0xe4>)
 800793e:	f000 f8b1 	bl	8007aa4 <__malloc_lock>
 8007942:	6833      	ldr	r3, [r6, #0]
 8007944:	461c      	mov	r4, r3
 8007946:	bb34      	cbnz	r4, 8007996 <_malloc_r+0x82>
 8007948:	4629      	mov	r1, r5
 800794a:	4638      	mov	r0, r7
 800794c:	f7ff ffc2 	bl	80078d4 <sbrk_aligned>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	4604      	mov	r4, r0
 8007954:	d14d      	bne.n	80079f2 <_malloc_r+0xde>
 8007956:	6834      	ldr	r4, [r6, #0]
 8007958:	4626      	mov	r6, r4
 800795a:	2e00      	cmp	r6, #0
 800795c:	d140      	bne.n	80079e0 <_malloc_r+0xcc>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	4631      	mov	r1, r6
 8007962:	4638      	mov	r0, r7
 8007964:	eb04 0803 	add.w	r8, r4, r3
 8007968:	f000 f848 	bl	80079fc <_sbrk_r>
 800796c:	4580      	cmp	r8, r0
 800796e:	d13a      	bne.n	80079e6 <_malloc_r+0xd2>
 8007970:	6821      	ldr	r1, [r4, #0]
 8007972:	3503      	adds	r5, #3
 8007974:	4638      	mov	r0, r7
 8007976:	1a6d      	subs	r5, r5, r1
 8007978:	f025 0503 	bic.w	r5, r5, #3
 800797c:	3508      	adds	r5, #8
 800797e:	2d0c      	cmp	r5, #12
 8007980:	bf38      	it	cc
 8007982:	250c      	movcc	r5, #12
 8007984:	4629      	mov	r1, r5
 8007986:	f7ff ffa5 	bl	80078d4 <sbrk_aligned>
 800798a:	3001      	adds	r0, #1
 800798c:	d02b      	beq.n	80079e6 <_malloc_r+0xd2>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	442b      	add	r3, r5
 8007992:	6023      	str	r3, [r4, #0]
 8007994:	e00e      	b.n	80079b4 <_malloc_r+0xa0>
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	1b52      	subs	r2, r2, r5
 800799a:	d41e      	bmi.n	80079da <_malloc_r+0xc6>
 800799c:	2a0b      	cmp	r2, #11
 800799e:	d916      	bls.n	80079ce <_malloc_r+0xba>
 80079a0:	1961      	adds	r1, r4, r5
 80079a2:	42a3      	cmp	r3, r4
 80079a4:	6025      	str	r5, [r4, #0]
 80079a6:	bf18      	it	ne
 80079a8:	6059      	strne	r1, [r3, #4]
 80079aa:	6863      	ldr	r3, [r4, #4]
 80079ac:	bf08      	it	eq
 80079ae:	6031      	streq	r1, [r6, #0]
 80079b0:	5162      	str	r2, [r4, r5]
 80079b2:	604b      	str	r3, [r1, #4]
 80079b4:	f104 060b 	add.w	r6, r4, #11
 80079b8:	4638      	mov	r0, r7
 80079ba:	f000 f879 	bl	8007ab0 <__malloc_unlock>
 80079be:	1d23      	adds	r3, r4, #4
 80079c0:	f026 0607 	bic.w	r6, r6, #7
 80079c4:	1af2      	subs	r2, r6, r3
 80079c6:	d0b6      	beq.n	8007936 <_malloc_r+0x22>
 80079c8:	1b9b      	subs	r3, r3, r6
 80079ca:	50a3      	str	r3, [r4, r2]
 80079cc:	e7b3      	b.n	8007936 <_malloc_r+0x22>
 80079ce:	6862      	ldr	r2, [r4, #4]
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	bf0c      	ite	eq
 80079d4:	6032      	streq	r2, [r6, #0]
 80079d6:	605a      	strne	r2, [r3, #4]
 80079d8:	e7ec      	b.n	80079b4 <_malloc_r+0xa0>
 80079da:	4623      	mov	r3, r4
 80079dc:	6864      	ldr	r4, [r4, #4]
 80079de:	e7b2      	b.n	8007946 <_malloc_r+0x32>
 80079e0:	4634      	mov	r4, r6
 80079e2:	6876      	ldr	r6, [r6, #4]
 80079e4:	e7b9      	b.n	800795a <_malloc_r+0x46>
 80079e6:	230c      	movs	r3, #12
 80079e8:	4638      	mov	r0, r7
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	f000 f860 	bl	8007ab0 <__malloc_unlock>
 80079f0:	e7a1      	b.n	8007936 <_malloc_r+0x22>
 80079f2:	6025      	str	r5, [r4, #0]
 80079f4:	e7de      	b.n	80079b4 <_malloc_r+0xa0>
 80079f6:	bf00      	nop
 80079f8:	2000061c 	.word	0x2000061c

080079fc <_sbrk_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	2300      	movs	r3, #0
 8007a00:	4d05      	ldr	r5, [pc, #20]	; (8007a18 <_sbrk_r+0x1c>)
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	f7f9 fde4 	bl	80015d4 <_sbrk>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_sbrk_r+0x1a>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_sbrk_r+0x1a>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20000624 	.word	0x20000624

08007a1c <_raise_r>:
 8007a1c:	291f      	cmp	r1, #31
 8007a1e:	b538      	push	{r3, r4, r5, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	d904      	bls.n	8007a30 <_raise_r+0x14>
 8007a26:	2316      	movs	r3, #22
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a32:	b112      	cbz	r2, 8007a3a <_raise_r+0x1e>
 8007a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a38:	b94b      	cbnz	r3, 8007a4e <_raise_r+0x32>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f830 	bl	8007aa0 <_getpid_r>
 8007a40:	462a      	mov	r2, r5
 8007a42:	4601      	mov	r1, r0
 8007a44:	4620      	mov	r0, r4
 8007a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4a:	f000 b817 	b.w	8007a7c <_kill_r>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d00a      	beq.n	8007a68 <_raise_r+0x4c>
 8007a52:	1c59      	adds	r1, r3, #1
 8007a54:	d103      	bne.n	8007a5e <_raise_r+0x42>
 8007a56:	2316      	movs	r3, #22
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	e7e7      	b.n	8007a2e <_raise_r+0x12>
 8007a5e:	2400      	movs	r4, #0
 8007a60:	4628      	mov	r0, r5
 8007a62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a66:	4798      	blx	r3
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7e0      	b.n	8007a2e <_raise_r+0x12>

08007a6c <raise>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <raise+0xc>)
 8007a6e:	4601      	mov	r1, r0
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f7ff bfd3 	b.w	8007a1c <_raise_r>
 8007a76:	bf00      	nop
 8007a78:	2000000c 	.word	0x2000000c

08007a7c <_kill_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4d06      	ldr	r5, [pc, #24]	; (8007a9c <_kill_r+0x20>)
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	f7f9 fd89 	bl	80015a0 <_kill>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d102      	bne.n	8007a98 <_kill_r+0x1c>
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	b103      	cbz	r3, 8007a98 <_kill_r+0x1c>
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	bd38      	pop	{r3, r4, r5, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000624 	.word	0x20000624

08007aa0 <_getpid_r>:
 8007aa0:	f7f9 bd76 	b.w	8001590 <_getpid>

08007aa4 <__malloc_lock>:
 8007aa4:	4801      	ldr	r0, [pc, #4]	; (8007aac <__malloc_lock+0x8>)
 8007aa6:	f000 b809 	b.w	8007abc <__retarget_lock_acquire_recursive>
 8007aaa:	bf00      	nop
 8007aac:	20000628 	.word	0x20000628

08007ab0 <__malloc_unlock>:
 8007ab0:	4801      	ldr	r0, [pc, #4]	; (8007ab8 <__malloc_unlock+0x8>)
 8007ab2:	f000 b804 	b.w	8007abe <__retarget_lock_release_recursive>
 8007ab6:	bf00      	nop
 8007ab8:	20000628 	.word	0x20000628

08007abc <__retarget_lock_acquire_recursive>:
 8007abc:	4770      	bx	lr

08007abe <__retarget_lock_release_recursive>:
 8007abe:	4770      	bx	lr

08007ac0 <_init>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr

08007acc <_fini>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	bf00      	nop
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr
